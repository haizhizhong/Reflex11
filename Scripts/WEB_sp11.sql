if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[_ResolveCamelCase]') and xtype = 'FN')  
 drop Function _ResolveCamelCase
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create function [dbo].[_ResolveCamelCase](@string VARCHAR(1000)) returns VARCHAR(1000) as
begin
	/*
		This function converts names in the following order of precedence:
			1. All Caps with no '_' converts the entire word (upper first, lower the rest)
			2.	Underscore '_' : if an underscore is found anywhere in the string, the assumption is to CamelCase the words between the '_'
			3.	CamelCase : inserts spaces between the camelcased words
	*/
	--examples:
	--DECLARE @string VARCHAR(1000)	
	--SET @string = 'JOURNAL'
	--SET @string = 'CASH_JOURNAL_ID'
	--SET @string = 'aSaturdayIsAlwaysNice'
	--SET @string = 'MixedCamel_CasingWith_Underscore_Dont_Work'
	
	declare @x int, @char char select @x = 1		
	
	if CHARINDEX('_', @string) > 0
	begin	
		declare @FoundWordStart bit = 1	
		while @x < LEN(@string)+1
		begin	
			select @char = SUBSTRING(@string, @x, 1)		
			if @FoundWordStart = 1
			begin				
				--captialize first
				select @string = SUBSTRING(@string, 1, @x-1) + upper(@char) + SUBSTRING(@string, @x + 1, LEN(@string))
				select @FoundWordStart = 0
			end
			else if @char = '_'
			begin
				select @FoundWordStart = 1
				select @string = SUBSTRING(@string, 1, @x-1) + ' ' + SUBSTRING(@string, @x + 1, LEN(@string))
			end
			else
			begin
				--lower it
				select @string = SUBSTRING(@string, 1, @x-1) + lower(@char) + SUBSTRING(@string, @x + 1, LEN(@string))
			end
			select @x = @x + 1
		end
	end
	else
	begin
		--set the first as an upper regardless 
		select @char = SUBSTRING(@string, @x, 1)				 		
		select @string = upper(@char) + SUBSTRING(@String, 2, LEN(@string))
		declare @OrigString varchar(1000) = @string
		while @x < LEN(@string) + 1
		begin
			select @char = SUBSTRING(@string, @x, 1)		
			if @char = upper(@char) COLLATE Latin1_General_CS_AI  
			begin
				SELECT @string = stuff(@string, @x, 0, ' ')
				select @x = @x + 1
			end
			select @x = @x + 1
		end
		if Len(@OrigString) * 2 = len(@string)
		begin																								
			select @char = SUBSTRING(@OrigString, 1, 1)		
			select @string = upper(@char) + lower(SUBSTRING(@OrigString, 2, LEN(@OrigString)))
		end
	end
	return replace(ltrim(rtrim(@string)), ' I D', ' ID')
	--select @string
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CON_GetPreference]') and xtype = 'FN')  
 drop Function CON_GetPreference
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 


CREATE function [dbo].[CON_GetPreference](@Contact_ID int, @PreferenceType varchar(max), @Company_ID int = -1) returns varchar(max) as
begin
	declare @Ret varchar(max) = ''
	select @Ret = Preference from ContactPreferences where Contact_ID = @Contact_ID and PreferenceType = @PreferenceType and Company_ID = @Company_ID
	return isnull(@Ret,'')
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[concat_security_kbi_module]') and xtype = 'FN')  
 drop Function concat_security_kbi_module
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE function [dbo].[concat_security_kbi_module](@MasterFillID as int,@isModule bit)
returns varchar(8000)
as
Begin
	 Declare @result as  varchar(8000)
    Set @result =''
	if(@isModule = 1)
	begin
	 select @result = @result + module + ', ' from ( select distinct module from security_kbis where masterfillid=@MasterFillID ) as Tab order by module
	end
	else
	begin
	 select @result = @result + kbidescription + ', ' from ( select distinct kbidescription from security_kbis where masterfillid=@MasterFillID ) as Tab order by kbidescription
	end
	
	return SUBSTRING( @result, 0, len(@result) )
End






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DBA_ConditionText]') and xtype = 'FN')  
 drop Function DBA_ConditionText
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE function [dbo].[DBA_ConditionText](@Routine varchar(max), @xType varchar(20))returns varchar(max) as
begin
	--declare @Routine varchar(max), @xType varchar(20)
	--select @Routine = '[dbo].[usp_IN_AccountSubCodeGetByAccountNumber]', @xType = 'P'
	
	/*
	Author:		Robg
	Purpose:	Condition the routine to follow standard header formation
	*/
	declare @Subject varchar(20)
	select @Subject = case @xtype	when 'TR' then 'Trigger'
									when 'P' then 'Proc'
									when 'FN' then 'Func'
									when 'V' then 'View' end

	----strip out leading charaters
	--select @Routine = replace(@Routine, substring(@routine, 1, charindex('create', @Routine)-1), '')
	--where charindex('create', @Routine)-1 > 0
	
	
	--strip out spaces & tabs
	declare @x int select @x = 2
	while @x < 50 and substring(@routine, charindex('create', @Routine)-1, 7) + @subject != 'create ' + @subject
	begin
		select @Routine = replace(@Routine, 'create' + replicate(' ', @x) + @subject, 'create ' + @subject)
		select @Routine = replace(@Routine, 'create' + replicate(char(9), @x) + @subject,  'create ' + @subject)
		select @x = @x + 1	
	end
		
	return @Routine
	--select @Routine
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_AddDate]') and xtype = 'FN')  
 drop Function fn_AddDate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create function fn_AddDate( @Period varchar(25), @Period_Amt int, @Date datetime )
returns datetime
as
begin
	declare @DateAdd datetime
	if( @Period = 'dd' )
	begin
		set @DateAdd = dateadd( dd, @Period_Amt, @Date )
	end
	else if( @Period = 'hh' )
	begin
		set @DateAdd = dateadd( hh, @Period_Amt, @Date )
	end
	else if( @Period = 'mi' )
	begin
		set @DateAdd = dateadd( mi, @Period_Amt, @Date )
	end
	else if( @Period = 'ss' )
	begin
		set @DateAdd = dateadd( ss, @Period_Amt, @Date )
	end
	return @DateAdd
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_diagramobjects]') and xtype = 'FN')  
 drop Function fn_diagramobjects
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

	CREATE FUNCTION dbo.fn_diagramobjects() 
	RETURNS int
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		declare @id_upgraddiagrams		int
		declare @id_sysdiagrams			int
		declare @id_helpdiagrams		int
		declare @id_helpdiagramdefinition	int
		declare @id_creatediagram	int
		declare @id_renamediagram	int
		declare @id_alterdiagram 	int 
		declare @id_dropdiagram		int
		declare @InstalledObjects	int

		select @InstalledObjects = 0

		select 	@id_upgraddiagrams = object_id(N'dbo.sp_upgraddiagrams'),
			@id_sysdiagrams = object_id(N'dbo.sysdiagrams'),
			@id_helpdiagrams = object_id(N'dbo.sp_helpdiagrams'),
			@id_helpdiagramdefinition = object_id(N'dbo.sp_helpdiagramdefinition'),
			@id_creatediagram = object_id(N'dbo.sp_creatediagram'),
			@id_renamediagram = object_id(N'dbo.sp_renamediagram'),
			@id_alterdiagram = object_id(N'dbo.sp_alterdiagram'), 
			@id_dropdiagram = object_id(N'dbo.sp_dropdiagram')

		if @id_upgraddiagrams is not null
			select @InstalledObjects = @InstalledObjects + 1
		if @id_sysdiagrams is not null
			select @InstalledObjects = @InstalledObjects + 2
		if @id_helpdiagrams is not null
			select @InstalledObjects = @InstalledObjects + 4
		if @id_helpdiagramdefinition is not null
			select @InstalledObjects = @InstalledObjects + 8
		if @id_creatediagram is not null
			select @InstalledObjects = @InstalledObjects + 16
		if @id_renamediagram is not null
			select @InstalledObjects = @InstalledObjects + 32
		if @id_alterdiagram  is not null
			select @InstalledObjects = @InstalledObjects + 64
		if @id_dropdiagram is not null
			select @InstalledObjects = @InstalledObjects + 128
		
		return @InstalledObjects 
	END
	

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_FormatCash]') and xtype = 'FN')  
 drop Function fn_FormatCash
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



--select dbo.fn_FormatCash('4.51')
CREATE   function fn_FormatCash(@String varchar(100))
returns varchar(100)
as
begin
 declare @RetVal varchar(100), @x int, @counter int
 select @x = len(@string)-3
 select @counter = 0
 select @RetVal = substring(@string,len(@string)-2,len(@string))
 while @x > 0 
 begin    
  if @counter = 3
  begin
   select @RetVal = ',' + @RetVal
   select @counter = 0
  end
  select @RetVal = SubString(@String, @x, 1) + @RetVal
  select @x = @x - 1, @Counter = @Counter + 1
 end
 return @RetVal
end





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_Get_KBI_Date]') and xtype = 'FN')  
 drop Function fn_Get_KBI_Date
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
-----------------------------------------------------------------------------
--select dbo.fn_Get_KBI_Date( 'F', 11, 'P', 1, 'Y', 'CS', 2 )
--select dbo.fn_Get_KBI_Date( 'T', 1, 'W', 2, 'W', 'PE', 2 )
--select dbo.fn_Get_KBI_Date( 'T', 1, 'W', 2, 'W', 'CS', 2 )
--select dbo.fn_Get_KBI_Date( 'T', 1, 'W', 2, 'W', 'CE', 2 )
-----------------------------------------------------------------------------
/*
fn_Get_KBI_Date Paramater List
@ToDate [ 'T'=true || 'F'=false ] (if 'T' @Range is ignored)
@Range value > 0
@PeriodScale [ 'D'=Day || 'W'=week || 'M'=month || 'Q'=quarter || 'Y'=year  || 'P'=Period(Month)]
@Gap > 0 (if = 0 no previous values are returned)
@GapScale [ 'D'=Day || 'W'=week || 'M'=month || 'Q'=quarter || 'Y'=year || 'P'=Period(Month)]
@DateType [ 'CS'=current start || 'CE'=current end || 'PS'=previous start || 'PE'=previous end ]
@Period [ the current fiscal period that system is in || -1 if no company selected ]
*/
--example select dbo.fn_Get_KBI_Date( 'F', 1, 'q', 1, 'q', 'CS', 2 )
CREATE  function [dbo].[fn_Get_KBI_Date]( @ToDate char(1), @Range int, @PeriodScale char(1), @Gap int, @GapScale char(1), @DateType char(2), @Period int,@StartOfFiscalYear datetime ) returns datetime as
--declare @ToDate char(1), @Range int, @PeriodScale char(1), @Gap int, @GapScale char(1), @DateType char(2), @Period int
--select @ToDate = 'T', @Range = 2, @PeriodScale = 'P', @Gap = 1, @GapScale = 'Y', @DateType = 'PE', @Period = 2
begin
	declare @RetVal datetime,
	@DateTime datetime,
	@Year int,
	@Month int,
	@Day int,
	@strDate varchar(15),
	@Today datetime, 
	@DayName varchar(15),
	@CurrentStart datetime,
	@CurrentEnd datetime,
	@PreviousStart datetime,
	@PreviousEnd datetime,
	@QuarterDate datetime,
	@WeekDateTime datetime,
	@WeekStart char(1),
	@CharDebug varchar(8000)
	

	select @WeekStart=isnull(WeekStart, 'M') from system_ctrl  
	

	select @Today=vGETDATE from v_GETDATE --'3/15/09'
	-------- CURRENT START --------

		if @ToDate = 'T'
		begin
			----- DAY -----
			if @PeriodScale = 'D'
			begin
				select @DateTime=@Today
			end
			----- WEEK -----
			else if @PeriodScale = 'W'
			begin
				select @DayName=DATENAME(weekday, @Today)
				if @DayName = 'Sunday'
				begin 
					select @DateTime=@Today
				end
				else if @DayName = 'Monday'
				begin 
					select @DateTime=DATEADD (day , -1, @Today )
				end
				else if @DayName = 'Tuesday'
				begin 
					select @DateTime=DATEADD (day , -2, @Today )
				end
				else if @DayName = 'Wednesday'
				begin 
					select @DateTime=DATEADD (day , -3, @Today )
				end
				else if @DayName = 'Thursday'
				begin 
					select @DateTime=DATEADD (day , -4, @Today )
				end
				else if @DayName = 'Friday'
				begin 
					select @DateTime=DATEADD (day , -5, @Today )
				end
				else if @DayName = 'Saturday'
				begin 
					select @DateTime=DATEADD (day , -6, @Today )
				end		
				--if start week is set to Monday
				if @WeekStart = 'M'	and @DayName <> 'Sunday'
				begin
					select @DateTime = DATEADD( day, 1, @DateTime )
				end			
				else if @WeekStart = 'M'	and @DayName = 'Sunday'
				begin
					select @DateTime=DATEADD (day , -6, @Today )
				end			
			end
			----- MONTH -----
			else if @PeriodScale = 'M' or @PeriodScale = 'P'
			begin
				set @Day = DAY( @Today )
				select @DateTime=DATEADD(day , ((@Day-1)*-1), @Today )
			end
			----- QUARTER -----
			else if @PeriodScale = 'Q'
			begin
				if @Period = -1 
				begin
					set @Month = DATEPART ( Month , @Today ) 
					if @Month < 4
					begin 
						set @Month = 1
					end
					else if @Month > 3 and @Month < 7
					begin	
						set @Month = 4
					end 
					else if @Month > 6 and @Month < 10
					begin	
						set @Month = 7
					end 
					else if @Month > 9 
					begin	
						set @Month = 10
					end 

					set @Year = YEAR( @Today )
					set @Day = 1
					set @strDate = cast(@Month as varchar(5))+'/'+cast(@Day as varchar(5))+'/'+cast(@Year as varchar(5))
					select @DateTime=Cast( @strDate as datetime )

				end
				else
				begin	
					if @Period = 1
					begin
						set @QuarterDate = @Today
					end
					else if @Period = 2
					begin
						set @QuarterDate = DATEADD( Month, -1, @Today )
					end
					else if @Period = 3
					begin
						set @QuarterDate = DATEADD( Month, -2, @Today )
					end
					else if @Period = 4
					begin
						set @QuarterDate = @Today
					end
					else if @Period = 5
					begin
						set @QuarterDate = DATEADD( Month, -1, @Today )
					end
					else if @Period = 6
					begin
						set @QuarterDate = DATEADD( Month, -2, @Today )
					end
					else if @Period = 7
					begin
						set @QuarterDate = @Today
					end
					else if @Period = 8
					begin
						set @QuarterDate = DATEADD( Month, -1, @Today )
					end
					else if @Period = 9
					begin
						set @QuarterDate = DATEADD( Month, -2, @Today )
					end
					else if @Period = 10
					begin
						set @QuarterDate = @Today
					end
					else if @Period = 11
					begin
						set @QuarterDate = DATEADD( Month, -1, @Today )
					end
					else if @Period = 12
					begin
						set @QuarterDate = DATEADD( Month, -2, @Today )
					end


					set @Month = MONTH( @QuarterDate )
					set @Year = YEAR( @QuarterDate )
					set @Day = 1
					set @strDate = cast(@Month as varchar(5))+'/'+cast(@Day as varchar(5))+'/'+cast(@Year as varchar(5))
					select @DateTime=Cast( @strDate as datetime )
				end
			end	
			----- YEAR -----
			else if @PeriodScale = 'Y'
			begin
				if(@StartOfFiscalYear is null)
				or (@StartOfFiscalYear = -1)
				begin
					set @Year = YEAR( @Today )
					set @Month = 1
					set @Day = 1
				end
				else
				begin
					set @Year = YEAR( @StartOfFiscalYear )
					set @Month = MONTH(@StartOfFiscalYear)
					set @Day = 1
				end
				set @strDate = cast(@Month as varchar(5))+'/'+cast(@Day as varchar(5))+'/'+cast(@Year as varchar(5))
				select @DateTime=Cast( @strDate as datetime )
			end		
			---------------------------------------------------------------------------------
			if @Range > 1
			begin
				if @PeriodScale = 'D'
				begin
					set @DateTime = DATEADD( Day , (-1*(@Range-1)), @DateTime ) 
				end
				else if @PeriodScale = 'W'
				begin
					set @DateTime = DATEADD( Week , (-1*(@Range-1)), @DateTime ) 
				end
				else if @PeriodScale = 'M'
				begin
					set @DateTime = DATEADD( Month , (-1*(@Range-1)), @DateTime )
				end
				else if @PeriodScale = 'P'
				begin
					set @DateTime = DATEADD( Month , (-1*(@Range-1)), @DateTime )
				end
				else if @PeriodScale = 'Q'
				begin
					set @DateTime = DATEADD( Quarter , (-1*(@Range-1)), @DateTime ) 
				end
				else if @PeriodScale = 'Y'
				begin
					set @DateTime = DATEADD( Year , (-1*(@Range-1)), @DateTime ) 
				end	
			end
		end
		------------------------ NOT TODATE ------------------------
		else
		begin		
			if @PeriodScale = 'D'
			begin
				set @DateTime = DATEADD( Day , 1, DATEADD( Day , (-1*@Range), @Today ) )
			end
			else if @PeriodScale = 'W'
			begin				
				set @DateTime = DATEADD( Day , 1, DATEADD( Week , (-1*@Range), @Today ) )
			end
			else if @PeriodScale = 'M'
			begin
				set @DateTime = DATEADD( Day , 1, DATEADD( Month , (-1*@Range), @Today ) )
				-- for to date = F make start date first of the month
				set @DateTime = dateadd(day, -Datepart(day,@DateTime)+1, @DateTime)
			end
			else if @PeriodScale = 'P'
			begin
				if @Range = 1
				begin
					set @Day = DAY(@Today)
					set @DateTime = DATEADD(Day, ((@Day)*-1), @Today)
					set @Day = DAY(@DateTime)
					set @DateTime = DATEADD(Day, ((@Day-1)*-1), @Datetime)

				end
				else
				begin
					set @Day = DAY( DATEADD( Month , (-1*(@Range - 1)), @Today ) )
					set @DateTime = DATEADD( Day , ((@Day)*-1), DATEADD( Month , (-1*(@Range - 1)), @Today ) )
					set @Day = DAY(@DateTime)
					set @DateTime = DATEADD(Day, ((@Day-1)*-1), @Datetime)
				end
			end
			else if @PeriodScale = 'Q'
			begin
				set @DateTime = DATEADD( Day , 1, DATEADD( Quarter , (-1*@Range), @Today ) )
			end
			else if @PeriodScale = 'Y'
			begin
				if(@StartOfFiscalYear is null)
				or(@StartOfFiscalYear = -1)
				begin
					set @DateTime = DATEADD( Day , 1, DATEADD( Year , (-1*@Range), @Today ) )
				end
				else
				begin
					set @DateTime = DATEADD( Day , 1, DATEADD( Year , (-1*@Range), @StartOfFiscalYear ) )
				end
				
			end
		end
		
		set @CurrentStart = @DateTime

	-------- CURRENT END --------

		select @DateTime=@Today

		set @CurrentEnd = @DateTime

		if @PeriodScale = 'P'
		begin
			if @ToDate = 'T'
			begin
				set @Day = DAY( @Today )
				set @CurrentEnd = DATEADD(DAY, -1, DATEADD(Month,1, DATEADD( Day , ((@Day - 1)*-1), @Today ) ) )
			end
			else
			begin
				set @Day = DAY( @Today )
				set @CurrentEnd = DATEADD(DAY, -1, DATEADD( Day , ((@Day - 1)*-1), @Today ) ) 
			end		
		end
		else
		if @PeriodScale = 'M'
		and @ToDate = 'F'
			set @CurrentEnd = dateadd(day, -Datepart(day,@DateTime), @DateTime)

	-------- PREVIOUS START --------
	if @Gap > 0
	begin
		------------------
		if @GapScale = 'M' OR @GapScale = 'P'
		begin
			set @WeekDateTime = DATEADD( Month , (-1*@Gap), @CurrentStart ) 
		end
		else if @GapScale = 'Q'
		begin
			set @WeekDateTime = DATEADD( Quarter , (-1*@Gap), @CurrentStart ) 
		end
		else if @GapScale = 'Y'
		begin
			set @WeekDateTime = DATEADD( Year , (-1*@Gap), @CurrentStart ) 
		end
		-------------------
		if @GapScale = 'M' or @GapScale = 'Q' or @GapScale = 'Y' or @GapScale = 'P'
		begin
			select @DayName=DATENAME(weekday, @WeekDateTime)
			if @DayName = 'Sunday'
			begin 
				select @WeekDateTime=@WeekDateTime
			end
			else if @DayName = 'Monday'
			begin 
				select @WeekDateTime=DATEADD (day , -1, @WeekDateTime )
			end
			else if @DayName = 'Tuesday'
			begin 
				select @WeekDateTime=DATEADD (day , -2, @WeekDateTime )
			end
			else if @DayName = 'Wednesday'
			begin 
				select @WeekDateTime=DATEADD (day , -3, @WeekDateTime )
			end
			else if @DayName = 'Thursday'
			begin 
				select @WeekDateTime=DATEADD (day , -4, @WeekDateTime )
			end
			else if @DayName = 'Friday'
			begin 
				select @WeekDateTime=DATEADD (day , -5, @WeekDateTime )
			end
			else if @DayName = 'Saturday'
			begin 
				select @WeekDateTime=DATEADD (day , -6, @WeekDateTime )
			end	
		end
		------------------
		if @GapScale = 'D'
		begin
			set @DateTime = DATEADD( Day , (-1*@Gap), @CurrentStart ) 
		end
		else if @GapScale = 'W'
		begin
			set @DateTime = DATEADD( Week , (-1*@Gap), @CurrentStart ) 
		end
		else if @GapScale = 'M' OR @GapScale = 'P'
		begin
			if @PeriodScale = 'W'
			begin	
				set @DateTime = @WeekDateTime
			end
			else
			begin
				set @DateTime = DATEADD( Month , (-1*@Gap), @CurrentStart ) 
			end
		end
		else if @GapScale = 'Q'
		begin	
			if @PeriodScale = 'W'
			begin	
				set @DateTime = @WeekDateTime
			end
			else
			begin
				set @DateTime = DATEADD( Quarter , (-1*@Gap), @CurrentStart )  
			end				
		end
		else if @GapScale = 'Y'
		begin
			if @PeriodScale = 'W'
			begin	
				set @DateTime = @WeekDateTime
			end
			else
			begin
				set @DateTime = DATEADD( Year , (-1*@Gap), @CurrentStart ) 
			end				
		end
	end
	else
	begin
		set @DateTime = NULL
	end

		set @PreviousStart = @DateTime

	-------- PREVIOUS END --------
	
	if @Gap > 0
	begin
		if @PeriodScale = 'D'
		begin
			set @DateTime = DATEADD( Day, -1, DATEADD( Day , (@Range), @PreviousStart ) )
		end
		else if @PeriodScale = 'W'
		begin
			set @DateTime = DATEADD( Day, -1, DATEADD( Week , (@Range), @PreviousStart ) )
		end
		else if @PeriodScale = 'M'
		begin
			set @DateTime = DATEADD( Day, -1, DATEADD( Month , (@Range), @PreviousStart ) )
		end
		else if @PeriodScale = 'P'
		begin
			set @DateTime = DATEADD( Month , (@Range), @PreviousStart )
			set @DateTime = DATEADD(day, -1, @Datetime)
		end
		else if @PeriodScale = 'Q'
		begin
			set @DateTime = DATEADD( Day, -1, DATEADD( Quarter , (@Range), @PreviousStart ) )
		end
		else if @PeriodScale = 'Y'
		begin
			set @DateTime = DATEADD( Day, -1, DATEADD( Year , (@Range), @PreviousStart ) )
		end	
	end
	else
	begin
		set @DateTime = NULL
	end

		set @PreviousEnd = @DateTime

	-------------------------------

	if @DateType = 'CS'
	begin
		set @DateTime = @CurrentStart 
	end 
	else if @DateType = 'CE' 
	begin
		set @DateTime = @CurrentEnd 
	end
	else if @DateType = 'PS' 	
	begin
		set @DateTime = @PreviousStart 
	end
	else if @DateType = 'PE' 
	begin
		set @DateTime = @PreviousEnd 
	end

	--returns the date with 0 hours, mins and secs
	set @Year = YEAR( @DateTime )
	set @Month = MONTH( @DateTime )
	set @Day = DAY( @DateTime )
	set @strDate = cast(@Month as varchar(5))+'/'+cast(@Day as varchar(5))+'/'+cast(@Year as varchar(5))
	set @RetVal = Cast( @strDate as datetime )
	return @RetVal
--select @RetVal
end

--------------------------------------------------------------------------------


 




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_Get_Option_Attr_Values]') and xtype = 'FN')  
 drop Function fn_Get_Option_Attr_Values
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

--Select dbo.fn_Get_Option_Attr_Values(50007,62,56,723,1,'E')

create Function [dbo].[fn_Get_Option_Attr_Values]
(@Raw_Land_CD int, @Model_Name_ID int, @Model_ID int, @ItemID int, @OATYP_ID int, @Type varchar(2))
Returns varchar(8000)

AS

BEGIN

--Declare @Raw_Land_CD int, @Model_Name_ID int, @Model_ID int, @ItemID int, @OATYP_ID int, @Type varchar(2)
--Select @Raw_Land_CD = 50007, @Model_Name_ID = 62, @Model_ID = 56, @ItemID = 723, @OATYP_ID = 1, @Type = 'E'

Declare @Attributes varchar(8000), @Value varchar(50)
Select @Attributes = ''

If @Type = 'M' --Master Option Level
Begin
	Declare aAttrValues Cursor For

	Select oat.OATVAL_DESC from HB_Opt_Attr_Ovalues oav
	Inner Join HB_Opt_Attr_TValues oat on oat.OATVAL_ID = oav.OATVAL_ID
	Where oav.OATYP_ID = @OATYP_ID and Option_ID = @ItemID

	Open aAttrValues

	Fetch Next From aAttrValues into @Value

	While @@Fetch_Status = 0
	Begin
		Select @Attributes = @Attributes + @Value + ', '
		Fetch Next From aAttrValues into @Value
	End
	
	Close aAttrValues
	DeAllocate aAttrValues

End
Else If @Type = 'E' --Elevation Level
Begin

	Declare aEAttrValues Cursor For

	Select oat.OATVAL_DESC from HB_Opt_Attr_Evalues eav
	Inner Join HB_Opt_Attr_TValues oat on oat.OATVAL_ID = eav.OATVAL_ID
	Where eav.OATYP_ID = @OATYP_ID and Option_ID = @ItemID and Raw_Land_CD = @Raw_Land_CD And
		  Model_Name_ID = @Model_Name_ID and Model_ID = @Model_ID

	Open aEAttrValues

	Fetch Next From aEAttrValues into @Value

	While @@Fetch_Status = 0
	Begin
		Select @Attributes = @Attributes + @Value + ', '
		Fetch Next From aEAttrValues into @Value
	End

	Close aEAttrValues
	DeAllocate aEAttrValues
	
End

if(Select Len(@Attributes)) > 0
	Select @Attributes = SubString(@Attributes,1,Len(@Attributes)-1)

Return @Attributes

END


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_Get_Period]') and xtype = 'FN')  
 drop Function fn_Get_Period
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE function [dbo].[fn_Get_Period]( 
	@todate char(1), @range int, @rangescale char(1), @gap int, @gapscale char(1)
	--@KBI_Ins_ID int	
) returns varchar(8000)
as 
begin
	declare	
	@return_value varchar(8000),
	-------------formula variables----
	@1 varchar(10), 
	@2 varchar(10),
	@3 varchar(10),
	@4 varchar(10),
	@5 varchar(10),
	@6 varchar(10),
	@7 varchar(10),
	@8 varchar(10),
	@9 varchar(10),
	@10 varchar(10),
	@11 varchar(10),
	@12 varchar(10),
	@13 varchar(10),
	@14 varchar(10)
	----------------end---------------

	--------------------Calculates Period-----------------
	--select @todate=[todate?], @range=range, @rangescale=rangescale, @gap=gap, @gapscale=gapscale from security_kbi_instance where id=@KBI_Ins_ID

	set @1 = ''
	set @2 = ''
	set @3 = ''
	set @4 = ''
	set @5 = ''
	set @6 = 'vs '
	set @7 = ''
	set @8 = ''
	set @9 = ''
	set @10 = ''
	set @11 = ''
	set @12 = ''
	set @13 = ''
	set @14 = ''
	
	-------------------------------------------------------TODATE = TRUE--------------------------------------------------------
	if @todate = 'T'
	begin		
		
		
		if @gapscale = 'D'
		begin
			set @11 = 'day'
		end	
		else if @gapscale = 'W'
		begin
			set @11 = 'Week'
		end						
		else if @gapscale = 'M'
		begin
			set @11 = 'Month'
		end
		else if @gapscale = 'Q'
		begin
			set @11 = 'Quarter'
		end
		else if @gapscale = 'Y'
		begin
			set @11 = 'Year'
		end
		else if @gapscale = 'P'
		begin
			set @11 = 'Period'
		end

		--if  (@gap <> 1) and (@range <> 1) --@rangescale <> 'D' and @gapscale <> 'D'  and
		if  (@range <> 1)
		begin	
			select @7 = dbo.fn_Num_ToWords(@range) + ' ' 
			set @9 = ', '
			if @rangescale = 'D'
			begin			
				set @8 = 'Day'			
			end
			if @rangescale = 'W'
			begin
				set @8 = 'Week'
			end						
			else if @rangescale = 'M'
			begin
				set @8 = 'Month'			
			end
			else if @rangescale = 'Q'
			begin
				set @8 = 'Quarter'			
			end
			else if @rangescale = 'Y'
			begin
				set @8 = 'Year'			
			end
			else if @rangescale = 'P'
			begin
				set @8 = 'Period'			
			end
		end			

		if @range = 1---------------------------------------RANGE = 1
		begin			
			set @2 = ''
			set @3 = ''
			set @5 = ''
			set @12 = ''

			if @rangescale <> 'D'
			begin
				set @1 = 'This '	
				set @14	= 'To Date '
			
				if @rangescale = 'W'
				begin
					set @4 = 'Week '
				end						
				else if @rangescale = 'M'
				begin
					set @4 = 'Month '
				end
				else if @rangescale = 'Q'
				begin
					set @4 = 'Quarter '
				end
				else if @rangescale = 'Y'
				begin
					set @4 = 'Year '
				end
				else if @rangescale = 'P'
				begin
					set @4 = 'Period '
				end
			end
			else
			begin
				set @1 = ''
				set @4 = 'Today '
			end

			if @gap = 1-------------------------------------GAP = 1
			begin					
				set @10 = 'Last '
				if @rangescale <> @gapscale
				begin
					set @10 = 'One '
					set @13 = ' Ago '
				end
				if @rangescale = 'D' and @gapscale = 'D'			
					set @10 = 'Yester' 								
				
			end
			if @gap > 1----------------------------------GAP > 1
			begin	
				select @10 = dbo.fn_Num_ToWords(@gap) + ' ' 	
				set @12 = 's'		
				set @13 = ' Ago'
			end
		end
		else if @range > 1-------------------------------RANGE > 1
		begin	
			set @9 = 's, '
			set @1 = 'These Last '
			set @2 = ' '
			select @3 = dbo.fn_Num_ToWords(@range) + ' ' 
			set @5 = ''
			set @12 = ''
			set @14	= 'To Date '

							
			if @rangescale = 'D'
			begin
				set @4 = 'Days '
			end
			else if @rangescale = 'W'
			begin
				set @4 = 'Weeks '
			end						
			else if @rangescale = 'M'
			begin
				set @4 = 'Months '
			end
			else if @rangescale = 'Q'
			begin
				set @4 = 'Quarters '
			end
			else if @rangescale = 'Y'
			begin
				set @4 = 'Years '
			end
			else if @rangescale = 'P'
			begin
				set @4 = 'Periods '
			end
			


			if @gap = 1----------------------------------GAP = 1
			begin	
				set @10 = 'Last '
			end
			if @gap > 1----------------------------------GAP > 1
			begin					
				select @10 = dbo.fn_Num_ToWords(@gap) + ' ' 
				set @12 = 's'		
				set @13 = ' Ago'
			end
		end
	end
	-----------------------------------------------------------TODATE = FALSE-----------------------------------------------------
	else if @todate = 'F'
	begin
		set @2 = 'Past '
		if @rangescale = 'D' and @range = 1 
			set @2 = ''
		select @7 = dbo.fn_Num_ToWords(@range) + ' ' 
		set @9 = ', '
		select @10 = dbo.fn_Num_ToWords(@gap) + ' ' 
		set @13 = 'Prior'


		if @gapscale = 'D'
		begin
			set @11 = 'Day'
		end	
		else if @gapscale = 'W'
		begin
			set @11 = 'Week'
		end						
		else if @gapscale = 'M'
		begin
			set @11 = 'Month'
		end
		else if @gapscale = 'Q'
		begin
			set @11 = 'Quarter'
		end
		else if @gapscale = 'Y'
		begin
			set @11 = 'Year'
		end
		else if @gapscale = 'P'
		begin
			set @11 = 'Period'
		end

		if @rangescale = 'D'
		begin		
			set @4 = 'Today '	
			set @8 = 'Day'			
		end
		if @rangescale = 'W'
		begin
			set @4 = 'Week'
			set @8 = 'Week'
		end						
		else if @rangescale = 'M'
		begin
			set @4 = 'Month'
			set @8 = 'Month'			
		end
		else if @rangescale = 'Q'
		begin
			set @4 = 'Quarter'
			set @8 = 'Quarter'			
		end
		else if @rangescale = 'Y'
		begin
			set @4 = 'Year'
			set @8 = 'Year'			
		end
		else if @rangescale = 'P'
		begin
			set @4 = 'Period'
			set @8 = 'Period'			
		end
	

		

		if @range = 1----------------------------------RANGE = 1
		begin
			set @1 = ''
			set @5 = ' '
			if @rangescale <> 'D'
				set @1 = 'This '
			set @3 = ''
			if @gap = 1----------------------------------GAP = 1
			begin	
				set @12 = ' '
			end
			if @gap > 1----------------------------------GAP > 1
			begin	
				set @12 = 's '
			end
		end
		else if @range > 1----------------------------------RANGE > 1
		begin						
			set @1 = 'These '
			if @rangescale = 'D'
				set @4 = 'Day'				
			select @3 = dbo.fn_Num_ToWords(@range) + ' ' 
			set @5 = 's '
			set @9 = 's, '
			
			if @gap = 1----------------------------------GAP = 1
			begin	
				set @12 = ' '
			end
			if @gap > 1----------------------------------GAP > 1
			begin	
				set @12 = 's '
			end
		end
	end
if @gap > 0
	set @return_value = @1+@2+@3+@4+@5+@14+@6+@7+@8+@9+@10+@11+@12+@13
else
	set @return_value = @1+@2+@3+@4+@5+@14
return @return_value
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_GetCurrentBasePrice]') and xtype = 'FN')  
 drop Function fn_GetCurrentBasePrice
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create function fn_GetCurrentBasePrice(@Level char, @Model_ID int, @Geo_id int, @Date datetime)
returns Money
as
begin

declare @Val money
set @Val = 0

if @Level = 'M' or @Level = 'H'
begin
select @Val = (
 select top 1 Price
 from dbo.HB_ModelPriceHistory
 where model_id = @Model_ID
 and Raw_LAnd_CD = @Geo_ID
 and ExpieryDate <= @Date
 order by ExpieryDate desc)
end
else if @Level = 'C' 
begin 
select @Val = (
 select top 1 Price
 from dbo.HB_ModelPriceHistory
 where model_id = @Model_ID
 and Community_CD = @Geo_ID
 and ExpieryDate <= @Date
 order by ExpieryDate desc)
end
else if @Level = 'P' 
begin 
select @Val = (
 select top 1 Price
 from dbo.HB_ModelPriceHistory
 where model_id = @Model_ID
 and Project_CD = @Geo_ID
 and ExpieryDate <= @Date
 order by ExpieryDate desc)
end

 return @Val
end

--------------------------------------------------------------------------------



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_GetStringDate]') and xtype = 'FN')  
 drop Function fn_GetStringDate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE function  [dbo].[fn_GetStringDate]
( @Date datetime )
returns  varchar(20)
as
begin

    declare @return_Date varchar(20)
  
    select @return_Date = replicate('0', 2 - len(cast(DATEPART(month, @date) as varchar(20)))) + 
	                      cast(DATEPART(month, @date) as varchar(20)) + '-' +	
	                      replicate('0', 2 - len(cast(DATEPART(day, @date) as varchar(20)))) + 
	                      cast(DATEPART(day, @date) as varchar(20)) + '-' +
						  cast(DATEPART(year, @date) as varchar(20)) 
    return @return_Date   
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_hb_calc_update_mat_amt]') and xtype = 'FN')  
 drop Function fn_hb_calc_update_mat_amt
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE function [dbo].[fn_hb_calc_update_mat_amt](
@model_ID int,@rawland int,@Material_id int ,@date datetime,@updatemethod int,@username varchar(50))
returns money
as
begin
--  select dbo.fn_hb_calc_update_mat_amt(39,50001,46,getdate(),55,16,4,'ken')
set @date = dateadd(hour,1,@date)

set @date = (CONVERT(VARCHAR(10), @date, 101) + ' 23:59:59:998')
declare 
@result money,
@rfqTypeMode char(1),
@dateExpireNull datetime,
@tr_tablePrefix varchar(200),
@updateDesc varchar(100)
set @result = 0
set @rfqTypeMode = 'M'
set @dateExpireNull = dateadd(day,1,@date)


select @updateDesc = description from hb_rfq_update_method where id = @updatemethod

--------------------------------------------------------------------------------------------------
if @updateDesc = 'By Selected Contract'
begin--selected Contracts----------------------------------------------------------------------------------

select @result = cost from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and material_id = @material_ID and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date between date_Effective and (isnull(DATE_EXPIRE,@dateExpireNull)) and def = 'T'
and RFQ_HeaderID in(select id from rfq_vendorselectionheader where rfqtype = 'C')and isnull(option_id,-1) = -1
end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Selected Demand'
begin--Selected Demand-----------------------------------------------------------------------

select @result = cost from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and material_id = @material_ID and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date between date_Effective and (isnull(DATE_EXPIRE,@dateExpireNull)) and def = 'T'
and RFQ_HeaderID in(select id from rfq_vendorselectionheader where rfqtype = 'D')and isnull(option_id,-1) = -1


end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Lowest Price'
begin--By Lowest Price----------------------------------------------------------------------------
 

select @result = min(cost) from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and material_id = @material_ID and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date between date_Effective and (isnull(DATE_EXPIRE,@dateExpireNull)) and isnull(option_id,-1) = -1

end
--------------------------------------------------------------------------------------------------
else if  @updateDesc = 'By Average Price'
begin--By Average Price---------------------------------------------------------------------------

select @result = avg(cost) from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and material_id = @material_ID and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date between date_Effective and (isnull(DATE_EXPIRE,@dateExpireNull)) and isnull(option_id,-1) = -1
end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Highest Price'
begin--By Highest Price---------------------------------------------------------------------------

select @result = max(cost) from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and material_id = @material_ID and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date between date_Effective and (isnull(DATE_EXPIRE,@dateExpireNull)) and isnull(option_id,-1) = -1

end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Ranking Primary'
begin--By Ranking Primary-------------------------------------------------------------------------

select @result = c.cost from rfq_cost c join
dbo.working_hb_rankingJoin s on s.supplier = c.supplier and s.rfqc_type_moe = c.rfqc_type_moe and 
s.raw_land_cd = c.raw_land_cd and c.model_id = s.model_id and isnull(s.option_id,-1) = isnull(c.option_id,-1) and 
s.material_id = c.material_id and s.trade_id = c.trade_id
where c.rfqc_type_moe = @rfqTypeMode and c.model_id = @model_id and c.raw_land_cd = @rawland and
c.material_id = @material_ID and c.Available = 1 and
@date between c.date_Effective and (isnull(c.DATE_EXPIRE,@dateExpireNull))and s.ranking = 1 and s.username = @username


end
--------------------------------------------------------------------------------------------------
else if  @updateDesc = 'By Ranking Primary Alternate'
begin--By Ranking Primary Alternate---------------------------------------------------------------


select @result = c.cost from rfq_cost c join
dbo.working_hb_rankingJoin s on s.supplier = c.supplier and s.rfqc_type_moe = c.rfqc_type_moe and 
s.raw_land_cd = c.raw_land_cd and c.model_id = s.model_id and isnull(s.option_id,-1) = isnull(c.option_id,-1) and 
s.material_id = c.material_id and s.trade_id = c.trade_id
where c.rfqc_type_moe = @rfqTypeMode and c.model_id = @model_id and c.raw_land_cd = @rawland and
c.material_id = @material_ID and c.Available = 1 and
@date between c.date_Effective and (isnull(c.DATE_EXPIRE,@dateExpireNull))and s.ranking = 2 and s.username = @username


end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Ranking Average Alternate'
begin--By Ranking Average Alternate---------------------------------------------------------------

select @result = c.cost from rfq_cost c join
dbo.working_hb_rankingJoin s on s.supplier = c.supplier and s.rfqc_type_moe = c.rfqc_type_moe and 
s.raw_land_cd = c.raw_land_cd and c.model_id = s.model_id and isnull(s.option_id,-1) = isnull(c.option_id,-1) and 
s.material_id = c.material_id and s.trade_id = c.trade_id
where c.rfqc_type_moe = @rfqTypeMode and c.model_id = @model_id and c.raw_land_cd = @rawland and
c.material_id = @material_ID and c.Available = 1 and
@date between c.date_Effective and (isnull(c.DATE_EXPIRE,@dateExpireNull))and s.ranking = 3 and s.username = @username


end
--
--select * from rfq_cost c join
--TR_KIHOMEBUILDER.dbo.HB_SUPP_TMO s on c.supplier = s.supplier 
--where c.rfqc_type_moe = 'M' and def = 'T'

if @result is null
	set @result = 0

return @result

end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_hb_calc_update_mat_vendor]') and xtype = 'FN')  
 drop Function fn_hb_calc_update_mat_vendor
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE function [dbo].[fn_hb_calc_update_mat_vendor](
@model_ID int,@rawland int,@Material_id int ,@date datetime,@updatemethod int,@username varchar(50))
returns int
as
begin
--  select dbo.fn_hb_calc_update_mat_amt(39,50001,46,getdate(),55,16,4,'ken')
set @date = (CONVERT(VARCHAR(10), @date, 101) + ' 23:59:59:998')
declare 
@result int,
@rfqTypeMode char(1),
@dateExpireNull datetime,
@tr_tablePrefix varchar(200),
@updateDesc varchar(100)
set @result = 0
set @rfqTypeMode = 'M'
set @dateExpireNull = dateadd(day,1,@date)


select @updateDesc = description from hb_rfq_update_method where id = @updatemethod

--------------------------------------------------------------------------------------------------
if @updateDesc = 'By Selected Contract'
begin--selected Contracts----------------------------------------------------------------------------------

select top 1 @result = supplier_id from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and material_id = @material_ID and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date between date_Effective and (isnull(DATE_EXPIRE,@dateExpireNull)) and def = 'T'
and RFQ_HeaderID in(select id from rfq_vendorselectionheader where rfqtype = 'C')and isnull(option_id,-1) = -1
end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Selected Demand'
begin--Selected Demand-----------------------------------------------------------------------

select top 1 @result = supplier_id from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and material_id = @material_ID and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date between date_Effective and (isnull(DATE_EXPIRE,@dateExpireNull)) and def = 'T'
and RFQ_HeaderID in(select id from rfq_vendorselectionheader where rfqtype = 'D')and isnull(option_id,-1) = -1

end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Lowest Price'
begin--By Lowest Price----------------------------------------------------------------------------
 

select top 1 @result = supplier_id from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and material_id = @material_ID and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date between date_Effective and (isnull(DATE_EXPIRE,@dateExpireNull)) and isnull(option_id,-1) = -1
order by cost

end
--------------------------------------------------------------------------------------------------
else if  @updateDesc = 'By Average Price'
begin--By Average Price---------------------------------------------------------------------------

select @result = -1
end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Highest Price'
begin--By Highest Price---------------------------------------------------------------------------

select top 1 @result = supplier_id from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and material_id = @material_ID and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date between date_Effective and (isnull(DATE_EXPIRE,@dateExpireNull)) and isnull(option_id,-1) = -1
order by cost desc

end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Ranking Primary'
begin--By Ranking Primary-------------------------------------------------------------------------

select top 1 @result = supplier_id from rfq_cost c join
dbo.working_hb_rankingJoin s on s.supplier = c.supplier and s.rfqc_type_moe = c.rfqc_type_moe and 
s.raw_land_cd = c.raw_land_cd and c.model_id = s.model_id and isnull(s.option_id,-1) = isnull(c.option_id,-1) and 
s.material_id = c.material_id and s.trade_id = c.trade_id
where c.rfqc_type_moe = @rfqTypeMode and c.model_id = @model_id and c.raw_land_cd = @rawland and
c.material_id = @material_ID and c.Available = 1 and
@date between c.date_Effective and (isnull(c.DATE_EXPIRE,@dateExpireNull))and s.ranking = 1 and s.username = @username


end
--------------------------------------------------------------------------------------------------
else if  @updateDesc = 'By Ranking Primary Alternate'
begin--By Ranking Primary Alternate---------------------------------------------------------------


select top 1 @result = supplier_id from rfq_cost c join
dbo.working_hb_rankingJoin s on s.supplier = c.supplier and s.rfqc_type_moe = c.rfqc_type_moe and 
s.raw_land_cd = c.raw_land_cd and c.model_id = s.model_id and isnull(s.option_id,-1) = isnull(c.option_id,-1) and 
s.material_id = c.material_id and s.trade_id = c.trade_id
where c.rfqc_type_moe = @rfqTypeMode and c.model_id = @model_id and c.raw_land_cd = @rawland and
c.material_id = @material_ID and c.Available = 1 and
@date between c.date_Effective and (isnull(c.DATE_EXPIRE,@dateExpireNull))and s.ranking = 2 and s.username = @username


end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Ranking Average Alternate'
begin--By Ranking Average Alternate---------------------------------------------------------------

select @result = -1

end
--
--select * from rfq_cost c join
--TR_KIHOMEBUILDER.dbo.HB_SUPP_TMO s on c.supplier = s.supplier 
--where c.rfqc_type_moe = 'M' and def = 'T'

if @result = -1
	set @result = null

return @result

end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_hb_calc_update_opt_amt]') and xtype = 'FN')  
 drop Function fn_hb_calc_update_opt_amt
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE function [dbo].[fn_hb_calc_update_opt_amt](
@model_ID int,@rawland int,@Option_id int ,@date datetime,@updatemethod int,@MaterialTradeOption_ID int,@MaterialTradeOption char(1),@username varchar(50))
returns money
as
begin

set @date = (CONVERT(VARCHAR(10), @date, 101) + ' 23:59:59:998')

declare 
@result money,
@rfqTypeMode char(1),
@dateExpireNull datetime,
@tr_tablePrefix varchar(200),
@updateDesc varchar(100)

set @result = 0
set @rfqTypeMode = @MaterialTradeOption
set @dateExpireNull = dateadd(day,1,@date)


select @updateDesc = description from hb_rfq_update_method where id = @updatemethod




--------------------------------------------------------------------------------------------------
if  @updateDesc = 'By Selected Contract'
begin--selected Contracts----------------------------------------------------------------------------------

select @result = cost from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and @Option_id = option_ID and @MaterialTradeOption_ID = case when @MaterialTradeOption = 'M' then material_id else case when @MaterialTradeOption = 'T' then isnull(trade_id,-1) else @MaterialTradeOption_ID end end and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date >= date_Effective and @date <=(isnull(DATE_EXPIRE,@dateExpireNull)) and def = 'T'
and RFQ_HeaderID in(select id from rfq_vendorselectionheader where rfqtype = 'C')
end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Selected Demand'
begin--Selected Demand-----------------------------------------------------------------------

select @result = cost from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and @Option_id = option_ID and @MaterialTradeOption_ID = case when @MaterialTradeOption = 'M' then material_id else case when @MaterialTradeOption = 'T' then isnull(trade_id,-1) else @MaterialTradeOption_ID end end and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date >= date_Effective and @date <=(isnull(DATE_EXPIRE,@dateExpireNull)) and def = 'T'
and RFQ_HeaderID in(select id from rfq_vendorselectionheader where rfqtype = 'D')


end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Lowest Price'
begin--By Lowest Price----------------------------------------------------------------------------
 

select @result = min(cost) from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and @Option_id = option_ID  and @MaterialTradeOption_ID  = case when @MaterialTradeOption = 'M' then material_id else case when @MaterialTradeOption = 'T' then isnull(trade_id,-1) else @MaterialTradeOption_ID end end and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date >= date_Effective and @date <=(isnull(DATE_EXPIRE,@dateExpireNull)) 

end
--------------------------------------------------------------------------------------------------
else if  @updateDesc = 'By Average Price'
begin--By Average Price---------------------------------------------------------------------------

select @result = avg(cost) from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and @Option_id = option_ID  and @MaterialTradeOption_ID   = case when @MaterialTradeOption = 'M' then material_id else case when @MaterialTradeOption = 'T' then isnull(trade_id,-1) else @MaterialTradeOption_ID end end and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date >= date_Effective and @date <=(isnull(DATE_EXPIRE,@dateExpireNull)) 
end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Highest Price'
begin--By Highest Price---------------------------------------------------------------------------

select @result = max(cost) from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and option_id = @Option_id  and @MaterialTradeOption_ID   = case when @MaterialTradeOption = 'M' then material_id else case when @MaterialTradeOption = 'T' then isnull(trade_id,-1) else @MaterialTradeOption_ID end end and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date >= date_Effective and @date <=(isnull(DATE_EXPIRE,@dateExpireNull)) 

end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Ranking Primary'
begin--By Ranking Primary-------------------------------------------------------------------------


select @result = c.cost from rfq_cost c join
dbo.working_hb_rankingJoin s on s.supplier = c.supplier and s.rfqc_type_moe = c.rfqc_type_moe and 
s.raw_land_cd = c.raw_land_cd and c.model_id = s.model_id and s.option_id = c.option_id and 
s.material_id = c.material_id and s.trade_id = c.trade_id
where c.rfqc_type_moe = @rfqTypeMode and c.model_id = @model_id  and @MaterialTradeOption_ID  = case when @MaterialTradeOption = 'M' then c.material_id else case when @MaterialTradeOption = 'T' then isnull(c.trade_id,-1) else @MaterialTradeOption_ID end end and c.raw_land_cd = @rawland and
c.option_id = @Option_id and c.Available = 1 and
@date between c.date_Effective and (isnull(c.DATE_EXPIRE,@dateExpireNull))and s.ranking = 1 and s.username = @username


end
--------------------------------------------------------------------------------------------------
else if  @updateDesc = 'By Ranking Primary Alternate'
begin--By Ranking Primary Alternate---------------------------------------------------------------


select @result = c.cost from rfq_cost c join
dbo.working_hb_rankingJoin s on s.supplier = c.supplier and s.rfqc_type_moe = c.rfqc_type_moe and 
s.raw_land_cd = c.raw_land_cd and c.model_id = s.model_id and s.option_id = c.option_id and 
s.material_id = c.material_id and s.trade_id = c.trade_id
where c.rfqc_type_moe = @rfqTypeMode and c.model_id = @model_id  and @MaterialTradeOption_ID  = case when @MaterialTradeOption = 'M' then c.material_id else case when @MaterialTradeOption = 'T' then isnull(c.trade_id,-1) else @MaterialTradeOption_ID end end and c.raw_land_cd = @rawland and
c.option_id = @Option_id and c.Available = 1 and
@date between c.date_Effective and (isnull(c.DATE_EXPIRE,@dateExpireNull))and s.ranking = 2 and s.username = @username


end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Ranking Average Alternate'
begin--By Ranking Average Alternate---------------------------------------------------------------

select @result = c.cost from rfq_cost c join
dbo.working_hb_rankingJoin s on s.supplier = c.supplier and s.rfqc_type_moe = c.rfqc_type_moe and 
s.raw_land_cd = c.raw_land_cd and c.model_id = s.model_id and s.option_id = c.option_id and 
s.material_id = c.material_id and s.trade_id = c.trade_id
where c.rfqc_type_moe = @rfqTypeMode and c.model_id = @model_id  and @MaterialTradeOption_ID  = case when @MaterialTradeOption = 'M' then c.material_id else case when @MaterialTradeOption = 'T' then isnull(c.trade_id,-1) else @MaterialTradeOption_ID end end and c.raw_land_cd = @rawland and
c.option_id = @Option_id and c.Available = 1 and
@date between c.date_Effective and (isnull(c.DATE_EXPIRE,@dateExpireNull))and s.ranking = 3 and s.username = @username


end
--
--select * from rfq_cost c join
--TR_KIHOMEBUILDER.dbo.HB_SUPP_TMO s on c.supplier = s.supplier 
--where c.rfqc_type_moe = 'M' and def = 'T'

if @result is null
	set @result = 0

return @result

end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_hb_calc_update_opt_vendor]') and xtype = 'FN')  
 drop Function fn_hb_calc_update_opt_vendor
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE function [dbo].[fn_hb_calc_update_opt_vendor](
@model_ID int,@rawland int,@Option_id int ,@date datetime,@updatemethod int,@MaterialTradeOption_ID int,@MaterialTradeOption char(1),@username varchar(50))
returns int
as
begin

set @date = (CONVERT(VARCHAR(10), @date, 101) + ' 23:59:59:998')

declare 
@result int,
@rfqTypeMode char(1),
@dateExpireNull datetime,
@tr_tablePrefix varchar(200),
@updateDesc varchar(100)

set @result = 0
set @rfqTypeMode = @MaterialTradeOption
set @dateExpireNull = dateadd(day,1,@date)


select @updateDesc = description from hb_rfq_update_method where id = @updatemethod




--------------------------------------------------------------------------------------------------
if  @updateDesc = 'By Selected Contract'
begin--selected Contracts----------------------------------------------------------------------------------

select top 1 @result = supplier_id from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and @Option_id = option_ID and @MaterialTradeOption_ID = case when @MaterialTradeOption = 'M' then material_id else case when @MaterialTradeOption = 'T' then isnull(trade_id,-1) else @MaterialTradeOption_ID end end and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date >= date_Effective and @date <=(isnull(DATE_EXPIRE,@dateExpireNull)) and def = 'T'
and RFQ_HeaderID in(select id from rfq_vendorselectionheader where rfqtype = 'C')
end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Selected Demand'
begin--Selected Demand-----------------------------------------------------------------------

select top 1 @result = supplier_id from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and @Option_id = option_ID and @MaterialTradeOption_ID = case when @MaterialTradeOption = 'M' then material_id else case when @MaterialTradeOption = 'T' then isnull(trade_id,-1) else @MaterialTradeOption_ID end end and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date >= date_Effective and @date <=(isnull(DATE_EXPIRE,@dateExpireNull)) and def = 'T'
and RFQ_HeaderID in(select id from rfq_vendorselectionheader where rfqtype = 'D')


end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Lowest Price'
begin--By Lowest Price----------------------------------------------------------------------------
 

select top 1 @result = supplier_id from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and @Option_id = option_ID  and 
@MaterialTradeOption_ID  = case when @MaterialTradeOption = 'M' then material_id else case when @MaterialTradeOption = 'T' then isnull(trade_id,-1) else @MaterialTradeOption_ID end end and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date >= date_Effective and @date <=(isnull(DATE_EXPIRE,@dateExpireNull)) 
order by cost

end
--------------------------------------------------------------------------------------------------
else if  @updateDesc = 'By Average Price'
begin--By Average Price---------------------------------------------------------------------------

select @result = -1
end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Highest Price'
begin--By Highest Price---------------------------------------------------------------------------

select top 1 @result = supplier_id from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and option_id = @Option_id  and @MaterialTradeOption_ID   = case when @MaterialTradeOption = 'M' then material_id else case when @MaterialTradeOption = 'T' then isnull(trade_id,-1) else @MaterialTradeOption_ID end end and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date >= date_Effective and @date <=(isnull(DATE_EXPIRE,@dateExpireNull)) 
order by cost desc

end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Ranking Primary'
begin--By Ranking Primary-------------------------------------------------------------------------


select top 1 @result = supplier_id from rfq_cost c join
dbo.working_hb_rankingJoin s on s.supplier = c.supplier and s.rfqc_type_moe = c.rfqc_type_moe and 
s.raw_land_cd = c.raw_land_cd and c.model_id = s.model_id and s.option_id = c.option_id and 
s.material_id = c.material_id and s.trade_id = c.trade_id
where c.rfqc_type_moe = @rfqTypeMode and c.model_id = @model_id  and @MaterialTradeOption_ID  = case when @MaterialTradeOption = 'M' then c.material_id else case when @MaterialTradeOption = 'T' then isnull(c.trade_id,-1) else @MaterialTradeOption_ID end end and c.raw_land_cd = @rawland and
c.option_id = @Option_id and c.Available = 1 and
@date between c.date_Effective and (isnull(c.DATE_EXPIRE,@dateExpireNull))and s.ranking = 1 and s.username = @username


end
--------------------------------------------------------------------------------------------------
else if  @updateDesc = 'By Ranking Primary Alternate'
begin--By Ranking Primary Alternate---------------------------------------------------------------


select top 1 @result = supplier_id from rfq_cost c join
dbo.working_hb_rankingJoin s on s.supplier = c.supplier and s.rfqc_type_moe = c.rfqc_type_moe and 
s.raw_land_cd = c.raw_land_cd and c.model_id = s.model_id and s.option_id = c.option_id and 
s.material_id = c.material_id and s.trade_id = c.trade_id
where c.rfqc_type_moe = @rfqTypeMode and c.model_id = @model_id  and @MaterialTradeOption_ID  = case when @MaterialTradeOption = 'M' then c.material_id else case when @MaterialTradeOption = 'T' then isnull(c.trade_id,-1) else @MaterialTradeOption_ID end end and c.raw_land_cd = @rawland and
c.option_id = @Option_id and c.Available = 1 and
@date between c.date_Effective and (isnull(c.DATE_EXPIRE,@dateExpireNull))and s.ranking = 2 and s.username = @username


end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Ranking Average Alternate'
begin--By Ranking Average Alternate---------------------------------------------------------------

select @result = -1


end
--
--select * from rfq_cost c join
--TR_KIHOMEBUILDER.dbo.HB_SUPP_TMO s on c.supplier = s.supplier 
--where c.rfqc_type_moe = 'M' and def = 'T'

if @result = -1
	set @result = null

return @result

end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_hb_calc_update_trd_amt]') and xtype = 'FN')  
 drop Function fn_hb_calc_update_trd_amt
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE function [dbo].[fn_hb_calc_update_trd_amt](
@model_ID int,@rawland int,@Trade_id int ,@date datetime,@updatemethod int,@username varchar(50))
returns money
as
begin
--  select dbo.fn_hb_calc_update_trd_amt(22,50002,54,getdate(),9,16,3,2,'test')
set @date = (CONVERT(VARCHAR(10), @date, 101) + ' 23:59:59:998')

declare 
@result money,
@rfqTypeMode char(1),
@dateExpireNull datetime,
@updateDesc varchar(100)



set @result = 0 
set @rfqTypeMode = 'T'
set @dateExpireNull = dateadd(day,1,@date)




select @updateDesc = description from hb_rfq_update_method where id = @updatemethod


--------------------------------------------------------------------------------------------------
if @updateDesc = 'By Selected Contract'
begin--selected Contracts----------------------------------------------------------------------------------

select @result = cost from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and @Trade_id = trade_ID and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date >= date_Effective and @date <=(isnull(DATE_EXPIRE,@dateExpireNull)) and def = 'T'
and RFQ_HeaderID in(select id from rfq_vendorselectionheader where rfqtype = 'C') and isnull(option_id,-1) = -1
end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Selected Demand'
begin--Selected Demand-----------------------------------------------------------------------

select @result = cost from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and @Trade_id = trade_ID and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date >= date_Effective and @date <=(isnull(DATE_EXPIRE,@dateExpireNull)) and def = 'T'
and RFQ_HeaderID in(select id from rfq_vendorselectionheader where rfqtype = 'D') and isnull(option_id,-1) = -1


end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Lowest Price'
begin--By Lowest Price----------------------------------------------------------------------------
 

select @result = min(cost) from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and @Trade_id = trade_ID and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date >= date_Effective and @date <=(isnull(DATE_EXPIRE,@dateExpireNull)) and isnull(option_id,-1) = -1

end
--------------------------------------------------------------------------------------------------
else if  @updateDesc = 'By Average Price'
begin--By Average Price---------------------------------------------------------------------------

select @result = avg(cost) from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and @Trade_id = trade_ID and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date >= date_Effective and @date <=(isnull(DATE_EXPIRE,@dateExpireNull)) and isnull(option_id,-1) = -1
end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Highest Price'
begin--By Highest Price---------------------------------------------------------------------------

select @result = max(cost) from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and @Trade_id = trade_ID and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date >= date_Effective and @date <=(isnull(DATE_EXPIRE,@dateExpireNull)) and isnull(option_id,-1) = -1

end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Ranking Primary'
begin--By Ranking Primary-------------------------------------------------------------------------


select @result = c.cost from rfq_cost c join
dbo.working_hb_rankingJoin s on s.supplier = c.supplier and s.rfqc_type_moe = c.rfqc_type_moe and 
s.raw_land_cd = c.raw_land_cd and c.model_id = s.model_id and isnull(s.option_id,-1) = isnull(c.option_id,-1) and 
--s.material_id = c.material_id and 
s.trade_id = c.trade_id
where c.rfqc_type_moe = @rfqTypeMode and c.model_id = @model_id and c.raw_land_cd = @rawland and
c.trade_id = @Trade_id and c.Available = 1 and
@date between c.date_Effective and (isnull(c.DATE_EXPIRE,@dateExpireNull))and s.ranking = 1 and s.username = @username


end
--------------------------------------------------------------------------------------------------
else if  @updateDesc = 'By Ranking Primary Alternate'
begin--By Ranking Primary Alternate---------------------------------------------------------------


select @result = c.cost from rfq_cost c join
dbo.working_hb_rankingJoin s on s.supplier = c.supplier and s.rfqc_type_moe = c.rfqc_type_moe and 
s.raw_land_cd = c.raw_land_cd and c.model_id = s.model_id and isnull(s.option_id,-1) = isnull(c.option_id,-1) and 
--s.material_id = c.material_id and 
s.trade_id = c.trade_id
where c.rfqc_type_moe = @rfqTypeMode and c.model_id = @model_id and c.raw_land_cd = @rawland and
c.trade_id = @Trade_id and c.Available = 1 and
@date between c.date_Effective and (isnull(c.DATE_EXPIRE,@dateExpireNull))and s.ranking = 2 and s.username = @username


end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Ranking Average Alternate'
begin--By Ranking Average Alternate---------------------------------------------------------------

select @result = c.cost from rfq_cost c join
dbo.working_hb_rankingJoin s on s.supplier = c.supplier and s.rfqc_type_moe = c.rfqc_type_moe and 
s.raw_land_cd = c.raw_land_cd and c.model_id = s.model_id and isnull(s.option_id,-1) = isnull(c.option_id,-1) and 
--s.material_id = c.material_id and 
s.trade_id = c.trade_id
where c.rfqc_type_moe = @rfqTypeMode and c.model_id = @model_id and c.raw_land_cd = @rawland and
c.trade_id = @Trade_id and c.Available = 1 and
@date between c.date_Effective and (isnull(c.DATE_EXPIRE,@dateExpireNull))and s.ranking = 3 and s.username = @username


end

if @result is null
	set @result = 0

return @result

end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_hb_calc_update_trd_vendor]') and xtype = 'FN')  
 drop Function fn_hb_calc_update_trd_vendor
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE function [dbo].[fn_hb_calc_update_trd_vendor](
@model_ID int,@rawland int,@Trade_id int ,@date datetime,@updatemethod int,@username varchar(50))
returns int
as
begin
--  select dbo.fn_hb_calc_update_trd_amt(22,50002,54,getdate(),9,16,3,2,'test')
set @date = (CONVERT(VARCHAR(10), @date, 101) + ' 23:59:59:998')

declare 
@result int,
@rfqTypeMode char(1),
@dateExpireNull datetime,
@updateDesc varchar(100)



set @result = 0 
set @rfqTypeMode = 'T'
set @dateExpireNull = dateadd(day,1,@date)




select @updateDesc = description from hb_rfq_update_method where id = @updatemethod


--------------------------------------------------------------------------------------------------
if @updateDesc = 'By Selected Contract'
begin--selected Contracts----------------------------------------------------------------------------------

select top 1 @result = supplier_id from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and @Trade_id = trade_ID and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date >= date_Effective and @date <=(isnull(DATE_EXPIRE,@dateExpireNull)) and def = 'T'
and RFQ_HeaderID in(select id from rfq_vendorselectionheader where rfqtype = 'C') and isnull(option_id,-1) = -1
end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Selected Demand'
begin--Selected Demand-----------------------------------------------------------------------

select top 1 @result = supplier_id from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and @Trade_id = trade_ID and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date >= date_Effective and @date <=(isnull(DATE_EXPIRE,@dateExpireNull)) and def = 'T'
and RFQ_HeaderID in(select id from rfq_vendorselectionheader where rfqtype = 'D') and isnull(option_id,-1) = -1


end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Lowest Price'
begin--By Lowest Price----------------------------------------------------------------------------
 

select top 1 @result = supplier_id from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and @Trade_id = trade_ID and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date >= date_Effective and @date <=(isnull(DATE_EXPIRE,@dateExpireNull)) and isnull(option_id,-1) = -1
order by cost

end
--------------------------------------------------------------------------------------------------
else if  @updateDesc = 'By Average Price'
begin--By Average Price---------------------------------------------------------------------------

select @result = -1
end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Highest Price'
begin--By Highest Price---------------------------------------------------------------------------

select top 1 @result = supplier_id from rfq_cost 
where model_id = @model_id and raw_land_cd = @rawland and @Trade_id = trade_ID and rfqc_type_moe = @rfqTypeMode
and Available = 1 and @date >= date_Effective and @date <=(isnull(DATE_EXPIRE,@dateExpireNull)) and isnull(option_id,-1) = -1
order by cost desc

end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Ranking Primary'
begin--By Ranking Primary-------------------------------------------------------------------------


select top 1 @result = supplier_id from rfq_cost c join
dbo.working_hb_rankingJoin s on s.supplier = c.supplier and s.rfqc_type_moe = c.rfqc_type_moe and 
s.raw_land_cd = c.raw_land_cd and c.model_id = s.model_id and isnull(s.option_id,-1) = isnull(c.option_id,-1) and 
--s.material_id = c.material_id and 
s.trade_id = c.trade_id
where c.rfqc_type_moe = @rfqTypeMode and c.model_id = @model_id and c.raw_land_cd = @rawland and
c.trade_id = @Trade_id and c.Available = 1 and
@date between c.date_Effective and (isnull(c.DATE_EXPIRE,@dateExpireNull))and s.ranking = 1 and s.username = @username


end
--------------------------------------------------------------------------------------------------
else if  @updateDesc = 'By Ranking Primary Alternate'
begin--By Ranking Primary Alternate---------------------------------------------------------------


select top 1 @result = supplier_id from rfq_cost c join
dbo.working_hb_rankingJoin s on s.supplier = c.supplier and s.rfqc_type_moe = c.rfqc_type_moe and 
s.raw_land_cd = c.raw_land_cd and c.model_id = s.model_id and isnull(s.option_id,-1) = isnull(c.option_id,-1) and 
--s.material_id = c.material_id and 
s.trade_id = c.trade_id
where c.rfqc_type_moe = @rfqTypeMode and c.model_id = @model_id and c.raw_land_cd = @rawland and
c.trade_id = @Trade_id and c.Available = 1 and
@date between c.date_Effective and (isnull(c.DATE_EXPIRE,@dateExpireNull))and s.ranking = 2 and s.username = @username


end
--------------------------------------------------------------------------------------------------
else if @updateDesc = 'By Ranking Average Alternate'
begin--By Ranking Average Alternate---------------------------------------------------------------

select @result = -1


end

if @result = -1
	set @result = null

return @result

end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_KBI_GetPeriodFields]') and xtype = 'FN')  
 drop Function fn_KBI_GetPeriodFields
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE function [dbo].[fn_KBI_GetPeriodFields]( @StartGL_year int, @EndGL_year int, @StartGL_per int, @EndGL_per int, @company_id int )
returns varchar(max)
as
begin
	declare @year int, @period int, @sql varchar(max)

	select @sql = '( 0'

	select @year = @StartGL_year
	select @period = @StartGL_per
	while( @year < @EndGL_year )
	begin	
		select @sql = @sql + ' 
	+ 
	isnull((select 0'
		
		while( @period <= 12 )
		begin
			select @sql = @sql + '
		+ isnull(per'+cast(@period as varchar)+',0) '
			select @period = @period + 1
		end
		
		select @sql = @sql + '
	from KBI_YEARLY_ACCOUNT_BALANCE k
	where k.company_id='+CAST(@company_id as varchar)+' and k.account_number=w.account_number and k.gl_year='+cast(@year as varchar)+' and k.USERNAME=w.USERNAME ),0) '
			
		select @period = 1
		select @year = @year + 1
	end

	if( @year = @EndGL_year )
	begin
		if( @StartGL_year <> @EndGL_year )
			select @period = 1
			
		--loop from first period to @EndGL_per
		select @sql = @sql + ' 
	+ 	
	isnull((select 0'
		
		while( @period <= @EndGL_per )
		begin
			select @sql = @sql + '
		+ isnull(per'+cast(@period as varchar)+',0) '
			select @period = @period + 1
		end
		
		select @sql = @sql + '
	from KBI_YEARLY_ACCOUNT_BALANCE k
	where k.company_id='+CAST(@company_id as varchar)+' and k.account_number=w.account_number and k.gl_year='+cast(@year as varchar)+' and k.USERNAME=w.USERNAME ),0) '	
	end

	select @sql = @sql + ' 
	)'
	--print @sql
	
	return @sql
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_NextTimeInterval]') and xtype = 'FN')  
 drop Function fn_NextTimeInterval
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create function fn_NextTimeInterval( @StartTime datetime, @Period varchar(25), @PeriodAmt int )
returns decimal(15,10)
as 
begin

	declare 
	@Interval decimal(15,10),
	@DayAmt decimal(15,10)
	
	if( @Period = 'dd' )
	begin
		set @DayAmt = @PeriodAmt
	end
	else if( @Period = 'hh' )
	begin
		set @DayAmt = @PeriodAmt / cast(24 as float)
	end
	else if( @Period = 'mi' )
	begin
		set @DayAmt = @PeriodAmt / cast(1440 as float)
	end
	else if( @Period = 'ss' )
	begin
		set @DayAmt = @PeriodAmt / cast(86400 as float)
	end

	select @Interval =  ( @DayAmt - ( cast( getdate() - @StartTime as decimal(15,10)) % @DayAmt ) ) 
	
	return @Interval 
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_Num_ToWords]') and xtype = 'FN')  
 drop Function fn_Num_ToWords
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create function fn_Num_ToWords (

	@Number Numeric (38, 0)

) RETURNS VARCHAR(8000) 

AS BEGIN

DECLARE @inputNumber VARCHAR(38)
DECLARE @NumbersTable TABLE (number CHAR(2), word VARCHAR(10))
DECLARE @outputString VARCHAR(8000)
DECLARE @length INT
DECLARE @counter INT
DECLARE @loops INT
DECLARE @position INT
DECLARE @chunk CHAR(3) -- for chunks of 3 numbers
DECLARE @tensones CHAR(2)
DECLARE @hundreds CHAR(1)
DECLARE @tens CHAR(1)
DECLARE @ones CHAR(1)

IF @Number = 0 Return 'Zero'

-- initialize the variables
SELECT @inputNumber = CONVERT(varchar(38), @Number)
     , @outputString = ''
     , @counter = 1
SELECT @length   = LEN(@inputNumber)
     , @position = LEN(@inputNumber) - 2
     , @loops    = LEN(@inputNumber)/3

-- make sure there is an extra loop added for the remaining numbers
IF LEN(@inputNumber) % 3 <> 0 SET @loops = @loops + 1

-- insert data for the numbers and words
INSERT INTO @NumbersTable   SELECT '00', ''
    UNION ALL SELECT '01', 'one'      UNION ALL SELECT '02', 'two'
    UNION ALL SELECT '03', 'three'    UNION ALL SELECT '04', 'four'
    UNION ALL SELECT '05', 'five'     UNION ALL SELECT '06', 'six'
    UNION ALL SELECT '07', 'seven'    UNION ALL SELECT '08', 'eight'
    UNION ALL SELECT '09', 'nine'     UNION ALL SELECT '10', 'ten'
    UNION ALL SELECT '11', 'eleven'   UNION ALL SELECT '12', 'twelve'
    UNION ALL SELECT '13', 'thirteen' UNION ALL SELECT '14', 'fourteen'
    UNION ALL SELECT '15', 'fifteen'  UNION ALL SELECT '16', 'sixteen'
    UNION ALL SELECT '17', 'seventeen' UNION ALL SELECT '18', 'eighteen'
    UNION ALL SELECT '19', 'nineteen' UNION ALL SELECT '20', 'twenty'
    UNION ALL SELECT '30', 'thirty'   UNION ALL SELECT '40', 'forty'
    UNION ALL SELECT '50', 'fifty'    UNION ALL SELECT '60', 'sixty'
    UNION ALL SELECT '70', 'seventy'  UNION ALL SELECT '80', 'eighty'
    UNION ALL SELECT '90', 'ninety'   

WHILE @counter <= @loops BEGIN

	-- get chunks of 3 numbers at a time, padded with leading zeros
	SET @chunk = RIGHT('000' + SUBSTRING(@inputNumber, @position, 3), 3)

	IF @chunk <> '000' BEGIN
		SELECT @tensones = SUBSTRING(@chunk, 2, 2)
		     , @hundreds = SUBSTRING(@chunk, 1, 1)
		     , @tens = SUBSTRING(@chunk, 2, 1)
		     , @ones = SUBSTRING(@chunk, 3, 1)

		-- If twenty or less, use the word directly from @NumbersTable
		IF CONVERT(INT, @tensones) <= 20 OR @Ones='0' BEGIN
			SET @outputString = (SELECT word 
                                      FROM @NumbersTable 
                                      WHERE @tensones = number)
                   + CASE @counter WHEN 1 THEN '' -- No name
                       WHEN 2 THEN ' thousand ' WHEN 3 THEN ' million '
                       WHEN 4 THEN ' billion '  WHEN 5 THEN ' trillion '
                       WHEN 6 THEN ' quadrillion ' WHEN 7 THEN ' quintillion '
                       WHEN 8 THEN ' sextillion '  WHEN 9 THEN ' septillion '
                       WHEN 10 THEN ' octillion '  WHEN 11 THEN ' nonillion '
                       WHEN 12 THEN ' decillion '  WHEN 13 THEN ' undecillion '
                       ELSE '' END
                               + @outputString
		    END
		 ELSE BEGIN -- break down the ones and the tens separately

             SET @outputString = ' ' 
                            + (SELECT word 
                                    FROM @NumbersTable 
                                    WHERE @tens + '0' = number)
					         + '-'
                             + (SELECT word 
                                    FROM @NumbersTable 
                                    WHERE '0'+ @ones = number)
                   + CASE @counter WHEN 1 THEN '' -- No name
                       WHEN 2 THEN ' thousand ' WHEN 3 THEN ' million '
                       WHEN 4 THEN ' billion '  WHEN 5 THEN ' trillion '
                       WHEN 6 THEN ' quadrillion ' WHEN 7 THEN ' quintillion '
                       WHEN 8 THEN ' sextillion '  WHEN 9 THEN ' septillion '
                       WHEN 10 THEN ' octillion '  WHEN 11 THEN ' nonillion '
                       WHEN 12 THEN ' decillion '   WHEN 13 THEN ' undecillion '
                       ELSE '' END
                            + @outputString
		END

		-- now get the hundreds
		IF @hundreds <> '0' BEGIN
			SET @outputString  = (SELECT word 
                                      FROM @NumbersTable 
                                      WHERE '0' + @hundreds = number)
					            + ' hundred ' 
                                + @outputString
		END
	END

	SELECT @counter = @counter + 1
	     , @position = @position - 3

END

-- Remove any double spaces
SET @outputString = LTRIM(RTRIM(REPLACE(@outputString, '  ', ' ')))
SET @outputstring = UPPER(LEFT(@outputstring, 1)) + SUBSTRING(@outputstring, 2, 8000)


RETURN @outputString -- return the result
END

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_SchemaSuggestedFriendlyFieldName]') and xtype = 'FN')  
 drop Function fn_SchemaSuggestedFriendlyFieldName
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create function fn_SchemaSuggestedFriendlyFieldName(@FieldName varchar(100)) returns varchar(200) as 
begin
	--declare @FieldName varchar(8000) select @FieldName = 'HELLO_HOW_ARE_YOU'
	declare @i int															  
	select @FieldName = replace(lower(@FieldName), '_', ' ')
	select @FieldName = upper(substring(@FieldName,1,1)) + substring(@FieldName,2,len(@FieldName))
	select @i = 1
	while @i < len(@FieldName)   and @i < 1000
	begin
		if substring(@FieldName,@i,1) = ' '															   
		begin				
			select @FieldName = substring(@FieldName,1,@i) + upper(substring(@FieldName,@i+1,1)) + substring(@FieldName,@i+2,len(@FieldName))
		end
		set @i = @i + 1
	end	 
	--select @FieldName
	return @FieldName
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_tableprefix]') and xtype = 'FN')  
 drop Function fn_tableprefix
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE function [dbo].[fn_tableprefix](@companyID int,@flavour varchar(10))
returns varchar(100)
as
begin
--flavours
--Web, TR,HR ,Whse ,TAC ,Comm ,Res ,Land
 declare 
@RetVal varchar(100),
@dbName varchar(500),
@serverName varchar(500)
	
if(@flavour = 'TR')
	begin
		select @dbname =isnull(TreasuryDBName,''),@serverName = isnull(sqlservername,'') from companies where autoId = @companyID
	end
else if(@flavour = 'HR')
	begin
		select @dbname =isnull(HumanDBName,''),@serverName = isnull(sqlservername,'') from companies where autoId = @companyID		
	end
else if(@flavour = 'Whse')
	begin
		select @dbname =isnull(WarehouseDBName,''),@serverName = isnull(sqlservername,'') from companies where autoId = @companyID		
	end
else if(@flavour = 'TAC')
	begin
		select @dbname =isnull(TACDBName,''),@serverName = isnull(sqlservername,'') from companies where autoId = @companyID		
	end
else if(@flavour = 'DOCK')
	begin
		select @dbname =isnull(DocketDBName,''),@serverName = isnull(sqlservername,'') from companies where autoId = @companyID		
	end
else --com, res, land and web
	begin
		select @dbname =isnull(DBName,''),@serverName = isnull(servername,'') from dbs where flavour = @flavour
		if(@dbname = '' or @serverName = '')
			set @RetVal = 'dbo.'
	end
if(@RetVal is null)
begin
	if @serverName not like '[%' and @serverName not like '%]'
		select @serverName = '[' + @serverName + ']'		
	set @RetVal = @serverName +'.'+@dbName+'.dbo.'
end
return @RetVal
end





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[PP_SetNextRunDate]') and xtype = 'FN')  
 drop Function PP_SetNextRunDate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create function [dbo].[PP_SetNextRunDate]

(
   @Report_Schedule_ID int, @Run_Date  datetime
)
returns   varchar(500)

--declare @Report_Schedule_ID int, @Run_Date datetime
--select @Report_Schedule_ID = 61, @Run_Date = '2015-04-06 01:00:00.000'
begin

declare  @Initial_Run_Start_Date  datetime, @Next_Run_Date datetime, @Last_Run_Date datetime,--@Run_Date datetime,
        @Run_Interval_Period varchar(2), @Run_Interval int, @Run_Start_Point  Varchar(30), @Days_Following_Start_Run_Start_Point int,
        @run_time time, @date datetime

select  @Initial_Run_Start_Date= Initial_Run_Start_Date,
       @Run_Interval_Period = Run_Interval_Period, @Run_Interval = Run_Interval,  @Run_Start_Point = Run_Start_Point,
        @Days_Following_Start_Run_Start_Point = isnull(Days_Following_Start_Run_Start_Point,0),@run_time = Run_Time
      
from Report_Schedule 
where ID = @Report_Schedule_ID


select  @Run_Date =Convert(datetime,Convert(varchar,@Run_Date,101))

declare @year  int, @month int, @day int
 
select @year = DATEPART(yy, @Run_Date), @month = DATEPART(mm, @Run_Date)
		
if @Run_Interval_Period = 'Y' 
begin
	 select @year = @year + @Run_Interval, @month = 1, @day = 1
	
	 select @Next_Run_Date = CAST(CAST(@year AS VARCHAR(4)) + RIGHT('0' + CAST(@month AS VARCHAR(2)), 2) + RIGHT('0' + CAST(@day AS VARCHAR(2)), 2) 
             AS DATETIME)
      
end
else if @Run_Interval_Period = 'M'
begin
    
    select @day = 1
    select @month = @month + @Run_Interval
    
    if  @month > 12
	begin
		select @month = @month-12, @year = @year +1
	end
      
    select @Next_Run_Date = CAST(CAST(@year AS VARCHAR(4)) + RIGHT('0' + CAST(@month AS VARCHAR(2)), 2) + RIGHT('0' + CAST(@day AS VARCHAR(2)), 2) 
             AS DATETIME)
    
end
else if @Run_Interval_Period = 'W' 
begin
   select @Next_Run_Date = DATEADD(wk,DATEDIFF(wk,0,@Run_Date),@Run_Interval *7 )
end
else if @Run_Interval_Period = 'D' 
begin
    select @Next_Run_Date  = DATEADD (dd, @Run_Interval, @Run_Date)  
end

select @Next_Run_Date  = DATEADD (dd, @Days_Following_Start_Run_Start_Point, @Next_Run_Date)  

select @Next_Run_Date = cast( @Next_Run_Date + @run_time as DATETIME )
--select @Next_Run_Date  'Next_Run_Date'

if @Next_Run_Date is null
	set @Next_Run_Date = @Initial_Run_Start_Date
	
--select @Next_Run_Date  'Next_Run_Date'	
	return   @Next_Run_Date      
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scFNGetKnownAs]') and xtype = 'FN')  
 drop Function scFNGetKnownAs
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE FUNCTION dbo.scFNGetKnownAs

	(@LeadID int)

	RETURNS varchar(64)

AS
BEGIN
	DECLARE	@KnownAs	varchar(64)

	SELECT 	@KnownAs 	= KnownAs 
	FROM	scLeadAddress
	WHERE	LeadID		= @LeadID


	RETURN @KnownAs
END







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scFNGetProject]') and xtype = 'FN')  
 drop Function scFNGetProject
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





CREATE  FUNCTION scFNGetProject(@SalesManID int)

	RETURNS int

AS
BEGIN
	DECLARE	@Proj_ID	int

	SELECT 	@Proj_ID 	= Proj_ID 
	FROM	User_Login
	WHERE	User_Login_ID	= @SalesManID


	RETURN @Proj_ID
END







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WMS_TAB_GetPrinter]') and xtype = 'FN')  
 drop Function WMS_TAB_GetPrinter
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
create function dbo.WMS_TAB_GetPrinter (@StationID int, @whse_id int, @CrystalName varchar(max)) returns varchar(max) as
begin
	declare @Printer varchar(max)
	select @Printer = Printer 
	from Report_Printer_Setup 
	where Stationid = @StationID and whse_id = @whse_id and CrystalName = @CrystalName

	return @Printer
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[_DOC_DL_File]') and xtype = 'P ')  
 drop Procedure _DOC_DL_File
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc [dbo].[_DOC_DL_File] @DocumentID Int 
as
begin
	select [Image] 
	from DocumentStore
	where DocumentID=@DocumentID
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[_OperateOn]') and xtype = 'P ')  
 drop Procedure _OperateOn
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[_OperateOn] @name varchar(200), @Operation varchar(20) = 'View' as
--declare @name varchar(200) = 'CaseWorker', @Operation varchar(20) = 'Register'
--declare @name varchar(200) = 'CaseWorker', @Operation varchar(20) = 'View'
--declare @name varchar(200) = 'CaseWorker', @Operation varchar(20) = 'Delete'
--declare @name varchar(200) = 'CaseWorker', @Operation varchar(20) = 'Drop'

declare @DatasetID int, @TableID int, @DataProviderID int, @ObjectType varchar(100)
select @DatasetID = DatasetID, @TableID = TableID, @DataProviderID = DataProviderID from _Dataset where Name = @name

select @ObjectType = Case type_desc when 'SQL_STORED_PROCEDURE' then 'Proc' when 'USER_TABLE' then 'Table' when 'View' then 'View' end from sys.objects where name = @name

begin tran
	begin try
		if @Operation = 'View'
		begin
			select '***Database Object', * from sys.objects where name = @name
			select '***_Dataset', * from _Dataset where DatasetID = @DatasetID
			select '***_DatasetColumn', * from _DatasetColumn where DatasetID = @DatasetID																											
			if @TableID is null
			begin
				select '***_DataProvider', * from _DataProvider where DataProviderID = @DataProviderID
				select '***_DataProviderTable', * from _DataProviderTable where DataProviderID = @DataProviderID
				select '***_DataProviderColumnMap', * from _DataProviderColumnMap where DataProviderID = @DataProviderID
			end
			else
			begin
				select '***_Table', * from _Table where TableID = @TableID
				select '***_TableColumn', * from _TableColumn where TableID = @TableID
			end
		end
		else if @Operation = 'Delete' or @Operation = 'Drop'
		begin
			declare @SQL varchar(max) = ' drop ' + @ObjectType + ' [' + @Name + ']'
			if @TableID is null
			begin
				select '***_DataProviderColumnMap', * from _DataProviderColumnMap where DataProviderID = @DataProviderID
				delete _DataProviderColumnMap where DataProviderID = @DataProviderID
				select '***_DataProviderTable', * from _DataProviderTable where DataProviderID = @DataProviderID		 
				delete _DataProviderTable where DataProviderID = @DataProviderID		 
				select '***_DataProvider', * from _DataProvider where DataProviderID = @DataProviderID
				delete _DataProvider where DataProviderID = @DataProviderID
			end
			else
			begin																			 
				select '***_TableColumn', * from _TableColumn where TableID = @TableID
				delete _TableColumn where TableID = @TableID
				select '***_Table', * from _Table where TableID = @TableID
				delete _Table where TableID = @TableID
			end																																																
			select '***_DatasetColumn', * from _DatasetColumn where DatasetID = @DatasetID
			delete _DatasetColumn where DatasetID = @DatasetID
			select '***_Dataset', * from _Dataset where DatasetID = @DatasetID
			delete _Dataset where DatasetID = @DatasetID
			if @Operation = 'Drop'
			begin
				print @SQL
				exec(@SQL)
			end
		end
		else if @Operation = 'Register'
		begin
			if @ObjectType = 'Table'
			begin
				exec _RegisterReflexTable @name, 1
			end
			--<TODO>: add support for views and procs
			
		end
	end try
	begin catch
		select '***Error', ERROR_MESSAGE(), ERROR_LINE(), ERROR_NUMBER()
		rollback tran
		return
	end catch
commit tran
select 'The ' + @Operation + ' operation succeeded on the ' + @ObjectType + ' object ' + @name




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[_RegisterReflexProcedure]') and xtype = 'P ')  
 drop Procedure _RegisterReflexProcedure
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE procedure [dbo].[_RegisterReflexProcedure] @Proc varchar(150), @TempTableName varchar(150), @Tablename varchar(150), @ViewResults bit = 1 as
--select t.*, tc.ColumnID, tc.Name as ColumnName into #xtext from _Table t join _TableColumn tc on t.TableID = tc.TableID
--declare @Proc varchar(150) = 'p_test', @TempTableName varchar(150) = '#xtext', @Tablename varchar(150) = '_table', @ViewResults bit = 1
begin transaction
begin try
declare @DataProviderID int = -1, @DefaultTableID int = -1, @DatasetID int = -1,	@DataProviderTableID int = -1

select @DefaultTableID = TableID from _Table where Name = @Tablename

if not exists(select * from _DataProvider where Name = @Proc)
begin
	insert _DataProvider(Name, Type)
	select @Proc, 'SQL_STORED_PROCEDURE'	  	
	select @DataProviderID = SCOPE_IDENTITY()
																						
	insert _DataProviderTable(Name, DataProviderID, TableID, TableName, BaseTable, WhereJoin)
	select @Proc, @DataProviderID, @DefaultTableID, @Tablename, 1, ''	
	select @DataProviderTableID = SCOPE_IDENTITY()																					
																							
	insert _Dataset(TableID, DataProviderID, Name, Caption, TypeDescription, Sequence)
	select null, @DataProviderID, @Proc, dbo._ResolveCamelCase(@Proc), 'SQL_STORED_PROCEDURE', 1		
	select @DatasetID = SCOPE_IDENTITY()
end
else
begin
	select @DataProviderTableID = DataProviderTableID from _DataProviderTable where Name = @Proc
	select @DataProviderID = DataProviderID from _DataProvider where Name = @Proc
	select @DatasetID = DatasetID from _Dataset where Name = @Proc
end
										  	
--do dataset columns
insert _DatasetColumn(DatasetID, Name, Caption, Sequence, TableColumnID,
Visible, Mask, AllowEdit, LookupFieldList, LookupDatabase, 
ColumnOrder, SystemTypeID, SystemType, MaxLength, Precision, Scale, IsNullable, IsComputed, IsPK, 
FK_DBFlavour, FK_ObjectID, FK_IsDisabled, FK_Name, FK_TableName, FK_ColumnName)
select @DatasetID, c.name, dbo._ResolveCamelCase(c.name), 1, null,
1, null, 0, null, null,
c.colorder, c.type, ty.name, c.length, c.prec, c.scale, c.isnullable, c.iscomputed,
isnull(OBJECTPROPERTY(OBJECT_ID(kcu.constraint_name), 'IsPrimaryKey'),0),
null, null, null, null, null, null
from tempdb..syscolumns c		 														  
left outer join _TableColumn tc on tc.Name = c.name and tc.TableID = @DefaultTableID
left outer join _Table t on t.Name = @Tablename and tc.TableID = t.TableID
left outer join INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu on kcu.column_name = c.name and kcu.table_name = t.name
left outer join sys.types ty on ty.system_type_id = c.xtype																							 
left outer join sys.foreign_key_columns fc on fc.parent_object_id = c.id and fc.parent_column_id = c.colorder
left outer join sys.foreign_keys mc on mc.object_id = fc.constraint_object_id		
left outer join sys.tables parent on fc.referenced_object_id = parent.object_id
left outer join sys.columns parentcol on fc.referenced_object_id = parentcol.object_id and fc.referenced_column_id = parentcol.column_id 
where id = object_id(N'tempdb..' + @TempTableName) 
and c.name not in (select name from _DatasetColumn where DatasetID = @DatasetID)
									

insert _DataProviderColumnMap(DataProviderTableID, DataProviderID, Name, ReferenceTableID, ReferenceTableColumnID, Visible, Updateable)
select @DataProviderTableID, @DataProviderID, c.name, @DefaultTableID, tc.TableColumnID, 1, Case when tc.TableColumnID is null then 0 else 1 end
from tempdb..syscolumns c																  
left outer join _TableColumn tc on tc.Name = c.name and tc.TableID = @DefaultTableID
left outer join _Table t on t.Name = @Tablename and tc.TableID = t.TableID
where id = object_id(N'tempdb..' + @TempTableName)
and c.name not in (select name from _DataProviderColumnMap where DataProviderID = @DataProviderID)

if @ViewResults = 1
begin
	select '_DataProvider',* from _DataProvider where Name = @Proc
	select '_DataProviderTable',* from _DataProviderTable where Name = @Proc
	select '_DataProviderColumnMap', * from _DataProviderColumnMap where DataProviderID = @DataProviderID
	select '_Dataset', * from _Dataset where Name = @Proc
	select '_DatasetColumn', * from _DatasetColumn where DatasetID = @DatasetID
end
end try
begin catch
	rollback transaction
	select 'Error : ' + ERROR_MESSAGE()
	return
end catch
commit transaction


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[_RegisterReflexTable]') and xtype = 'P ')  
 drop Procedure _RegisterReflexTable
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create procedure [dbo].[_RegisterReflexTable] @Tablename varchar(150), @ViewResults bit = 1 as
--declare @Tablename varchar(150) = 'Department', @ViewResults bit = 1

declare @TableID int = -1, @DefaultTableID int = -1, @DatasetID int = -1

select @DefaultTableID = TableID from _Table where Name = @Tablename

if not exists(select * from _Table where Name = @Tablename)
begin
	insert _Table(Name, TypeDescription, ObjectID)
	select @Tablename, 'USER_TABLE', Object_id
	from sys.tables where name = @Tablename
	select @TableID = SCOPE_IDENTITY()	 	
	
	insert _Dataset(TableID, DataProviderID, Name, Caption, TypeDescription, Sequence)
	select @TableID, null, @Tablename, dbo._ResolveCamelCase(@Tablename), 'USER_TABLE', 1	
	select @DatasetID = SCOPE_IDENTITY()
	
end
else
begin
	select @TableID = TableID from _Table where Name = @Tablename
	select @DatasetID = DatasetID from _Dataset where Name = @Tablename
end

--do table columns
insert _TableColumn(TableID, Name, ColumnID, DefaultObjectID)
select @TableID, c.name, c.column_id, c.default_object_id
from sys.columns c 
where object_id = object_id(@Tablename) and c.name not in (select name from _TableColumn where TableID = @TableID)

--do dataset columns
insert _DatasetColumn(DatasetID, Name, Caption, Sequence, TableColumnID)
select @DatasetID, c.name, dbo._ResolveCamelCase(c.name), c.column_id, tc.TableColumnID 
from sys.columns c 
left outer join _Table t on c.object_id = object_id(t.Name)
left outer join _TableColumn tc on tc.TableID = t.TableID and c.name = tc.Name
where object_id = object_id(@Tablename) and c.name not in (select name from _DatasetColumn where DatasetID = @DatasetID)

if @ViewResults = 1
begin
	select '_Table', * from _Table where Name = @Tablename
	select '_TableColumn', * from _TableColumn where TableID = @TableID
	select '_Dataset', * from _Dataset where Name = @Tablename
	select '_DatasetColumn', * from _DatasetColumn where TableColumnID in (select TableColumnID from _TableColumn where TableID = @TableID)
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[_RegisterReflexView]') and xtype = 'P ')  
 drop Procedure _RegisterReflexView
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create procedure [dbo].[_RegisterReflexView] @View varchar(150), @Tablename varchar(150), @ViewResults bit = 1  as
--declare @View varchar(150) = '___BTest', @Tablename varchar(150) = '___Base', @ViewResults bit = 1  

declare @DataProviderID int = -1, @DefaultTableID int = -1, @DatasetID int = -1,	@DataProviderTableID int = -1

select @DefaultTableID = TableID from _Table where Name = @Tablename

if not exists(select * from _DataProvider where Name = @View)
begin
	insert _DataProvider(Name, Type)
	select @View, 'VIEW'	  	
	select @DataProviderID = SCOPE_IDENTITY()	 	
	
	insert _DataProviderTable(Name, DataProviderID, TableID, TableName, BaseTable, WhereJoin)
	select @View, @DataProviderID, @DefaultTableID, @Tablename, 1, ''	
	select @DataProviderTableID = SCOPE_IDENTITY()
	
	insert _Dataset(TableID, DataProviderID, Name, Caption, TypeDescription, Sequence)
	select null, @DataProviderID, @View, dbo._ResolveCamelCase(@View), 'VIEW', 1	
	select @DatasetID = SCOPE_IDENTITY()
	
end
else
begin
	select @DataProviderTableID = DataProviderTableID from _DataProviderTable where Name = @View 
	select @DataProviderID = DataProviderID from _DataProvider where Name = @View
	select @DatasetID = DatasetID from _Dataset where Name = @View
end 

--insert any new dataprovider
insert _DataProviderTable(Name, DataProviderID, TableID, TableName, BaseTable, WhereJoin)
select distinct @View, @DataProviderID, t.TableID, cols.referenced_entity_name, 0, 'Not Set'
from sys.sql_expression_dependencies objs
outer apply sys.dm_sql_referenced_entities ( OBJECT_SCHEMA_NAME(objs.referencing_id) + N'.' + object_name(objs.referencing_id), N'OBJECT' ) as cols
join _Table t on t.Name = cols.referenced_entity_name
where objs.referencing_id = object_id(@View) and referenced_minor_name is null
and cols.referenced_entity_name not in (select TableName from _DataProviderTable where DataProviderID = @DataProviderID)

--do dataset columns
insert _DatasetColumn(DatasetID, Name, Caption, Sequence, TableColumnID)
select @DatasetID, c.name, dbo._ResolveCamelCase(c.name), 1, null
from sys.columns c 
where object_id = object_id(@View) and c.name not in (select name from _DatasetColumn where DatasetID = @DatasetID)
																			  	
insert _DataProviderColumnMap(DataProviderTableID, DataProviderID, Name, ReferenceTableID, ReferenceTableColumnID, Visible, Updateable)
select @DataProviderTableID, @DataProviderID, c.name, @DefaultTableID, tc.TableColumnID, 1, Case when tc.TableColumnID is null then 0 else 1 end
from sys.columns c 
left outer join _TableColumn tc on tc.Name = c.name and tc.TableID = @DefaultTableID
left outer join _Table t on t.Name = @Tablename and tc.TableID = t.TableID
where object_id = object_id(@View) and c.name not in (select name from _DataProviderColumnMap where DataProviderID = @DataProviderID)

if @ViewResults = 1
begin
	select '_DataProvider',* from _DataProvider where Name = @View
	select '_DataProviderTable',* from _DataProviderTable where Name = @View
	select '_DataProviderColumnMap', * from _DataProviderColumnMap where DataProviderID = @DataProviderID
	select '_Dataset', * from _Dataset where Name = @View
	select '_DatasetColumn', * from _DatasetColumn where DatasetID = @DatasetID
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[_RetreiveDataset]') and xtype = 'P ')  
 drop Procedure _RetreiveDataset
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[_RetreiveDataset] @Dataset varchar(150), @ContactID int as
--declare @Dataset varchar(150) = 'PartyBenefit', @ContactID int = 6713
--declare @Dataset varchar(150) = '_Dataset', @ContactID int = 6713
	
	
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#_TableColumn'))
drop table #_TableColumn
CREATE TABLE #_TableColumn(
	ID int IDENTITY(1,1) NOT NULL,	
	DatasetID int,--raw for security
	DatasetName varchar(150),--raw for security 	
	DatasetCaption varchar(200),
	DatasetTypeDescription varchar(100),
	DatasetSequence int,
	FriendlyRecordReferral varchar(450),
	DatasetColumnID int,--raw column for security
	DatasetAccess char,		
	LogDatasetInsert bit,
	LogDatasetEdit bit,
	LogDatasetDelete bit,
	LogDatasetView bit,
	DatasetColumnAccess char, 
	LogField bit,
	Visible bit,
	Mask varchar(300),
	AllowEdit bit,
	AllowManualUpdate bit,
	LookupFieldList varchar(max),
	LookupDatabase varchar(200),	
	LookupWhereClause varchar(max),
	TableID int,--mapped end point table for updates
	TableName varchar(150),--same as above...name
	TableColumnID int,--mapped end point column 
	TableColumnName varchar(150),--mapped end point column 											
	--raw data object definitions from the actual database (not stored)
	Caption varchar(200),
	FieldName varchar(150) NOT NULL,	
	ColumnID int NOT NULL,	
	SystemTypeID int NOT NULL,
	SystemType varchar(100),
	UserTypeID int NULL,
	RuleObjectID int NULL,
	DefaultObjectID int NULL,
	MaxLength int NULL,
	Precision int NULL,
	Scale int NULL,
	RoundTo int,
	ControlType	varchar(30), --Button, ComboBox, Lookup, SpinEdit, DateTime, Time, Image, Memo, CheckBox, Text, Calculator
	IsNullable bit,
	IsIdentity bit,
	IsComputed bit,
	IsPK bit,
	DefaultValue varchar(max),	
	FK_DBFlavour varchar(50) not null default 'TR',	--<TODO>: add dataset cross database foreign keys (hack job mainly for contactid)
	FK_ObjectID int,
	FK_IsDisabled bit,
	FK_Name varchar(150),	
	FK_TableName varchar(150),
	FK_ColumnName varchar(150),
	BaseTable varchar(150))

/*
	Access is based on:
		Departmental Limits
		is superceeded by user limits
		- If no limitations are encountered, then full access
		- Dataset limitations N=None, R=Readonly, I=Insert (+Read), E=Edit(+Read), *if no entry then assume full access
		- DatasetColumn limitations N=None, R=Readonly, *if no entry then assume full access
*/
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#DatasetLimits'))
drop table #DatasetLimits
CREATE TABLE #DatasetLimits(
	id int not null identity(1,1) primary key,
	AccessLevel char,--C=Contact, D=Department
	DatasetID int,
	AccessType varchar(10))

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#DatasetColumnLimits'))
drop table #DatasetColumnLimits
CREATE TABLE #DatasetColumnLimits(
	id int not null identity(1,1) primary key,
	AccessLevel char,--C=Contact, D=Department
	DatasetColumnID int,
	AccessType varchar(10))

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#DatasetLog'))
drop table #DatasetLog
CREATE TABLE #DatasetLog(
	id int not null identity(1,1) primary key,
	AccessLevel char,--C=Contact, D=Department
	DatasetID int,	
	LogDatasetInsert bit,
	LogDatasetEdit bit,
	LogDatasetDelete bit,
	LogDatasetView bit)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#DatasetColumnLog'))
drop table #DatasetColumnLog
CREATE TABLE #DatasetColumnLog(
	id int not null identity(1,1) primary key,
	AccessLevel char,--C=Contact, D=Department
	DatasetColumnID int,
	LogField bit)

--find out which kind of object it is
declare @Type varchar(50) = '', @ObjectID int = null, @TableID int = -1, @DatasetProviderID int = -1, @DepartmentID int,
@DatasetID int = -1

select @DepartmentID = d.ID 
from MLUSER m join DEPARTMENT d on d.NAME = m.DEPARTMENT where ContactID = @ContactID

if @DatasetID != -1
	select @Type = type_desc, @ObjectID = object_id, @Dataset = d.Name, @TableID = d.TableID, @DatasetProviderID = d.DataProviderID
	from _Dataset d 
	join sys.objects s on s.name = d.Name where DatasetID = @DatasetID
else if @Dataset != ''
	select @Type = s.type_desc, @ObjectID = s.object_id, @DatasetID = d.DatasetID, @TableID = d.TableID, @DatasetProviderID = d.DataProviderID
	from _Dataset d 
	join sys.objects s on s.name = d.Name where d.Name = @Dataset

--Security and logging
--do contact level first
insert #DatasetLimits
select 'C', l.DatasetID, l.AccessType
from _DatasetLimitation l
join _Dataset d on d.DatasetID = l.DatasetID
join _SecurityAccessType a on a.SecurityAccessTypeID = l.SecurityAccessTypeID
where d.DatasetID = @DatasetID and a.Description = 'Contact' and l.ReferenceID = @ContactID

insert #DatasetLog
select 'C', l.DatasetID, l.LogInsert, l.LogEdit, l.LogDelete, l.LogView
from _LogDatasetSetup l
join _Dataset d on d.DatasetID = l.DatasetID
join _SecurityAccessType a on a.SecurityAccessTypeID = l.SecurityAccessTypeID
where d.DatasetID = @DatasetID and a.Description = 'Contact' and l.ReferenceID = @ContactID
																														 
--do department level
insert #DatasetLimits
select 'D', l.DatasetID, l.AccessType
from _DatasetLimitation l
join _Dataset d on d.DatasetID = l.DatasetID
join _SecurityAccessType a on a.SecurityAccessTypeID = l.SecurityAccessTypeID
where d.DatasetID = @DatasetID and a.Description = 'Department' and l.ReferenceID = @DepartmentID
and l.DatasetID not in (select DatasetID from #DatasetLimits)

insert #DatasetLog
select 'D', l.DatasetID, l.LogInsert, l.LogEdit, l.LogDelete, l.LogView
from _LogDatasetSetup l
join _Dataset d on d.DatasetID = l.DatasetID
join _SecurityAccessType a on a.SecurityAccessTypeID = l.SecurityAccessTypeID
where d.DatasetID = @DatasetID and a.Description = 'Department' and l.ReferenceID = @ContactID

			
--do contact level first
insert #DatasetColumnLimits
select 'C', l.DatasetColumnID, l.AccessType
from _DatasetColumnLimitation l
join _DatasetColumn c on c.DatasetColumnID = l.DatasetColumnID
join _SecurityAccessType a on a.SecurityAccessTypeID = l.SecurityAccessTypeID
where c.DatasetID = @DatasetID and a.Description = 'Contact' and l.ReferenceID = @ContactID

insert #DatasetColumnLog
select 'C', l.DatasetColumnID, 1
from _LogDatasetColumnSetup l
join _DatasetColumn c on c.DatasetColumnID = l.DatasetColumnID
join _SecurityAccessType a on a.SecurityAccessTypeID = l.SecurityAccessTypeID
where c.DatasetID = @DatasetID and a.Description = 'Contact' and l.ReferenceID = @ContactID
																														 
--do department level
insert #DatasetColumnLimits
select 'D', l.DatasetColumnID, l.AccessType
from _DatasetColumnLimitation l
join _DatasetColumn c on c.DatasetColumnID = l.DatasetColumnID
join _SecurityAccessType a on a.SecurityAccessTypeID = l.SecurityAccessTypeID
where c.DatasetID = @DatasetID and a.Description = 'Department' and l.ReferenceID = @DepartmentID
and l.DatasetColumnID not in (select DatasetColumnID from #DatasetColumnLimits)

insert #DatasetColumnLog
select 'D', l.DatasetColumnID, 1
from _LogDatasetColumnSetup l
join _DatasetColumn c on c.DatasetColumnID = l.DatasetColumnID
join _SecurityAccessType a on a.SecurityAccessTypeID = l.SecurityAccessTypeID
where c.DatasetID = @DatasetID and a.Description = 'Department' and l.ReferenceID = @ContactID


if @DatasetID != -1
begin	  
	if @Type = 'USER_TABLE'
	begin	  	
		insert #_TableColumn(DatasetID, DatasetName, DatasetCaption, DatasetTypeDescription, DatasetSequence,		 
		DatasetColumnID, DatasetAccess, DatasetColumnAccess, Visible, Mask, AllowEdit, AllowManualUpdate, LookupFieldList, LookupDatabase, LookupWhereClause,
		TableID, TableName, TableColumnID, TableColumnName, FieldName, Caption, ColumnID,
		SystemTypeID, SystemType, UserTypeID, RuleObjectID, DefaultObjectID, MaxLength, Precision, Scale, RoundTo,
		IsNullable, IsIdentity, IsComputed, IsPK, DefaultValue,
		FK_DBFlavour, FK_ObjectID, FK_IsDisabled, FK_Name, FK_TableName, FK_ColumnName, BaseTable,
		LogDatasetInsert, LogDatasetEdit, LogDatasetDelete, LogDatasetView, LogField, FriendlyRecordReferral, ControlType)
		select distinct @DatasetID, isnull(d.Name,''), d.Caption, d.TypeDescription, d.Sequence,
		dc.DatasetColumnID, isnull(dl.AccessType,'F'), isnull(cl.AccessType,'F'), dc.Visible, dc.Mask, dc.AllowEdit, dc.AllowManualUpdate, dc.LookupFieldList, dc.LookupDatabase, dc.LookupWhereClause,
		d.TableID, t.Name, dc.TableColumnID, dc.Name, c.name, dc.Caption, c.column_id,
		c.system_type_id, 
		ISNULL(dc.SystemType,ty.name),--default to dc, else use ty
		c.user_type_id, c.rule_object_id, c.default_object_id, c.max_length, c.precision, c.scale, dc.RoundTo,
		c.is_nullable, c.is_identity, c.is_computed, isnull(OBJECTPROPERTY(OBJECT_ID(kcu.constraint_name), 'IsPrimaryKey'),0), 
		cast(isnull(dc.DefaultValue, conc.text) as varchar),
		dc.FK_DBFlavour, mc.object_id, mc.is_disabled, mc.name, parent.name, parentcol.name, t.name,
		isnull(ldl.LogDatasetInsert,0), isnull(ldl.LogDatasetEdit,0), isnull(ldl.LogDatasetDelete,0), isnull(ldl.LogDatasetView,0), isnull(lcl.LogField,0),
		_ta.FriendlyRecordReferral, dc.ControlType
		from _Dataset d				
		join sys.tables t on t.Name = d.Name
		join _Table _ta on _ta.Name = t.name
		join sys.columns c on c.object_id = t.object_id 
		--get default values
		left outer join sys.sysobjects cona on cona.Parent_obj = t.object_id and cona.xtype = 'D' and cona.id = c.default_object_id
		left outer JOIN (SELECT name, id FROM sys.sysobjects WHERE xtype = 'U') conb on (cona.parent_obj = conb.id) 
		left outer JOIN sys.syscomments conc ON (cona.id = conc.id)
		left outer join INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu on kcu.column_name = c.name and kcu.table_name = t.name
		join sys.types ty on ty.system_type_id = c.system_type_id and ty.name not in ('geometry', 'geography', 'sysname')
		join _DatasetColumn dc on dc.DatasetID = d.DatasetID and dc.Name = c.Name		
		--access limits
		left outer join #DatasetLimits dl on dl.DatasetID = d.DatasetID
		left outer join #DatasetColumnLimits cl on cl.DatasetColumnID = dc.DatasetColumnID		
		--logging
		left outer join #DatasetLog ldl on ldl.DatasetID = d.DatasetID
		left outer join #DatasetColumnLog lcl on lcl.DatasetColumnID = dc.DatasetColumnID		
		--fk (look ups)
		left outer join sys.foreign_key_columns fc on fc.parent_object_id = t.object_id and fc.parent_column_id = c.column_id
		left outer join sys.foreign_keys mc on mc.object_id = fc.constraint_object_id		
		left outer join sys.tables parent on fc.referenced_object_id = parent.object_id
		left outer join sys.columns parentcol on fc.referenced_object_id = parentcol.object_id and fc.referenced_column_id = parentcol.column_id 
		where d.DatasetID = @DatasetID
	end
	else if @Type = 'SQL_STORED_PROCEDURE'
	begin
		/*
			look for mapped dataset (map the proc name & a created #temp table with 
			_RegisterReflexProcedure @Proc varchar(150), @TempTableName varchar(150), @Tablename varchar(150), @ViewResults bit = 1 
			
			what this does is store the column type information & map a temp table to actual table columns 
		*/		
		insert #_TableColumn(DatasetID, DatasetName, DatasetCaption, DatasetTypeDescription, DatasetSequence,		 
		DatasetColumnID, DatasetAccess, DatasetColumnAccess, Visible, Mask, AllowEdit, AllowManualUpdate, LookupFieldList, LookupDatabase, LookupWhereClause,
		TableID, TableName, TableColumnID, TableColumnName, FieldName, Caption, ColumnID,
		SystemTypeID, SystemType, UserTypeID, RuleObjectID, DefaultObjectID, MaxLength, Precision, Scale, RoundTo,
		IsNullable, IsIdentity, IsComputed, IsPK, DefaultValue,
		FK_DBFlavour, FK_ObjectID, FK_IsDisabled, FK_Name, FK_TableName, FK_ColumnName, BaseTable,
		LogDatasetInsert, LogDatasetEdit, LogDatasetDelete, LogDatasetView, LogField, FriendlyRecordReferral, ControlType)		
		select distinct @DatasetID, isnull(d.Name,''), d.Caption, d.TypeDescription, d.Sequence,
		dc.DatasetColumnID, isnull(dl.AccessType,'F'), isnull(cl.AccessType,'F'), dc.Visible, dc.Mask, dc.AllowEdit, dc.AllowManualUpdate, dc.LookupFieldList, dc.LookupDatabase, dc.LookupWhereClause,
		d.TableID, dptt.Name, dc.TableColumnID, dc.Name, dc.name, dc.Caption, 
		isnull(dpttc.column_id, dc.ColumnOrder), isnull(dpttc.system_type_id, dc.SystemTypeID), 
		case when ISNULL(dc.SystemType,'') = 'time' then 'time' else isnull(dpttty.name, dc.SystemType) end, --devexpress time editor only works with datetime fields
		dpttc.user_type_id, dpttc.rule_object_id, dpttc.default_object_id, 
		isnull(dpttc.max_length, dc.MaxLength), isnull(dpttc.precision, dc.Precision), isnull(dpttc.scale, dc.Scale), dc.RoundTo,
		isnull(dpttc.is_nullable, dc.IsNullable), dpttc.is_identity, isnull(dpttc.is_computed, dc.IsComputed), 
		isnull(OBJECTPROPERTY(OBJECT_ID(kcu.constraint_name), 'IsPrimaryKey'),0), 
		cast(case when isnull(cm.DefaultValue,'') != '' then isnull(cm.DefaultValue,'') else isnull(dc.DefaultValue, conc.text) end as varchar),
		isnull(dc.FK_DBFlavour, 'TR'), dc.FK_ObjectID, dc.FK_IsDisabled, dc.FK_Name, dc.FK_TableName, dc.FK_ColumnName,
		(select p.TableName from _DataProviderTable p where p.DataProviderID = d.DataProviderID and BaseTable = 1),
		isnull(ldl.LogDatasetInsert,0), isnull(ldl.LogDatasetEdit,0), isnull(ldl.LogDatasetDelete,0), isnull(ldl.LogDatasetView,0), isnull(lcl.LogField,0),
		dptt.FriendlyRecordReferral, dc.ControlType
		from _Dataset d		
		join _DataProvider dp on dp.DataProviderID = d.DataProviderID
		join _DataProviderTable dpt on dpt.DataProviderID = d.DataProviderID		
		join _Table dptt on dptt.TableID = dpt.TableID
		left outer join _DataProviderColumnMap cm on cm.DataProviderID = dp.DataProviderID and cm.DataProviderTableID = dpt.DataProviderTableID				
		----use end point definitions ahead of view point definitions
		left outer join sys.tables tt on tt.name = dptt.Name
		left outer join _TableColumn ttc on cm.ReferenceTableColumnID = ttc.TableColumnID 
		left outer join sys.columns dpttc on dpttc.object_id = tt.object_id and dpttc.name = ttc.Name
		left outer join sys.types dpttty on dpttty.system_type_id = dpttc.system_type_id and dpttty.name not in ('geometry', 'geography', 'sysname')
		--get default values from the target (will be overridden by 1.provider mapping, 2.dataset column, 3.target field default (this)
		left outer join sys.sysobjects cona on cona.Parent_obj = tt.object_id and cona.xtype = 'D' and cona.id = dpttc.default_object_id
		left outer JOIN (SELECT name, id FROM sys.sysobjects WHERE xtype = 'U') conb on (cona.parent_obj = conb.id) 
		left outer JOIN sys.syscomments conc ON (cona.id = conc.id)
		join _DatasetColumn dc on dc.DatasetID = d.DatasetID and dc.Name = cm.Name		
		--access limits
		left outer join #DatasetLimits dl on dl.DatasetID = d.DatasetID
		left outer join #DatasetColumnLimits cl on cl.DatasetColumnID = dc.DatasetColumnID			
		--logging
		left outer join #DatasetLog ldl on ldl.DatasetID = d.DatasetID
		left outer join #DatasetColumnLog lcl on lcl.DatasetColumnID = dc.DatasetColumnID	
		left outer join INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu on kcu.column_name = ttc.Name and kcu.table_name = dptt.Name
		left outer join sys.tables ta on ta.name = dptt.Name		
		where d.DatasetID = @DatasetID
	end
	else if @Type = 'VIEW'
	begin															  
		insert #_TableColumn(DatasetID, DatasetName, DatasetCaption, DatasetTypeDescription, DatasetSequence,		 
		DatasetColumnID, DatasetAccess, DatasetColumnAccess, Visible, Mask, AllowEdit, AllowManualUpdate, LookupFieldList, LookupDatabase, LookupWhereClause,
		TableID, TableName, TableColumnID, TableColumnName, FieldName, Caption, ColumnID,
		SystemTypeID, SystemType, UserTypeID, RuleObjectID, DefaultObjectID, MaxLength, Precision, Scale, RoundTo,
		IsNullable, IsIdentity, IsComputed, IsPK, DefaultValue,
		FK_DBFlavour, FK_ObjectID, FK_IsDisabled, FK_Name, FK_TableName, FK_ColumnName, BaseTable,
		LogDatasetInsert, LogDatasetEdit, LogDatasetDelete, LogDatasetView, LogField, FriendlyRecordReferral, ControlType)
		select distinct @DatasetID, isnull(d.Name,''), d.Caption, d.TypeDescription, d.Sequence,
		dc.DatasetColumnID, isnull(dl.AccessType,'F'), isnull(cl.AccessType,'F'), dc.Visible, dc.Mask, dc.AllowEdit, dc.AllowManualUpdate, dc.LookupFieldList, dc.LookupDatabase, dc.LookupWhereClause,
		dptt.TableID, tt.Name, ttc.TableColumnID, ttc.Name, c.name, dc.Caption, 
		--use end point definitions ahead of view point definitions		
		isnull(dpttc.column_id, c.column_id), isnull(dpttc.system_type_id, c.system_type_id), 
		case when ISNULL(dc.SystemType,'') = 'time' then 'time' else isnull(dpttty.name, ty.name) end, --devexpress time editor only works with datetime fields		 
		isnull(dpttc.user_type_id, c.user_type_id), isnull(dpttc.rule_object_id, c.rule_object_id), 
		isnull(dpttc.default_object_id, c.default_object_id), isnull(dpttc.max_length, c.max_length), isnull(dpttc.precision, c.precision), 
		isnull(dpttc.scale, c.scale), RoundTo, isnull(dpttc.is_nullable, c.is_nullable),  isnull(dpttc.is_identity, c.is_identity), 
		isnull(dpttc.is_computed, c.is_computed), isnull(OBJECTPROPERTY(OBJECT_ID(kcu.constraint_name), 'IsPrimaryKey'),0),
		cast(case when isnull(cm.DefaultValue,'') != '' then isnull(cm.DefaultValue,'') else isnull(dc.DefaultValue, conc.text) end as varchar),
		dc.FK_DBFlavour, mc.object_id, mc.is_disabled, mc.name, parent.name, parentcol.name,		
		(select p.TableName from _DataProviderTable p where p.DataProviderID = d.DataProviderID and BaseTable = 1),
		isnull(ldl.LogDatasetInsert,0), isnull(ldl.LogDatasetEdit,0), isnull(ldl.LogDatasetDelete,0), isnull(ldl.LogDatasetView,0), isnull(lcl.LogField,0),
		dptt.FriendlyRecordReferral, dc.ControlType
		from _Dataset d		
		join _DataProvider dp on dp.DataProviderID = d.DataProviderID
		join _DataProviderTable dpt on dpt.DataProviderID = d.DataProviderID		
		join _Table dptt on dptt.TableID = dpt.TableID
		join _DataProviderColumnMap cm on cm.DataProviderID = dp.DataProviderID and cm.DataProviderTableID = dpt.DataProviderTableID				
		----use end point definitions ahead of view point definitions
		left outer join sys.tables tt on tt.name = dptt.Name
		left outer join _TableColumn ttc on cm.ReferenceTableColumnID = ttc.TableColumnID 
		left outer join sys.columns dpttc on dpttc.object_id = tt.object_id and dpttc.name = ttc.Name
		left outer join sys.types dpttty on dpttty.system_type_id = dpttc.system_type_id and dpttty.name not in ('geometry', 'geography', 'sysname')				
		--get default values from the target (will be overridden by 1.provider mapping, 2.dataset column, 3.target field default (this)
		left outer join sys.sysobjects cona on cona.Parent_obj = tt.object_id and cona.xtype = 'D' and cona.id = dpttc.default_object_id
		left outer JOIN (SELECT name, id FROM sys.sysobjects WHERE xtype = 'U') conb on (cona.parent_obj = conb.id) 
		left outer JOIN sys.syscomments conc ON (cona.id = conc.id)
		join sys.views v on v.Name = d.Name
		join sys.columns c on c.object_id = v.object_id and cm.Name = c.name		  		
		join sys.types ty on ty.system_type_id = c.system_type_id and ty.name not in ('geometry', 'geography', 'sysname')
		join _DatasetColumn dc on dc.DatasetID = d.DatasetID and dc.Name = cm.Name				
		--access limits
		left outer join #DatasetLimits dl on dl.DatasetID = d.DatasetID
		left outer join #DatasetColumnLimits cl on cl.DatasetColumnID = dc.DatasetColumnID				
		--logging
		left outer join #DatasetLog ldl on ldl.DatasetID = d.DatasetID
		left outer join #DatasetColumnLog lcl on lcl.DatasetColumnID = dc.DatasetColumnID		
		--get endpoints		
		left outer join INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu on kcu.column_name = ttc.Name and kcu.table_name = tt.Name
		--fk (look ups)
		left outer join sys.foreign_key_columns fc on fc.parent_object_id = tt.object_id and fc.parent_column_id = dpttc.column_id
		left outer join sys.foreign_keys mc on mc.object_id = fc.constraint_object_id		
		left outer join sys.tables parent on fc.referenced_object_id = parent.object_id
		left outer join sys.columns parentcol on fc.referenced_object_id = parentcol.object_id and fc.referenced_column_id = parentcol.column_id 
		where d.DatasetID = @DatasetID
	end
	else if @Type = 'SQL_INLINE_TABLE_VALUED_FUNCTION'
	begin
		--look for mapped dataset
		print '<TODO>: map SQL_INLINE_TABLE_VALUED_FUNCTION'
	end
end

select * from #_TableColumn


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AD_AddSQLUser]') and xtype = 'P ')  
 drop Procedure AD_AddSQLUser
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc [dbo].[AD_AddSQLUser](@Login varchar(500),@Password varchar(500))
as
declare @SqlStatement nvarchar(max)

If not Exists (select loginname from master.dbo.syslogins 
    where name = @Login and dbname = 'master')
Begin

	if(@Password is null)--uses windows authentication
	begin
	Select @SqlStatement = 'CREATE LOGIN ' + QUOTENAME(@Login) + ' 
	FROM WINDOWS WITH DEFAULT_DATABASE= [master]'
	end
	else
	begin
	Select @SqlStatement = 'CREATE LOGIN ' + QUOTENAME(@Login) + ' WITH PASSWORD=N'''+Replace(@password,'''','''''')+''', DEFAULT_DATABASE=[master], CHECK_EXPIRATION=OFF, CHECK_POLICY=OFF'
	end


	EXEC sp_executesql @SqlStatement

End
else if @Password is not null
begin 
	Select @SqlStatement = 'ALTER LOGIN  ' + QUOTENAME(@Login) + ' WITH PASSWORD=N'''+Replace(@password,'''','''''')+''' '
	EXEC sp_executesql @SqlStatement
end

--protect's aginst an error if window's user does not exsist
If Exists (select loginname from master.dbo.syslogins 
    where name = @Login and dbname = 'master')
Begin
	Select @SqlStatement = '
	EXEC master..sp_addsrvrolemember @loginame = N'''+Replace(@Login,'''','''''')+''', @rolename = N''dbcreator''
	EXEC master..sp_addsrvrolemember @loginame = N'''+Replace(@Login,'''','''''')+''', @rolename = N''sysadmin''
	'
	EXEC sp_executesql @SqlStatement

end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AD_DisableSQLUser]') and xtype = 'P ')  
 drop Procedure AD_DisableSQLUser
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc [dbo].[AD_DisableSQLUser](@Login varchar(500))
as
declare @SqlStatement nvarchar(max)

If Exists (select loginname from master.dbo.syslogins 
    where name = @Login and dbname = 'master')
Begin


Select @SqlStatement = '
EXEC master..sp_dropsrvrolemember @loginame = N'''+Replace(@Login,'''','''''')+''', @rolename = N''dbcreator''
EXEC master..sp_dropsrvrolemember @loginame = N'''+Replace(@Login,'''','''''')+''', @rolename = N''sysadmin''
'

EXEC sp_executesql @SqlStatement

End





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AD_ModifyReflexUsers]') and xtype = 'P ')  
 drop Procedure AD_ModifyReflexUsers
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc [dbo].[AD_ModifyReflexUsers](@AddAccess bit)
as
begin

declare users cursor for 
select distinct Windows_Login from Contact where Type = 'user' and Windows_Login is not null


declare @LoginName varchar(1000),@CurrentUser varchar(1000)

select @CurrentUser = ''

open users
fetch users into @LoginName


while @@fetch_status = 0
begin 

	set @LoginName = DEFAULT_DOMAIN() +'\'+@LoginName

	if(@AddAccess = 1)
		exec AD_AddSQLUser @LoginName,null
	else if(SYSTEM_USER <> @LoginName)
		exec AD_DisableSQLUser @LoginName
	else
		select @CurrentUser = @LoginName

fetch users into @LoginName
end

close users
deallocate users



if(@CurrentUser <> '')
	exec AD_DisableSQLUser @CurrentUser


end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AddUpdatesLog]') and xtype = 'P ')  
 drop Procedure AddUpdatesLog
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create procedure AddUpdatesLog 
	@VersionInfo varchar(50) = null,
	@FileDateUpdated datetime,
	@FileName varchar(255),
	@FileSize bigint,
	@DownloadState varchar(20),
	@StartDownload datetime = null,
	@CompleteDownload datetime = null,
	@StartUATDeploy datetime = null,
	@CompleteUATDeploy datetime = null,
	@StartProductionDeploy datetime = null,
	@CompleteProductionDeploy datetime = null,
	@UATUpdating bit = 0,
	@ProductionUpdating bit = 0,
	@UATContactID int = null,
	@ProductionContactID int = null
as
begin
	insert Updates_Log 
	(VersionInfo, FileDateUpdated, Filename, FileSize, DownloadState, StartDownload, CompleteDownload, 
		StartUATDeploy, CompleteUATDeploy, StartProductionDeploy, CompleteProductionDeploy, UATUpdating,
		ProductionUpdating, UATContactID, ProductionContactID)
	values
	(@VersionInfo, @FileDateUpdated, @FileName, @FileSize, @DownloadState, @StartDownload, @CompleteDownload, 
	@StartUATDeploy, @CompleteUATDeploy, @StartProductionDeploy, @CompleteProductionDeploy, @UATUpdating,
	@ProductionUpdating, @UATContactID, @ProductionContactID)

	select SCOPE_IDENTITY()
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AlertDLMergeTemplate]') and xtype = 'P ')  
 drop Procedure AlertDLMergeTemplate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc AlertDLMergeTemplate @DocMergeLibrary_ID Int 
as
begin
	select MergeTemplate
	from DocMergeLibrary  
	where DocMergeLibrary_ID=@DocMergeLibrary_ID
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AP_HB_Release_Approval]') and xtype = 'P ')  
 drop Procedure AP_HB_Release_Approval
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


create proc [dbo].[AP_HB_Release_Approval]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@stat varchar(50),
	@ap_inv_header_id varchar(50)

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @ap_inv_header_id=module_reference_id, @stat=status from approvals_requested where id=@id


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..ap_inv_header set WFHB_STATUS=''D'' where ap_inv_header_id='+@ap_inv_header_id
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..ap_inv_header set WFHB_STATUS=''A'' where ap_inv_header_id='+@ap_inv_header_id
		exec( @sql )	
	end
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AP_SaveSyncCompanies]') and xtype = 'P ')  
 drop Procedure AP_SaveSyncCompanies
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc AP_SaveSyncCompanies @supplier varchar(50), @CompanyID int, @Sync bit, @PropagateChanges bit as
--declare @supplier varchar(50), @CompanyID int, @Sync bit, @PropagateChanges bit select @supplier = '1025'

if @Sync = 1
begin
	if exists (select * from SUPPLIER_MASTER_SYNC where AutoID = @CompanyID and Supplier = @supplier)
	begin
		--update
		update SUPPLIER_MASTER_SYNC 
		set AllowSync = @PropagateChanges
		where AutoID = @CompanyID and Supplier = @supplier
	end
	else
	begin
		--insert
		insert SUPPLIER_MASTER_SYNC(Autoid, Supplier, AllowSync)
		select @CompanyID, @supplier, @PropagateChanges
	end
end
else
begin
	--delete record
	delete SUPPLIER_MASTER_SYNC  
	where AutoID = @CompanyID and Supplier = @supplier
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AP_SubConPayHold]') and xtype = 'P ')  
 drop Procedure AP_SubConPayHold
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[AP_SubConPayHold] 
@ID int,
@Status char(1)
as 
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@stat varchar(50),
	@AP_INV_HEADER_ID varchar(50)

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @AP_INV_HEADER_ID=module_reference_id, @stat=status from approvals_requested where id=@id


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..ap_inv_header set KC_PAYHOLD_STATUS=''D'' where AP_INV_HEADER_ID='+@AP_INV_HEADER_ID+' 
		
		if exists( select * from '+@tr_db+'..ws_inv_header where ap_inv_header_id='+@AP_INV_HEADER_ID+' )
		begin
			declare @ws_inv_id int
			select @ws_inv_id=ws_inv_id from '+@tr_db+'..ws_inv_header where ap_inv_header_id='+@AP_INV_HEADER_ID+'
			insert into '+@tr_db+'..WS_EVENT_HISTORY (DETAIL_ID, EVENT_DATE, CONTACT_ID, EVENT, NOTES, ST_TYPE_ID) 
			select @ws_inv_id, GETDATE(), -1, ''Invoice declined for subcontractor compliance payment hold routing.'', '''', 1
		end'
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..ap_inv_header set KC_PAYHOLD_STATUS=''A'' where AP_INV_HEADER_ID='+@AP_INV_HEADER_ID+'
		
		if exists( select * from '+@tr_db+'..ws_inv_header where ap_inv_header_id='+@AP_INV_HEADER_ID+' )
		begin
			declare @ws_inv_id int
			select @ws_inv_id=ws_inv_id from '+@tr_db+'..ws_inv_header where ap_inv_header_id='+@AP_INV_HEADER_ID+'
			insert into '+@tr_db+'..WS_EVENT_HISTORY (DETAIL_ID, EVENT_DATE, CONTACT_ID, EVENT, NOTES, ST_TYPE_ID) 
			select @ws_inv_id, GETDATE(), -1, ''Invoice approved for subcontractor compliance payment hold routing.'', '''', 1
		end'
		exec( @sql )
	end

end





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AP_SubConPreAccrual]') and xtype = 'P ')  
 drop Procedure AP_SubConPreAccrual
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[AP_SubConPreAccrual] 
@ID int,
@Status char(1)
as 
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@stat varchar(50),
	@AP_INV_HEADER_ID varchar(50)

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @AP_INV_HEADER_ID=module_reference_id, @stat=status from approvals_requested where id=@id


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..ap_inv_header set KC_ACCRUAL_STATUS=''D'' where AP_INV_HEADER_ID='+@AP_INV_HEADER_ID+' 
		
		if exists( select * from '+@tr_db+'..ws_inv_header where ap_inv_header_id='+@AP_INV_HEADER_ID+' )
		begin
			declare @ws_inv_id int
			select @ws_inv_id=ws_inv_id from '+@tr_db+'..ws_inv_header where ap_inv_header_id='+@AP_INV_HEADER_ID+'
			insert into '+@tr_db+'..WS_EVENT_HISTORY (DETAIL_ID, EVENT_DATE, CONTACT_ID, EVENT, NOTES, ST_TYPE_ID) 
			select @ws_inv_id, GETDATE(), -1, ''Invoice declined for subcontractor compliance pre-accrual routing.'', '''', 1
		end'
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..ap_inv_header set KC_ACCRUAL_STATUS=''A'' where AP_INV_HEADER_ID='+@AP_INV_HEADER_ID+'
		
		if exists( select * from '+@tr_db+'..ws_inv_header where ap_inv_header_id='+@AP_INV_HEADER_ID+' )
		begin
			declare @ws_inv_id int
			select @ws_inv_id=ws_inv_id from '+@tr_db+'..ws_inv_header where ap_inv_header_id='+@AP_INV_HEADER_ID+'
			insert into '+@tr_db+'..WS_EVENT_HISTORY (DETAIL_ID, EVENT_DATE, CONTACT_ID, EVENT, NOTES, ST_TYPE_ID) 
			select @ws_inv_id, GETDATE(), -1, ''Invoice approved for subcontractor compliance pre-accrual routing.'', '''', 1
		end'
		exec( @sql )
	end

end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AP_SuppSyncContact]') and xtype = 'P ')  
 drop Procedure AP_SuppSyncContact
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc AP_SuppSyncContact @supplier_id int, @company_id int, @tr_db varchar(50)
as
begin
	declare @nSql nvarchar(max), @Company varchar(100), @Telephone varchar(64), @Fax varchar(64), @Street varchar(255), @City varchar(64), 
		@State varchar(32), @PostalCode varchar(32), @Country varchar(64)
									
	set @nSql = 'select @Street=s.PO_ADD1, @City=s.PO_CITY, @State=s.PO_STATE, @PostalCode=s.PO_ZIP, @Country=c.DESCRIPTION,
				@Company=s.name, @Telephone=s.TEL, @Fax=s.FAX
				from '+@tr_db+'.dbo.supplier_master s
				left outer join '+@tr_db+'.dbo.COUNTRIES c on c.COUNTRY_ID=s.PO_COUNTRY_ID
				where s.supplier_id='+CAST(@supplier_id as varchar(15))
    exec sp_executesql @nSql, N'@Company varchar(100) OUT, @Telephone varchar(64) OUT, @Fax varchar(64) OUT, @Street varchar(255) OUT, 
		@City varchar(64) OUT, @State varchar(32) OUT, @PostalCode varchar(32) OUT, @Country varchar(64) OUT ', 
		@Company OUT, @Telephone OUT, @Fax OUT, @Street OUT, @City OUT, @State OUT, @PostalCode OUT, @Country OUT
	
	update c
	set c.BusinessCompany=case when ISNULL(c.SyncCompanyName,0) = 1 then @Company else c.BusinessCompany end,
		c.BusinessTelephoneNumber=case when ISNULL(c.SyncBusinessPhone,0) = 1 then @Telephone else c.BusinessTelephoneNumber end,
		c.BusinessFaxNumber=case when ISNULL(c.SyncBusinessFax,0) = 1 then @Fax else c.BusinessFaxNumber end,
		c.BusinessStreet=case when ISNULL(c.SyncBusinessAddress,0) = 1 then @Street else c.BusinessStreet end,
		c.BusinessCity=case when ISNULL(c.SyncBusinessAddress,0) = 1 then @City else c.BusinessCity end,
		c.BusinessState=case when ISNULL(c.SyncBusinessAddress,0) = 1 then @State else c.BusinessState end,
		c.BusinessPostalCode=case when ISNULL(c.SyncBusinessAddress,0) = 1 then @PostalCode else c.BusinessPostalCode end,
		c.BusinessCountry=case when ISNULL(c.SyncBusinessAddress,0) = 1 then @Country else c.BusinessCountry end
	from contact c
	join Relations r on r.ItemID=c.ID and r.ItemType='Contact' and r.CompanyID=@company_id
	where r.Target='Supplier' and r.TargetID = @supplier_id 
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AP_SyncSupplierContacts]') and xtype = 'P ')  
 drop Procedure AP_SyncSupplierContacts
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc AP_SyncSupplierContacts @SourceAutoid int, @SourceSupplier_ID int, @TargetAutoid int, @TargetSupplier_ID int as

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#RELATIONS_TARGET'))
drop table #RELATIONS_TARGET
CREATE TABLE #RELATIONS_TARGET(
	Target varchar(50),
	TargetID varchar(100),
	ItemType varchar(25),
	ItemID varchar(100),
	CompanyID int)

insert #RELATIONS_TARGET(Target, TargetID, ItemType, ItemID, CompanyID)
select Target, TargetID, ItemType, ItemID, CompanyID
from Relations
where Target = 'Supplier' and CompanyID = @TargetAutoid and TargetID = @TargetSupplier_ID 

--add missing contacts
insert Relations(Target, TargetID, ItemType, ItemID, CompanyID)
select distinct Target, @TargetSupplier_ID, ItemType, ItemID, @TargetAutoid
from Relations
where Target = 'Supplier' and CompanyID = @SourceAutoid and TargetID = @SourceSupplier_ID 
and ItemID not in (select ItemID from #RELATIONS_TARGET)



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AP_VaildateCommDefault]') and xtype = 'P ')  
 drop Procedure AP_VaildateCommDefault
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc AP_VaildateCommDefault @CommID int, @Message varchar(max) output
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#IS_Valid'))
		drop table #IS_Valid
	
	create table #IS_Valid( message varchar(max) )
	
	if exists( select * from COMMUNICATION_DEFAULTS where id=@CommID and comm_purpose_id = 12 and TYPE = 'S' )
	begin
		declare @SupplierID int, @ContactID int, @CompanyID int, @tr_db varchar(500), @SQL varchar(max) 
		
		select @SupplierID=SOURCE_ID, @ContactID=CONTACT_ID, @CompanyID=COMPANY_ID from COMMUNICATION_DEFAULTS where id = @CommID
		select @tr_db=treasuryDBName from companies where autoID=@CompanyID
				
		select @SQL ='
		declare @InvCnt int, @HBCnt int
		if exists( select * from '+@tr_db+'..PROJ_CONTRACTOR_CONSULTANT p
			join '+@tr_db+'..SUPPLIER_MASTER s on s.SUPPLIER=p.SUPPLIER
			where s.SUPPLIER_ID='+cast(@SupplierID as varchar)+' and isnull(p.IS_CONSULTANT,''F'') = ''T'' )
		begin
			--check if any outstanding approvals
			select @InvCnt=COUNT(*) from '+@tr_db+'..WS_INV_HEADER w
			join '+@tr_db+'..WS_Conslt_InvcSubm s on s.WS_INV_ID=w.WS_INV_ID
			where s.ContactID='+cast(@ContactID as varchar)+' and 
			(	
				w.CONSULTANT_STATUS = ''P'' or
				(w.CONSULTANT_STATUS = ''A'' and w.AP_ROUTING_STATUS not in ( ''A'', ''C'' ) ) --Approved, Cancelled
			)
			and w.CONSULTANT_STATUS not in (''C'', ''D'') --Cancelled, Declined
			if( @InvCnt > 0 )
			begin
				insert into #IS_Valid (message) select ''Consultant currently has active payment requests.''
				goto FINISH
			end

			select @HBCnt=COUNT(*) from '+@tr_db+'..ap_inv_header a
			join '+@tr_db+'..WS_INV_HEADER w on w.ap_inv_header_id=a.AP_INV_HEADER_ID
			join '+@tr_db+'..WS_INV_HB wb on wb.AP_INV_HEADER_ID=a.AP_INV_HEADER_ID
			join '+@tr_db+'..WS_Conslt_HBSubm s on s.WS_HB_ID=wb.ID
			where s.ContactID='+cast(@ContactID as varchar)+' and 
			(
				wb.CONSULTANT_STATUS = ''P'' or
				(wb.CONSULTANT_STATUS = ''A'' and wb.AP_ROUTING_STATUS not in ( ''A'', ''C'' ) )
			)
			and wb.CONSULTANT_STATUS not in (''C'', ''D'') --Cancelled, Declined
			if( @HBCnt > 0 )
			begin
				insert into #IS_Valid (message) select ''Consultant currently has active holdback release requests.''
				goto FINISH
			end
		
			--check if any other contacts with comm_purpose_id = 12
			if not exists( select * from COMMUNICATION_DEFAULTS where COMPANY_ID='+cast(@CompanyID as varchar)+' and SOURCE_ID='+cast(@SupplierID as varchar)+' and COMM_PURPOSE_ID = 12 and CONTACT_ID <> '+cast(@ContactID as varchar)+' )
			begin
				insert into #IS_Valid (message) select ''Supplier is currently setup as a project consultant, and requires at least one contact to be setup as an ''''AP Payment Approver''''.''
				goto FINISH
			end
			
			FINISH:
		end'
		print @SQL
		exec(@SQL)
	end
	
	select @Message=message from #IS_Valid
	
	select @Message = isnull(@Message,'OK')
	
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Approval_Contact_Finish]') and xtype = 'P ')  
 drop Procedure Approval_Contact_Finish
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc Approval_Contact_Finish
@username varchar(20),
@Message varchar(max) output
as
begin 



set @Message = ''
--do this in a transaction to lock records and prevent server from ticking
begin tran

--validate one last time as the server could of ticked on the summary screen.
exec Approval_ContactValidate_All @username,@Message out

if(@Message = '')
begin
	--flag the informational to approver switch with a 'C'
	update  working_Approval_Contact_Reassign set notification_type = 'C'
	from working_Approval_Contact_Reassign w
	join Approval_Contacts oldContact on oldContact.ID = w.Approval_Contact_ID and username = @username
	join Approval_Contacts c on c.AL_ID = oldContact.AL_ID and c.AT_ID = oldContact.AT_ID and c.Contact_ID = w.New_Contact_ID and c.Notification_Type = 'I'
	where username = @username
	--first update any Informational to approver
	update c set Contact_ID = New_Contact_ID, Notification_Type = 'A', Active = 1
	from working_Approval_Contact_Reassign w
	join Approval_Contacts oldContact on oldContact.ID = w.Approval_Contact_ID and username = @username
	join Approval_Contacts c on c.AL_ID = oldContact.AL_ID and c.AT_ID = oldContact.AT_ID and c.Contact_ID = w.New_Contact_ID and c.Notification_Type = 'I'
	where username = @username 

	insert into Approval_Contacts(AT_ID,AL_ID,Contact_ID,Notification_Type,Active)
	select c.AT_ID,c.AL_ID,New_Contact_ID,w.Notification_Type,c.active from working_Approval_Contact_Reassign w
	join Approval_Contacts c on c.ID = w.Approval_Contact_ID
	 where username = @username and w.notification_type != 'C' and New_Contact_ID is not null

	--now update any notifications that are inprogress ** do not change the informational notifications
	update n set AC_ID = newContact.ID
	from working_Approval_Contact_Reassign w
	join Approval_Contacts oldContact on oldContact.ID = w.Approval_Contact_ID and w.username = @username
	join Approval_Contacts newContact on oldContact.AT_ID = newContact.AT_ID and oldContact.AL_ID = newContact.AL_ID and newContact.Contact_ID = w.New_Contact_ID
	join Approval_Notification n on n.AC_ID = oldContact.ID and n.[Status] = 'In Progress' and w.notification_type != 'C'	
	
	--deactivate the contact
	update Approval_Contacts set active = 0 
	from Approval_Contacts c
	join working_Approval_Contact_Reassign w on w.Approval_Contact_ID = c.ID and username = @username


end

commit tran


end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Approval_ContactListFill]') and xtype = 'P ')  
 drop Procedure Approval_ContactListFill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[Approval_ContactListFill]
@username varchar(20),
@ContactID int,
@Refill bit
as
begin


if(ISNULL(@Refill,1) = 1)
begin
	delete working_Approval_Contact_Reassign where username = @username
	
	insert into working_Approval_Contact_Reassign(Approval_Contact_ID,username,notification_type)
	select ID,@username,Notification_Type from Approval_Contacts where Contact_ID = @ContactID
end

select t.Approval_Topic,t.Module,t.Active[Topic Active],l.Escalation_Level,l.Description[lvl_Description],case when c.Notification_Type = 'A' then 'Approver' else 'Informational' end[Notification_Type],c.Active[ContactActive],r.New_Contact_ID,r.username,
isnull(replace( stuff( (select isnull(cc.KnownAs+'%$','') from Approval_Contacts ac join Contact cc on ac.Contact_ID = cc.ID where ac.AT_ID = t.ID and ac.AL_ID =l.ID and ac.ID <> c.ID and isnull(ac.Active,1) = 1 and ac.Notification_Type = 'A' order by cc.KnownAs for XML path('')),1,0,''),'%$',char(13)+char(10)),'')[Current Approvers],
l.NumApprovalReq,(select COUNT(*) from Approvals_Requested ar where ar.Status = 'In Progress' and ar.AT_ID = t.ID and ar.Current_Escalation_Level = l.Escalation_Level )[Pending Notifications],c.ID[ApprovalContactID]

from Approval_Topic t
join Approval_Levels l on l.AT_ID = t.ID
join Approval_Contacts c on c.AT_ID = t.ID and c.AL_ID =l.ID
join working_Approval_Contact_Reassign r on r.Approval_Contact_ID = c.ID
where r.username = @username
order by t.Module,t.Approval_Topic,l.Escalation_Level

end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Approval_ContactValidate]') and xtype = 'P ')  
 drop Procedure Approval_ContactValidate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc Approval_ContactValidate
@ApprovalContactID int,
@NewContactID int,
@Message varchar(max) output
as
begin

declare @NotificationType varchar(1),@AT_ID int,@AL_ID int, @NumApproReq int,
@ApprovalTopicDesc varchar(100),@ApprovalLevel varchar(10)


select @Message = '', @NotificationType = Notification_Type,@AT_ID = AT_ID,@AL_ID = AL_ID from Approval_Contacts 
where ID = @ApprovalContactID

select @ApprovalTopicDesc = Approval_Topic from Approval_Topic where ID = @AT_ID
select @ApprovalLevel = cast(Escalation_Level as varchar(10)),@NumApproReq = NumApprovalReq from Approval_Levels where ID = @AL_ID


if(@NotificationType = 'A')--were they previously an approver
begin
	
	if(isnull(@NewContactID,-42) = -42)--user is trying to blank out new contact
	begin
	
		--see if any routing is currently in progress.
		if((select COUNT(*) from Approval_Notification where AC_ID = @ApprovalContactID and [Status]= 'In Progress') > 0)
			select @Message = @Message + 'Old contact currently has pending notifications. New Contact is required.'+char(13)+char(10)
		--if the current old contact is active
		if((select isnull(Active,1) from Approval_Contacts where ID = @ApprovalContactID) = 1)
		begin
		
			--check that enough approvers are currently present
			if( (select count(*) from Approval_Contacts where AL_ID = @AL_ID and Notification_Type = 'A' and isnull(Active,1) = 1 and ID <> @ApprovalContactID) < @NumApproReq )
				select @Message = @Message + 'There are not enough Approver''s. New Contact is required.'+char(13)+char(10)
		end
		
	end
	
	--does the new contact already exist for this level
	if((select COUNT(*) from Approval_Contacts where AL_ID = @AL_ID and Contact_ID = @NewContactID and Notification_Type = 'A') > 0)
		select @Message = @Message + 'New Contact is already a contact for this notification.'
		
end


	


end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Approval_ContactValidate_All]') and xtype = 'P ')  
 drop Procedure Approval_ContactValidate_All
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[Approval_ContactValidate_All]
@Username varchar(20),
@Message varchar(max) output
as
begin
	declare @ApprovalContactID int,@NewContactID int, @InnerMessage varchar(max)
	set @Message = ''

	if((select COUNT(*) from working_Approval_Contact_Reassign where username = @username) = 0)
	begin 
		set @Message = 'No Approval topics found for this contact.'
	end
	else
	begin
	
		declare contacts cursor for 
		select Approval_Contact_ID,New_Contact_ID from working_Approval_Contact_Reassign where username = @username

		open contacts
		fetch contacts into @ApprovalContactID,@NewContactID
		while @@fetch_status = 0
		begin 
			set @InnerMessage = ''
			exec Approval_ContactValidate @ApprovalContactID, @NewContactID,@InnerMessage out
			if(@InnerMessage != '')
			begin
				select @InnerMessage = '- '+ t.Approval_Topic+' Level: '+CAST(l.Escalation_Level as varchar(10))+' '+@InnerMessage from Approval_Contacts c
				join Approval_Topic t on t.ID = c.AT_ID
				join Approval_Levels l on l.ID = c.AL_ID
				 where c.ID = @ApprovalContactID
				
				set @Message = @Message + @InnerMessage 
			end
			fetch contacts into @ApprovalContactID,@NewContactID
		end
		close contacts
		deallocate contacts
		end
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AR_CustSyncContact]') and xtype = 'P ')  
 drop Procedure AR_CustSyncContact
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
CREATE proc AR_CustSyncContact @customer_id int, @company_id int, @tr_db varchar(50)
as
begin
	declare @nSql nvarchar(max), @Company varchar(100), @Telephone varchar(64), @Fax varchar(64), @City varchar(64), 
		@State varchar(32), @PostalCode varchar(32), @Country varchar(64), @sync_address_type varchar(5), @Street varchar(255)
			
	set @nSql = '
			declare @sync_type varchar(1)	
			select @sync_address_type=isnull((select isnull(sync_address_type, ''B1'') from '+@tr_db+'.dbo.ar_setup), ''B1'')			
			select @sync_type = SUBSTRING(@sync_address_type, 1, 1)
	
			if( @sync_type = ''S'' )
			begin
				select @Street=case when @sync_address_type = ''S1'' then c.SHIP_ADDRESS_1 when @sync_address_type = ''S2'' then c.SHIP_ADDRESS_2
					when @sync_address_type = ''S3'' then c.SHIP_ADDRESS_3 else c.SHIP_ADDRESS_1 end,
					@City=c.SHIP_CITY, @State=c.SHIP_STATE, @PostalCode=c.SHIP_ZIP, @Country=s.DESCRIPTION,
					@Company=c.name, @Telephone=c.TELEPHONE, @Fax=c.FAX
				from '+@tr_db+'.dbo.customers c
				left outer join '+@tr_db+'.dbo.COUNTRIES s on s.COUNTRY_ID = c.SHIP_COUNTRY_ID 
				where c.customer_id='+CAST(@customer_id as varchar(15))+ '
			end
			else
			begin
				select @Street=case when @sync_address_type = ''B1'' then c.BILL_ADDRESS_1 when @sync_address_type = ''B2'' then c.BILL_ADDRESS_2 
					when @sync_address_type = ''B3'' then c.BILL_ADDRESS_3 else c.BILL_ADDRESS_1 end,
					@City=c.BILL_CITY, @State=c.BILL_STATE, @PostalCode=c.BILL_ZIP, @Country=s.DESCRIPTION,
					@Company=c.name, @Telephone=c.TELEPHONE, @Fax=c.FAX
				from '+@tr_db+'.dbo.customers c
				left outer join '+@tr_db+'.dbo.COUNTRIES s on s.COUNTRY_ID = c.BILL_COUNTRY_ID 
				where c.customer_id='+CAST(@customer_id as varchar(15))+ '
			end	'
    exec sp_executesql @nSql, N'@Company varchar(100) OUT, @Telephone varchar(64) OUT, @Fax varchar(64) OUT, @Street varchar(255) OUT, 
		@City varchar(64) OUT, @State varchar(32) OUT, @PostalCode varchar(32) OUT, @Country varchar(64) OUT, @sync_address_type varchar(5) OUT ', 
		@Company OUT, @Telephone OUT, @Fax OUT, @Street OUT, @City OUT, @State OUT, @PostalCode OUT, @Country OUT, @sync_address_type OUT
	
	
	update c
	set c.BusinessCompany=case when ISNULL(c.SyncCompanyName,0) = 1 then @Company else c.BusinessCompany end,
		c.BusinessTelephoneNumber=case when ISNULL(c.SyncBusinessPhone,0) = 1 then @Telephone else c.BusinessTelephoneNumber end,
		c.BusinessFaxNumber=case when ISNULL(c.SyncBusinessFax,0) = 1 then @Fax else c.BusinessFaxNumber end,
		c.BusinessStreet=case when ISNULL(c.SyncBusinessAddress,0) = 1 then @Street else c.BusinessStreet end,
		c.BusinessCity=case when ISNULL(c.SyncBusinessAddress,0) = 1 then @City else c.BusinessCity end,
		c.BusinessState=case when ISNULL(c.SyncBusinessAddress,0) = 1 then @State else c.BusinessState end,
		c.BusinessPostalCode=case when ISNULL(c.SyncBusinessAddress,0) = 1 then @PostalCode else c.BusinessPostalCode end,
		c.BusinessCountry=case when ISNULL(c.SyncBusinessAddress,0) = 1 then @Country else c.BusinessCountry end
	from contact c
	join Relations r on r.ItemID=c.ID and r.ItemType='Contact' and r.CompanyID=@company_id
	where r.Target='Customer' and r.TargetID = @customer_id 
end   


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AR_SaveSyncCompanies]') and xtype = 'P ')  
 drop Procedure AR_SaveSyncCompanies
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
create proc [dbo].[AR_SaveSyncCompanies] @customer varchar(50), @CompanyID int, @Sync bit, @PropagateChanges bit as 

if @Sync = 1
begin
	if exists (select * from CUSTOMER_MASTER_SYNC where AutoID = @CompanyID and Customer = @customer)
	begin
		--update
		update CUSTOMER_MASTER_SYNC 
		set AllowSync = @PropagateChanges
		where AutoID = @CompanyID and Customer = @customer
	end
	else
	begin
		--insert
		insert CUSTOMER_MASTER_SYNC(Autoid, Customer, AllowSync)
		select @CompanyID, @customer, @PropagateChanges
	end
end
else
begin
	--delete record
	delete CUSTOMER_MASTER_SYNC  
	where AutoID = @CompanyID and Customer = @customer
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AR_SyncCustomerContacts]') and xtype = 'P ')  
 drop Procedure AR_SyncCustomerContacts
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
create proc [dbo].[AR_SyncCustomerContacts] @SourceAutoid int, @SourceCustomer_ID int, @TargetAutoid int, @TargetCustomer_ID int 
as

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#RELATIONS_TARGET'))
drop table #RELATIONS_TARGET
CREATE TABLE #RELATIONS_TARGET(
	Target varchar(50),
	TargetID varchar(100),
	ItemType varchar(25),
	ItemID varchar(100),
	CompanyID int)

insert #RELATIONS_TARGET(Target, TargetID, ItemType, ItemID, CompanyID)
select Target, TargetID, ItemType, ItemID, CompanyID
from Relations
where Target = 'Customer' and CompanyID = @TargetAutoid and TargetID = @TargetCustomer_ID 

--add missing contacts
insert Relations(Target, TargetID, ItemType, ItemID, CompanyID)
select distinct Target, @TargetCustomer_ID, ItemType, ItemID, @TargetAutoid
from Relations
where Target = 'Customer' and CompanyID = @SourceAutoid and TargetID = @SourceCustomer_ID 
and ItemID not in (select ItemID from #RELATIONS_TARGET)



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CF_DeleteReport]') and xtype = 'P ')  
 drop Procedure CF_DeleteReport
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[CF_DeleteReport] @CFT_ID int, @DeleteType bit = 0 as
    
delete CC
from RE_CashFlow_CostCodes CC
join RE_CashFlow_SubGroup SG on SG.CFSG_ID=CC.CFSG_ID
join RE_CashFlow_Group G on G.CFG_ID=SG.CFG_ID
join RE_CashFlow_Type t on G.CFT_ID=T.CFT_ID
where t.CFT_ID=@CFT_ID

delete GL
from RE_CashFlow_GLAccts GL
join RE_CashFlow_SubGroup SG on SG.CFSG_ID=GL.CFSG_ID
join RE_CashFlow_Group G on G.CFG_ID=SG.CFG_ID
join RE_CashFlow_Type t on G.CFT_ID=T.CFT_ID
where t.CFT_ID=@CFT_ID

delete SG
from RE_CashFlow_SubGroup SG 
join RE_CashFlow_Group G on G.CFG_ID=SG.CFG_ID
join RE_CashFlow_Type t on G.CFT_ID=T.CFT_ID
where t.CFT_ID=@CFT_ID

delete G
from RE_CashFlow_Group G
join RE_CashFlow_Type t on G.CFT_ID=T.CFT_ID
where t.CFT_ID=@CFT_ID

if @DeleteType = 1
	delete RE_CashFlow_Type where CFT_ID=@CFT_ID

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CF_OverwriteTemplate]') and xtype = 'P ')  
 drop Procedure CF_OverwriteTemplate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[CF_OverwriteTemplate] @CFT_ID int as
--begin tran declare @CFT_ID int select @CFT_ID = 7

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#RE_CashFlow_Group'))
drop table #RE_CashFlow_Group
CREATE TABLE #RE_CashFlow_Group(
[ID] [int] IDENTITY(1,1) NOT NULL,
OLD_CFG_ID int,
CFG_CODE [varchar](10) NULL,
CFG_DESC [varchar](40) NULL,
CFT_ID [int] NULL,
OLD_CFT_ID [int] NULL,
CFG_REQUIRED [bit] NULL,
CFG_SQL [varchar](max) NULL,
Bold bit null,
CFG_SEQ [int] NULL)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#RE_CashFlow_SubGroup'))
drop table #RE_CashFlow_SubGroup
CREATE TABLE #RE_CashFlow_SubGroup(
ID [int] IDENTITY(1,1) NOT NULL,
OLD_CFSG_ID [int],
CFG_ID [int] NULL,
OLD_CFG_ID [int] NULL,
CFG_CODE [varchar](10) NULL,
CFG_DESC [varchar](40) NULL,
CFSG_REQUIRED [bit] NULL,
CFSG_SQL [varchar](max) NULL,
CFSG_SEQ [int] NULL,
Bold bit null,
UnderLining varchar(30) null,
Totaling varchar(30) null)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#RE_CashFlow_CostCodes'))
drop table #RE_CashFlow_CostCodes
CREATE TABLE #RE_CashFlow_CostCodes(
ID [int] IDENTITY(1,1) NOT NULL,
OLD_CFCC_ID [int],
CFSG_ID [int] NULL,
OLD_CFSG_ID [int] NULL,
lv1ID [int] NULL,
lv2ID [int] NULL,
lv3ID [int] NULL,
lv4ID [int] NULL,
lv1Cost_Types_ID [int] NULL,
lv2Cost_Types_ID [int] NULL,
lv3Cost_Types_ID [int] NULL,
lv4Cost_Types_ID [int] NULL)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#RE_CashFlow_GLAccts'))
drop table #RE_CashFlow_GLAccts
CREATE TABLE #RE_CashFlow_GLAccts(
ID [int] IDENTITY(1,1) NOT NULL,
OLD_CFGL_ID [int],
CFSG_ID [int] NULL,
OLD_CFSG_ID [int] NULL,
ACCOUNT_NUMBER [varchar](21) NULL,
Include [varchar](10) NULL,
ACCT_TYPE varchar(1) null,
CLASS varchar(4) null,
SUB_CLASS varchar(4) null)

DECLARE @Template_ID int
select @Template_ID = t.CFT_TEMPLATE_ID from RE_CashFlow_Type t where CFT_ID = @CFT_ID

exec CF_DeleteReport @CFT_ID, 0

insert #RE_CashFlow_Group(OLD_CFG_ID, CFG_CODE, CFG_DESC, CFT_ID, OLD_CFT_ID, CFG_REQUIRED, CFG_SQL, CFG_SEQ, Bold)
select CFG_ID, CFG_CODE, CFG_DESC, @CFT_ID, @Template_ID, CFG_REQUIRED, CFG_SQL, CFG_SEQ, Bold
from RE_CashFlow_Group 
where CFT_ID = @Template_ID

insert #RE_CashFlow_SubGroup(OLD_CFSG_ID, CFG_ID, OLD_CFG_ID, CFG_CODE, CFG_DESC, CFSG_REQUIRED, CFSG_SQL, CFSG_SEQ, Bold, UnderLining, Totaling)
select s.CFSG_ID, -1, s.CFG_ID, s.CFG_CODE, s.CFG_DESC, s.CFSG_REQUIRED, s.CFSG_SQL, s.CFSG_SEQ, s.Bold, UnderLining, Totaling
from RE_CashFlow_Group g
join RE_CashFlow_SubGroup s on s.CFG_ID = g.CFG_ID
where CFT_ID = @Template_ID

insert #RE_CashFlow_CostCodes(OLD_CFCC_ID, CFSG_ID, OLD_CFSG_ID, lv1ID, lv2ID, lv3ID, lv4ID, 
lv1Cost_Types_ID, lv2Cost_Types_ID, lv3Cost_Types_ID, lv4Cost_Types_ID)
select cc.CFCC_ID, -1, cc.CFSG_ID, cc.lv1ID, cc.lv2ID, cc.lv3ID, cc.lv4ID, 
cc.lv1Cost_Types_ID, cc.lv2Cost_Types_ID, cc.lv3Cost_Types_ID, cc.lv4Cost_Types_ID
from RE_CashFlow_Group g
join RE_CashFlow_SubGroup s on s.CFG_ID = g.CFG_ID
join RE_CashFlow_CostCodes cc on cc.CFSG_ID = s.CFSG_ID
where CFT_ID = @Template_ID

insert #RE_CashFlow_GLAccts(OLD_CFGL_ID, CFSG_ID, OLD_CFSG_ID, ACCOUNT_NUMBER, Include, ACCT_TYPE, CLASS, SUB_CLASS)
select gl.CFGL_ID, -1, gl.CFSG_ID, gl.ACCOUNT_NUMBER, gl.Include, gl.ACCT_TYPE, gl.CLASS, gl.SUB_CLASS
from RE_CashFlow_Group g
join RE_CashFlow_SubGroup s on s.CFG_ID = g.CFG_ID
join RE_CashFlow_GLAccts gl on gl.CFSG_ID = s.CFSG_ID
where CFT_ID = @Template_ID

insert RE_CashFlow_Group(OLD_CFG_ID, CFG_CODE, CFG_DESC, CFT_ID, OLD_CFT_ID, CFG_REQUIRED, CFG_SQL, CFG_SEQ, Bold)
select OLD_CFG_ID, CFG_CODE, CFG_DESC, CFT_ID, OLD_CFT_ID, CFG_REQUIRED, CFG_SQL, CFG_SEQ, Bold
from #RE_CashFlow_Group

declare @MAX_SG_ID int 
select @MAX_SG_ID = MAX(CFSG_ID) from RE_CashFlow_SubGroup

insert RE_CashFlow_SubGroup(OLD_CFSG_ID, CFG_ID, OLD_CFG_ID, CFG_CODE, CFG_DESC, CFSG_REQUIRED, CFSG_SQL, CFSG_SEQ, Bold, UnderLining, Totaling)
select OLD_CFSG_ID, g.CFG_ID, sg.OLD_CFG_ID, sg.CFG_CODE, sg.CFG_DESC, CFSG_REQUIRED, CFSG_SQL, CFSG_SEQ, sg.Bold, sg.UnderLining, sg.Totaling
from #RE_CashFlow_SubGroup sg
join RE_CashFlow_Group g on sg.OLD_CFG_ID = g.OLD_CFG_ID
where g.CFT_ID = @CFT_ID

insert RE_CashFlow_CostCodes(OLD_CFCC_ID, CFSG_ID, OLD_CFSG_ID, lv1ID, lv2ID, lv3ID, lv4ID, 
lv1Cost_Types_ID, lv2Cost_Types_ID, lv3Cost_Types_ID, lv4Cost_Types_ID)	
select cc.OLD_CFCC_ID, sg.CFSG_ID, cc.CFSG_ID, cc.lv1ID, cc.lv2ID, cc.lv3ID, cc.lv4ID, 
cc.lv1Cost_Types_ID, cc.lv2Cost_Types_ID, cc.lv3Cost_Types_ID, cc.lv4Cost_Types_ID
from #RE_CashFlow_CostCodes cc
join RE_CashFlow_SubGroup sg on cc.OLD_CFSG_ID = sg.OLD_CFSG_ID
join RE_CashFlow_Group g on sg.CFG_ID = g.CFG_ID
where g.CFT_ID = @CFT_ID and sg.CFSG_ID > @MAX_SG_ID

insert RE_CashFlow_GLAccts(OLD_CFGL_ID, CFSG_ID, OLD_CFSG_ID, ACCOUNT_NUMBER, Include, ACCT_TYPE, CLASS, SUB_CLASS)
select gl.OLD_CFGL_ID, sg.CFSG_ID, gl.CFSG_ID, gl.ACCOUNT_NUMBER, gl.Include, gl.ACCT_TYPE, gl.CLASS, gl.SUB_CLASS
from #RE_CashFlow_GLAccts gl
join RE_CashFlow_SubGroup sg on gl.OLD_CFSG_ID = sg.OLD_CFSG_ID
join RE_CashFlow_Group g on sg.CFG_ID = g.CFG_ID
where g.CFT_ID = @CFT_ID and sg.CFSG_ID > @MAX_SG_ID

	
--rollback tran

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[COM_RPT_Transmittals]') and xtype = 'P ')  
 drop Procedure COM_RPT_Transmittals
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
 
create procedure COM_RPT_Transmittals @username varchar(500), @toContactID int, @TR_DB varchar(100), @copyTo varchar(1000), @projLine varchar(1000) as 
--declare @username varchar(500) = 'Christine', @toContactID int = 2380, @TR_DB varchar(100) = 'tr_keller_dev', @copyTo varchar(1000) = 'test', @projLine varchar(100) = ''

declare @sql nvarchar(max), @counter int = 0, @maxCols int = 9

set @sql = N'
declare @output table
(
	rowID int,
	subject varchar(100),
	toName varchar(1000),
	toAddress varchar(1000),
	toEmail varchar(1000),
	copyTo varchar(1000),
	projectHeader varchar(100),
	projectLine varchar(1000),
	fromLine varchar(500),
	transmittalNumber int,
	transmittalDate datetime,
	cols int,
	remarks varchar(400),
	groupID int,
	groupSeq int,
	groupName varchar(100),
	col1Seq int,
	col1Field varchar(100),
	col1Control varchar(100),
	col1Value varchar(150),
	ProjectCode int,
	ProjectName varchar(150),
	pri_site1 varchar(50),
	site_address varchar(200),
	site_city varchar(20),
	site_state varchar(2),
	site_zip varchar(10)'

set @counter = 2

while(@counter <= @maxCols)
begin
	set @sql = @sql + N',
	col' + convert(nvarchar(2), @counter) + 'Seq int,
	col' + convert(nvarchar(2), @counter) +  'Field varchar(100),
	col' + convert(nvarchar(2), @counter) +  'Control varchar(100),
	col' + convert(nvarchar(2), @counter) +  'Value varchar(150)'
	
	set @counter = @counter + 1
end

set @sql = @sql + ')

declare @username varchar(500) = '''+ convert(nvarchar(500), @username) + '''

insert @output (rowID, groupID, groupName, col1Seq, col1Field, col1Control, col1Value)
select ROW_NUMBER() over (order by col.GroupID, g.ParentID, g.Seq, col.Seq) [rowID], g.ID, g.Description, col.Seq [col1Seq] , col.Description [col1Field], col.ControlType [col1Control],
(select top 1
		(case 
			when col.ControlType = ''Checkbox'' then (case when std.fieldChecked = 1 then ''T'' else ''F'' end) 
			when col.ControlType = ''Textbox'' then isnull(std.fieldNotes, '''')
		end) 
		from working_SendTransmittalDetails std 
where std.username = @username and col.id = std.linkID and std.flavor = ''control'') [col1Value]
from ContactTransmittalControlDetail col 
join ContactTransmittalControlGroup g on col.GroupID = g.ID
where col.Seq % g.Cols = 1'

set @counter = 2
while(@counter <= @maxCols)
begin

set @sql = @sql + '

update @output
set col' + convert(nvarchar(2), @counter) + 'Seq = col.Seq, col' + convert(nvarchar(2), @counter) + 
'Field = col.Description, col' + convert(nvarchar(2), @counter) + 'Control = col.ControlType,
col' + convert(nvarchar(2), @counter) + 'Value = 
(select top 1
		(case 
			when col.ControlType = ''Checkbox'' then (case when std.fieldChecked = 1 then ''T'' else ''F'' end) 
			when col.ControlType = ''Textbox'' then isnull(std.fieldNotes, '''')
		end)
		from working_SendTransmittalDetails std 
where std.username = @username and col.id = std.linkID and std.flavor = ''control'')
from @output o
join ContactTransmittalControlGroup g on o.GroupID = g.ID
join ContactTransmittalControlDetail col on g.id = col.GroupID
where (col.Seq % g.cols = ' + convert(nvarchar(2), @counter) + ' OR (g.Cols % ' + convert(nvarchar(2), @counter) + 
' = 0 AND col.Seq % ' + convert(nvarchar(2), @counter) + ' = 0))
and o.groupID = g.id and o.col' + convert(nvarchar(2), @counter - 1) + 'Seq + 1 = col.Seq'

set @counter = @counter + 1

end

set @sql = @sql + '

update @output
set 
ProjectCode = sth.ProjectCode,
ProjectName = sth.ProjectName,
pri_site1 = sth.pri_site1,
site_address = sth.site_address,
site_city = sth.site_city,
site_state = sth.site_state,
site_zip = sth.site_zip,

projectLine = isnull(''' + CONVERT(nvarchar(1000), @projLine) + ''', ''''),
projectHeader = isnull(sth.projectHeader, ''''),
toName =
isnull(toLn.knownas, ''''),
toAddress = isnull(toLn.BusinessCompany, '''') + ''
'' + isnull(toLn.BusinessStreet, '''') + ''
'' + isnull(toLn.BusinessCity, '''') + '' '' + isnull(toLn.BusinessState, '''') + '' '' + isnull(toLn.BusinessPostalCode, '''') + ''
Ph: '' + isnull(toLn.BusinessTelephoneNumber, '''') + '' Fax: '' + isnull(toLn.BusinessFaxNumber, ''''),
toEmail = sth.contactEmail,
copyTo = ''' + CONVERT(nvarchar(1000), @copyTo) + ''',
subject = sth.subject, fromLine = c.knownas + 
(case when len(isnull(c.BusinessCompany, '''')) > 0 then ''('' + c.BusinessCompany + '')'' else '''' end), 
transmittalNumber = sth.transmittalNumber, transmittalDate = sth.transmittalDate, remarks = sth.remarks
from working_SendTransmittalHeader sth
join contact c on sth.ContactID = c.id
left join contact toLn on toLn.id = ' + CONVERT(nvarchar(256), @toContactID) + '
left join ' + CONVERT(nvarchar(256), @TR_DB) + '.dbo.PROJ_HEADER ph on sth.linkID = ph.pri_id
where sth.username = @username'

set @sql = @sql + '

update @output
set groupSeq = seq.rowID
from @output o
join (select ROW_NUMBER() over (order by g.Seq, g.ParentID) [rowID], g.Description
from ContactTransmittalControlGroup g) seq on o.groupName = seq.Description

update @output
set cols = 
(case
	when col2Value is null
	then 1
	when col3Value is null
	then 2
	when col4Value is null
	then 3
	when col5Value is null
	then 4
	when col6Value is null
	then 5
	when col7Value is null
	then 6
	when col8Value is null
	then 7
	when col9Value is null
	then 8
	else 9
end)'

set @sql = @sql + '

select subject, toName, toAddress, toEmail, copyTo, projectHeader, projectLine, fromLine, transmittalNumber, transmittalDate, remarks, cols, groupName, groupSeq,
col1Field, col1Control, col1Value, ProjectCode, ProjectName, pri_site1, site_address, site_city, site_state, site_zip '

set @counter = 2

while(@counter <= @maxCols)
begin
	set @sql = @sql + N',
	col' + convert(nvarchar(2), @counter) +  'Field, col' + convert(nvarchar(2), @counter) +  'Control, col' + convert(nvarchar(2), @counter) +  'Value'
	
	set @counter = @counter + 1
end

set @sql = @sql + '
from @output'

--select @sql
exec sp_executesql @sql


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[COM_RPT_TransmittalsDocuments]') and xtype = 'P ')  
 drop Procedure COM_RPT_TransmittalsDocuments
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
 
 
create procedure COM_RPT_TransmittalsDocuments @username varchar(500) as 

select DocumentType, isnull(FileNameOveride, DocumentName) DocumentName, DocumentDate 
from working_SendTransmittalDetailsDocuments
where username = @username
 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[COM_Transmittal_GetHeader]') and xtype = 'P ')  
 drop Procedure COM_Transmittal_GetHeader
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
create procedure COM_Transmittal_GetHeader 
	@username varchar(500)
as 
	--exec COM_Transmittal_GetHeader @username = 'barbara'

	--declare @username varchar(500) = 'barbara'

	declare @headCount int, @tr_db varchar(100), @sql nvarchar(max), @linkType varchar(100), @linkID int

	set @sql = 'declare	@headerFound bit = 0,
	@label1 varchar(100) = '''',
	@label2 varchar(100) = '''',
	@head1 varchar(100) = '''',
	@head2 varchar(100) = '''',
	@projLine varchar(1000) = '''''

	select @headCount = count(id)
	from working_SendTransmittalHeader where username = @username

	select @linkType = linkType, @linkID = linkID
	from working_SendTransmittalHeader where username = @username

	if @headCount > 0
	begin
		set @tr_db  = (select TreasuryDBName from companies where AutoID = (select AutoID from working_SendTransmittalHeader where username = @username))

		set @sql = @sql + ',
		@id int = ' + convert(nvarchar(12), @linkID)

		--SOME OF THESE ARE STUBS. They will not completely work but I'm adding the info necessary to finish later!
		if(@linkType = 'OPP')
		begin
			set @sql = @sql + '

			SELECT @headerFound = 0, @label1 = ''Opportunity ID:'', @label2 = ''Opportunity Num:'', 
			@head1 = rm_opportunity_id, @head2 = opportuntity_num,
            @projLine = ''
            from ' + convert(nvarchar(100), @tr_db) + '.dbo.rm_opportunity
            where rm_opportunity_id = @id'

			--update working_SendTransmittalHeader set projectHeader = 'Opportunity' where username = @username
		end
		else if(@linkType = 'ProjWO' or @linkType like 'DocP%' or @linkType like 'DocW%')
		begin
			set @sql = @sql + '

			SELECT @headerFound = 1, @label1 = ''Project/WO #:'', @label2 = ''Project:'', 
			@head1 = pri_code, @head2 = (CASE WHEN isnull(is_wo, ''F'') = ''F'' THEN pri_name ELSE pri_desc1 END),
            @projLine = (CASE WHEN isnull(is_wo, ''F'') = ''F'' THEN pri_name ELSE pri_desc1 END + '' ('' + CONVERT(nvarchar(100),pri_code) + '')
'' + isnull(site_address, '''') + ''
'' + isnull(site_city, '''') + '' '' + isnull(site_state, '''') + '' '' + isnull(site_zip, '''')) 
            from ' + convert(nvarchar(100), @tr_db) + '.dbo.PROJ_HEADER
            where pri_id = @id'

			update working_SendTransmittalHeader set projectHeader = 'Project:' where username = @username
		end
		else if(@linkType = 'SOQ')
		begin
			set @sql = @sql + '

			SELECT @headerFound = 0, @label1 = ''SO ID:'', @label2 = ''SO Num:'', 
			@head1 = so_id, @head2 = so_no,
            @projLine = ''
            from ' + convert(nvarchar(100), @tr_db) + '.dbo.SO_MASTER_HDR
            where so_id = @id'

			--update working_SendTransmittalHeader set projectHeader = 'Sales Order:' where username = @username
		end
		else if(@linkType = 'PO')
		begin
			set @sql = @sql + '

			SELECT @headerFound = 1, @label1 = ''PO Num:'', @label2 = ''Supplier:'', 
			@head1 = PO, @head2 = isnull(Supplier, '''') + isnull( '' ('' + SUPP_NAME + '')'', ''''),
            @projLine = (isnull(Supplier, '''') + isnull( '' ('' + SUPP_NAME + '')'', '''') + ''
'' + isnull(PO_Add1, '''') + ''
'' + isnull(PO_CITY, '''') + '' '' + isnull(PO_STATE, '''') + '' '' + isnull(PO_ZIP, ''''))
            from ' + convert(nvarchar(100), @tr_db) + '.dbo.PO_HEADER
            where po_id = @id'

			update working_SendTransmittalHeader set projectHeader = 'Supplier:' where username = @username
		end
		else if(@linkType = 'ST')
		begin
			set @sql = @sql + '

			SELECT @headerFound = 0, @label1 = ''Task ID:'', @label2 = ''Task Num:'', 
			@head1 = id, @head2 = Name,
            @projLine = ''
                from ' + convert(nvarchar(100), @tr_db) + '.dbo.ScheduleTasks
                where id = @id'

			--update working_SendTransmittalHeader set projectHeader = 'Task:' where username = @username
		end


	end

	set @sql = @sql + '
	
	select @headerFound [HeaderFound], @label1 [Label1], @head1 [Head1], @label2 [Label2], @head2 [Head2], @projLine [ProjLine]'

	--select @sql

	exec sp_executesql @sql

--select * from working_SendTransmittalHeader

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CON_ContactListing]') and xtype = 'P ')  
 drop Procedure CON_ContactListing
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc CON_ContactListing @type varchar(20), @CompanyID int, @ReferenceID varchar(50) as
--declare @type varchar(20), @CompanyID int, @ReferenceID varchar(50) select @type = '%', @CompanyID = 12, @ReferenceID = '%'

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ContactListing'))  
drop table #ContactListing
CREATE TABLE #ContactListing(
	ContactID int,
	[Contact Type] [varchar](20) NOT NULL,
	[Contact] [varchar](101) NOT NULL,
	[Email] [varchar](128) NULL,
	[Phone] [varchar](64) NULL,
	[Cell] [varchar](64) NULL,
	[Fax] [varchar](64) NULL,
	CompanyID int,
	CompanyName varchar(100),
	CompanyCode varchar(50)) 

declare @TRDB varchar(max) select @TRDB = c.TreasuryDBName from COMPANIES c where c.AutoID = @CompanyID

insert #ContactListing([ContactID], [Contact Type], Contact, Email, Phone, Cell, Fax, CompanyID)
select distinct c.ID, c.Type [Contact Type], 
case when ISNULL(KnownAs,'') = '' then 
	case when ISNULL(c.FirstName,'') = '' then ISNULL(c.LastName,'') 
	else ISNULL(c.FirstName,'') + ' ' + ISNULL(c.LastName,'') end
else ISNULL(KnownAs,'') end Contact, c.Email1Address [Email], 
c.BusinessTelephoneNumber [Phone], c.MobileTelephoneNumber [Cell], c.BusinessFaxNumber [Fax],
r.TargetID
from contact c
left outer join Relations r on r.ItemID = c.ID and r.ItemType = 'Contact'
where c.Type like @type
and ISNULL(r.Target,'') like @type
and ISNULL(r.TargetID,'') like @ReferenceID
and r.CompanyID = @CompanyID

declare @s varchar(max)
select @s = '
update #ContactListing set 
CompanyCode = c.CUSTOMER_CODE,
CompanyName = c.NAME
from #ContactListing cl
join '+@TRDB+'..CUSTOMERS c on c.CUSTOMER_ID = cl.CompanyID and cl.[Contact Type] = ''Customer''

update #ContactListing set 
CompanyCode = sm.SUPPLIER,
CompanyName = sm.NAME
from #ContactListing cl
join '+@TRDB+'..SUPPLIER_MASTER sm on sm.SUPPLIER_ID = cl.CompanyID and cl.[Contact Type] = ''Supplier''
'
exec(@s)

if @type in ('%', 'User')
	insert #ContactListing([Contact Type], Contact, Email, Phone, Cell, Fax, CompanyID, CompanyName, CompanyCode)
	select distinct c.Type [Contact Type], 
	case when ISNULL(KnownAs,'') = '' then 
		case when ISNULL(c.FirstName,'') = '' then ISNULL(c.LastName,'') 
		else ISNULL(c.FirstName,'') + ' ' + ISNULL(c.LastName,'') end
	else ISNULL(KnownAs,'') end Contact, c.Email1Address [Email], 
	c.BusinessTelephoneNumber [Phone], c.MobileTelephoneNumber [Cell], c.BusinessFaxNumber [Fax],
	-1, cc.Company_Name, cc.companyShortName
	from contact c
	join COMPANIES cc on cc.AutoID = @CompanyID
	where c.Type = 'User'


select * from #ContactListing order by [Contact Type], isnull(CompanyName,''), Contact

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CON_GetMailMgrReferenceList]') and xtype = 'P ')  
 drop Procedure CON_GetMailMgrReferenceList
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure CON_GetMailMgrReferenceList (@UserID int)

AS

--Declare @UserID int
--Select @UserID = 97

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#CompanyList'))  
	drop table #CompanyList
  
CREATE TABLE #CompanyList 
(
	ID int identity(1,1) not null primary key,
	CompanyID int null
)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ContactHistoryList'))  
	drop table #ContactHistoryList
  
CREATE TABLE #ContactHistoryList
(
	ID int identity(1,1) not null primary key,
	ContactHistoryID int null,
	ReferenceType varchar(10) null,
	ReferenceID int null
)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ContactHistoryRefernceList'))  
	drop table #ContactHistoryRefernceList
  
CREATE TABLE #ContactHistoryRefernceList
(
	ContactHistoryID int null,
	ReferenceName varchar(max) null
)

Declare @CompanyID int, @tr_db varchar(500), @nSQL nvarchar(max)

Insert Into #CompanyList(CompanyID)
Select Distinct ch.CompanyID
FROM         ContactHistory AS ch
WHERE     (ContactType_ID = 1) AND (ContactOwnerID = @UserID) AND (ContactID IS NULL OR
                      ContactID = 0) AND (Confirmed = 0) and IsNull(ch.CompanyID,-1) != -1
                      
Insert Into #ContactHistoryList(ContactHistoryID, ReferenceType, ReferenceID)
Select ch.ID, ch.ReferenceType, ch.ReferenceID
FROM         ContactHistory AS ch
WHERE     (ContactType_ID = 1) AND (ContactOwnerID = @UserID) AND (ContactID IS NULL OR
                      ContactID = 0) AND (Confirmed = 0) and IsNull(ch.CompanyID,-1) != -1
                      
Declare co_cur Cursor For	
Select c.AutoID, c.TreasuryDBName 
From companies c 
Inner Join #CompanyList w on w.CompanyID = c.AutoID
Where IsNull(Active,0) = 1

Open co_cur 
Fetch co_cur Into @CompanyID, @tr_db
While @@fetch_status=0
Begin
	
	Select @nSQL =
	'Insert Into #ContactHistoryRefernceList(ContactHistoryID, ReferenceName)
	Select ch.ContactHistoryID, Case IsNull(proj.pri_name,'''') When '''' Then proj.pri_desc1 Else proj.pri_name End
	From #ContactHistoryList ch
	Inner join ' + @tr_db + '.dbo.proj_header proj on proj.pri_id=ch.referenceID and ch.ReferenceType = ''ProjWO'' '
	
    execute (@nSQL)
    
    Select @nSQL =
	'Insert Into #ContactHistoryRefernceList(ContactHistoryID, ReferenceName)
	Select ch.ContactHistoryID, smh.so_no
	From #ContactHistoryList ch
	inner join ' + @tr_db + '.dbo.so_master_hdr smh on smh.so_id=ch.referenceID and ch.ReferenceType = ''SOQ'' '

    execute (@nSQL)
    
    Select @nSQL =
	'Insert Into #ContactHistoryRefernceList(ContactHistoryID, ReferenceName)
	Select ch.ContactHistoryID, opp.opportuntity_num
	From #ContactHistoryList ch
	Inner join ' + @tr_db + '.dbo.rm_opportunity opp on opp.rm_opportunity_id=ch.referenceID and ch.ReferenceType = ''OPP'' '
	
	execute (@nSQL)
    
    Select @nSQL =
	'Insert Into #ContactHistoryRefernceList(ContactHistoryID, ReferenceName)
	Select ch.ContactHistoryID, ph.PO
	From #ContactHistoryList ch
	Inner join ' + @tr_db + '.dbo.po_header ph on ph.po_id=ch.referenceID and ch.ReferenceType = ''PO'' '
	
    execute (@nSQL)
	
	Fetch co_cur Into @CompanyID, @tr_db
End

Close co_cur
Deallocate co_cur

Select ContactHistoryID, ReferenceName From #ContactHistoryRefernceList



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CON_SetPreference]') and xtype = 'P ')  
 drop Procedure CON_SetPreference
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
CREATE proc [dbo].[CON_SetPreference] @Contact_ID int, @PreferenceType varchar(max), @Preference varchar(max), @Company_ID int = -1 as
if exists (select * from ContactPreferences 
	where Contact_ID = @Contact_ID and PreferenceType = @PreferenceType and Company_ID = @Company_ID)
	update ContactPreferences 
	set Preference = @Preference
	where Contact_ID = @Contact_ID and PreferenceType = @PreferenceType and Company_ID = @Company_ID
else
	insert ContactPreferences(Contact_ID, Company_ID, PreferenceType, Preference)
	select @Contact_ID, @Company_ID, @PreferenceType, @Preference 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ContactAddAppointmentOrTask]') and xtype = 'P ')  
 drop Procedure ContactAddAppointmentOrTask
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[ContactAddAppointmentOrTask] @RegardingContact int, @AssignedContact int, @FromContact int, @CompanyID int, 
@Subject varchar(500), @Body varchar(max), @ContactType_ID int, --20 = appt, 18 = task
@ReferenceType varchar(50), @ReferenceID int, @StartDate datetime, @EndDate datetime, @PercentComplete money as

--declare @RegardingContact int, @AssignedContact int, @FromContact int, @CompanyID int, 
--@Subject varchar(500), @Body varchar(max), @ContactType_ID int, --20 = appt, 18 = task
--@ReferenceType varchar(50), @ReferenceID int, @StartDate datetime, @EndDate datetime

declare @ContactHistoryID int, @OutlookManagerNotification int

--add ContactHistory, relations, contact_AptsTasks, OutlookManagerNotification
if not exists (select * from ContactHistory where ContactOwnerID = @AssignedContact 
and ReferenceType = @ReferenceType and ReferenceID = @ReferenceID and ContactType_ID = @ContactType_ID)
begin
	insert ContactHistory(ContactID, ContactOwnerID, DateCreated, DateModified, CompanyID, Succeeded, Subject, Body, ContactType_ID, EmailStatus, ReferenceType, ReferenceID)
	select @RegardingContact, @AssignedContact, getdate(), getdate(), @CompanyID, 1, @Subject, @Body, @ContactType_ID, 'S', @ReferenceType, @ReferenceID 

	select @ContactHistoryID = SCOPE_IDENTITY()

	insert contact_AptsTasks(contactHistoryID, AssignedTo, StartDate, EndDate, pct_comp, PreviousAssigned)
	select @ContactHistoryID, @AssignedContact, @StartDate, @EndDate, @PercentComplete, null

	--insert Relations(Target, TargetID, ItemType, ItemID, CompanyID)
	--select 'Schedule', @ReferenceID, 'Contact', @FromContact, @CompanyID
	insert Relations(Target, TargetID, ItemType, ItemID, CompanyID)
	select 'Schedule', @ReferenceID, 'Contact', @AssignedContact, @CompanyID

	insert OutlookManagerNotification(LinkID, LinkType, Mgr_TriggerUDI, Mgr_SeenItYN, Mgr_TaskCompleteYN, ExternalReference, uri, SyncStamp, ItemID)
	select @ContactHistoryID, case when @ContactType_ID = 20 then 'Appointment' else 'Task' end, 'I', 'N', 'N', null, null, null, null

	select @OutlookManagerNotification = scope_identity()
end
else
begin
	select @ContactHistoryID = id from ContactHistory where ContactOwnerID = @AssignedContact 
	and ReferenceType = @ReferenceType and ReferenceID = @ReferenceID and ContactType_ID = @ContactType_ID
	select @OutlookManagerNotification = OUT_PKkey
	from OutlookManagerNotification where LinkID = @ContactHistoryID
	
	update OutlookManagerNotification set 
	Mgr_TriggerUDI = 'U',
	Mgr_SeenItYN = 'N'
	where OUT_PKkey = @OutlookManagerNotification
	
	update ContactHistory set 
	Subject = @Subject,
	Body = @Body,
	ContactID = @RegardingContact,
	ContactOwnerID = @AssignedContact,
	DateModified = GETDATE(),
	ChangedExternal = 0	
	where ID = @ContactHistoryID
	
	update contact_AptsTasks set
	AssignedTo = @AssignedContact,
	StartDate = @StartDate, 
	EndDate = @EndDate, 
	pct_comp = @PercentComplete, 
	PreviousAssigned = case when AssignedTo != @AssignedContact then AssignedTo else PreviousAssigned end
	where contactHistoryID = @ContactHistoryID
end

select @OutlookManagerNotification as OutlookManagerNotification


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ContactAppointmentOrTask_EditAdd]') and xtype = 'P ')  
 drop Procedure ContactAppointmentOrTask_EditAdd
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc ContactAppointmentOrTask_EditAdd @AssignedContact int, @FromContact int, @CompanyID int, 
@Subject varchar(500), @Body varchar(max), 
@ContactType_ID int, --20 = appt, 18 = task.... Eric & Barb : use 18
@ReferenceType varchar(50), /*Eric use 'Incident Assignment', Barb use 'UAT Assignment'*/ 
@ReferenceID int, /*Eric use your IncidentID, Barb use your ItemID */
@StartDate datetime, --use datetime.Now
@EndDate datetime, --Null
@PercentComplete money --0
as

/*
	Eric & Barb... you can use the return value (OutlookManagerNotification) as an id back to the task if you like
*/


--declare @RegardingContact int, @AssignedContact int, @FromContact int, @CompanyID int, 
--@Subject varchar(500), @Body varchar(max), @ContactType_ID int, --20 = appt, 18 = task
--@ReferenceType varchar(50), @ReferenceID int, @StartDate datetime, @EndDate datetime

declare @ContactHistoryID int, @OutlookManagerNotification int, @RegardingContact int = -1 

--add ContactHistory, relations, contact_AptsTasks, OutlookManagerNotification
if not exists (select * from ContactHistory where ContactOwnerID = @AssignedContact 
and ReferenceType = @ReferenceType and ReferenceID = @ReferenceID and ContactType_ID = @ContactType_ID)
begin
	insert ContactHistory(ContactID, ContactOwnerID, DateCreated, DateModified, CompanyID, Succeeded, Subject, Body, ContactType_ID, EmailStatus, ReferenceType, ReferenceID)
	select @RegardingContact, @AssignedContact, getdate(), getdate(), @CompanyID, 1, @Subject, @Body, @ContactType_ID, 'S', @ReferenceType, @ReferenceID 

	select @ContactHistoryID = SCOPE_IDENTITY()

	insert contact_AptsTasks(contactHistoryID, AssignedTo, StartDate, EndDate, pct_comp, PreviousAssigned)
	select @ContactHistoryID, @AssignedContact, @StartDate, @EndDate, @PercentComplete, null

	insert Relations(Target, TargetID, ItemType, ItemID, CompanyID)
	select @ReferenceType, @ReferenceID, 'Contact', @AssignedContact, @CompanyID

	insert OutlookManagerNotification(LinkID, LinkType, Mgr_TriggerUDI, Mgr_SeenItYN, Mgr_TaskCompleteYN, ExternalReference, uri, SyncStamp, ItemID)
	select @ContactHistoryID, case when @ContactType_ID = 20 then 'Appointment' else 'Task' end, 'I', 'N', 'N', null, null, null, null

	select @OutlookManagerNotification = scope_identity()
end
else
begin
	select @ContactHistoryID = id from ContactHistory where ContactOwnerID = @AssignedContact 
	and ReferenceType = @ReferenceType and ReferenceID = @ReferenceID and ContactType_ID = @ContactType_ID
	select @OutlookManagerNotification = OUT_PKkey
	from OutlookManagerNotification where LinkID = @ContactHistoryID
	
	update OutlookManagerNotification set 
	Mgr_TriggerUDI = 'U',
	Mgr_SeenItYN = 'N'
	where OUT_PKkey = @OutlookManagerNotification
	
	update ContactHistory set 
	Subject = @Subject,
	Body = @Body,
	ContactID = @RegardingContact,
	ContactOwnerID = @AssignedContact,
	DateModified = GETDATE(),
	ChangedExternal = 0	
	where ID = @ContactHistoryID
	
	update contact_AptsTasks set
	AssignedTo = @AssignedContact,
	StartDate = @StartDate, 
	EndDate = @EndDate, 
	pct_comp = @PercentComplete, 
	PreviousAssigned = case when AssignedTo != @AssignedContact then AssignedTo else PreviousAssigned end
	where contactHistoryID = @ContactHistoryID
end

select @OutlookManagerNotification as OutlookManagerNotification


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ContactDeleteAppointmentOrTask]') and xtype = 'P ')  
 drop Procedure ContactDeleteAppointmentOrTask
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[ContactDeleteAppointmentOrTask] @AssignedContact int, @ContactType_ID int, @ReferenceType varchar(50), @ReferenceID int as

--declare @RegardingContact int, @AssignedContact int, @FromContact int, @CompanyID int, 
--@Subject varchar(500), @Body varchar(max), @ContactType_ID int, --20 = appt, 18 = task
--@ReferenceType varchar(50), @ReferenceID int, @StartDate datetime, @EndDate datetime

declare @ContactHistoryID int, @OutlookManagerNotification int

select @ContactHistoryID = id 
from ContactHistory where ContactOwnerID = @AssignedContact 
and ReferenceType = @ReferenceType and ReferenceID = @ReferenceID and ContactType_ID = @ContactType_ID

select @OutlookManagerNotification = OUT_PKkey
from OutlookManagerNotification where LinkID = @ContactHistoryID
	
update OutlookManagerNotification set 
Mgr_TriggerUDI = 'D',
Mgr_SeenItYN = 'N'
where OUT_PKkey = @OutlookManagerNotification
	
delete ContactHistory where ID = @ContactHistoryID	
delete contact_AptsTasks where contactHistoryID = @ContactHistoryID

select @OutlookManagerNotification as OutlookManagerNotification


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ContactHistoryContactPreLoad]') and xtype = 'P ')  
 drop Procedure ContactHistoryContactPreLoad
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
-- exec ContactHistoryContactPreLoad 'FB238B06-A704-4E18-88FF-68D532F66840', 12, 2 
CREATE proc ContactHistoryContactPreLoad @UID uniqueidentifier, @CompanyID int, @ContactID int--, @SourceID int, @SourceType varchar(50)
as
begin
	declare @sql varchar(max), @tr_db varchar(500)
	
	select @tr_db=TreasuryDBName from companies where autoID=@CompanyID

	select @sql = '
	insert into ContactHistoryContactTemp (UID, ContactID, Contact, SourceType, SourceID, Source)
	select '''+cast(@UID as varchar(36))+''', '+cast(@ContactID as varchar(15))+', c.KnownAs, c.Type, isnull(cr.TargetID, c.ID), 
		case when c.Type = ''Customer'' then tc.Name 
			 when c.Type = ''Supplier'' then ts.Name 
			 when c.Type = ''Prospect'' then tp.Name 
			 when c.Type = ''Employee'' then isnull(te.emp_first_name,'''')+'' ''+isnull(te.emp_last_name,'''') 
			 when c.Type = ''Tenant'' then ten.Tenant 
			 else ''*Reflex User*'' end
	from contact c
	left outer join Relations cr on cr.ItemID=c.ID and cr.ItemType=''Contact'' and cr.CompanyID='+cast(@CompanyID as varchar(15))+'
	left outer join ' + @tr_db + '.dbo.CUSTOMERS tc on tc.CUSTOMER_ID=cr.TargetID and cr.Target = ''Customer''
	left outer join ' + @tr_db + '.dbo.SUPPLIER_MASTER ts on ts.SUPPLIER_ID=cr.TargetID and cr.Target = ''Supplier''
	left outer join ' + @tr_db + '.dbo.PROSPECTS tp on tp.PROSPECT_ID=cr.TargetID and cr.Target = ''Prospect''
	left outer join ' + @tr_db + '.dbo.employee te on te.emp_no=cr.TargetID and cr.Target = ''Employee''
	left outer join ' + @tr_db + '.dbo.RE_Tenant ten on ten.Tenant_ID=cr.TargetID and cr.Target = ''Tenant''
	where c.ID='+cast(@ContactID as varchar(15))
	exec(@sql)
end
 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ContactHistoryCreateRelation]') and xtype = 'P ')  
 drop Procedure ContactHistoryCreateRelation
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc ContactHistoryCreateRelation @ContactHistory_ID int, @Company_ID int, @FieldLink_ID int, @IDValue int, @Type_CN varchar(1)
as
begin
	insert into ContactHistoryRelation (ContactHistory_ID, Company_ID, CHR_FieldLink_ID, CHR_IDValue, CHR_Type_CN)
	select @ContactHistory_ID, @Company_ID, @FieldLink_ID, @IDValue, @Type_CN
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ContactHistoryDeleteRelation]') and xtype = 'P ')  
 drop Procedure ContactHistoryDeleteRelation
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc ContactHistoryDeleteRelation @Company_ID int, @FieldLink_ID int, @IDValue int
as
begin
	delete from ContactHistoryRelation where CHR_FieldLink_ID=@FieldLink_ID and CHR_IDValue=@IDValue and Company_ID=@Company_ID
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ContactHistoryFieldLinkGetID]') and xtype = 'P ')  
 drop Procedure ContactHistoryFieldLinkGetID
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc ContactHistoryFieldLinkGetID @TableDotField varchar(60), @FunctionDesc varchar(60)
as
begin
	if not exists( select * 
		  from ContactHistoryFieldLink
		  where CH_TableDotField = @TableDotField and CH_Function = @FunctionDesc )
	begin
		insert into ContactHistoryFieldLink (CH_TableDotField, CH_Function)
		values (@TableDotField, @FunctionDesc)
	end

	select CH_FieldLink_ID
	from ContactHistoryFieldLink
	where CH_TableDotField = @TableDotField AND CH_Function = @FunctionDesc	
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ContactHistoryGetContact]') and xtype = 'P ')  
 drop Procedure ContactHistoryGetContact
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec ContactHistoryGetContact 'All', 'FB238B06-A704-4E18-88FF-68D532F66840', 7
CREATE proc [dbo].[ContactHistoryGetContact] @type varchar(50), @UID uniqueidentifier, @CallerID int
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Contact'))
		drop table #Contact

	create table #Contact ( 
		[ContactID] [int] NULL,
		[Source] [varchar](65) NULL, 
		[Contact] [varchar](100) NULL,
		[SourceType] [varchar](50) NULL,
		[SourceID] [int] NULL
	)
	
	declare @Contact table (		
		[ContactID] [int] NULL,
		[Source] [varchar](65) NULL, 
		[Contact] [varchar](100) NULL,
		[SourceType] [varchar](50) NULL,
		[SourceID] [int] NULL
	)
	
	declare @sql varchar(max), @tr_db varchar(500), @CompanyID int,@isPurchaserSql varchar(100) = ' and isnull(IS_PURCHASER,0) = 0 '
	
	if( @type = 'All' )
		select @type = null
	else if (@type = 'Lot_Purchaser')
	begin
		select @type = 'Customer',@isPurchaserSql = ' and isnull(IS_PURCHASER,0) = 0 '
	end
	
	insert @Contact(ContactID, Contact)
	select -3 [ContactID], '<< All Contacts >>' [Contact]
	union
	select -2 [ContactID], '<< Insert New Contact >>'	[Contact]
		
	declare co_cur cursor for	
	select AutoID, TreasuryDBName from companies Where IsNull(Active,0) = 1

	open co_cur 
	fetch co_cur into @CompanyID, @tr_db
	while @@fetch_status=0
	begin
		select @sql = '
	insert #Contact(ContactID, Contact, Source, SourceType, SourceID)
		select distinct ch.ContactID, c.KnownAs,
			case when cr.Target = ''Customer'' then tc.Name when cr.Target = ''Supplier'' then ts.Name when cr.Target = ''Prospect'' then tp.Name 
			 when cr.Target = ''Employee'' then isnull(te.emp_first_name,'''')+'' ''+isnull(te.emp_last_name,'''') 
			 when cr.Target = ''Tenant'' then ten.Tenant else ''*Reflex User*'' end,
			cr.Target, cr.TargetID 
		from ContactHistory ch
		join Contact c on c.id = ch.ContactID
		join ContactType ct on ch.ContactType_ID = ct.id
		join ContactTypeGroup ctg on ct.ContactGroupID = ctg.id
		join ContactHistoryRelation hr on hr.ContactHistory_ID=ch.ID and hr.CHR_Type_CN=''C''
		join ContactHistoryLinkTemp lt on lt.FieldLink_ID=hr.CHR_FieldLink_ID and lt.IDValue=hr.CHR_IDValue and lt.Company_ID=hr.Company_ID
		join Relations cr on cr.ItemID=ch.ContactID and cr.ItemType=''Contact'' and cr.CompanyID='+cast(@CompanyID as varchar(15))+'
		left outer join ' + @tr_db + '.dbo.CUSTOMERS tc on tc.CUSTOMER_ID=cr.TargetID and cr.Target = ''Customer'' '+ @isPurchaserSql + '
		left outer join ' + @tr_db + '.dbo.SUPPLIER_MASTER ts on ts.SUPPLIER_ID=cr.TargetID and cr.Target = ''Supplier''
		left outer join ' + @tr_db + '.dbo.PROSPECTS tp on tp.PROSPECT_ID=cr.TargetID and cr.Target = ''Prospect''
		left outer join ' + @tr_db + '.dbo.employee te on te.emp_no=cr.TargetID and cr.Target = ''Employee''
		left outer join ' + @tr_db + '.dbo.RE_Tenant ten on ten.Tenant_ID=cr.TargetID and cr.Target = ''Tenant''
		where lt.UID='''+cast(@UID as varchar(36))+'''
		and (isnull(ch.isPrivate,0) = 0 or (isnull(ch.isPrivate,0) = 1 and ch.ContactOwnerID = '''+cast(@CallerID as varchar(15))+'''))
		and ch.CompanyID = '+cast(@CompanyID as varchar)+'
		and c.Type = '+case when @type is null then 'c.Type' else ''''+@type+'''' end+'
	union
		select distinct r.TargetID, c.KnownAs,
			case when cr.Target = ''Customer'' then tc.Name when cr.Target = ''Supplier'' then ts.Name when cr.Target = ''Prospect'' then tp.Name 
			 when cr.Target = ''Employee'' then isnull(te.emp_first_name,'''')+'' ''+isnull(te.emp_last_name,'''') 
			 when cr.Target = ''Tenant'' then ten.Tenant else ''*Reflex User*'' end,
			cr.Target, cr.TargetID
		from Notes n
		join Relations r on r.ItemID = n.id and r.ItemType = ''Notes''
		join Contact c on c.id = r.TargetID
		join ContactHistoryRelation hr on hr.ContactHistory_ID=n.ID and hr.CHR_Type_CN=''N''
		join ContactHistoryLinkTemp lt on lt.FieldLink_ID=hr.CHR_FieldLink_ID and lt.IDValue=hr.CHR_IDValue and lt.Company_ID=hr.Company_ID
		left outer join ContextItem ci on ci.ID=n.ContextItemId	
		left outer join Relations cr on cr.ItemID=r.TargetID and r.Target=''Contact'' and cr.ItemType=''Contact'' and cr.CompanyID='+cast(@CompanyID as varchar(15))+'
		left outer join ' + @tr_db + '.dbo.CUSTOMERS tc on tc.CUSTOMER_ID=cr.TargetID and cr.Target = ''Customer'' '+ @isPurchaserSql + '
		left outer join ' + @tr_db + '.dbo.SUPPLIER_MASTER ts on ts.SUPPLIER_ID=cr.TargetID and cr.Target = ''Supplier''
		left outer join ' + @tr_db + '.dbo.PROSPECTS tp on tp.PROSPECT_ID=cr.TargetID and cr.Target = ''Prospect''
		left outer join ' + @tr_db + '.dbo.employee te on te.emp_no=cr.TargetID and cr.Target = ''Employee''
		left outer join ' + @tr_db + '.dbo.RE_Tenant ten on ten.Tenant_ID=cr.TargetID and cr.Target = ''Tenant''	
		where lt.UID='''+cast(@UID as varchar(36))+'''
		and isnull([Public],1) = isnull(case when [Public] = 0 then (case when '''+cast(@CallerID as varchar(15))+''' = n.Owner_ID then 0 else 1 end) else [Public] end,1)
		and n.CompanyID ='+cast(@CompanyID as varchar)+' 
		and c.Type = '+case when @type is null then 'c.Type' else ''''+@type+'''' end
		exec(@sql)
		
		fetch co_cur into @CompanyID, @tr_db
	end			
	close co_cur
	deallocate co_cur
		
	insert into @Contact (ContactID, Contact, Source, SourceType, SourceID)
	select distinct ContactID, Contact, Source, SourceType, SourceID
	from #Contact
	
	insert into @Contact (ContactID, Contact, Source, SourceType, SourceID)
	select ContactID, Contact, Source, SourceType, SourceID
	from ContactHistoryContactTemp
	where UID=@UID and SourceType = case when @type is null then SourceType else @type end
	
	delete from ContactHistoryLinkTemp where UID=@UID
	delete from ContactHistoryContactTemp where UID=@UID
	
	select distinct ContactID, Contact, Source, SourceType, SourceID from @Contact order by Source, Contact
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ContactHistoryGetLinks]') and xtype = 'P ')  
 drop Procedure ContactHistoryGetLinks
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec ContactHistoryGetLinks 41
CREATE proc [dbo].[ContactHistoryGetLinks] @ContactHistory_ID int
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Link'))
		drop table #Link

	create table #Link (
		CHR_ID int,
		CH_Function varchar(60),
		CH_TableDotField varchar(60),		
		LinkValue varchar(100),
		CHR_IDValue int,
		CHR_Native_TF varchar(1),
		Company_ID int 
	)

	declare @Link table (
		CHR_ID int,
		CH_Function varchar(60),
		LinkValue varchar(100),
		CHR_Native_TF varchar(1)		
	)
	
	declare @sql varchar(max), @tr_db varchar(500), @CompanyID int
	
	insert into #Link (CHR_ID, CH_Function, CH_TableDotField, CHR_IDValue, CHR_Native_TF, Company_ID)
	select r.CHR_ID, l.CH_Function, l.CH_TableDotField, r.CHR_IDValue, r.CHR_Native_TF, r.Company_ID
	from ContactHistoryRelation r
	join ContactHistoryFieldLink l on l.CH_FieldLink_ID=r.CHR_FieldLink_ID
	where r.ContactHistory_ID = @ContactHistory_ID
	
	
	declare co_cur cursor for	
	select AutoID, TreasuryDBName from companies Where IsNull(Active,0) = 1

	open co_cur 
	fetch co_cur into @CompanyID, @tr_db
	while @@fetch_status=0
	begin
		select @sql = '
		update t
		set t.LinkValue = cast(j.so_no as varchar(15))
		from #Link t
		join ' + @tr_db + '.dbo.so_master_hdr j on j.so_id=t.CHR_IDValue
		where t.Company_ID='+cast(@CompanyID as varchar(15))+' and t.CH_TableDotField = ''SO_MASTER_HDR.SO_ID''
		
		update t
		set t.LinkValue = j.po
		from #Link t
		join ' + @tr_db + '.dbo.po_header j on j.po_id=t.CHR_IDValue
		where t.Company_ID='+cast(@CompanyID as varchar(15))+' and t.CH_TableDotField = ''PO_HEADER.PO_ID''
	
		update t
		set t.LinkValue = cast((case when isnull(j.pack_component,0) = 0 
			then cast(j.itemno as varchar(15))
			else cast(j.pack_component as varchar(15))+''-''+cast(j.itemno as varchar(15)) end) as varchar(100))
		from #Link t
		join ' + @tr_db + '.dbo.so_master_detail j on j.so_line_id=t.CHR_IDValue
		where t.Company_ID='+cast(@CompanyID as varchar(15))+' and t.CH_TableDotField = ''SO_MASTER_DETAIL.SO_LINE_ID''
		
		update t
		set t.LinkValue = h.pri_name +'' - ''+l.lot_num+'' - ''+l.block_num
		from #Link t
		join ' + @tr_db + '.dbo.PROJ_LOT l on l.proj_lot_id = t.CHR_IDValue
		join ' + @tr_db + '.dbo.PROJ_HEADER h on l.pri_id = h.pri_id
		where t.Company_ID='+cast(@CompanyID as varchar(15))+' and t.CH_TableDotField = ''PROJ_LOT.PROJ_LOT_ID''
		
		'
		exec(@sql)
	
		fetch co_cur into @CompanyID, @tr_db
	end			
	close co_cur
	deallocate co_cur
	
	insert into @Link (CHR_ID, CH_Function, LinkValue, CHR_Native_TF)
	select CHR_ID, CH_Function, LinkValue, CHR_Native_TF
	from #Link
	
	select CHR_ID, CH_Function, LinkValue, CHR_Native_TF
	from @Link
end 




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ContactHistoryGetList]') and xtype = 'P ')  
 drop Procedure ContactHistoryGetList
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


-- exec ContactHistoryGetList 'User', 7, 1, 83, 12, 7
CREATE proc [dbo].[ContactHistoryGetList] @type varchar(50), @contact_id int, @UID uniqueidentifier, @CallerID int
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ContactHistory'))
		drop table #ContactHistory

	CREATE TABLE #ContactHistory (   
		[UniqID] [int] IDENTITY(1,1) NOT NULL,
		[UserName] [varchar](500) NULL,
		[Date] [datetime] NULL,
		[Owner] [varchar](50) NULL,
		[Group] [varchar](50) NULL,
		[Type] [varchar](50) NULL,
		[GlyphID] [int] NULL,
		[Subject] [varchar](256) NULL,
		[Direction] [varchar](50) NULL,
		[Status] [bit] NULL,
		[ID] [int] NULL,
		[ContactID] [int] NULL,
		[Contact] [varchar](100) NULL,
		[Source] [varchar](65) NULL,
		[ContextItemID] [int] NULL,
		[Pri_Num] [int] NULL,
		[IsPrivate] [bit] NULL,
		[TopicalArea] [varchar](100) NULL,
		[ReferenceType] [varchar](50) NULL,
		[Reference] [varchar](50) NULL,
		[InstanceType] [varchar](20)
	)

	declare @ContactHistory table (
		[UniqID] [int] NULL,
		[UserName] [varchar](500) NULL,
		[Date] [datetime] NULL,
		[Owner] [varchar](50) NULL,
		[Group] [varchar](50) NULL,
		[Type] [varchar](50) NULL,
		[GlyphID] [int] NULL,
		[Subject] [varchar](256) NULL,
		[Direction] [varchar](50) NULL,
		[Status] [bit] NULL,
		[ID] [int] NULL,
		[ContactID] [int] NULL,
		[Contact] [varchar](100) NULL,
		[Source] [varchar](65) NULL,
		[ContextItemID] [int] NULL,
		[Pri_Num] [int] NULL,
		[IsPrivate] [bit] NULL,
		[TopicalArea] [varchar](100) NULL,
		[ReferenceType] [varchar](50) NULL,
		[Reference] [varchar](50) NULL,
		[InstanceType] [varchar](20)
	)
	
	declare @sql varchar(max), @tr_db varchar(500), @CompanyID int,@isPurchaserSql varchar(100) = ' and isnull(IS_PURCHASER,0) = 0 '
	
	if( @type = 'All' )
		select @type = null
	else if (@type = 'Lot_Purchaser')
	begin
		select @type = 'Customer',@isPurchaserSql = ' and isnull(IS_PURCHASER,0) = 0 '
	end
	
		
	if( @contact_id = -3 )
		select @contact_id = null

	-- delete any new records that were created
	exec sp_Contact_DeleteNewTasks @CallerID


	declare co_cur cursor for	
	select AutoID, TreasuryDBName from companies Where IsNull(Active,0) = 1

	open co_cur 
	fetch co_cur into @CompanyID, @tr_db
	while @@fetch_status=0
	begin
		select @sql = '
		insert #ContactHistory(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID, ContextItemID, IsPrivate, TopicalArea, ReferenceType, Reference, Source,InstanceType)
		select distinct '''+cast(@CallerID as varchar)+''', DateCreated [Date], c.KnownAs [Owner], ContactTypeGroup [Group], ContactType [Type], GlyphID, [Subject], Direction, isnull(Succeeded,0) [Status], 
		ch.ID [ID], ch.ContactID, ch.ContextItemID, ISNULL(ch.isPrivate,0), ci.Name,
		case when ch.ReferenceType = ''SOQ'' then ''Sales Order/Quote #'' when ch.ReferenceType = ''ProjWO'' then ''Project/Work Order #'' when ch.ReferenceType = ''OPP'' then ''Opportunity #'' when ch.ReferenceType = ''PO'' then ''Purchase Order'' else '''' end [ReferenceType],
		isnull(isnull(isnull(cast(proj.pri_code as varchar(50)), cast(smh.so_no as varchar(50))), cast(opp.opportuntity_num as varchar(50))), cast(po.po as varchar(50))) [Reference],
		case when cr.Target = ''Customer'' then tc.Name when cr.Target = ''Supplier'' then ts.Name when cr.Target = ''Prospect'' then tp.Name 
			 when cr.Target = ''Employee'' then isnull(te.emp_first_name,'''')+'' ''+isnull(te.emp_last_name,'''') when cr.Target = ''Tenant'' then ten.Tenant else '''' end,cc.type
		from ContactHistory ch		
		left outer join Contact c on c.id = ch.ContactOwnerID
		join ContactType ct on ch.ContactType_ID = ct.id
		join ContactTypeGroup ctg on ct.ContactGroupID = ctg.id
		join ContactHistoryRelation hr on hr.ContactHistory_ID=ch.ID and hr.CHR_Type_CN=''C''
		join ContactHistoryLinkTemp lt on lt.FieldLink_ID=hr.CHR_FieldLink_ID and lt.IDValue=hr.CHR_IDValue and lt.Company_ID=hr.Company_ID
		left outer join ContextItem ci on ci.ID=ch.ContextItemId
		left outer join ' + @tr_db + '.dbo.proj_header proj on proj.pri_id=ch.referenceID and ch.ReferenceType = ''ProjWO''
		left outer join ' + @tr_db + '.dbo.so_master_hdr smh on smh.so_id=ch.referenceID and ch.ReferenceType = ''SOQ''
		left outer join ' + @tr_db + '.dbo.rm_opportunity opp on opp.rm_opportunity_id=ch.referenceID and ch.ReferenceType = ''OPP''
		left outer join ' + @tr_db + '.dbo.po_header po on po.po_id=ch.referenceID and ch.ReferenceType = ''PO''		
		left outer join Relations cr on cr.ItemID=ch.ContactID and cr.ItemType=''Contact'' and cr.CompanyID='+cast(@CompanyID as varchar(15))+'
		left outer join Contact cc on cc.ID=isnull(cr.ItemID, ch.ContactID)
		left outer join ' + @tr_db + '.dbo.CUSTOMERS tc on tc.CUSTOMER_ID=cr.TargetID and cr.Target = ''Customer'' '+ @isPurchaserSql + '
		left outer join ' + @tr_db + '.dbo.SUPPLIER_MASTER ts on ts.SUPPLIER_ID=cr.TargetID and cr.Target = ''Supplier''
		left outer join ' + @tr_db + '.dbo.PROSPECTS tp on tp.PROSPECT_ID=cr.TargetID and cr.Target = ''Prospect''
		left outer join ' + @tr_db + '.dbo.employee te on te.emp_no=cr.TargetID and cr.Target = ''Employee''
		left outer join ' + @tr_db + '.dbo.RE_Tenant ten on ten.Tenant_ID=cr.TargetID and cr.Target = ''Tenant''		
		where lt.UID='''+cast(@UID as varchar(36))+'''
		and (isnull(ch.isPrivate,0) = 0 or (isnull(ch.isPrivate,0) = 1 and ch.ContactOwnerID = '''+cast(@CallerID as varchar(15))+'''))
		and isnull(ch.CompanyID, '+cast(@CompanyID as varchar)+') = '+cast(@CompanyID as varchar)+'
		and cc.Type = '+case when @type is null then 'cc.Type' else ''''+@type+'''' end+'
		and cc.ID = '+case when @contact_id is null then 'cc.ID' else CAST(@contact_id as varchar(15)) end+'

		insert #ContactHistory(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID, ContextItemID, IsPrivate, TopicalArea, ReferenceType, Reference, Source,InstanceType)
		select distinct '''+cast(@CallerID as varchar)+''',  DateCreated [Date], c.KnownAs [Owner], ''Note'' [Group], ''Note'' [Type],
		8 GlyphID, cast(Content as varchar(256)), ''Outgoing'', 1 [Status], n.[ID] [ID], r.TargetID, n.ContextItemID, Case When n.[Public] = 1 Then 0 Else 1 End, ci.Name, 
		case when n.ReferenceType = ''SOQ'' then ''Sales Order/Quote #'' when n.ReferenceType = ''ProjWO'' then ''Project/Work Order #'' when n.ReferenceType = ''OPP'' then ''Opportunity #'' when n.ReferenceType = ''PO'' then ''Purchase Order'' else '''' end [ReferenceType],
		isnull(isnull(isnull(cast(proj.pri_code as varchar(50)), cast(smh.so_no as varchar(50))), cast(opp.opportuntity_num as varchar(50))), cast(po.po as varchar(50))) [Reference],
		case when cr.Target = ''Customer'' then tc.Name when cr.Target = ''Supplier'' then ts.Name when cr.Target = ''Prospect'' then tp.Name 
			 when cr.Target = ''Employee'' then isnull(te.emp_first_name,'''')+'' ''+isnull(te.emp_last_name,'''') when cr.Target = ''Tenant'' then ten.Tenant else '''' end,cc.type
		from Notes n
		join Contact c on c.id = n.Owner_ID
		join Relations r on r.ItemID = n.id and r.ItemType = ''Notes''
		join ContactHistoryRelation hr on hr.ContactHistory_ID=n.ID and hr.CHR_Type_CN=''N''
		join ContactHistoryLinkTemp lt on lt.FieldLink_ID=hr.CHR_FieldLink_ID and lt.IDValue=hr.CHR_IDValue and lt.Company_ID=hr.Company_ID
		left outer join ContextItem ci on ci.ID=n.ContextItemId
		left outer join ' + @tr_db + '.dbo.proj_header proj on proj.pri_id=n.referenceID and n.ReferenceType = ''ProjWO''
		left outer join ' + @tr_db + '.dbo.so_master_hdr smh on smh.so_id=n.referenceID and n.ReferenceType = ''SOQ''
		left outer join ' + @tr_db + '.dbo.rm_opportunity opp on opp.rm_opportunity_id=n.referenceID and n.ReferenceType = ''OPP''
		left outer join ' + @tr_db + '.dbo.po_header po on po.po_id=n.referenceID and n.ReferenceType = ''PO''		
		left outer join Relations cr on cr.ItemID=r.TargetID and r.Target=''Contact'' and cr.ItemType=''Contact'' and cr.CompanyID='+cast(@CompanyID as varchar(15))+'
		left outer join Contact cc on cc.ID=isnull(cr.ItemID, r.TargetID) 
		left outer join ' + @tr_db + '.dbo.CUSTOMERS tc on tc.CUSTOMER_ID=cr.TargetID and cr.Target = ''Customer'' '+ @isPurchaserSql + '
		left outer join ' + @tr_db + '.dbo.SUPPLIER_MASTER ts on ts.SUPPLIER_ID=cr.TargetID and cr.Target = ''Supplier''
		left outer join ' + @tr_db + '.dbo.PROSPECTS tp on tp.PROSPECT_ID=cr.TargetID and cr.Target = ''Prospect''
		left outer join ' + @tr_db + '.dbo.employee te on te.emp_no=cr.TargetID and cr.Target = ''Employee''
		left outer join ' + @tr_db + '.dbo.RE_Tenant ten on ten.Tenant_ID=cr.TargetID and cr.Target = ''Tenant''		
		where lt.UID='''+cast(@UID as varchar(36))+'''
		and isnull([Public],1) = isnull(case when [Public] = 0 then (case when '''+cast(@CallerID as varchar(15))+''' = n.Owner_ID then 0 else 1 end) else [Public] end,1)
		and isnull(n.CompanyID, '+cast(@CompanyID as varchar)+') ='+cast(@CompanyID as varchar)+'
		and cc.Type = '+case when @type is null then 'cc.Type' else ''''+@type+'''' end+'
		and cc.ID = '+case when @contact_id is null then 'cc.ID' else CAST(@contact_id as varchar(15)) end	
		exec(@sql)
		print @sql
		
		fetch co_cur into @CompanyID, @tr_db
	end			
	close co_cur
	deallocate co_cur
		
	insert into @ContactHistory ([UniqID], [UserName], [Date], [Owner], [Group], [Type], [GlyphID], [Subject], [Direction], [Status], [ID],
		[ContactID], [Contact], [Source], [ContextItemID], [Pri_Num], [IsPrivate], [TopicalArea], [ReferenceType], [Reference],[InstanceType])
	select [UniqID], [UserName], [Date], [Owner], [Group], [Type], [GlyphID], [Subject], [Direction], [Status], [ID],
		[ContactID], [Contact], [Source], [ContextItemID], [Pri_Num], [IsPrivate], [TopicalArea], [ReferenceType], [Reference],[InstanceType]
	from #ContactHistory
	
	update @ContactHistory
	set Contact = (select IsNull(KnownAs,'') from Contact where ID = ContactID)

	update @ContactHistory
	set IsPrivate = ISNull(IsPrivate,0)
	where UserName = @CallerID
	
	delete from ContactHistoryLinkTemp where UID=@UID
	
	select UniqID, UserName, Date, [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID, Contact, Source, ContextItemID, IsPrivate, TopicalArea, ReferenceType, Reference,InstanceType
	from @ContactHistory 
	where UserName = @CallerID  
	order by date desc
end






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ContactHistoryGetSrcContact]') and xtype = 'P ')  
 drop Procedure ContactHistoryGetSrcContact
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


-- exec ContactHistoryGetSrcContact
CREATE proc [dbo].[ContactHistoryGetSrcContact] @type varchar(50), @SrcID int, @CompanyID int
as
begin
	declare @Contact table (
		ID int,
		KnownAs varchar(50),
		FirstName varchar(50),
		LastName varchar(50),
		Phone varchar(64),
		Email varchar(128)
	)
	
	if(@type = 'Lot_Purchaser')
		select @type = 'Customer'
	
	if( @type is not null )
	begin
		if( @type = 'User' )
		begin
			insert into @Contact (ID, KnownAs, FirstName, LastName, Phone, Email)
			select c.ID, c.KnownAs, c.FirstName, c.LastName, c.BusinessTelephoneNumber, c.Email1Address
			from Contact c
			where c.ID=@SrcID
		end
		else
		begin
			insert into @Contact (ID, KnownAs, FirstName, LastName, Phone, Email)
			select c.ID, c.KnownAs, c.FirstName, c.LastName, c.BusinessTelephoneNumber, c.Email1Address
			from Contact c
			join Relations r on r.ItemType='Contact' and r.ItemID=c.ID
			where r.CompanyID=@CompanyID and r.Target=@type and r.TargetID=@SrcID 
		end		
	end
		
	select ID, KnownAs, FirstName, LastName, Phone, Email
	from @Contact
	order by KnownAs
end





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ContactHistorySearchLink]') and xtype = 'P ')  
 drop Procedure ContactHistorySearchLink
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 


-- exec ContactHistorySearchLink 3, '', '2981', '', 12
CREATE proc [dbo].[ContactHistorySearchLink] @FieldLink_ID int, @LinkSrc varchar(50), @LinkSrcHdr varchar(50), @LinkSrcName varchar(100), @CompanyID int
as
begin
	-- THE VERY FIRST FIELD OF THE RETURNED DATASET NEEDS TO BE ALIASED AS ***[ID]***
	declare @CH_TableDotField varchar(60), @tr_db varchar(500), @sql varchar(max)
	
	select @CH_TableDotField=CH_TableDotField from ContactHistoryFieldLink where CH_FieldLink_ID=@FieldLink_ID
	select @tr_db=TreasuryDBName from COMPANIES where AutoID=@CompanyID
	
	select @LinkSrc = case when RTRIM(@LinkSrc) = '' then null else rtrim(@LinkSrc) end
	select @LinkSrcHdr = case when RTRIM(@LinkSrcHdr) = '' then null else rtrim(@LinkSrcHdr) end
	select @LinkSrcName = case when RTRIM(@LinkSrcName) = '' then null else rtrim(@LinkSrcName) end
	
	if( @CH_TableDotField = 'SO_MASTER_HDR.SO_ID' )
	begin
		select @sql = 
		'select s.SO_ID [ID], s.SO_NO [SO #], c.CUSTOMER_CODE [Customer Code], c.NAME [Customer Name], c.BILL_ADDRESS_1 [Customer Address], c.BILL_CITY [Customer City]
		from ' + @tr_db + '.dbo.SO_MASTER_HDR s
		join ' + @tr_db + '.dbo.CUSTOMERS c on c.CUSTOMER_ID=s.CUSTOMER_ID
		where s.SO_NO '+case when @LinkSrc is null then '= s.SO_NO' else ' like ''%'+@LinkSrc+'%''' end+'
		and c.NAME '+case when @LinkSrcName is null then '= c.NAME' else ' like ''%'+@LinkSrcName+'%''' end+'
		order by s.SO_NO'
		exec(@sql)
	end
	else if( @CH_TableDotField = 'PO_HEADER.PO_ID' )
	begin
		select @sql = 
		'select p.PO_ID [ID], p.po [PO #], s.SUPPLIER [Supplier Code], s.NAME [Supplier Name], s.PO_ADD1 [Supplier Address], s.PO_CITY [Supplier City] 
		from ' + @tr_db + '.dbo.PO_HEADER p
		join ' + @tr_db + '.dbo.SUPPLIER_MASTER s on s.SUPPLIER=p.SUPPLIER
		where p.po '+ case when @LinkSrc is null then '= p.po' else ' like ''%'+@LinkSrc+'%''' end+'
		and s.NAME '+ case when @LinkSrcName is null then '= s.NAME' else ' like ''%'+@LinkSrcName+'%''' end+'
		order by p.PO'
		exec(@sql)
	end
	else if( @CH_TableDotField = 'SO_MASTER_DETAIL.SO_LINE_ID' )
	begin
		select @sql = 
		'select d.SO_LINE_ID [ID], s.SO_NO [SO #], d.ITEMNO [Seq.], d.Description [Line Description], c.CUSTOMER_CODE [Customer Code], c.NAME [Customer Name], c.BILL_ADDRESS_1 [Customer Address], c.BILL_CITY [Customer City]
		from ' + @tr_db + '.dbo.SO_MASTER_DETAIL d 
		join ' + @tr_db + '.dbo.SO_MASTER_HDR s on s.SO_ID=d.so_id
		join ' + @tr_db + '.dbo.CUSTOMERS c on c.CUSTOMER_ID=s.CUSTOMER_ID
		where d.itemno '+case when @LinkSrc is null then '= d.itemno' else ' like ''%'+@LinkSrc+'%''' end+'
		and s.SO_NO '+case when @LinkSrcHdr is null then '= s.SO_NO' else ' like ''%'+@LinkSrcHdr+'%''' end+'
		and c.NAME '+case when @LinkSrcName is null then '= c.NAME' else ' like ''%'+@LinkSrcName+'%''' end+'
		order by s.SO_NO, d.ITEMNO'
		exec(@sql)
	end
	else if( @CH_TableDotField = 'PROJ_LOT.PROJ_LOT_ID' )
	begin
		select @sql = 
		'select distinct l.proj_lot_id[ID], h.pri_code[Project],h.pri_name[Project Name],g.GeographicArea[Geographic Area],l.lot_num[Lot],l.block_num[Block],l.plan_num[Plan] 
		from ' + @tr_db + '.dbo.PROJ_LOT l
		join ' + @tr_db + '.dbo.PROJ_HEADER h on l.pri_id = h.pri_id
		join ' + @tr_db + '.dbo.PROJ_DEV_INFO i on i.PRI_ID = h.pri_id
		join ' + @tr_db + '.dbo.LD_Geographic_Area g on g.Geographic_Area_ID = i.GEOGRAPHIC_AREA_ID
		left outer join ' + @tr_db + '.dbo.PROJ_LOT_AGREEMENT a on a.proj_lot_id = l.proj_lot_id and a.agreement_status_id <> 2
		left outer join ' + @tr_db + '.dbo.CUSTOMERS p1 on p1.CUSTOMER_ID = a.purchaser_id
		left outer join ' + @tr_db + '.dbo.CUSTOMERS p2 on p2.CUSTOMER_ID = a.purchaser_id
		left outer join ' + @tr_db + '.dbo.CUSTOMERS p3 on p3.CUSTOMER_ID = a.purchaser_id
		where h.pri_type = ''plc'' and 
		h.pri_name '+case when @LinkSrcHdr is null then '= h.pri_name' else ' like ''%'+@LinkSrcHdr+'%''' end+' and
		rtrim(l.lot_num)+''-''+rtrim(l.block_num) '+case when @LinkSrc is null then '= rtrim(l.lot_num)+''-''+rtrim(l.block_num) ' else ' like ''%'+@LinkSrc+'%''' end+' and 
		(isnull(p1.NAME,'''') '+case when @LinkSrcName is null then '= isnull(p1.NAME,'''')' else ' like ''%'+@LinkSrcName+'%''' end+' or
			 p2.NAME '+case when @LinkSrcName is null then '= p2.NAME' else ' like ''%'+@LinkSrcName+'%''' end+' or
			 p3.NAME '+case when @LinkSrcName is null then '= p3.NAME' else ' like ''%'+@LinkSrcName+'%''' end+')
		order by h.pri_code,h.pri_name,g.GeographicArea,l.lot_num,l.block_num,l.plan_num'
		exec(@sql)
	end
	
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ContactHistorySearchLinkSelectStmt]') and xtype = 'P ')  
 drop Procedure ContactHistorySearchLinkSelectStmt
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec ContactHistorySearchLinkSelectStmt 4, 12, 'Source'
CREATE proc [dbo].[ContactHistorySearchLinkSelectStmt] @FieldLink_ID int, @CompanyID int, @Origin varchar(50)
as
begin
	declare @CH_TableDotField varchar(60), @select_stmt varchar(max), @tr_db varchar(500)
	
	if( isnull(@FieldLink_ID, -1) = -1 )
	begin
		select @select_stmt = 'select ''No Link Type Set.'''
		goto FINISH
	end
	
	select @tr_db=TreasuryDBName from COMPANIES where AutoID=@CompanyID
	
	select @CH_TableDotField=CH_TableDotField from ContactHistoryFieldLink where CH_FieldLink_ID=@FieldLink_ID
		
	if( @CH_TableDotField = 'SO_MASTER_HDR.SO_ID' )
	begin
		if( @Origin = 'Source' )		
			select @select_stmt = 'select so_no from ' + @tr_db + '.dbo.SO_MASTER_HDR where so_no like % order by so_no'
		else if( @Origin = 'Name' )		
			select @select_stmt = 'select name from ' + @tr_db + '.dbo.CUSTOMERS where isnull(IS_PURCHASER,0)=0 and name like % order by name'
	end
	else if( @CH_TableDotField = 'PO_HEADER.PO_ID' )
	begin
		if( @Origin = 'Source' )
			select @select_stmt = 'select po from ' + @tr_db + '.dbo.PO_HEADER where po like % order by po'
		else if( @Origin = 'Name' )
			select @select_stmt = 'select name from ' + @tr_db + '.dbo.supplier_master where name like % order by name'
	end
	else if( @CH_TableDotField = 'SO_MASTER_DETAIL.SO_LINE_ID' )
	begin
		if( @Origin = 'Source' )
			select @select_stmt = 'select itemno from ' + @tr_db + '.dbo.SO_MASTER_DETAIL where itemno like % order by itemno'
		else if( @Origin = 'SourceHdr' )
			select @select_stmt = 'select so_no from ' + @tr_db + '.dbo.SO_MASTER_HDR where so_no like % order by so_no'
		else if( @Origin = 'Name' )		
			select @select_stmt = 'select name from ' + @tr_db + '.dbo.CUSTOMERS where isnull(IS_PURCHASER,0)=0 and name like % order by name'
	end
	else if( @CH_TableDotField = 'PROJ_LOT.PROJ_LOT_ID' )
	begin
		if( @Origin = 'SourceHdr' )
			select @select_stmt = 'select pri_name from  ' + @tr_db + '.dbo.PROJ_HEADER where pri_type = ''PLC'' and pri_name like % order by pri_name'
		else if( @Origin = 'Source' )
			select @select_stmt = 'select distinct rtrim(lot_num)+''-''+rtrim(block_num) from  ' + @tr_db + '.dbo.PROJ_LOT where (lot_num+''-''+block_num) like % order by rtrim(lot_num)+''-''+rtrim(block_num)'
		else if( @Origin = 'Name' )		
			select @select_stmt = 'select name from ' + @tr_db + '.dbo.CUSTOMERS where isnull(IS_PURCHASER,0)=1 and PURCHASER_TYPE_ID <> 4 and name like % order by name'
	end
	
	FINISH:
	
	select ISNULL(@select_stmt, 'select ''No Statement Defined.''') [SelectStmt]
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ContactInUseWEB]') and xtype = 'P ')  
 drop Procedure ContactInUseWEB
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[ContactInUseWEB](@Contact_ID int,@Message varchar(max) output,@InUse bit output)
as
begin

declare @NullContactID int = -2,
@Count int = 0,
@genaricMessage varchar(max)

if(@Message != 'TRONLY')
	set @Message = DB_NAME()
set @genaricMessage = 'Contact is in use and cannot be deleted.'


select @Count += COUNT(*) from Access where ISNULL(ContactID,@NullContactID) = @Contact_ID
select @Count += COUNT(*) from Approval_Contacts where ISNULL(Contact_ID,@NullContactID) = @Contact_ID
select @Count += COUNT(*) from Approvals_SOX_Log where ISNULL(Contact_ID,@NullContactID) = @Contact_ID
select @Count += COUNT(*) from COMMUNICATION_DEFAULTS where ISNULL(Contact_ID,@NullContactID) = @Contact_ID
select @Count += COUNT(*) from ContactHistory where ISNULL(ContactID,@NullContactID) = @Contact_ID
select @Count += COUNT(*) from RFQ_Notification where ISNULL(Contact_ID,@NullContactID) = @Contact_ID
select @Count += COUNT(*) from RFQ_VendorsSelected where ISNULL(Contact_ID,@NullContactID) = @Contact_ID
select @Count += COUNT(*) from scCampaignees where ISNULL(ContactID,@NullContactID) = @Contact_ID
select @Count += COUNT(*) from scLead where ISNULL(Contact_ID,@NullContactID) = @Contact_ID
select @Count += COUNT(*) from scMethodInstance where ISNULL(ContactID,@NullContactID) = @Contact_ID
select @Count += COUNT(*) from scQuoteSalesman where ISNULL(ContactID,@NullContactID) = @Contact_ID
select @Count += COUNT(*) from [SECURITY] where ISNULL(ContactID,@NullContactID) = @Contact_ID
select @Count += COUNT(*) from Security_KBI_Administrators where ISNULL(ContactID,@NullContactID) = @Contact_ID
select @Count += COUNT(*) from User_Rights where ISNULL(Contact_ID,@NullContactID) = @Contact_ID
select @Count += COUNT(*) from WS_Approval_Contacts where ISNULL(Contact_ID,@NullContactID) = @Contact_ID

if(@Message = 'TRONLY')
begin
	
	if(@Count > 0)
	begin
		set @Message = @genaricMessage
		set @InUse = 1
	end
	else
		set @InUse = 0
end
else if(@Count > 0)
begin
	set @Message = @genaricMessage
	set @InUse = 1
	select @Message[Message],@InUse[IsInUse]
end
else if (@Message = DB_NAME()) --@Message will be 'TRONLY' if called from tr
begin

	--not found in the web tables, check the tr(s).
	declare companies cursor for 
	select treasuryDBName,SQLServerName from companies
	declare @TRDB varchar(500),@SQLServer varchar(500), @sql nvarchar(4000)
	open companies
	fetch companies into @TRDB,@SQLServer
	while @@fetch_status = 0
	begin 
	
		set @sql = 'exec '+@SQLServer+'.'+@TRDB+'.dbo.ContactInUseTR @Contact_ID,@Message out,@InUse out '
		exec sp_executesql @sql, N'@Contact_ID int,@Message varchar(max) OUT, @InUse int OUT',@Contact_ID, @Message out, @InUse OUT
		
		if(@Message != DB_NAME())
			break
		fetch companies into @TRDB,@SQLServer
	end
	close companies
	deallocate companies
	
	if(@Message = DB_NAME())
	set @Message = ''

	if(@Message = '')
		set @InUse = 0
	else
		set @InUse = 1
	select @Message[Message],@InUse[IsInUse]

end




--SELECT table_name=sysobjects.name,
--         column_name=syscolumns.name,
--         datatype=systypes.name,
--         length=syscolumns.length
--    FROM sysobjects 
--    JOIN syscolumns ON sysobjects.id = syscolumns.id
--    JOIN systypes ON syscolumns.xtype=systypes.xtype
--   WHERE sysobjects.xtype='U'
--    and syscolumns.name like '%contactid%' or syscolumns.name like '%contact_id%'
--ORDER BY sysobjects.name,syscolumns.colid




end


























Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DB_ManagementReview]') and xtype = 'P ')  
 drop Procedure DB_ManagementReview
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec DB_ManagementReview 2
CREATE proc [dbo].[DB_ManagementReview] @ContactID int, @Select bit = 1 as
--declare @ContactID int = 2


	if not exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#DBMDetail'))
	CREATE TABLE #DBMDetail(
		id int not null identity(1,1) primary key,
		LinkTable varchar(100),
		LinkField varchar(100),
		LinkID int,
		[Type] varchar(50),
		[Group] varchar(50),
		SubGroup varchar(50),
		Description1 varchar(max),
		Description2 varchar(max),
		Notes varchar(max),
		[Status] varchar(50),
		EventDate datetime,
		NotificationDate datetime not null default getdate(),
		Dismissed bit not null default 0,
		Viewed datetime,
		Flag int,
		TypeImage varbinary(max),
		ForeColorName int,
		BackColorName int,
		CompanyID int,
		CompanyShortName varchar(10),
		ImagePath varchar(max))
	
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#thread'))
		drop table #thread

	create table #thread (
		chat_thread_id int,
		thread_name varchar(150),
		chat_date datetime,		
		new_messages varchar(20),
		total_messages varchar(20),
		thread_date datetime,
		new_count int,
		company_id int
	)
	
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#alert'))
		drop table #alert

	create table #alert (
		alert_id int,
		app_mod_id int,
		alert_point varchar(50),
		alert_name varchar(200),
		alert_notes varchar(max),
		received datetime,
		company_id int
	)
	
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#workflow'))
		drop table #workflow

	create table #workflow (
		wf_route_id int,
		module varchar(50),
		approval_point varchar(50),
		work_flow varchar(50),
		notes varchar(max),
		Contact varchar(50),
		submitted datetime, 
		company_id int,
		type varchar(1),
		status varchar(25)
	)
	
	declare @nsql nvarchar(max), @CompanyID int, @tr_db varchar(50)
	
	declare cur cursor for	
	select autoid, TreasuryDBName 
	from companies 
	where Active = 1
	
	open cur 
	fetch cur into @CompanyID, @tr_db
	while @@fetch_status=0
	begin
		select @nsql = '
		-- Chat
		insert into #thread (chat_thread_id, thread_name, chat_date, new_messages, total_messages, company_id)
		select t.chat_thread_id, t.thread_name, t.thread_started,  
			''New: ''+cast(0 as varchar(20)) [new_messages], ''Total: ''+cast(0 as varchar(20)) [total_messages],
			@CompanyID
		from '+@tr_db+'.dbo.chat_thread t
		join '+@tr_db+'.dbo.chat_thread_assignee a on a.chat_thread_id=t.chat_thread_id	
		where a.active_tf=''T'' and a.contact_id=@contact_id
		
		update t
		set t.thread_date=(
					select MAX(m.chat_date)
					from '+@tr_db+'.dbo.chat_message m 
					where m.chat_thread_id=t.chat_thread_id),
			t.total_messages=''Total: ''+cast(isnull((
					select COUNT(*) 
					from '+@tr_db+'.dbo.chat_message m 
					where m.chat_thread_id=t.chat_thread_id),0) as varchar(20)),
			t.new_count=isnull(( 
					select COUNT(*) 
					from '+@tr_db+'.dbo.chat_message m 
					where m.chat_thread_id=t.chat_thread_id and m.contact_id <> @contact_id and 
						m.chat_message_id > isnull((
							select max(s.chat_message_id) 
							from '+@tr_db+'.dbo.chat_message_seen s 
							join '+@tr_db+'.dbo.chat_message mm on mm.chat_message_id=s.chat_message_id
							where s.contact_id=@contact_id and mm.chat_thread_id=m.chat_thread_id),-1) ),0)
		from #thread t
		where company_id=@CompanyID
		
		delete from #thread where new_count = 0 and company_id=@CompanyID
			
		update #thread
		set new_messages=''New: ''+CAST(ISNULL(new_count,0) as varchar(20)),
			chat_date=CONVERT(VARCHAR(15),thread_date,107) 
		where company_id=@CompanyID 
		
		
		-- Alerts
		insert into #alert (alert_id, app_mod_id, alert_point, alert_name, alert_notes, received, company_id)
		select a.ID, a.APP_MOD_ID, cast(aap.alert_point as varchar(50)), aap.ALERT, a.NOTES, a.RECEIVED, @CompanyID
		from '+@tr_db+'.dbo.alert a 
		join '+@tr_db+'.dbo.AlertStakeholder s on s.ALERT_ID=a.ID	
		join '+@tr_db+'.dbo.ApplicationAlertPoint aap on aap.ID=a.AAP_ID
		where s.contact_id = @contact_id and s.Deleted = ''F'' and s.Viewed = ''F'' and a.Complete_TF = ''T''
		
		-- Workflow
		insert into #workflow (wf_route_id, module, approval_point, work_flow, notes, Contact, submitted, company_id, type)
		select distinct h.WF_Route_ID, ap.displayname, a.Approval_Point, w.Work_Flow, h.Notes, isnull(c.KnownAs, ''''), h.Submitted, @CompanyID, ''D''		
		from '+@tr_db+'.dbo.WF_Route h
		join '+@tr_db+'.dbo.WF_RouteDet d on d.WF_Route_ID=h.WF_Route_ID
		join dbo.contact c on c.ID = h.ContactID	
		join dbo.WF_ApprovalPoint a on a.WF_ID = h.WF_ApprovalPoint_ID
		join dbo.ws_approval_workflow w on w.Approval_ID = h.WS_Approval_WorkFlow_ID	
		join dbo.applicationmodule ap on ap.id=a.app_mod_id			
		left outer join DB_ManagementNotification mn on mn.LinkTable = ''WF_Route'' and LinkField = ''WF_Route_ID'' and LinkID = h.WF_Route_ID and mn.CompanyID=@CompanyID
		where isnull(mn.Dismissed,0) = 0 and isnull(d.handled,''F'')=''F'' and d.contact_id = @contact_id

		insert into #workflow (wf_route_id, module, approval_point, work_flow, notes, submitted, company_id, type, status, Contact)
		select distinct h.WF_Route_ID, ap.displayname, a.Approval_Point, w.Work_Flow, h.Notes, h.Submitted, @CompanyID, ''R'',
			case when isnull((select count(*) from '+@tr_db+'.dbo.WF_RouteDet d where d.wf_route_id = h.wf_route_id and d.Handled = ''F''),0) = 0 
				then 
					case when isnull((select count(*) from '+@tr_db+'.dbo.WF_RouteDet d where d.wf_route_id = h.wf_route_id and isnull(d.Response,'''') = ''Declined''),0) = 0
						then ''Approved'' else ''Declined'' end
				else 
				''Pending''
			end,
			case when isnull((select count(*) from '+@tr_db+'.dbo.WF_RouteDet d where d.wf_route_id = h.wf_route_id and d.Handled = ''F''),0) = 0
				then
					(select top 1 isnull(c.KnownAs, '''')
					from '+@tr_db+'.dbo.WF_RouteDet d 
					join contact c on c.id=d.contact_id
					where d.wf_route_id = h.wf_route_id and d.Handled = ''T''  
					order by d.wf_routedet_id desc)
				else '''' end
		from '+@tr_db+'.dbo.WF_Route h
		join dbo.WF_ApprovalPoint a on a.WF_ID = h.WF_ApprovalPoint_ID
		join dbo.ws_approval_workflow w on w.Approval_ID = h.WS_Approval_WorkFlow_ID	
		join dbo.applicationmodule ap on ap.id=a.app_mod_id	
		left outer join DB_ManagementNotification mn on mn.LinkTable = ''WF_Route'' and LinkField = ''WF_Route_ID'' and LinkID = h.WF_Route_ID and mn.CompanyID=@CompanyID		
		where isnull(mn.Dismissed,0) = 0 and h.contactid = @contact_id
		'
		exec sp_executesql @nsql,N'@CompanyID int, @contact_id int', @CompanyID, @ContactID
		
		fetch cur into @CompanyID, @tr_db
	end			
	close cur
	deallocate cur

	
	
	
	--get approval notifications which are addressed to me
	insert #DBMDetail(LinkTable, LinkField, LinkID, [Type], [Group], SubGroup, Description1, Description2, Notes, [Status], EventDate, 
		Viewed, Flag, TypeImage, ForeColorName, BackColorName, CompanyID, CompanyShortName, ImagePath)
	select 'Approval_Notification', 'ID', n.id, t.TypeDescription, at.Module, at.Approval_Topic, r.Description, '', r.Additional_Notes, 
		r.Status, n.Notify_Date, mn.Viewed, mn.Flag, t.TypeImage, t.ForeColorName, t.BackColorName, isnull(co.AutoID, -1), isnull(co.companyShortName,''), t.ImagePath
	from Approval_Notification n 
	join Approval_Contacts c on n.AC_ID = c.ID 
	join Approvals_Requested r on n.AR_ID = r.id
	join Approval_Topic at on at.ID = r.AT_ID
	left outer join COMPANIES co on co.autoid = r.CompanyID
	left outer join DB_ManagementNotification mn on mn.LinkTable = 'Approval_Notification' and LinkField = 'ID' and LinkID = n.id
	left outer join DB_ManagementReviewTypes t on t.id = 1
	where c.Contact_ID = @ContactID 
	and n.Status not in ('Declined', 'Approved')
	and r.Status not in ('Recalled', 'Approved', 'Declined')
	and isnull(mn.Dismissed,0) = 0
		
													  
	--get approval responses to my requests
	insert #DBMDetail(LinkTable, LinkField, LinkID, [Type], [Group], SubGroup, Description1, Description2, Notes, [Status], EventDate, 
		Viewed, Flag, TypeImage, ForeColorName, BackColorName, CompanyID, CompanyShortName, ImagePath)
	select 'Approvals_Requested', 'ID', r.id, t.TypeDescription, at.Module, at.Approval_Topic, r.Description, n.Status + ' by ' + co.KnownAs,
	n.Notes, n.Status, n.Response_Date, mn.Viewed, mn.Flag, t.TypeImage, t.ForeColorName, t.BackColorName, isnull(com.AutoID, -1), isnull(com.companyShortName,''), t.ImagePath
	from Approvals_Requested r				
	join Approval_Notification n on n.AR_ID = r.id   	
	join Approval_Contacts c on n.AC_ID = c.ID 	   
	join Contact co on co.id = c.Contact_ID
	join Approval_Topic at on at.ID = r.AT_ID
	left outer join COMPANIES com on com.autoid = r.CompanyID
	left outer join DB_ManagementNotification mn on mn.LinkTable = 'Approvals_Requested' and LinkField = 'ID' and LinkID = r.id
	left outer join DB_ManagementReviewTypes t on t.id = 2
	where r.Requestor_ID = @ContactID
	and n.Status in ('Approved', 'Declined')
	and isnull(mn.Dismissed,0) = 0

	
	--get incomming emails	


	--new chats	
	insert #DBMDetail(LinkTable, LinkField, LinkID, [Type], 
		[Group], SubGroup, Description1, Description2, Notes, [Status], 
		EventDate, Viewed, Flag, TypeImage, ForeColorName, BackColorName, CompanyID, CompanyShortName, ImagePath)
	select 'chat_thread', 'chat_thread_id', t.chat_thread_id, rt.TypeDescription,
		'', '', t.thread_name, t.new_messages, t.total_messages, '',
		t.chat_date, mn.Viewed, mn.Flag, rt.TypeImage, rt.ForeColorName, rt.BackColorName, isnull(com.AutoID, -1), isnull(com.companyShortName,''), rt.ImagePath
	from #thread t
	left outer join COMPANIES com on com.AutoID = t.company_id
	left outer join DB_ManagementNotification mn on mn.LinkTable = 'chat_thread' and LinkField = 'chat_thread_id' and LinkID = t.chat_thread_id and mn.CompanyID=com.autoid
	left outer join DB_ManagementReviewTypes rt on rt.id = 8
	where isnull(mn.Dismissed,0) = 0

	--get alerts
	insert #DBMDetail(LinkTable, LinkField, LinkID, [Type], 
		[Group], SubGroup, Description1, Description2, Notes, [Status], 
		EventDate, Viewed, Flag, TypeImage, ForeColorName, BackColorName, CompanyID, CompanyShortName, ImagePath)
	select 'Alerts', 'ID', a.alert_id, rt.TypeDescription, 
		am.DisplayName, a.alert_point, a.alert_name, a.alert_notes, '', '', a.received, 
		mn.Viewed, mn.Flag, rt.TypeImage, rt.ForeColorName, rt.BackColorName, isnull(com.AutoID, -1), isnull(com.companyShortName,''), rt.ImagePath
	from #alert a 
	join ApplicationModule am on am.id=a.APP_MOD_ID
	left outer join COMPANIES com on com.AutoID = a.company_id
	left outer join DB_ManagementNotification mn on mn.LinkTable = 'Alerts' and LinkField = 'ID' and LinkID = a.alert_id and mn.CompanyID=com.autoid
	left outer join DB_ManagementReviewTypes rt on rt.id = 10	
	where isnull(mn.Dismissed,0) = 0
	
	
	--get audit changes

	--get workflow routing that I need to approve/decline
	insert #DBMDetail(LinkTable, LinkField, LinkID, [Type], 
		[Group], SubGroup, Description1, Description2, Notes, [Status], 
		EventDate, Viewed, Flag, TypeImage, ForeColorName, BackColorName, CompanyID, CompanyShortName, ImagePath)
	select 'WF_Route', 'WF_Route_ID', w.WF_Route_ID, rt.TypeDescription, 
		w.module, w.approval_point, w.work_flow, 'Submitted by: '+w.Contact, w.notes, 'In Progress', w.submitted, 
		mn.Viewed, mn.Flag, rt.TypeImage, rt.ForeColorName, rt.BackColorName, isnull(com.AutoID, -1), isnull(com.companyShortName,''), rt.ImagePath
	from #workflow w 
	left outer join COMPANIES com on com.AutoID = w.company_id
	left outer join DB_ManagementNotification mn on mn.LinkTable = 'WF_Route' and LinkField = 'WF_Route_ID' and LinkID = w.WF_Route_ID and mn.CompanyID=com.autoid
	left outer join DB_ManagementReviewTypes rt on rt.id = 1	
	where isnull(mn.Dismissed,0) = 0 and w.type = 'D'

	--get workflow responses to my requests
	insert #DBMDetail(LinkTable, LinkField, LinkID, [Type], 
		[Group], SubGroup, Description1, Description2, Notes, [Status], 
		EventDate, Viewed, Flag, TypeImage, ForeColorName, BackColorName, CompanyID, CompanyShortName, ImagePath)
	select 'WF_Route', 'WF_Route_ID', w.WF_Route_ID, rt.TypeDescription, 
		w.module, w.approval_point, w.work_flow, 'Approver: '+w.Contact, w.notes, w.status, w.submitted, 
		mn.Viewed, mn.Flag, rt.TypeImage, rt.ForeColorName, rt.BackColorName, isnull(com.AutoID, -1), isnull(com.companyShortName,''), rt.ImagePath
	from #workflow w 
	left outer join COMPANIES com on com.AutoID = w.company_id
	left outer join DB_ManagementNotification mn on mn.LinkTable = 'WF_Route' and LinkField = 'WF_Route_ID' and LinkID = w.WF_Route_ID and mn.CompanyID=com.autoid
	left outer join DB_ManagementReviewTypes rt on rt.id = 2	
	where isnull(mn.Dismissed,0) = 0 and w.type = 'R'

	--insert #DBMDetail(LinkTable, LinkField, LinkID, [Type], 
	--	[Group], SubGroup, Description1, Description2, Notes, [Status], 
	--	EventDate, Viewed, Flag, TypeImage, ForeColorName, BackColorName, CompanyID, CompanyShortName, ImagePath)
	--select 'Approvals_Requested', 'ID', r.id, t.TypeDescription, 
	--	at.Module, at.Approval_Topic, r.Description, n.Status + ' by ' + co.KnownAs,
	--n.Notes, n.Status, n.Response_Date, mn.Viewed, mn.Flag, t.TypeImage, t.ForeColorName, t.BackColorName, isnull(com.AutoID, -1), isnull(com.companyShortName,''), t.ImagePath
	

	--"watches"
	/*special queries which monitor certain tables to alert when a specific condition is met
	for example... a watch on the contact history table to notify when a prospect has an incomming communication recorded*/

if @Select = 1
begin
	select Dismissed, [Type], [Group], SubGroup, Description1, Notes, EventDate, NotificationDate, CompanyShortName,
	cast(0 as bit) Approve, cast(0 as bit) Decline, cast('' as varchar(max)) [ApprovalNotes],
	Description2, [Status], Viewed, 
	ID, LinkTable, LinkField, LinkID, Flag, TypeImage, ForeColorName, BackColorName, CompanyID, ImagePath 
			from #DBMDetail d order by [Type], [Group], SubGroup, EventDate
end


/*
select Dismissed, [Type], [Group], SubGroup, Description1, Notes, EventDate, NotificationDate, CompanyShortName,
cast(0 as bit) Approve, cast(0 as bit) Decline, cast('' as varchar(max)) [ApprovalNotes],
Description2, [Status], Viewed, 
ID, LinkTable, LinkField, LinkID, Flag, TypeImage, ForeColorName, BackColorName, CompanyID, ImagePath 
from [dbo].[DB_ManagementReviewTable] d 
order by [Type], [Group], SubGroup, EventDate
*/


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DB_ManagementReviewGrouped]') and xtype = 'P ')  
 drop Procedure DB_ManagementReviewGrouped
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[DB_ManagementReviewGrouped] @ContactID int, @Type varchar(50), @Group varchar(50), @SubGroup varchar(50) as

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#DBMDetail'))
drop table #DBMDetail
CREATE TABLE #DBMDetail(
	id int not null identity(1,1) primary key,
	LinkTable varchar(100),
	LinkField varchar(100),
	LinkID int,
	[Type] varchar(50),
	[Group] varchar(50),
	SubGroup varchar(50),
	Description1 varchar(max),
	Description2 varchar(max),
	Notes varchar(max),
	[Status] varchar(50),
	EventDate datetime,
	NotificationDate datetime not null default getdate(),
	Dismissed bit not null default 0,
	Viewed datetime,
	Flag int,
	TypeImage varbinary(max),
	ForeColorName int,
	BackColorName int,
	CompanyID int,
	CompanyShortName varchar(10),
	ImagePath varchar(max))

exec DB_ManagementReview @ContactID, 0

select Dismissed, [Type], [Group], SubGroup, Description1, Notes, EventDate, NotificationDate, CompanyShortName,
cast(0 as bit) Approve, cast(0 as bit) Decline, cast('' as varchar(max)) [ApprovalNotes],
Description2, [Status], Viewed, 
ID, LinkTable, LinkField, LinkID, Flag, TypeImage, ForeColorName, BackColorName, CompanyID, ImagePath 
from #DBMDetail d 
where [Type] like @Type 
and [Group] like @Group 
and SubGroup like @SubGroup
order by [Type], [Group], SubGroup, EventDate


--exec DB_ManagementReviewGrouped 2, 'Alerts', 'General Construction', 'General Construction'
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DBA_AddPrimaryKey]') and xtype = 'P ')  
 drop Procedure DBA_AddPrimaryKey
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create procedure [dbo].[DBA_AddPrimaryKey] @Print bit = 1, @Execute bit = 0, @Identitycheck bit = 0, @PrintStatement bit = 0, @IncludeTempTable bit = 0 as 
--spAddPrimaryKey 1, 1, 0, 1, 0 
/*************************************************************************************************************************************

????Store Procedure Name :: spAddPrimaryKey
????Created By???????????? :: Vinay Kumar

????Purpose???????????????? ::????Add Primary key in those tables which doesn't contain primary key.
???????????????????????? If table already contains any identity column with unique data then it'll convert it into a primary key
????????????????????????????OtherWise It'll add a new identity column with a primary key constraint.
????????????????????????????Primary key constraint = PK_+<Column_name>+<Table_Name>

????Input Parameters :: 5????
???????? @Print???????????????? Type = Bit
???????????????????????? 1 for Print Statement 
???????????????????????????? 0 for not Print Statement.
???????????????????????????? [Default Value :: 1]

???????? @Execute???????????? Type = Bit 
???????????????????????????? 1 for Execute Statement
???????????????????????????? 0 for Not Execute Statement.
???????????????????????????? [Default Value :: 0]

???????? @Identitycheck Type = Bit 
???????????????????????????? check that Is any identity column contains duplicate value. 
???????????????????????????? [Default Value :: 0]

???????? @PrintStatement???? Type = Bit 
???????????????????????????? This show resutl information that which tables are updated.
???????????????????????????? 1 for print statements.
???????????????????????????? [Default Value :: 0]

???????? @IncludeTempTable???? Type = Bit 
???????????????????????????? This Flag is used to include Temporary Tables.
???????????????????????????? 1 for include Temporary tables.
???????????????????????????? [Default Value :: 0] 


????Output Parameters :: 0

*************************************************************************************************************************************/

SET NOCOUNT ON 
-- Create Tmp Table 
create table #temp11 (id int identity(1,1), tid int ,tname varchar(200),CoLName varchar(200),isidentity bit,IsTempTable bit) 
 
insert into #temp11 (tid, tname, ColName, isidentity, IsTempTable) 
select id,[name],	bb.ColName,	case when bb.tabid is null then 0 else 1 end,
case when substring([name],0,4)='temp' then 1
	when substring([name],len([name])-3,4)='temp' then 1
	When substring([name],0,3)='temp' then 1
	When substring([name],len([name])-2,3)='temp' then 1
	else 0 end
from (select distinct id, [Name] 
		from sysobjects where xtype='U' 
		and id not in 
			(select distinct parent_obj from sysobjects where xtype in ('PK','UQ') 
			and parent_obj in (select id from sysobjects where xtype='U'))) aa 
left join (select c.object_id as [tabid],	c.[Name] as ColName,	s.[name] as tabName 
			from sys.objects s 
			inner join sys.columns c on s.object_id=c.object_id 
			where type='U' and c.is_identity=1) bb 
on aa.id=bb.tabid --where tabid is null


Declare @Counter int 
Declare @Maxid int 
Declare @Tname varchar(200) 
Declare @Tcol varchar(100) 
Declare @Tid int 
Declare @ColName varchar(200) 
Declare @isidentity bit 
Declare @SqlQuery nvarchar(4000) 
declare @Result varchar(8000) 
Declare @IdentitycheckString varchar(8000)
Declare @IsTempTable bit
 
 
set @Counter=1
set @IsTempTable=0 
set @Result='' 
set @IdentitycheckString='
---------- Show identity column information'
select @Maxid=max(id) from #temp11 
 
set @SqlQuery =' 
/***************************************************************************************************************************** 
 If any table which doesn''t contain Primary key, This script add the primary key. 
 Note:- If table already contains any identity column and contain unique data then it''ll converted in to primary key 
*****************************************************************************************************************************/  
' 
print(@SqlQuery) 

set @SQlQuery='
Select ''--------- Before Script ---------'' 
select distinct [Name] as ''Table which doesn''''t contain primary key'' from sysobjects where xtype=''U'' 
and id not in (select distinct parent_obj from sysobjects where xtype in (''PK'',''UQ'') 
and parent_obj in (select id from sysobjects where xtype=''U'')) order by 1'

Execute (@sqlQuery)


 
while (@counter<=@Maxid) 
begin 
	select @Tid=Tid, @Tname=Tname, @ColName=ColName, @isidentity=isidentity, @IsTempTable=IsTempTable 
	from #temp11 where id=@counter 
	
	select top 1 @Tcol= case when substring([Name],1,charindex('_',[Name]))='' then (Upper(substring(@Tname,1,3)))+'_' 
	else substring([Name],1,charindex('_',[Name])) end from syscolumns where id=object_id(@Tname) 

	 
	set @Tcol=@Tcol+'PKkey'

	if (@Identitycheck=1 and @isidentity=1)
	begin
		set @IdentitycheckString = @IdentitycheckString +'
		select '''+@Tname+''' as ''Table_Name'', '''+@ColName+''' as ''Identity_Column_Name'', 1 as ''ISDuplicateValue'' from '+@Tname+' group by '+@ColName+' having count(*)>1
		GO'
	end 

	if (@isidentity=1) 
	begin 
		set @SQlQuery=' 
		/********************************************************************* 
		 Table Name :: '+@Tname+', Column Name :: '+@ColName+' 
		*********************************************************************/ 
		IF NOT EXISTS (select top 1 * from '+@Tname+' group by '+@ColName+' having count(*)>1) 
		begin 
			IF NOT EXISTS(select top 1 * from sysobjects where sysobjects.[name]=''PK_'+@ColName+'_'+@Tname+''') 
			begin 
				alter table ['+@Tname+'] add constraint [PK_'+@ColName+'_'+@Tname+'] primary key (['+@ColName+']) 
			End 
		End' 
		set @Result=@Result+' 
		Print ''Table :: ['+@Tname +'] Primary Column :: ['+@ColName+']'' ' 
	end 

	else 
	begin  
		set @SQlQuery=' 
		/********************************************************************* 
		 Table Name :: '+@Tname+', Column Name :: '+@Tcol+' 
		*********************************************************************/ 
		IF NOT EXISTS(select top 1 * from sysobjects where sysobjects.[name]=''PK_'+@Tcol+'_'+@Tname+''') 
		begin 
			Alter table ['+@Tname+'] add ['+@Tcol+'] int identity(1,1) constraint [PK_'+@Tcol+'_'+@Tname+'] primary key 
		end' 
		set @Result=@Result+' 
		Print ''Table :: ['+@Tname +'] Primary Column :: ['+@Tcol+']'' ' 
	end 
	
	if (@Execute=1)
	begin 
		if (@IncludeTempTable=1)
			execute (@SQlQuery) 
		else if (@IsTempTable=0)
			execute (@SQlQuery) 
	end 
	
	if (@print=1) 
	begin 
		set @SQlQuery=@SQlQuery+' 
		GO ' 
		if (@IncludeTempTable=1)
			print (@SQlQuery)
		else
		begin
			if (@IsTempTable=0)
				print (@SQlQuery)
		end
end 

set @SQlQuery=''


if (@IdentityCheck=1) 
Print (@IdentityCheckString) 

if (@printstatement=1) 
print (@Result) 


set @SQlQuery=''
set @Result=' 
' 
set @IdentitycheckString='
'
set @counter=@counter+1 

	
end-- While end 
 
drop table #temp11 
set @SQlQuery='
Select ''--------- After Script ---------'' 
select distinct [Name] as ''Table which doesn''''t contain primary key'' from sysobjects where xtype=''U'' 
and id not in (select distinct parent_obj from sysobjects where xtype in (''PK'',''UQ'') 
and parent_obj in (select id from sysobjects where xtype=''U'')) order by 1'

Execute (@sqlQuery)

---- Execute statement

--EXECUTE spAddPrimaryKey 0,1,0,0,0






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DBA_IndexDiscovery]') and xtype = 'P ')  
 drop Procedure DBA_IndexDiscovery
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc DBA_IndexDiscovery as

declare @Version int select @Version = case when substring (@@Version, 1, 25) = 'Microsoft SQL Server 2008' then 2008 else 2005 end

declare @Source varchar(100) select @Source = 'Unknown'
SET NOCOUNT ON


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#massaged_tmp_indexes'))
drop table #massaged_tmp_indexes
CREATE TABLE #massaged_tmp_indexes(
	TableID int,
	TableName varchar(max),
	IndexID int,
	IndexName varchar(max),
	IndexDefinition varchar(max),
	CurrentState varchar(50) not null default 'Implemented')

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#tmp_indexes'))
drop table #tmp_indexes
create table #tmp_indexes(
	object_id int,
	tablename varchar(max),
	tableid int,
	indexid int,
	indexname varchar(max),
	isunique bit,
	isclustered bit,
	indexfillfactor int,
	Filter_Definition varchar(max),
	keycolumns VARCHAR(max), 
	includes VARCHAR(max))

if not exists (select * from sys.tables t where t.name = 'DBA_Reflex_Index_Storage')
begin
	select @Source = 'Reflex Setup'
	create table DBA_Reflex_Index_Storage(
		id int not null identity(1,1) primary key,
		TableID int,
		TableName varchar(max),
		IndexID int,
		IndexName varchar(max),
		IndexDefinition varchar(max),
		CurrentState varchar(50) not null default 'Implemented',
		IndexSource varchar(100) not null default 'Unknown',
		DropIndex bit not null default 0,
		ResurectIndex bit not null default 0)
end

insert #tmp_indexes (object_id, tablename, tableid, indexid, indexname, isunique, isclustered, indexfillfactor, Filter_Definition )
SELECT
ixz.object_id,
tablename = QUOTENAME(scmz.name) + '.' + QUOTENAME((OBJECT_NAME(ixz.object_id))),
tableid = ixz.object_id,
indexid = ixz.index_id,
indexname = ixz.name,
isunique = INDEXPROPERTY (ixz.object_id,ixz.name,'isunique'),
isclustered = INDEXPROPERTY (ixz.object_id,ixz.name,'isclustered'),
indexfillfactor = INDEXPROPERTY (ixz.object_id,ixz.name,'indexfillfactor'),
case when @Version = 2008 then
	--SQL2008+ Filtered indexes:
	CASE
	WHEN ixz.filter_definition IS NULL
	THEN ''
	ELSE ' WHERE ' + ixz.filter_definition
	END 
else 
'' 
end 
Filter_Definition
FROM sys.indexes ixz
INNER JOIN sys.objects obz ON ixz.object_id = obz.object_id
INNER JOIN sys.schemas scmz ON obz.schema_id = scmz.schema_id
WHERE ixz.index_id > 0
AND ixz.index_id < 255 ---- 0 = HEAP index, 255 = TEXT columns index
AND INDEXPROPERTY (ixz.object_id,ixz.name,'ISUNIQUE') = 0 -- comment out to include unique and
AND INDEXPROPERTY (ixz.object_id,ixz.name,'ISCLUSTERED') = 0 -- comment out to include PK's


DECLARE @isql_key VARCHAR(max), @isql_incl VARCHAR(max), @tableid INT, @indexid INT

DECLARE index_cursor CURSOR
FOR
SELECT tableid, indexid FROM #tmp_indexes
OPEN index_cursor
FETCH NEXT FROM index_cursor INTO @tableid, @indexid

WHILE @@FETCH_STATUS <> -1
BEGIN
	SELECT @isql_key = '', @isql_incl = ''
	SELECT --ixz.name, colz.colid, colz.name, ixcolz.index_id, ixcolz.object_id, *
	--key column
	@isql_key = 
		CASE ixcolz.is_included_column
		WHEN 0 THEN 
			CASE ixcolz.is_descending_key
			WHEN 1 THEN @isql_key + COALESCE(colz.name,'') + ' DESC, '
			ELSE @isql_key + COALESCE(colz.name,'') + ' ASC, '
			END
		ELSE @isql_key END,

	--include column
	@isql_incl = 
		CASE ixcolz.is_included_column
		WHEN 1 THEN 
			CASE ixcolz.is_descending_key
			WHEN 1 THEN @isql_incl + COALESCE(colz.name,'') + ', '
			ELSE @isql_incl + COALESCE(colz.name,'') + ', ' END
		ELSE @isql_incl END
	FROM sysindexes ixz
	INNER JOIN sys.index_columns AS ixcolz ON (ixcolz.column_id > 0 AND ( ixcolz.key_ordinal > 0 OR ixcolz.partition_ordinal = 0 OR ixcolz.is_included_column != 0)	)
	AND ( ixcolz.index_id=CAST(ixz.indid AS INT) AND ixcolz.object_id=ixz.id )
	INNER JOIN sys.columns AS colz ON colz.object_id = ixcolz.object_id AND colz.column_id = ixcolz.column_id
	WHERE ixz.indid > 0 AND ixz.indid < 255
	AND (ixz.status & 64) = 0
	AND ixz.id = @tableid
	AND ixz.indid = @indexid
	ORDER BY ixz.name, 
		CASE ixcolz.is_included_column
		WHEN 1 THEN ixcolz.index_column_id
		ELSE ixcolz.key_ordinal
		END

	--remove any trailing commas from the cursor results
	IF LEN(@isql_key) > 1 SET @isql_key = LEFT(@isql_key, LEN(@isql_key) -1)
	IF LEN(@isql_incl) > 1 SET @isql_incl = LEFT(@isql_incl, LEN(@isql_incl) -1)
	--put the columns collection into our temp table
	UPDATE #tmp_indexes SET keycolumns = @isql_key, includes = @isql_incl
	WHERE tableid = @tableid AND indexid = @indexid
FETCH NEXT FROM index_cursor INTO @tableid,@indexid
END --WHILE
CLOSE index_cursor
DEALLOCATE index_cursor

--remove invalid indexes, ie ones without key columns
DELETE FROM #tmp_indexes WHERE keycolumns = ''

insert #massaged_tmp_indexes
SELECT ti.tableid, ti.TABLENAME, ti.indexid, ti.INDEXNAME, 
'IF NOT EXISTS(SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''' + ti.TABLENAME + '''' + ') AND name = N' + '''' + ti.INDEXNAME + '''' + ')' + ' ' +
'CREATE '
+ CASE WHEN ti.ISUNIQUE = 1 THEN 'UNIQUE ' ELSE '' END
+ CASE WHEN ti.ISCLUSTERED = 1 THEN 'CLUSTERED ' ELSE '' END
+ 'INDEX ' + QUOTENAME(ti.INDEXNAME)
+ ' ON ' + (ti.TABLENAME) + ' '
+ '(' + ti.keycolumns + ')'
+ CASE
WHEN ti.INDEXFILLFACTOR = 0 AND ti.ISCLUSTERED = 1 AND INCLUDES = '' THEN ti.Filter_Definition + ' WITH (SORT_IN_TEMPDB = ON) ON [' + fg.name + ']'
WHEN INDEXFILLFACTOR = 0 AND ti.ISCLUSTERED = 0 AND ti.INCLUDES = '' THEN ti.Filter_Definition + ' WITH (ONLINE = ON, SORT_IN_TEMPDB = ON) ON [' + fg.name + ']'
WHEN INDEXFILLFACTOR <> 0 AND ti.ISCLUSTERED = 0 AND ti.INCLUDES = '' THEN ti.Filter_Definition + ' WITH (ONLINE = ON, SORT_IN_TEMPDB = ON, FILLFACTOR = ' + CONVERT(VARCHAR(10),ti.INDEXFILLFACTOR) + ') ON [' + fg.name + ']'
WHEN INDEXFILLFACTOR = 0 AND ti.ISCLUSTERED = 0 AND ti.INCLUDES <> '' THEN ' INCLUDE (' + ti.INCLUDES + ') ' + ti.Filter_Definition + ' WITH (ONLINE = ON, SORT_IN_TEMPDB = ON) ON [' + fg.name + ']'
ELSE ' INCLUDE(' + ti.INCLUDES + ') ' + ti.Filter_Definition + ' WITH (FILLFACTOR = ' + CONVERT(VARCHAR(10),ti.INDEXFILLFACTOR) + ', ONLINE = ON, SORT_IN_TEMPDB = ON) ON [' + fg.name + ']'
END [IndexDefinition], 'Implemented' CurrentState
FROM #tmp_indexes ti
JOIN sys.indexes i ON ti.Object_id = i.object_id and ti.indexname = i.name 
JOIN sys.filegroups fg on i.data_space_id = fg.data_space_id
WHERE LEFT(ti.tablename,3) NOT IN ('sys', 'dt_') --exclude system tables
ORDER BY ti.tablename, ti.indexid, ti.indexname

insert DBA_Reflex_Index_Storage(TableID, TableName, IndexID, IndexName, IndexDefinition, CurrentState, IndexSource)
select TableID, TableName, IndexID, IndexName, IndexDefinition, CurrentState, @Source
from #massaged_tmp_indexes
where IndexDefinition not in (select IndexDefinition from DBA_Reflex_Index_Storage)



--SET NOCOUNT OFF


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dbh_AddControl]') and xtype = 'P ')  
 drop Procedure dbh_AddControl
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc dbh_AddControl @ContactID int, @dbh_tabs_id int, @dbh_ct_id int, @x int, @y int, @skbii_id int, @sw_id int
as
begin
	declare @ID int
	
	insert into dbh_control (dbh_tabs_id, dbh_ct_id, location_x, location_y, size_x, size_y, skbii_id, sw_id)
	select @dbh_tabs_id, @dbh_ct_id, @x, @y, ISNULL(ct.default_x,-1), ISNULL(ct.default_y,-1), @skbii_id, @sw_id
	from dbh_Control_Type ct
	where ct.id=@dbh_ct_id
	
	select @ID=@@IDENTITY	
		
	select ISNULL(@ID, -1) [ID]
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dbh_AddTabPage]') and xtype = 'P ')  
 drop Procedure dbh_AddTabPage
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc dbh_AddTabPage @ContactID int, @Name varchar(50)
as
begin
	declare @ID int
	
	insert into dbh_Tabs (contact_id, page_name, is_main_tf)
	select @ContactID, @Name, 'F'
	
	select @ID=@@IDENTITY	
		
	select ISNULL(@ID, -1) [ID]
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dbh_InitiateHome]') and xtype = 'P ')  
 drop Procedure dbh_InitiateHome
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc dbh_InitiateHome @ContactID int
as
begin
	if not exists( select * from dbh_Tabs where contact_id = @ContactID )
	begin
		insert into dbh_Tabs (contact_id, page_name, is_main_tf)
		select @ContactID, 'Main', 'T'
	end
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dbh_LoadHomeControls]') and xtype = 'P ')  
 drop Procedure dbh_LoadHomeControls
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[dbh_LoadHomeControls] @ContactID int, @dbh_tabs_id int
as
begin
	select c.id, c.dbh_ct_id, c.location_x, c.location_y, c.size_x, c.size_y, c.skbii_id
	from dbh_tabs t
    left outer join dbh_control c on t.id=c.dbh_tabs_id
    left outer join dbh_control_type ct on ct.id=c.dbh_ct_id
    where t.contact_id=@ContactID and c.dbh_tabs_id=@dbh_tabs_id
    order by t.id, c.id
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dbh_LoadHomeTabs]') and xtype = 'P ')  
 drop Procedure dbh_LoadHomeTabs
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc dbh_LoadHomeTabs @ContactID int
as
begin
	select t.id, t.page_name, isnull(t.is_main_tf,'F') [is_main_tf]
	from dbh_tabs t
    where t.contact_id=@ContactID
    order by t.id
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dbh_UDW_Add_Item]') and xtype = 'P ')  
 drop Procedure dbh_UDW_Add_Item
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc dbh_UDW_Add_Item @udw_main_id int, @name varchar(50)
as
begin
	declare @id int
	insert into dbh_UDW_Item (udw_main_id, name) values (@udw_main_id, @name)
	select @id=@@IDENTITY
	
	select @id
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dbh_UDW_Add_Main]') and xtype = 'P ')  
 drop Procedure dbh_UDW_Add_Main
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc dbh_UDW_Add_Main @name varchar(50)
as
begin
	declare @id int
	insert into dbh_UDW_Main (name) values (@name)
	select @id=@@IDENTITY
	
	select @id
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dbh_UDW_Add_SubItem]') and xtype = 'P ')  
 drop Procedure dbh_UDW_Add_SubItem
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc dbh_UDW_Add_SubItem @udw_item_id int, @name varchar(50), @value varchar(50)
as
begin
	declare @id int
	insert into dbh_UDW_SubItem (udw_item_id, name, value) values (@udw_item_id, @name, @value)
	select @id=@@IDENTITY
	
	select @id
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dbh_UDW_Delete_Item]') and xtype = 'P ')  
 drop Procedure dbh_UDW_Delete_Item
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc dbh_UDW_Delete_Item @ID int
as
begin	
	delete dbh_UDW_SubItem where udw_item_id=@ID
	
	delete dbh_UDW_Item where id=@ID
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dbh_UDW_Delete_Main]') and xtype = 'P ')  
 drop Procedure dbh_UDW_Delete_Main
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc dbh_UDW_Delete_Main @ID int
as
begin
	delete si
	from dbh_UDW_SubItem si
	join dbh_UDW_Item i on i.id=si.udw_item_id
	where i.udw_main_id=@ID
	
	delete dbh_UDW_Item where udw_main_id=@ID
	
	delete dbh_UDW_Main where id=@ID
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dbh_UDW_Delete_SubItem]') and xtype = 'P ')  
 drop Procedure dbh_UDW_Delete_SubItem
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc dbh_UDW_Delete_SubItem @ID int
as
begin	
	delete dbh_UDW_SubItem where id=@ID		
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dbh_UDW_Save_Item]') and xtype = 'P ')  
 drop Procedure dbh_UDW_Save_Item
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc dbh_UDW_Save_Item @id int, @name varchar(50)
as
begin
	update dbh_UDW_Item set name=@name where id=@id
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dbh_UDW_Save_Main]') and xtype = 'P ')  
 drop Procedure dbh_UDW_Save_Main
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc dbh_UDW_Save_Main @id int, @name varchar(50)
as
begin
	update dbh_UDW_Main set name=@name where id=@id
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dbh_UDW_Save_SubItem]') and xtype = 'P ')  
 drop Procedure dbh_UDW_Save_SubItem
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc dbh_UDW_Save_SubItem @id int, @name varchar(50), @value varchar(50)
as
begin
	update dbh_UDW_SubItem set name=@name, value=@value where id=@id
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DEF_DropAllTableConstraints]') and xtype = 'P ')  
 drop Procedure DEF_DropAllTableConstraints
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE procedure [dbo].[DEF_DropAllTableConstraints] @table varchar(255) as
--declare @table varchar(255) select @table = 'customers'
/*
!!!this procedure is used within the company copy function for the import staging database only
	Robg... this will drop all constraints on the @table
	be a bad idea to run on a production database (see me for details)
*/
declare @nr int, @c varchar(255), @t varchar(255), @sql nvarchar(1000)

DECLARE c1 CURSOR FOR 
select 2,CONSTRAINT_NAME,table_name from INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
where table_name = @table and CONSTRAINT_TYPE != 'PRIMARY KEY'
union
select 1,k.Name,s2.name from sys.foreign_keys k
inner join dbo.sysobjects s on s.id = k.referenced_object_id 
inner join dbo.sysobjects s2 on s2.id = k.[parent_object_id]
where s.name=@table
order by 1

OPEN c1
FETCH NEXT FROM c1 INTO @nr, @c ,@t
WHILE @@FETCH_STATUS = 0
BEGIN
	select @sql = 'ALTER TABLE ' + @t + ' DROP CONSTRAINT ' + @c
	print @sql
	exec sp_executesql @sql
	FETCH NEXT FROM c1 INTO @nr, @c, @t 
END
CLOSE c1
DEALLOCATE c1



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DEF_DropAllTableConstraintsAndPK]') and xtype = 'P ')  
 drop Procedure DEF_DropAllTableConstraintsAndPK
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create procedure [dbo].[DEF_DropAllTableConstraintsAndPK] @table varchar(255) as
--declare @table varchar(255) select @table = 'customers'
/*
!!!this procedure is used within the company copy function for the import staging database only
	Robg... this will drop all constraints on the @table
	be a bad idea to run on a production database (see me for details)
*/
declare @nr int, @c varchar(255), @t varchar(255), @sql nvarchar(1000)

DECLARE c1 CURSOR FOR 
select 2,CONSTRAINT_NAME,table_name from INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
where table_name = @table 
union
select 1,k.Name,s2.name from sys.foreign_keys k
inner join dbo.sysobjects s on s.id = k.referenced_object_id 
inner join dbo.sysobjects s2 on s2.id = k.[parent_object_id]
where s.name=@table
order by 1

OPEN c1
FETCH NEXT FROM c1 INTO @nr, @c ,@t
WHILE @@FETCH_STATUS = 0
BEGIN
	select @sql = 'ALTER TABLE ' + @t + ' DROP CONSTRAINT ' + @c
	print @sql
	exec sp_executesql @sql
	FETCH NEXT FROM c1 INTO @nr, @c, @t 
END
CLOSE c1
DEALLOCATE c1



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DEF_ValidateByNodeIDs]') and xtype = 'P ')  
 drop Procedure DEF_ValidateByNodeIDs
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[DEF_ValidateByNodeIDs] @CompanyId int, @username sysname as
--begin tran update working_DEF_Broken_Lineage set Validated = 0, entryrunlevel = -1
--declare @CompanyId int, @username sysname select @CompanyId = 21, @username = 'bjones'

update working_DEF_Broken_Lineage set entryrunlevel = -1
where username = @username

declare @x int select @x = 2

update l set Validated = 1, entryrunlevel = 1,
ValidationStatus= case when i.MissingHardCode = 1 or i.MissingLookup = 1 or i.MissingRequired = 1 or i.OverlappingUnique = 1 then 1	else 0 end,
BrokenChild = case when NodeID in (select DependsUponNodeID from working_DEF_Broken_Lineage l2 where username = @username 
	and Validated = 1 and (ValidationStatus = 1 or BrokenChild = 1)) then 1 else 0 end
from working_DEF_Broken_Lineage l
left outer join DEF_Tables_Import i on l.TableName = i.TableName and l.Flavour = i.Flavour and i.CompanyID = @CompanyId
where Terminator = 1 and username = @username

/*
	linkstatus values (any validation failure ) =
		V = Validation passed
		I = Table problem 
		
	BrokenChild states that anything above is marked as 
		
*/
while @x < 100 and exists (select * from working_DEF_Broken_Lineage l2 where username = @username and Validated = 0)
begin--do not allow more than 1000 loops, this is the breakout and backup limiter (currently there are less than a max of 20 levels)

	update l set Validated = 1, EntryRunLevel = case when l.EntryRunLevel = -1 then @x else l.EntryRunLevel end,
	ValidationStatus = case when i.MissingHardCode = 1 or i.MissingLookup = 1 or i.MissingRequired = 1 or i.OverlappingUnique = 1 then 1	
	else 0 end,
	BrokenChild = case when NodeID in (select DependsUponNodeID from working_DEF_Broken_Lineage l2 where username = @username 
		and Validated = 1 and (ValidationStatus = 1 or BrokenChild = 1)) then 1 else 0 end
	from working_DEF_Broken_Lineage l
	join DEF_Tables_Import i on l.TableName = i.TableName and l.Flavour = i.Flavour and i.CompanyID = @CompanyId
	where username = @username 
	--make sure its direct lower dependents have participated in validation
	and NodeID in (select isnull(DependsUponNodeID,-1) from working_DEF_Broken_Lineage l2 where username = @username and Validated = 1)
	--make sure there are no lower dependents remaining to be validated
	and NodeID not in (select isnull(DependsUponNodeID,-1) from working_DEF_Broken_Lineage l2 where username = @username and Validated = 0)
	and l.TableName != ''
		
	update l set Validated = 1, 
	ValidationStatus = 0,
	BrokenChild = case when NodeID in (select isnull(DependsUponNodeID,-1) from working_DEF_Broken_Lineage l2 where username = @username 
		and Validated = 1 and (ValidationStatus = 1 or BrokenChild = 1)) then 1 else 0 end
	from working_DEF_Broken_Lineage l
	where username = @username 
	--make sure its direct lower dependents have participated in validation
	and NodeID in (select isnull(DependsUponNodeID,-1) from working_DEF_Broken_Lineage l2 where username = @username and Validated = 1)
	--make sure there are no lower dependents remaining to be validated
	and NodeID not in (select isnull(DependsUponNodeID,-1) from working_DEF_Broken_Lineage l2 where username = @username and Validated = 0)
	and l.TableName = ''
	
	select @x = @x + 1			
end


update src set BrokenChild = l.BrokenChild, EntryRunLevel = l.EntryRunLevel,
Validated = case when MissingHardCode = 1 or MissingLookup = 1 or MissingRequired = 1 or OverlappingUnique = 1 then 'F' else 'T' end
from DEF_Tables_Import src
join working_DEF_Broken_Lineage l on l.TableName = src.TableName and l.Flavour = src.Flavour and src.CompanyID = @CompanyId
where username = @username 
and l.TableName != ''

update src set BrokenChild = l.BrokenChild
from DEF_Topic_Import src
join working_DEF_Broken_Lineage l on l.TopicID = src.id and src.CompanyID = @CompanyId
where username = @username 
and l.TableName = ''


--select * from DEF_Tables_Import where CompanyID = 17
select * from working_DEF_Broken_Lineage where Username = @username --and changed = 1
--rollback tran

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DEF_WEBCompanyUpdateInsert]') and xtype = 'P ')  
 drop Procedure DEF_WEBCompanyUpdateInsert
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[DEF_WEBCompanyUpdateInsert] @TRDB varchar(500), @Company_Name varchar(50), @companyShortName varchar(10), @CompanyServerName varchar(500), 
@HumanDBName varchar(500), @MTR_DB varchar(100), @MTR_Server varchar(100), @hasWMS varchar(1), @MarsallingType varchar(1), @ParentCompanyAutoID int,
@CustomerID int, @SupplierID int, @MARKUP_PCT money, @WHSE_PREFIX varchar(3),

@ADD1 varchar(40), @ADD2 varchar(40), @ADD3 varchar(40), @City varchar(20), @State varchar(15), @ZIP varchar(9), @Report_Path varchar(150),
@CO_Country char(1), @Phone varchar(20), @Fax varchar(20), @Email varchar(20), @Active bit as

declare @Autoid int 
if exists (select * from companies where TreasuryDBName = @TRDB)
begin--update
	select @Autoid = AutoID from companies where TreasuryDBName = @TRDB
	update companies set
	Company_Name = @Company_Name,
	companyShortName = @companyShortName,
	CompanyServerName = @CompanyServerName,
	HumanDBName = @HumanDBName,
	SQLServerName = '['+@CompanyServerName+']',
	MTR_DB = @MTR_DB,
	MTR_Server = @MTR_Server,
	hasWMS = @hasWMS,
	MarsallingType = @MarsallingType,
	ParentCompanyAutoID = @ParentCompanyAutoID,
	CustomerID = @CustomerID,
	SupplierID = @SupplierID,
	MARKUP_PCT = @MARKUP_PCT,
	WHSE_PREFIX = @WHSE_PREFIX,
	Active = @Active	
	where TreasuryDBName = @TRDB		
end
else
begin--insert		
	insert companies(Company_ID, Company_Name, CompanyServerName, TreasuryDBName, HumanDBName, 
	SQLServerName, Active, MTR_DB, MTR_Server, hasWMS, MarsallingType, ParentCompanyAutoID, CustomerID, SupplierID, 
	companyShortName, MARKUP_PCT, WHSE_PREFIX, OLAPServerName, OLAPTreasuryDBName, OLAPWebDBName, UseOLAP)
	select REPLACE(@Company_Name, ' ', '_'), @Company_Name, @CompanyServerName, @TRDB, @HumanDBName, 
	@CompanyServerName, @Active, @MTR_DB, @MTR_Server, @hasWMS, @MarsallingType, @ParentCompanyAutoID, @CustomerID, @SupplierID, 
	@companyShortName, @MARKUP_PCT, @WHSE_PREFIX, @CompanyServerName, @TRDB, DB_NAME(), 0
	
	select @Autoid = SCOPE_IDENTITY()
	--add to dbs table
	if not exists (select * from DBS where DBName = @TRDB)
	begin
		insert DBS(DBName, ServerName, Flavour)
		select @TRDB, @CompanyServerName, 'TR'
	end
	if not exists (select * from DBS where DBName = @HumanDBName)
	begin
		insert DBS(DBName, ServerName, Flavour)
		select @HumanDBName, @CompanyServerName, 'HR'
	end
end

declare @s varchar(8000)
select @s = ' 
update '+@TRDB+'..company set 
COMPANYNAME = ''' + @Company_Name + ''', ADD1 = ''' + @ADD1 + ''', ADD2 = ''' + @Add2 + ''', ADD3 = ''' + @ADD3 + ''', 
City = ''' + @City + ''', [State] = ''' + @State + ''', ZIP = ''' + @ZIP + ''',  Report_Path = ''' + @Report_Path + ''', 
CO_Country = ''' + @CO_Country + ''', Phone = ''' + @Phone + ''', Fax = ''' + @Fax + ''', Email = ''' + @Email + ''''
exec (@s)

select @s = ' 
update '+@TRDB+'..database_Setup set
human_db = ''' + @HumanDBName + ''', web_db = ''' + DB_NAME() + ''', web_server = ''' + @CompanyServerName + ''''
exec (@s)

select @s = ' 
update '+@HumanDBName+'..database_Setup set
tr_db = ''' + @TRDB + ''', web_db = ''' + DB_NAME() + ''''
exec (@s)


select @Autoid [id]

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DocMergeLibrary_Del]') and xtype = 'P ')  
 drop Procedure DocMergeLibrary_Del
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc DocMergeLibrary_Del @DocMergeLibrary_ID int
as
begin
	delete from DocMergeLibrary where DocMergeLibrary_ID=@DocMergeLibrary_ID
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DocMergeLibrary_Dnload]') and xtype = 'P ')  
 drop Procedure DocMergeLibrary_Dnload
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc DocMergeLibrary_Dnload @DocMergeLibrary_ID int
as
begin	
	select MergeTemplate
	from DocMergeLibrary
	where DocMergeLibrary_ID=@DocMergeLibrary_ID
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DocMergeLibrary_InUp]') and xtype = 'P ')  
 drop Procedure DocMergeLibrary_InUp
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
CREATE proc DocMergeLibrary_InUp @DocMergeLibrary_ID int, @DocMergeFunction_ID int, @Company_ID int,@DefaultTopicalArea int
as
begin
	if( @DocMergeLibrary_ID = -1 )
	begin
		insert into DocMergeLibrary (DocMergeFunction_ID, Company_ID,DefaultContexItemID)
		select @DocMergeFunction_ID, @Company_ID,@DefaultTopicalArea
		
		select @DocMergeLibrary_ID=@@IDENTITY
	end
	else 
	begin
		update DocMergeLibrary
		set DocMergeFunction_ID=@DocMergeFunction_ID, Company_ID=@Company_ID,DefaultContexItemID = @DefaultTopicalArea
		where DocMergeLibrary_ID=@DocMergeLibrary_ID
	end
	
	select @DocMergeLibrary_ID
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DocMergeLibrary_Upload]') and xtype = 'P ')  
 drop Procedure DocMergeLibrary_Upload
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc DocMergeLibrary_Upload @DocMergeLibrary_ID int, @MergeTemplateName varchar(200), @MergeTemplate varbinary(max)
as
begin
	update DocMergeLibrary
	set MergeTemplateName=@MergeTemplateName, MergeTemplate=@MergeTemplate
	where DocMergeLibrary_ID=@DocMergeLibrary_ID
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_addtosourcecontrol]') and xtype = 'P ')  
 drop Procedure dt_addtosourcecontrol
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc dbo.dt_addtosourcecontrol
    @vchSourceSafeINI varchar(255) = '',
    @vchProjectName   varchar(255) ='',
    @vchComment       varchar(255) ='',
    @vchLoginName     varchar(255) ='',
    @vchPassword      varchar(255) =''

as

set nocount on

declare @iReturn int
declare @iObjectId int
select @iObjectId = 0

declare @iStreamObjectId int
select @iStreamObjectId = 0

declare @VSSGUID varchar(100)
select @VSSGUID = 'SQLVersionControl.VCS_SQL'

declare @vchDatabaseName varchar(255)
select @vchDatabaseName = db_name()

declare @iReturnValue int
select @iReturnValue = 0

declare @iPropertyObjectId int
declare @vchParentId varchar(255)

declare @iObjectCount int
select @iObjectCount = 0

    exec @iReturn = master.dbo.sp_OACreate @VSSGUID, @iObjectId OUT
    if @iReturn <> 0 GOTO E_OAError


    /* Create Project in SS */
    exec @iReturn = master.dbo.sp_OAMethod @iObjectId,
											'AddProjectToSourceSafe',
											NULL,
											@vchSourceSafeINI,
											@vchProjectName output,
											@@SERVERNAME,
											@vchDatabaseName,
											@vchLoginName,
											@vchPassword,
											@vchComment


    if @iReturn <> 0 GOTO E_OAError

    /* Set Database Properties */

    begin tran SetProperties

    /* add high level object */

    exec @iPropertyObjectId = dbo.dt_adduserobject_vcs 'VCSProjectID'

    select @vchParentId = CONVERT(varchar(255),@iPropertyObjectId)

    exec dbo.dt_setpropertybyid @iPropertyObjectId, 'VCSProjectID', @vchParentId , NULL
    exec dbo.dt_setpropertybyid @iPropertyObjectId, 'VCSProject' , @vchProjectName , NULL
    exec dbo.dt_setpropertybyid @iPropertyObjectId, 'VCSSourceSafeINI' , @vchSourceSafeINI , NULL
    exec dbo.dt_setpropertybyid @iPropertyObjectId, 'VCSSQLServer', @@SERVERNAME, NULL
    exec dbo.dt_setpropertybyid @iPropertyObjectId, 'VCSSQLDatabase', @vchDatabaseName, NULL

    if @@error <> 0 GOTO E_General_Error

    commit tran SetProperties
    
    select @iObjectCount = 0;

CleanUp:
    select @vchProjectName
    select @iObjectCount
    return

E_General_Error:
    /* this is an all or nothing.  No specific error messages */
    goto CleanUp

E_OAError:
    exec dbo.dt_displayoaerror @iObjectId, @iReturn
    goto CleanUp




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_addtosourcecontrol_u]') and xtype = 'P ')  
 drop Procedure dt_addtosourcecontrol_u
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc dbo.dt_addtosourcecontrol_u
    @vchSourceSafeINI nvarchar(255) = '',
    @vchProjectName   nvarchar(255) ='',
    @vchComment       nvarchar(255) ='',
    @vchLoginName     nvarchar(255) ='',
    @vchPassword      nvarchar(255) =''

as
	-- This procedure should no longer be called;  dt_addtosourcecontrol should be called instead.
	-- Calls are forwarded to dt_addtosourcecontrol to maintain backward compatibility
	set nocount on
	exec dbo.dt_addtosourcecontrol 
		@vchSourceSafeINI, 
		@vchProjectName, 
		@vchComment, 
		@vchLoginName, 
		@vchPassword




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_adduserobject]') and xtype = 'P ')  
 drop Procedure dt_adduserobject
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
/*
**	Add an object to the dtproperties table
*/
create procedure dbo.dt_adduserobject
as
	set nocount on
	/*
	** Create the user object if it does not exist already
	*/
	begin transaction
		insert dbo.dtproperties (property) VALUES ('DtgSchemaOBJECT')
		update dbo.dtproperties set objectid=@@identity 
			where id=@@identity and property='DtgSchemaOBJECT'
	commit
	return @@identity


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_adduserobject_vcs]') and xtype = 'P ')  
 drop Procedure dt_adduserobject_vcs
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create procedure dbo.dt_adduserobject_vcs
    @vchProperty varchar(64)

as

set nocount on

declare @iReturn int
    /*
    ** Create the user object if it does not exist already
    */
    begin transaction
        select @iReturn = objectid from dbo.dtproperties where property = @vchProperty
        if @iReturn IS NULL
        begin
            insert dbo.dtproperties (property) VALUES (@vchProperty)
            update dbo.dtproperties set objectid=@@identity
                    where id=@@identity and property=@vchProperty
            select @iReturn = @@identity
        end
    commit
    return @iReturn




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_checkinobject]') and xtype = 'P ')  
 drop Procedure dt_checkinobject
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc dbo.dt_checkinobject
    @chObjectType  char(4),
    @vchObjectName varchar(255),
    @vchComment    varchar(255)='',
    @vchLoginName  varchar(255),
    @vchPassword   varchar(255)='',
    @iVCSFlags     int = 0,
    @iActionFlag   int = 0,   /* 0 => AddFile, 1 => CheckIn */
    @txStream1     Text = '', /* drop stream   */ /* There is a bug that if items are NULL they do not pass to OLE servers */
    @txStream2     Text = '', /* create stream */
    @txStream3     Text = ''  /* grant stream  */


as

	set nocount on

	declare @iReturn int
	declare @iObjectId int
	select @iObjectId = 0
	declare @iStreamObjectId int

	declare @VSSGUID varchar(100)
	select @VSSGUID = 'SQLVersionControl.VCS_SQL'

	declare @iPropertyObjectId int
	select @iPropertyObjectId  = 0

    select @iPropertyObjectId = (select objectid from dbo.dtproperties where property = 'VCSProjectID')

    declare @vchProjectName   varchar(255)
    declare @vchSourceSafeINI varchar(255)
    declare @vchServerName    varchar(255)
    declare @vchDatabaseName  varchar(255)
    declare @iReturnValue	  int
    declare @pos			  int
    declare @vchProcLinePiece varchar(255)

    
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSProject',       @vchProjectName   OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSourceSafeINI', @vchSourceSafeINI OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSQLServer',     @vchServerName    OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSQLDatabase',   @vchDatabaseName  OUT

    if @chObjectType = 'PROC'
    begin
        if @iActionFlag = 1
        begin
            /* Procedure Can have up to three streams
            Drop Stream, Create Stream, GRANT stream */

            begin tran compile_all

            /* try to compile the streams */
            exec (@txStream1)
            if @@error <> 0 GOTO E_Compile_Fail

            exec (@txStream2)
            if @@error <> 0 GOTO E_Compile_Fail

            exec (@txStream3)
            if @@error <> 0 GOTO E_Compile_Fail
        end

        exec @iReturn = master.dbo.sp_OACreate @VSSGUID, @iObjectId OUT
        if @iReturn <> 0 GOTO E_OAError

        exec @iReturn = master.dbo.sp_OAGetProperty @iObjectId, 'GetStreamObject', @iStreamObjectId OUT
        if @iReturn <> 0 GOTO E_OAError
        
        if @iActionFlag = 1
        begin
            
            declare @iStreamLength int
			
			select @pos=1
			select @iStreamLength = datalength(@txStream2)
			
			if @iStreamLength > 0
			begin
			
				while @pos < @iStreamLength
				begin
						
					select @vchProcLinePiece = substring(@txStream2, @pos, 255)
					
					exec @iReturn = master.dbo.sp_OAMethod @iStreamObjectId, 'AddStream', @iReturnValue OUT, @vchProcLinePiece
            		if @iReturn <> 0 GOTO E_OAError
            		
					select @pos = @pos + 255
					
				end
            
				exec @iReturn = master.dbo.sp_OAMethod @iObjectId,
														'CheckIn_StoredProcedure',
														NULL,
														@sProjectName = @vchProjectName,
														@sSourceSafeINI = @vchSourceSafeINI,
														@sServerName = @vchServerName,
														@sDatabaseName = @vchDatabaseName,
														@sObjectName = @vchObjectName,
														@sComment = @vchComment,
														@sLoginName = @vchLoginName,
														@sPassword = @vchPassword,
														@iVCSFlags = @iVCSFlags,
														@iActionFlag = @iActionFlag,
														@sStream = ''
                                        
			end
        end
        else
        begin
        
            select colid, text into #ProcLines
            from syscomments
            where id = object_id(@vchObjectName)
            order by colid

            declare @iCurProcLine int
            declare @iProcLines int
            select @iCurProcLine = 1
            select @iProcLines = (select count(*) from #ProcLines)
            while @iCurProcLine <= @iProcLines
            begin
                select @pos = 1
                declare @iCurLineSize int
                select @iCurLineSize = len((select text from #ProcLines where colid = @iCurProcLine))
                while @pos <= @iCurLineSize
                begin                
                    select @vchProcLinePiece = convert(varchar(255),
                        substring((select text from #ProcLines where colid = @iCurProcLine),
                                  @pos, 255 ))
                    exec @iReturn = master.dbo.sp_OAMethod @iStreamObjectId, 'AddStream', @iReturnValue OUT, @vchProcLinePiece
                    if @iReturn <> 0 GOTO E_OAError
                    select @pos = @pos + 255                  
                end
                select @iCurProcLine = @iCurProcLine + 1
            end
            drop table #ProcLines

            exec @iReturn = master.dbo.sp_OAMethod @iObjectId,
													'CheckIn_StoredProcedure',
													NULL,
													@sProjectName = @vchProjectName,
													@sSourceSafeINI = @vchSourceSafeINI,
													@sServerName = @vchServerName,
													@sDatabaseName = @vchDatabaseName,
													@sObjectName = @vchObjectName,
													@sComment = @vchComment,
													@sLoginName = @vchLoginName,
													@sPassword = @vchPassword,
													@iVCSFlags = @iVCSFlags,
													@iActionFlag = @iActionFlag,
													@sStream = ''
        end

        if @iReturn <> 0 GOTO E_OAError

        if @iActionFlag = 1
        begin
            commit tran compile_all
            if @@error <> 0 GOTO E_Compile_Fail
        end

    end

CleanUp:
	return

E_Compile_Fail:
	declare @lerror int
	select @lerror = @@error
	rollback tran compile_all
	RAISERROR (@lerror,16,-1)
	goto CleanUp

E_OAError:
	if @iActionFlag = 1 rollback tran compile_all
	exec dbo.dt_displayoaerror @iObjectId, @iReturn
	goto CleanUp




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_checkinobject_u]') and xtype = 'P ')  
 drop Procedure dt_checkinobject_u
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc dbo.dt_checkinobject_u
    @chObjectType  char(4),
    @vchObjectName nvarchar(255),
    @vchComment    nvarchar(255)='',
    @vchLoginName  nvarchar(255),
    @vchPassword   nvarchar(255)='',
    @iVCSFlags     int = 0,
    @iActionFlag   int = 0,   /* 0 => AddFile, 1 => CheckIn */
    @txStream1     text = '',  /* drop stream   */ /* There is a bug that if items are NULL they do not pass to OLE servers */
    @txStream2     text = '',  /* create stream */
    @txStream3     text = ''   /* grant stream  */

as	
	-- This procedure should no longer be called;  dt_checkinobject should be called instead.
	-- Calls are forwarded to dt_checkinobject to maintain backward compatibility.
	set nocount on
	exec dbo.dt_checkinobject
		@chObjectType,
		@vchObjectName,
		@vchComment,
		@vchLoginName,
		@vchPassword,
		@iVCSFlags,
		@iActionFlag,   
		@txStream1,		
		@txStream2,		
		@txStream3		




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_checkoutobject]') and xtype = 'P ')  
 drop Procedure dt_checkoutobject
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc dbo.dt_checkoutobject
    @chObjectType  char(4),
    @vchObjectName varchar(255),
    @vchComment    varchar(255),
    @vchLoginName  varchar(255),
    @vchPassword   varchar(255),
    @iVCSFlags     int = 0,
    @iActionFlag   int = 0/* 0 => Checkout, 1 => GetLatest, 2 => UndoCheckOut */

as

	set nocount on

	declare @iReturn int
	declare @iObjectId int
	select @iObjectId =0

	declare @VSSGUID varchar(100)
	select @VSSGUID = 'SQLVersionControl.VCS_SQL'

	declare @iReturnValue int
	select @iReturnValue = 0

	declare @vchTempText varchar(255)

	/* this is for our strings */
	declare @iStreamObjectId int
	select @iStreamObjectId = 0

    declare @iPropertyObjectId int
    select @iPropertyObjectId = (select objectid from dbo.dtproperties where property = 'VCSProjectID')

    declare @vchProjectName   varchar(255)
    declare @vchSourceSafeINI varchar(255)
    declare @vchServerName    varchar(255)
    declare @vchDatabaseName  varchar(255)
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSProject',       @vchProjectName   OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSourceSafeINI', @vchSourceSafeINI OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSQLServer',     @vchServerName    OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSQLDatabase',   @vchDatabaseName  OUT

    if @chObjectType = 'PROC'
    begin
        /* Procedure Can have up to three streams
           Drop Stream, Create Stream, GRANT stream */

        exec @iReturn = master.dbo.sp_OACreate @VSSGUID, @iObjectId OUT

        if @iReturn <> 0 GOTO E_OAError

        exec @iReturn = master.dbo.sp_OAMethod @iObjectId,
												'CheckOut_StoredProcedure',
												NULL,
												@sProjectName = @vchProjectName,
												@sSourceSafeINI = @vchSourceSafeINI,
												@sObjectName = @vchObjectName,
												@sServerName = @vchServerName,
												@sDatabaseName = @vchDatabaseName,
												@sComment = @vchComment,
												@sLoginName = @vchLoginName,
												@sPassword = @vchPassword,
												@iVCSFlags = @iVCSFlags,
												@iActionFlag = @iActionFlag

        if @iReturn <> 0 GOTO E_OAError


        exec @iReturn = master.dbo.sp_OAGetProperty @iObjectId, 'GetStreamObject', @iStreamObjectId OUT

        if @iReturn <> 0 GOTO E_OAError

        create table #commenttext (id int identity, sourcecode varchar(255))


        select @vchTempText = 'STUB'
        while @vchTempText is not null
        begin
            exec @iReturn = master.dbo.sp_OAMethod @iStreamObjectId, 'GetStream', @iReturnValue OUT, @vchTempText OUT
            if @iReturn <> 0 GOTO E_OAError
            
            if (@vchTempText = '') set @vchTempText = null
            if (@vchTempText is not null) insert into #commenttext (sourcecode) select @vchTempText
        end

        select 'VCS'=sourcecode from #commenttext order by id
        select 'SQL'=text from syscomments where id = object_id(@vchObjectName) order by colid

    end

CleanUp:
    return

E_OAError:
    exec dbo.dt_displayoaerror @iObjectId, @iReturn
    GOTO CleanUp




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_checkoutobject_u]') and xtype = 'P ')  
 drop Procedure dt_checkoutobject_u
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc dbo.dt_checkoutobject_u
    @chObjectType  char(4),
    @vchObjectName nvarchar(255),
    @vchComment    nvarchar(255),
    @vchLoginName  nvarchar(255),
    @vchPassword   nvarchar(255),
    @iVCSFlags     int = 0,
    @iActionFlag   int = 0/* 0 => Checkout, 1 => GetLatest, 2 => UndoCheckOut */

as

	-- This procedure should no longer be called;  dt_checkoutobject should be called instead.
	-- Calls are forwarded to dt_checkoutobject to maintain backward compatibility.
	set nocount on
	exec dbo.dt_checkoutobject
		@chObjectType,  
		@vchObjectName, 
		@vchComment,    
		@vchLoginName,  
		@vchPassword,  
		@iVCSFlags,    
		@iActionFlag 




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_displayoaerror]') and xtype = 'P ')  
 drop Procedure dt_displayoaerror
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE PROCEDURE dbo.dt_displayoaerror
    @iObject int,
    @iresult int
as

set nocount on

declare @vchOutput      varchar(255)
declare @hr             int
declare @vchSource      varchar(255)
declare @vchDescription varchar(255)

    exec @hr = master.dbo.sp_OAGetErrorInfo @iObject, @vchSource OUT, @vchDescription OUT

    select @vchOutput = @vchSource + ': ' + @vchDescription
    raiserror (@vchOutput,16,-1)

    return



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_displayoaerror_u]') and xtype = 'P ')  
 drop Procedure dt_displayoaerror_u
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE PROCEDURE dbo.dt_displayoaerror_u
    @iObject int,
    @iresult int
as
	-- This procedure should no longer be called;  dt_displayoaerror should be called instead.
	-- Calls are forwarded to dt_displayoaerror to maintain backward compatibility.
	set nocount on
	exec dbo.dt_displayoaerror
		@iObject,
		@iresult




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_droppropertiesbyid]') and xtype = 'P ')  
 drop Procedure dt_droppropertiesbyid
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
/*
**	Drop one or all the associated properties of an object or an attribute 
**
**	dt_dropproperties objid, null or '' -- drop all properties of the object itself
**	dt_dropproperties objid, property -- drop the property
*/
create procedure dbo.dt_droppropertiesbyid
	@id int,
	@property varchar(64)
as
	set nocount on

	if (@property is null) or (@property = '')
		delete from dbo.dtproperties where objectid=@id
	else
		delete from dbo.dtproperties 
			where objectid=@id and property=@property



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_dropuserobjectbyid]') and xtype = 'P ')  
 drop Procedure dt_dropuserobjectbyid
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
/*
**	Drop an object from the dbo.dtproperties table
*/
create procedure dbo.dt_dropuserobjectbyid
	@id int
as
	set nocount on
	delete from dbo.dtproperties where objectid=@id


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_generateansiname]') and xtype = 'P ')  
 drop Procedure dt_generateansiname
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
/* 
**	Generate an ansi name that is unique in the dtproperties.value column 
*/ 
create procedure dbo.dt_generateansiname(@name varchar(255) output) 
as 
	declare @prologue varchar(20) 
	declare @indexstring varchar(20) 
	declare @index integer 
 
	set @prologue = 'MSDT-A-' 
	set @index = 1 
 
	while 1 = 1 
	begin 
		set @indexstring = cast(@index as varchar(20)) 
		set @name = @prologue + @indexstring 
		if not exists (select value from dtproperties where value = @name) 
			break 
		 
		set @index = @index + 1 
 
		if (@index = 10000) 
			goto TooMany 
	end 
 
Leave: 
 
	return 
 
TooMany: 
 
	set @name = 'DIAGRAM' 
	goto Leave 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_getobjwithprop]') and xtype = 'P ')  
 drop Procedure dt_getobjwithprop
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
/*
**	Retrieve the owner object(s) of a given property
*/
create procedure dbo.dt_getobjwithprop
	@property varchar(30),
	@value varchar(255)
as
	set nocount on

	if (@property is null) or (@property = '')
	begin
		raiserror('Must specify a property name.',-1,-1)
		return (1)
	end

	if (@value is null)
		select objectid id from dbo.dtproperties
			where property=@property

	else
		select objectid id from dbo.dtproperties
			where property=@property and value=@value


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_getobjwithprop_u]') and xtype = 'P ')  
 drop Procedure dt_getobjwithprop_u
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
/*
**	Retrieve the owner object(s) of a given property
*/
create procedure dbo.dt_getobjwithprop_u
	@property varchar(30),
	@uvalue nvarchar(255)
as
	set nocount on

	if (@property is null) or (@property = '')
	begin
		raiserror('Must specify a property name.',-1,-1)
		return (1)
	end

	if (@uvalue is null)
		select objectid id from dbo.dtproperties
			where property=@property

	else
		select objectid id from dbo.dtproperties
			where property=@property and uvalue=@uvalue


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_getpropertiesbyid]') and xtype = 'P ')  
 drop Procedure dt_getpropertiesbyid
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
/*
**	Retrieve properties by id's
**
**	dt_getproperties objid, null or '' -- retrieve all properties of the object itself
**	dt_getproperties objid, property -- retrieve the property specified
*/
create procedure dbo.dt_getpropertiesbyid
	@id int,
	@property varchar(64)
as
	set nocount on

	if (@property is null) or (@property = '')
		select property, version, value, lvalue
			from dbo.dtproperties
			where  @id=objectid
	else
		select property, version, value, lvalue
			from dbo.dtproperties
			where  @id=objectid and @property=property


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_getpropertiesbyid_u]') and xtype = 'P ')  
 drop Procedure dt_getpropertiesbyid_u
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
/*
**	Retrieve properties by id's
**
**	dt_getproperties objid, null or '' -- retrieve all properties of the object itself
**	dt_getproperties objid, property -- retrieve the property specified
*/
create procedure dbo.dt_getpropertiesbyid_u
	@id int,
	@property varchar(64)
as
	set nocount on

	if (@property is null) or (@property = '')
		select property, version, uvalue, lvalue
			from dbo.dtproperties
			where  @id=objectid
	else
		select property, version, uvalue, lvalue
			from dbo.dtproperties
			where  @id=objectid and @property=property


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_getpropertiesbyid_vcs]') and xtype = 'P ')  
 drop Procedure dt_getpropertiesbyid_vcs
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create procedure dbo.dt_getpropertiesbyid_vcs
    @id       int,
    @property varchar(64),
    @value    varchar(255) = NULL OUT

as

    set nocount on

    select @value = (
        select value
                from dbo.dtproperties
                where @id=objectid and @property=property
                )



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_getpropertiesbyid_vcs_u]') and xtype = 'P ')  
 drop Procedure dt_getpropertiesbyid_vcs_u
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create procedure dbo.dt_getpropertiesbyid_vcs_u
    @id       int,
    @property varchar(64),
    @value    nvarchar(255) = NULL OUT

as

    -- This procedure should no longer be called;  dt_getpropertiesbyid_vcsshould be called instead.
	-- Calls are forwarded to dt_getpropertiesbyid_vcs to maintain backward compatibility.
	set nocount on
    exec dbo.dt_getpropertiesbyid_vcs
		@id,
		@property,
		@value output



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_isundersourcecontrol]') and xtype = 'P ')  
 drop Procedure dt_isundersourcecontrol
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc dbo.dt_isundersourcecontrol
    @vchLoginName varchar(255) = '',
    @vchPassword  varchar(255) = '',
    @iWhoToo      int = 0 /* 0 => Just check project; 1 => get list of objs */

as

	set nocount on

	declare @iReturn int
	declare @iObjectId int
	select @iObjectId = 0

	declare @VSSGUID varchar(100)
	select @VSSGUID = 'SQLVersionControl.VCS_SQL'

	declare @iReturnValue int
	select @iReturnValue = 0

	declare @iStreamObjectId int
	select @iStreamObjectId   = 0

	declare @vchTempText varchar(255)

    declare @iPropertyObjectId int
    select @iPropertyObjectId = (select objectid from dbo.dtproperties where property = 'VCSProjectID')

    declare @vchProjectName   varchar(255)
    declare @vchSourceSafeINI varchar(255)
    declare @vchServerName    varchar(255)
    declare @vchDatabaseName  varchar(255)
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSProject',       @vchProjectName   OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSourceSafeINI', @vchSourceSafeINI OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSQLServer',     @vchServerName    OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSQLDatabase',   @vchDatabaseName  OUT

    if (@vchProjectName = '')	set @vchProjectName		= null
    if (@vchSourceSafeINI = '') set @vchSourceSafeINI	= null
    if (@vchServerName = '')	set @vchServerName		= null
    if (@vchDatabaseName = '')	set @vchDatabaseName	= null
    
    if (@vchProjectName is null) or (@vchSourceSafeINI is null) or (@vchServerName is null) or (@vchDatabaseName is null)
    begin
        RAISERROR('Not Under Source Control',16,-1)
        return
    end

    if @iWhoToo = 1
    begin

        /* Get List of Procs in the project */
        exec @iReturn = master.dbo.sp_OACreate @VSSGUID, @iObjectId OUT
        if @iReturn <> 0 GOTO E_OAError

        exec @iReturn = master.dbo.sp_OAMethod @iObjectId,
												'GetListOfObjects',
												NULL,
												@vchProjectName,
												@vchSourceSafeINI,
												@vchServerName,
												@vchDatabaseName,
												@vchLoginName,
												@vchPassword

        if @iReturn <> 0 GOTO E_OAError

        exec @iReturn = master.dbo.sp_OAGetProperty @iObjectId, 'GetStreamObject', @iStreamObjectId OUT

        if @iReturn <> 0 GOTO E_OAError

        create table #ObjectList (id int identity, vchObjectlist varchar(255))

        select @vchTempText = 'STUB'
        while @vchTempText is not null
        begin
            exec @iReturn = master.dbo.sp_OAMethod @iStreamObjectId, 'GetStream', @iReturnValue OUT, @vchTempText OUT
            if @iReturn <> 0 GOTO E_OAError
            
            if (@vchTempText = '') set @vchTempText = null
            if (@vchTempText is not null) insert into #ObjectList (vchObjectlist ) select @vchTempText
        end

        select vchObjectlist from #ObjectList order by id
    end

CleanUp:
    return

E_OAError:
    exec dbo.dt_displayoaerror @iObjectId, @iReturn
    goto CleanUp




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_isundersourcecontrol_u]') and xtype = 'P ')  
 drop Procedure dt_isundersourcecontrol_u
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc dbo.dt_isundersourcecontrol_u
    @vchLoginName nvarchar(255) = '',
    @vchPassword  nvarchar(255) = '',
    @iWhoToo      int = 0 /* 0 => Just check project; 1 => get list of objs */

as
	-- This procedure should no longer be called;  dt_isundersourcecontrol should be called instead.
	-- Calls are forwarded to dt_isundersourcecontrol to maintain backward compatibility.
	set nocount on
	exec dbo.dt_isundersourcecontrol
		@vchLoginName,
		@vchPassword,
		@iWhoToo 




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_removefromsourcecontrol]') and xtype = 'P ')  
 drop Procedure dt_removefromsourcecontrol
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create procedure dbo.dt_removefromsourcecontrol

as

    set nocount on

    declare @iPropertyObjectId int
    select @iPropertyObjectId = (select objectid from dbo.dtproperties where property = 'VCSProjectID')

    exec dbo.dt_droppropertiesbyid @iPropertyObjectId, null

    /* -1 is returned by dt_droppopertiesbyid */
    if @@error <> 0 and @@error <> -1 return 1

    return 0




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_setpropertybyid]') and xtype = 'P ')  
 drop Procedure dt_setpropertybyid
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
/*
**	If the property already exists, reset the value; otherwise add property
**		id -- the id in sysobjects of the object
**		property -- the name of the property
**		value -- the text value of the property
**		lvalue -- the binary value of the property (image)
*/
create procedure dbo.dt_setpropertybyid
	@id int,
	@property varchar(64),
	@value varchar(255),
	@lvalue image
as
	set nocount on
	declare @uvalue nvarchar(255) 
	set @uvalue = convert(nvarchar(255), @value) 
	if exists (select * from dbo.dtproperties 
			where objectid=@id and property=@property)
	begin
		--
		-- bump the version count for this row as we update it
		--
		update dbo.dtproperties set value=@value, uvalue=@uvalue, lvalue=@lvalue, version=version+1
			where objectid=@id and property=@property
	end
	else
	begin
		--
		-- version count is auto-set to 0 on initial insert
		--
		insert dbo.dtproperties (property, objectid, value, uvalue, lvalue)
			values (@property, @id, @value, @uvalue, @lvalue)
	end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_setpropertybyid_u]') and xtype = 'P ')  
 drop Procedure dt_setpropertybyid_u
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
/*
**	If the property already exists, reset the value; otherwise add property
**		id -- the id in sysobjects of the object
**		property -- the name of the property
**		uvalue -- the text value of the property
**		lvalue -- the binary value of the property (image)
*/
create procedure dbo.dt_setpropertybyid_u
	@id int,
	@property varchar(64),
	@uvalue nvarchar(255),
	@lvalue image
as
	set nocount on
	-- 
	-- If we are writing the name property, find the ansi equivalent. 
	-- If there is no lossless translation, generate an ansi name. 
	-- 
	declare @avalue varchar(255) 
	set @avalue = null 
	if (@uvalue is not null) 
	begin 
		if (convert(nvarchar(255), convert(varchar(255), @uvalue)) = @uvalue) 
		begin 
			set @avalue = convert(varchar(255), @uvalue) 
		end 
		else 
		begin 
			if 'DtgSchemaNAME' = @property 
			begin 
				exec dbo.dt_generateansiname @avalue output 
			end 
		end 
	end 
	if exists (select * from dbo.dtproperties 
			where objectid=@id and property=@property)
	begin
		--
		-- bump the version count for this row as we update it
		--
		update dbo.dtproperties set value=@avalue, uvalue=@uvalue, lvalue=@lvalue, version=version+1
			where objectid=@id and property=@property
	end
	else
	begin
		--
		-- version count is auto-set to 0 on initial insert
		--
		insert dbo.dtproperties (property, objectid, value, uvalue, lvalue)
			values (@property, @id, @avalue, @uvalue, @lvalue)
	end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_validateloginparams]') and xtype = 'P ')  
 drop Procedure dt_validateloginparams
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc dbo.dt_validateloginparams
    @vchLoginName  varchar(255),
    @vchPassword   varchar(255)
as

set nocount on

declare @iReturn int
declare @iObjectId int
select @iObjectId =0

declare @VSSGUID varchar(100)
select @VSSGUID = 'SQLVersionControl.VCS_SQL'

    declare @iPropertyObjectId int
    select @iPropertyObjectId = (select objectid from dbo.dtproperties where property = 'VCSProjectID')

    declare @vchSourceSafeINI varchar(255)
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSourceSafeINI', @vchSourceSafeINI OUT

    exec @iReturn = master.dbo.sp_OACreate @VSSGUID, @iObjectId OUT
    if @iReturn <> 0 GOTO E_OAError

    exec @iReturn = master.dbo.sp_OAMethod @iObjectId,
											'ValidateLoginParams',
											NULL,
											@sSourceSafeINI = @vchSourceSafeINI,
											@sLoginName = @vchLoginName,
											@sPassword = @vchPassword
    if @iReturn <> 0 GOTO E_OAError

CleanUp:
    return

E_OAError:
    exec dbo.dt_displayoaerror @iObjectId, @iReturn
    GOTO CleanUp




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_validateloginparams_u]') and xtype = 'P ')  
 drop Procedure dt_validateloginparams_u
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc dbo.dt_validateloginparams_u
    @vchLoginName  nvarchar(255),
    @vchPassword   nvarchar(255)
as

	-- This procedure should no longer be called;  dt_validateloginparams should be called instead.
	-- Calls are forwarded to dt_validateloginparams to maintain backward compatibility.
	set nocount on
	exec dbo.dt_validateloginparams
		@vchLoginName,
		@vchPassword 




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_vcsenabled]') and xtype = 'P ')  
 drop Procedure dt_vcsenabled
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc dbo.dt_vcsenabled

as

set nocount on

declare @iObjectId int
select @iObjectId = 0

declare @VSSGUID varchar(100)
select @VSSGUID = 'SQLVersionControl.VCS_SQL'

    declare @iReturn int
    exec @iReturn = master.dbo.sp_OACreate @VSSGUID, @iObjectId OUT
    if @iReturn <> 0 raiserror('', 16, -1) /* Can't Load Helper DLLC */




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_verstamp006]') and xtype = 'P ')  
 drop Procedure dt_verstamp006
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
/*
**	This procedure returns the version number of the stored
**    procedures used by legacy versions of the Microsoft
**	Visual Database Tools.  Version is 7.0.00.
*/
create procedure dbo.dt_verstamp006
as
	select 7000


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_verstamp007]') and xtype = 'P ')  
 drop Procedure dt_verstamp007
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
/*
**	This procedure returns the version number of the stored
**    procedures used by the the Microsoft Visual Database Tools.
**	Version is 7.0.05.
*/
create procedure dbo.dt_verstamp007
as
	select 7005


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_whocheckedout]') and xtype = 'P ')  
 drop Procedure dt_whocheckedout
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc dbo.dt_whocheckedout
        @chObjectType  char(4),
        @vchObjectName varchar(255),
        @vchLoginName  varchar(255),
        @vchPassword   varchar(255)

as

set nocount on

declare @iReturn int
declare @iObjectId int
select @iObjectId =0

declare @VSSGUID varchar(100)
select @VSSGUID = 'SQLVersionControl.VCS_SQL'

    declare @iPropertyObjectId int

    select @iPropertyObjectId = (select objectid from dbo.dtproperties where property = 'VCSProjectID')

    declare @vchProjectName   varchar(255)
    declare @vchSourceSafeINI varchar(255)
    declare @vchServerName    varchar(255)
    declare @vchDatabaseName  varchar(255)
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSProject',       @vchProjectName   OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSourceSafeINI', @vchSourceSafeINI OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSQLServer',     @vchServerName    OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSQLDatabase',   @vchDatabaseName  OUT

    if @chObjectType = 'PROC'
    begin
        exec @iReturn = master.dbo.sp_OACreate @VSSGUID, @iObjectId OUT

        if @iReturn <> 0 GOTO E_OAError

        declare @vchReturnValue varchar(255)
        select @vchReturnValue = ''

        exec @iReturn = master.dbo.sp_OAMethod @iObjectId,
												'WhoCheckedOut',
												@vchReturnValue OUT,
												@sProjectName = @vchProjectName,
												@sSourceSafeINI = @vchSourceSafeINI,
												@sObjectName = @vchObjectName,
												@sServerName = @vchServerName,
												@sDatabaseName = @vchDatabaseName,
												@sLoginName = @vchLoginName,
												@sPassword = @vchPassword

        if @iReturn <> 0 GOTO E_OAError

        select @vchReturnValue

    end

CleanUp:
    return

E_OAError:
    exec dbo.dt_displayoaerror @iObjectId, @iReturn
    GOTO CleanUp




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dt_whocheckedout_u]') and xtype = 'P ')  
 drop Procedure dt_whocheckedout_u
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc dbo.dt_whocheckedout_u
        @chObjectType  char(4),
        @vchObjectName nvarchar(255),
        @vchLoginName  nvarchar(255),
        @vchPassword   nvarchar(255)

as

	-- This procedure should no longer be called;  dt_whocheckedout should be called instead.
	-- Calls are forwarded to dt_whocheckedout to maintain backward compatibility.
	set nocount on
	exec dbo.dt_whocheckedout
		@chObjectType, 
		@vchObjectName,
		@vchLoginName, 
		@vchPassword  




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[execScalarSql]') and xtype = 'P ')  
 drop Procedure execScalarSql
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc execScalarSql(@sql varchar(8000),@result varchar(8000) output)
as 
begin

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#scalarResult'))
drop table #scalarResult 
create table #scalarResult(
result varchar(8000)
)

insert into #scalarResult
exec (@sql)

select top 1 @result = result from #scalarResult 


end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetContactViaUsernameDomain]') and xtype = 'P ')  
 drop Procedure GetContactViaUsernameDomain
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc GetContactViaUsernameDomain( @Username varchar(500), @Domain varchar(500))
as
begin

declare @splitUsername varchar(500) = '',@splitDomain varchar(500) = '',@charIndex int = 0,@ContactID int = -99

if(CHARINDEX('\',@username) != 0)
begin
set @charIndex = CHARINDEX('\',@username)
set @splitDomain = SUBSTRING(@username,0,@charIndex)
set @splitUsername = SUBSTRING(@username,@charIndex+1,LEN(@username) - @charIndex )

end
else if(CHARINDEX('@',@username) != 0)
begin 

set @charIndex = CHARINDEX('@',@username)
set @splitUsername = SUBSTRING(@username,0,@charIndex)
set @splitDomain= SUBSTRING(@username,@charIndex+1,LEN(@username) - @charIndex )


end
else
begin
set @splitUsername = @Username
set @splitDomain = @Domain


end


select @ContactID = ID from Contact where Windows_Login = @splitUsername

if(@ContactID = -99)
begin
	select @ContactID = ID from Contact where Windows_Login in( @splitUsername+'@'+@splitDomain, @splitDomain+'\'+@splitUsername)

end


select ID,Windows_Login from Contact where ID = @ContactID


end








Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GIS_Geocode]') and xtype = 'P ')  
 drop Procedure GIS_Geocode
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE PROCEDURE GIS_Geocode @Address varchar(80) = NULL, @City varchar(40) = NULL, @State varchar(40) = NULL, @Country varchar(40) = NULL, @PostalCode varchar(20) = NULL AS
BEGIN
 SET NOCOUNT ON
 
declare @County varchar(40) = NULL,
@GPSLatitude numeric(9,6) = NULL,
@GPSLongitude numeric(9,6) = NULL,
@MapURL varchar(1024) = NULL

DECLARE @URL varchar(MAX)
 SET @URL = 'http://maps.google.com/maps/api/geocode/xml?sensor=false&address=' +
 CASE WHEN @Address IS NOT NULL THEN @Address ELSE '' END +
 CASE WHEN @City IS NOT NULL THEN ', ' + @City ELSE '' END +
 CASE WHEN @State IS NOT NULL THEN ', ' + @State ELSE '' END +
 CASE WHEN @PostalCode IS NOT NULL THEN ', ' + @PostalCode ELSE '' END +
 CASE WHEN @Country IS NOT NULL THEN ', ' + @Country ELSE '' END
 SET @URL = REPLACE(@URL, ' ', '+')

 DECLARE @Response varchar(8000)
 DECLARE @XML xml
 DECLARE @Obj int 
 DECLARE @Result int 
 DECLARE @HTTPStatus int 
 DECLARE @ErrorMsg varchar(MAX)

EXEC @Result = sp_OACreate 'MSXML2.ServerXMLHttp', @Obj OUT 

 BEGIN TRY
 EXEC @Result = sp_OAMethod @Obj, 'open', NULL, 'GET', @URL, false
 EXEC @Result = sp_OAMethod @Obj, 'setRequestHeader', NULL, 'Content-Type', 'application/x-www-form-urlencoded'
 EXEC @Result = sp_OAMethod @Obj, send, NULL, ''
 EXEC @Result = sp_OAGetProperty @Obj, 'status', @HTTPStatus OUT 
 EXEC @Result = sp_OAGetProperty @Obj, 'responseXML.xml', @Response OUT 
 END TRY
 BEGIN CATCH
 SET @ErrorMsg = ERROR_MESSAGE()
 END CATCH

 EXEC @Result = sp_OADestroy @Obj

IF (@ErrorMsg IS NOT NULL) OR (@HTTPStatus <> 200) BEGIN
 SET @ErrorMsg = 'Error in spGeocode: ' + ISNULL(@ErrorMsg, 'HTTP result is: ' + CAST(@HTTPStatus AS varchar(10)))
 RAISERROR(@ErrorMsg, 16, 1, @HTTPStatus)
 RETURN 
 END

SET @XML = CAST(@Response AS XML)

 SET @GPSLatitude = @XML.value('(/GeocodeResponse/result/geometry/location/lat) [1]', 'numeric(9,6)')
 SET @GPSLongitude = @XML.value('(/GeocodeResponse/result/geometry/location/lng) [1]', 'numeric(9,6)')

SET @City = @XML.value('(/GeocodeResponse/result/address_component[type="locality"]/long_name) [1]', 'varchar(40)') 
 SET @State = @XML.value('(/GeocodeResponse/result/address_component[type="administrative_area_level_1"]/short_name) [1]', 'varchar(40)') 
 SET @PostalCode = @XML.value('(/GeocodeResponse/result/address_component[type="postal_code"]/long_name) [1]', 'varchar(20)') 
 SET @Country = @XML.value('(/GeocodeResponse/result/address_component[type="country"]/short_name) [1]', 'varchar(40)') 
 SET @County = @XML.value('(/GeocodeResponse/result/address_component[type="administrative_area_level_2"]/short_name) [1]', 'varchar(40)') 

 SET @Address = 
 ISNULL(@XML.value('(/GeocodeResponse/result/address_component[type="street_number"]/long_name) [1]', 'varchar(40)'), '???') + ' ' +
 ISNULL(@XML.value('(/GeocodeResponse/result/address_component[type="route"]/long_name) [1]', 'varchar(40)'), '???') 
 SET @MapURL = 'http://maps.google.com/maps?f=q&hl=en&q=' + CAST(@GPSLatitude AS varchar(20)) + '+' + CAST(@GPSLongitude AS varchar(20))


 SELECT 
 @GPSLatitude AS GPSLatitude,
 @GPSLongitude AS GPSLongitude,
 @City AS City,
 @State AS [State],
 @PostalCode AS PostalCode,
 @Address AS [Address],
 @County AS County,
 @MapURL AS MapURL,
 @XML AS XMLResults

END
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[HR_Routing_Applicant]') and xtype = 'P ')  
 drop Procedure HR_Routing_Applicant
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc [dbo].[HR_Routing_Applicant]
@ID int,
@Status char(1)
as

--declare 
--@ID int,
--@Status char(1)

--select @id =23


begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@modref varchar(100),
	@stat varchar(50)

    
	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db= treasurydbname  from companies where autoid = @CompanyID
	 

	select @modref=module_reference_id, @stat=status from approvals_requested where id=@id

	if( @stat = 'declined' )
	begin
		
        set @sql ='update '+@tr_db+'..applicant set status =''Q''  where applicant_no='+@modref
	    exec( @sql )		
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..applicant set status =''A''  where applicant_no='+@modref
        
		exec( @sql )
	end

	

end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[HR_Routing_Position]') and xtype = 'P ')  
 drop Procedure HR_Routing_Position
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create  proc [dbo].[HR_Routing_Position]
@ID int,
@Status char(1)
as

--declare 
--@ID int,
--@Status char(1)

--select @id =23


begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@modref varchar(100),
	@stat varchar(50)

    
	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db= treasurydbname  from companies where autoid = @CompanyID
	 

	select @modref=module_reference_id, @stat=status from approvals_requested where id=@id

	if( @stat = 'declined' )
	begin
		
        set @sql ='update '+@tr_db+'..HR_Position_Posting set Posting_Status =''Q''  where Position_Posting_ID='+@modref
	    exec( @sql )		
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..HR_Position_Posting set Posting_Status =''A''  where Position_Posting_ID='+@modref
        
		exec( @sql )
	end

	

end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[IncidentsRemoveHeaderAndAttachedLogs]') and xtype = 'P ')  
 drop Procedure IncidentsRemoveHeaderAndAttachedLogs
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

Create proc [dbo].[IncidentsRemoveHeaderAndAttachedLogs](@IncidentHeaderID int)
as
begin

delete l
from IncidentStatusLog l
inner join dbo.IncidentHeader h on l.IncidentHeaderID = h.id
where h.id = @IncidentHeaderID

delete from IncidentHeader where id = @IncidentHeaderID


end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[IncidentsReportGetData]') and xtype = 'P ')  
 drop Procedure IncidentsReportGetData
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

--ALTER proc [dbo].[IncidentsReportGetData] (@record_ids varchar(MAX) = '') as
CREATE proc [dbo].[IncidentsReportGetData] (@record_ids varchar(MAX)) as
--declare @record_ids varchar(MAX) = '7, 11, 13, 27, 28, 29, 30, 31, 32, 34, 35'
begin
	
		if @record_ids is null
		begin
			select h.id, h.CreateSubject, h.CreateNotes, h.Reference, h.IncidentStatusID, s.Status IncidentStatus,
			c.KnownAs CreatedBy, h.CreateDate, h.AssignedToContactID, c2.KnownAs AssignedTo,
			h.REQ_ID, l.ChangeByContactID, c3.KnownAs ChangedBy, l.ChangeIncidentStatusID, 
			s2.Status ChangedStatus, l.ChangeDate, l.ChangeReason
			from IncidentHeader h
			left outer Join IncidentStatusLog l on h.id = l.IncidentHeaderID
			left outer join IncidentStatus s on s.id = h.IncidentStatusID
			left outer join IncidentStatus s2 on s2.id = l.ChangeIncidentStatusID
			left outer join Contact c on c.id = h.CreateByContactID
			left outer join Contact c2 on c2.id = h.AssignedToContactID
			left outer join Contact c3 on c3.id = l.ChangeByContactID
			order by h.id desc, l.ChangeDate desc
		end
		else
		begin 
			-- checks to see temporary table working_table, drop it if it is
			if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#IncidentReporting'))
				drop table #IncidentReporting
				
			create table #IncidentReporting(id int not null primary key)
				
			declare @sql varchar(max) = '
			insert #IncidentReporting
			select id from IncidentHeader where id in (' + @record_ids + ')'
			print @Sql
			exec(@Sql)

			select h.id, h.CreateSubject, h.CreateNotes, h.Reference, h.IncidentStatusID, s.Status IncidentStatus,
			c.KnownAs CreatedBy, h.CreateDate, h.AssignedToContactID, c2.KnownAs AssignedTo,
			h.REQ_ID, l.ChangeByContactID, c3.KnownAs ChangedBy, l.ChangeIncidentStatusID, 
			s2.Status ChangedStatus, l.ChangeDate, l.ChangeReason
			from IncidentHeader h
			left outer Join IncidentStatusLog l on h.id = l.IncidentHeaderID
			inner join #IncidentReporting ir on ir.id = h.id
			left outer join IncidentStatus s on s.id = h.IncidentStatusID
			left outer join IncidentStatus s2 on s2.id = l.ChangeIncidentStatusID
			left outer join Contact c on c.id = h.CreateByContactID
			left outer join Contact c2 on c2.id = h.AssignedToContactID
			left outer join Contact c3 on c3.id = l.ChangeByContactID
			order by h.id desc, l.ChangeDate desc
		end
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[invDelInventoryItems]') and xtype = 'P ')  
 drop Procedure invDelInventoryItems
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE PROCEDURE [dbo].[invDelInventoryItems]
(
	@Original_ID int,
	@Original_CommunityID int,
	@Original_HoldingID int,
	@Original_LotID int,
	@Original_ModelID int,
	@Original_PhaseID int,
	@Original_ProjectID int
)
AS
	SET NOCOUNT OFF;
	DELETE FROM invInventoryItem 
	WHERE	(ID = @Original_ID) 
		AND (CommunityID = @Original_CommunityID 
			OR @Original_CommunityID IS NULL 
			AND CommunityID IS NULL) 
		AND (HoldingID = @Original_HoldingID 
			OR @Original_HoldingID IS NULL 
			AND HoldingID IS NULL) 
		AND (LotID = @Original_LotID 
			OR @Original_LotID IS NULL 
			AND LotID IS NULL) 
		AND (ModelID = @Original_ModelID 
			OR @Original_ModelID IS NULL 
			AND ModelID IS NULL) 
		AND (PhaseID = @Original_PhaseID 
			OR @Original_PhaseID IS NULL 
			AND PhaseID IS NULL) 
		AND (ProjectID = @Original_ProjectID 
			OR @Original_ProjectID IS NULL 
			AND ProjectID IS NULL) 
			



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[invGetInventoryItems]') and xtype = 'P ')  
 drop Procedure invGetInventoryItems
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


-- invGetInventoryItems 569
CREATE PROCEDURE dbo.invGetInventoryItems (
	@UserID int
	)
AS
	SET NOCOUNT ON

	SELECT	ID, 
			AddressLine1,
			AddressLine2,
			AddressLine3,
			City,
			PostalCode,
			ProvinceCode,
			HoldingID,
			CommunityID,
			PhaseID,
			LotID,
			ProjectID,
			ModelID
	FROM	invInventoryItem 
			
	RETURN 




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[invInsInventoryItems]') and xtype = 'P ')  
 drop Procedure invInsInventoryItems
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE PROCEDURE [dbo].[invInsInventoryItems]
(
	@ID int,
	@HoldingID int,
	@CommunityID int,
	@PhaseID int,
	@LotID int,
	@ProjectID int,
	@ModelID int
)
AS
	SET NOCOUNT OFF;
	INSERT INTO	invInventoryItem(
		ID, 
		HoldingID, 
		CommunityID, 
		PhaseID, 
		LotID, 
		ProjectID, 
		ModelID) 
	VALUES (
		@ID, 
		@HoldingID, 
		@CommunityID, 
		@PhaseID, 
		@LotID, 
		@ProjectID, 
		@ModelID)
		
		
	SELECT	ID, 
			HoldingID, 
			CommunityID, 
			PhaseID, 
			LotID, 
			ProjectID, 
			ModelID 
	FROM	invInventoryItem 
	WHERE	(ID = @ID)
	



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[invSelInventoryItems]') and xtype = 'P ')  
 drop Procedure invSelInventoryItems
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE PROCEDURE [dbo].[invSelInventoryItems]
AS
	SET NOCOUNT ON;
	SELECT	ID, 
			HoldingID, 
			CommunityID, 
			PhaseID, 
			LotID, 
			ProjectID, 
			ModelID,
			ElevationID
	FROM	invInventoryItem;



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[invUpdInventoryItems]') and xtype = 'P ')  
 drop Procedure invUpdInventoryItems
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE PROCEDURE [dbo].[invUpdInventoryItems]
(
	@ID int,
	@HoldingID int,
	@CommunityID int,
	@PhaseID int,
	@LotID int,
	@ProjectID int,
	@ModelID int,
	@Original_ID int,
	@Original_CommunityID int,
	@Original_HoldingID int,
	@Original_LotID int,
	@Original_ModelID int,
	@Original_PhaseID int,
	@Original_ProjectID int
)
AS
	SET NOCOUNT OFF;
	UPDATE	invInventoryItem
	SET		ID = @ID, 
			HoldingID = @HoldingID, 
			CommunityID = @CommunityID, 
			PhaseID = @PhaseID, 
			LotID = @LotID, 
			ProjectID = @ProjectID, 
			ModelID = @ModelID 
	WHERE	(ID = @Original_ID) 
		AND (CommunityID = @Original_CommunityID 
			OR @Original_CommunityID IS NULL 
			AND CommunityID IS NULL) 
		AND (HoldingID = @Original_HoldingID 
			OR @Original_HoldingID IS NULL 
			AND HoldingID IS NULL) 
		AND (LotID = @Original_LotID 
			OR @Original_LotID IS NULL 
			AND LotID IS NULL) 
		AND (ModelID = @Original_ModelID 
			OR @Original_ModelID IS NULL 
			AND ModelID IS NULL) 
		AND (PhaseID = @Original_PhaseID 
			OR @Original_PhaseID IS NULL 
			AND PhaseID IS NULL) 
		AND (ProjectID = @Original_ProjectID 
			OR @Original_ProjectID IS NULL 
			AND ProjectID IS NULL) 

	SELECT	ID, 
			HoldingID, 
			CommunityID, 
			PhaseID, 
			LotID, 
			ProjectID, 
			ModelID 
	FROM	invInventoryItem 
	WHERE	(ID = @ID)
	



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_CF_AcctBal_Calc]') and xtype = 'P ')  
 drop Procedure KBI_CF_AcctBal_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[KBI_CF_AcctBal_Calc] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	declare 
	@Current money,
	@Previous money,
	@AVG_YTD money,
	@TWELVE_MO_ROLLING money,
	@sqlstr varchar(8000)

	select @Current=isnull((select isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id),0) 
	select @Previous=isnull((select isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id),0) 
	select @AVG_YTD=isnull((select isnull(sum(AVG_YTD),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id),0) 
	select @TWELVE_MO_ROLLING=isnull((select isnull(sum(TWELVE_MO_ROLLING),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id),0) 
	
	set @sqlstr = @webdb+'..sp_KBI_Fill_Summary '+cast(@skbii_id as varchar(15))+', '+cast(@companyid as varchar(15))+', '+cast(@Current as varchar(15))+', '+cast(@Previous as varchar(15))
	exec (@sqlstr)
	
	update security_kbi_summary set 
	AVG_YTD=@AVG_YTD, TWELVE_MO_ROLLING=@TWELVE_MO_ROLLING	
	where KBI_Instance_ID=@skbii_id
	
	print 'Current:'+cast(@Current as varchar(15))
	print 'Previous:'+cast(@Previous as varchar(15))
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_CF_AcctBal_Fill]') and xtype = 'P ')  
 drop Procedure KBI_CF_AcctBal_Fill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
-- exec KBI_CF_AcctBal_Fill 'web_strike_test', 12, 'adam', '10-01-2012', '10-12-2012', '09-01-2012', '09-30-2012', 58
CREATE proc [dbo].[KBI_CF_AcctBal_Fill] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 12
	
	delete from working_KBI_ACCOUNT_BALANCE where username=@skbii_id

	insert into working_KBI_ACCOUNT_BALANCE (USERNAME, KBII_ID, COMPANY_ID, COMPANY_NAME, ACCOUNT_NUMBER, ACCOUNT_DESC, SEG_1, SEG_2, SEG_3, 
		SEG_4, SEG_5, SEG_6, ACCT_TYPE, ACCT_TYPE_DESC, RATIO_TYPE_ID)
	select distinct @skbii_id, @skbii_id, k.COMPANY_ID, c.company_name, k.ACCOUNT_NUMBER, k.ACCOUNT_DESC, k.SEG_1, k.SEG_2, k.SEG_3, k.SEG_4, k.SEG_5, 
		k.SEG_6, k.ACCT_TYPE, k.ACCT_TYPE_DESC, k.RATIO_TYPE_ID
	from KBI_YEARLY_ACCOUNT_BALANCE k
	join companies c on c.autoid=k.company_id
	where k.username=cast(@skbii_id as varchar) and k.ratio_type_id in (12)

	exec KBI_CF_UpdateGLBalanceAmt @CS, @CE, @PS, @PE, @skbii_id 
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_CF_IPS_Calc]') and xtype = 'P ')  
 drop Procedure KBI_CF_IPS_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc [dbo].[KBI_CF_IPS_Calc] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	declare 
	@RevC money,
	@RevP money,
	@InvC money,	
	@InvP money,	
	@Current money,
	@Previous money,
	@sqlstr varchar(8000)

	select @RevC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=19
	select @RevP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=19

	select @InvC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=20
	select @InvP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=20

	select @RevC=ABS(@RevC)
	select @RevP=ABS(@RevP)
	select @InvC=ABS(@InvC)
	select @InvP=ABS(@InvP)

	if( @RevC = 0 )
		select @Current = 0
	else
		select @Current = (@RevC-@InvC) / @RevC * 100

	if( @RevP = 0 )
		select @Previous = 0
	else
		select @Previous = (@RevP-@InvP) / @RevP * 100
	

	set @sqlstr = @webdb+'..sp_KBI_Fill_Summary '+cast(@skbii_id as varchar(15))+', '+cast(@companyid as varchar(15))+', '+cast(@Current as varchar(15))+', '+cast(@Previous as varchar(15))
	exec (@sqlstr)
	print 'Current:'+cast(@Current as varchar(15))
	print 'Previous:'+cast(@Previous as varchar(15))
end





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_CF_IPS_Fill]') and xtype = 'P ')  
 drop Procedure KBI_CF_IPS_Fill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


create proc [dbo].[KBI_CF_IPS_Fill] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 19 --Rev
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 20 --Inv

	delete from working_KBI_ACCOUNT_BALANCE where username=@skbii_id

	insert into working_KBI_ACCOUNT_BALANCE (USERNAME, KBII_ID, COMPANY_ID, COMPANY_NAME, ACCOUNT_NUMBER, ACCOUNT_DESC, SEG_1, SEG_2, SEG_3, 
		SEG_4, SEG_5, SEG_6, ACCT_TYPE, ACCT_TYPE_DESC, RATIO_TYPE_ID)
	select distinct @skbii_id, @skbii_id, k.COMPANY_ID, c.company_name, k.ACCOUNT_NUMBER, k.ACCOUNT_DESC, k.SEG_1, k.SEG_2, k.SEG_3, k.SEG_4, k.SEG_5, 
		k.SEG_6, k.ACCT_TYPE, k.ACCT_TYPE_DESC, k.RATIO_TYPE_ID
	from KBI_YEARLY_ACCOUNT_BALANCE k
	join companies c on c.autoid=k.company_id
	where k.username=cast(@skbii_id as varchar) and k.ratio_type_id in (20,19)
	
	exec KBI_CF_UpdateGLBalanceAmt @CS, @CE, @PS, @PE, @skbii_id 
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_CF_NCP_Calc]') and xtype = 'P ')  
 drop Procedure KBI_CF_NCP_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[KBI_CF_NCP_Calc] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	declare 
	@ARC money,
	@ARP money,
	@CashC money,	
	@CashP money,	
	@APC money,
	@APP money,
	@Current money,
	@Previous money,
	@sqlstr varchar(8000)

	select @ARC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=16
	select @ARP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=16

	select @CashC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=17
	select @CashP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=17
	
	select @APC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=18
	select @APP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=18

	select @ARC=ABS(@ARC)
	select @ARP=ABS(@ARP)
	select @CashC=ABS(@CashC)
	select @CashP=ABS(@CashP)
	select @APC=ABS(@APC)
	select @APP=ABS(@APP)

	select @Current = (@ARC+@CashC) - @APC

	select @Previous = (@ARP+@CashP) - @APP
	

	set @sqlstr = @webdb+'..sp_KBI_Fill_Summary '+cast(@skbii_id as varchar(15))+', '+cast(@companyid as varchar(15))+', '+cast(@Current as varchar(15))+', '+cast(@Previous as varchar(15))
	exec (@sqlstr)
	print 'Current:'+cast(@Current as varchar(15))
	print 'Previous:'+cast(@Previous as varchar(15))
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_CF_NCP_Fill]') and xtype = 'P ')  
 drop Procedure KBI_CF_NCP_Fill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[KBI_CF_NCP_Fill] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 16 --AR
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 17 --Cash
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 18 --AP
	

	delete from working_KBI_ACCOUNT_BALANCE where username=@skbii_id

	insert into working_KBI_ACCOUNT_BALANCE (USERNAME, KBII_ID, COMPANY_ID, COMPANY_NAME, ACCOUNT_NUMBER, ACCOUNT_DESC, SEG_1, SEG_2, SEG_3, 
		SEG_4, SEG_5, SEG_6, ACCT_TYPE, ACCT_TYPE_DESC, RATIO_TYPE_ID)
	select distinct @skbii_id, @skbii_id, k.COMPANY_ID, c.company_name, k.ACCOUNT_NUMBER, k.ACCOUNT_DESC, k.SEG_1, k.SEG_2, k.SEG_3, k.SEG_4, k.SEG_5, 
		k.SEG_6, k.ACCT_TYPE, k.ACCT_TYPE_DESC, k.RATIO_TYPE_ID
	from KBI_YEARLY_ACCOUNT_BALANCE k
	join companies c on c.autoid=k.company_id
	where k.username=cast(@skbii_id as varchar) and k.ratio_type_id in (16,17,18)
	
	exec KBI_CF_UpdateGLBalanceAmt @CS, @CE, @PS, @PE, @skbii_id 
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_CF_NetIncome_Calc]') and xtype = 'P ')  
 drop Procedure KBI_CF_NetIncome_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[KBI_CF_NetIncome_Calc] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	declare 
	@RevC money,
	@RevP money,
	@ExpC money,	
	@ExpP money,	
	@Current money,
	@Previous money,
	@sqlstr varchar(8000)

	select @RevC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=19
	select @RevP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=19

	select @ExpC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=11
	select @ExpP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=11

	select @RevC=ABS(@RevC)
	select @RevP=ABS(@RevP)
	select @ExpC=ABS(@ExpC)
	select @ExpP=ABS(@ExpP)

	select @Current = @RevC - @ExpC
	select @Previous = @RevP - @ExpP	

	set @sqlstr = @webdb+'..sp_KBI_Fill_Summary '+cast(@skbii_id as varchar(15))+', '+cast(@companyid as varchar(15))+', '+cast(@Current as varchar(15))+', '+cast(@Previous as varchar(15))
	exec (@sqlstr)
	print 'Current:'+cast(@Current as varchar(15))
	print 'Previous:'+cast(@Previous as varchar(15))
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_CF_NetIncome_Fill]') and xtype = 'P ')  
 drop Procedure KBI_CF_NetIncome_Fill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[KBI_CF_NetIncome_Fill] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 19 --revenue
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 11 --expenses
	
	delete from working_KBI_ACCOUNT_BALANCE where username=@skbii_id
	
	insert into working_KBI_ACCOUNT_BALANCE (USERNAME, KBII_ID, COMPANY_ID, COMPANY_NAME, ACCOUNT_NUMBER, ACCOUNT_DESC, SEG_1, SEG_2, SEG_3, 
		SEG_4, SEG_5, SEG_6, ACCT_TYPE, ACCT_TYPE_DESC, RATIO_TYPE_ID)
	select distinct @skbii_id, @skbii_id, k.COMPANY_ID, c.company_name, k.ACCOUNT_NUMBER, k.ACCOUNT_DESC, k.SEG_1, k.SEG_2, k.SEG_3, k.SEG_4, k.SEG_5, 
		k.SEG_6, k.ACCT_TYPE, k.ACCT_TYPE_DESC, k.RATIO_TYPE_ID
	from KBI_YEARLY_ACCOUNT_BALANCE k
	join companies c on c.autoid=k.company_id
	where k.username=cast(@skbii_id as varchar) and k.ratio_type_id in (11,19)
	
	exec KBI_CF_UpdateGLBalanceAmt @CS, @CE, @PS, @PE, @skbii_id 
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_CF_NIPS_Calc]') and xtype = 'P ')  
 drop Procedure KBI_CF_NIPS_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[KBI_CF_NIPS_Calc] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	declare 
	@RevC money,
	@RevP money,
	@ExpC money,	
	@ExpP money,	
	@Current money,
	@Previous money,
	@sqlstr varchar(8000)

	select @RevC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=19
	select @RevP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=19

	select @ExpC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=11
	select @ExpP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=11

	select @RevC=ABS(@RevC)
	select @RevP=ABS(@RevP)
	select @ExpC=ABS(@ExpC)
	select @ExpP=ABS(@ExpP)

	if( @RevC = 0 )
		select @Current = 0
	else
		select @Current = (@RevC-@ExpC) / @RevC * 100

	if( @RevP = 0 )
		select @Previous = 0
	else
		select @Previous = (@RevP-@ExpP) / @RevP * 100
	

	set @sqlstr = @webdb+'..sp_KBI_Fill_Summary '+cast(@skbii_id as varchar(15))+', '+cast(@companyid as varchar(15))+', '+cast(@Current as varchar(15))+', '+cast(@Previous as varchar(15))
	exec (@sqlstr)
	print 'Current:'+cast(@Current as varchar(15))
	print 'Previous:'+cast(@Previous as varchar(15))
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_CF_NIPS_Fill]') and xtype = 'P ')  
 drop Procedure KBI_CF_NIPS_Fill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[KBI_CF_NIPS_Fill] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 19 --Rev
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 11 --Exp

	delete from working_KBI_ACCOUNT_BALANCE where username=@skbii_id

	insert into working_KBI_ACCOUNT_BALANCE (USERNAME, KBII_ID, COMPANY_ID, COMPANY_NAME, ACCOUNT_NUMBER, ACCOUNT_DESC, SEG_1, SEG_2, SEG_3, 
		SEG_4, SEG_5, SEG_6, ACCT_TYPE, ACCT_TYPE_DESC, RATIO_TYPE_ID)
	select distinct @skbii_id, @skbii_id, k.COMPANY_ID, c.company_name, k.ACCOUNT_NUMBER, k.ACCOUNT_DESC, k.SEG_1, k.SEG_2, k.SEG_3, k.SEG_4, k.SEG_5, 
		k.SEG_6, k.ACCT_TYPE, k.ACCT_TYPE_DESC, k.RATIO_TYPE_ID
	from KBI_YEARLY_ACCOUNT_BALANCE k
	join companies c on c.autoid=k.company_id
	where k.username=cast(@skbii_id as varchar) and k.ratio_type_id in (11,19)
	
	exec KBI_CF_UpdateGLBalanceAmt @CS, @CE, @PS, @PE, @skbii_id 
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_CF_QuickRatio_Calc]') and xtype = 'P ')  
 drop Procedure KBI_CF_QuickRatio_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[KBI_CF_QuickRatio_Calc] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	declare 
	@AssetC money,
	@AssetP money,
	@StockC money,
	@StockP money,
	@LiabilityC money,	
	@LiabilityP money,	
	@NonPayC money,
	@NonPayP money,
	@Current money,
	@Previous money,
	@sqlstr varchar(8000)

	select @AssetC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=1
	select @AssetP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=1

	select @LiabilityC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=2
	select @LiabilityP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=2
	
	select @StockC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=13
	select @StockP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=13
	
	select @NonPayC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=14
	select @NonPayP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=14

	select @AssetC=ABS(@AssetC)
	select @AssetP=ABS(@AssetP)
	select @LiabilityC=ABS(@LiabilityC)
	select @LiabilityP=ABS(@LiabilityP)
	select @StockC=ABS(@StockC)
	select @StockP=ABS(@StockP)
	select @NonPayC=ABS(@NonPayC)
	select @NonPayP=ABS(@NonPayP)
	
	if( (@LiabilityC-@NonPayC) = 0 )
		select @Current = 0
	else
		select @Current = (@AssetC+@StockC) / (@LiabilityC-@NonPayC)

	if( (@LiabilityP-@NonPayP) = 0 )
		select @Previous = 0
	else
		select @Previous = (@AssetP+@StockP) / (@LiabilityP-@NonPayP)
	

	set @sqlstr = @webdb+'..sp_KBI_Fill_Summary '+cast(@skbii_id as varchar(15))+', '+cast(@companyid as varchar(15))+', '+cast(@Current as varchar(15))+', '+cast(@Previous as varchar(15))
	exec (@sqlstr)
	print 'Current:'+cast(@Current as varchar(15))
	print 'Previous:'+cast(@Previous as varchar(15))
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_CF_QuickRatio_Fill]') and xtype = 'P ')  
 drop Procedure KBI_CF_QuickRatio_Fill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[KBI_CF_QuickRatio_Fill] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 1 --assets
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 2 --liabilites
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 13 --stock
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 14 --non payable short term liabilities
	
	delete from working_KBI_ACCOUNT_BALANCE where username=@skbii_id

	insert into working_KBI_ACCOUNT_BALANCE (USERNAME, KBII_ID, COMPANY_ID, COMPANY_NAME, ACCOUNT_NUMBER, ACCOUNT_DESC, SEG_1, SEG_2, SEG_3, 
		SEG_4, SEG_5, SEG_6, ACCT_TYPE, ACCT_TYPE_DESC, RATIO_TYPE_ID)
	select distinct @skbii_id, @skbii_id, k.COMPANY_ID, c.company_name, k.ACCOUNT_NUMBER, k.ACCOUNT_DESC, k.SEG_1, k.SEG_2, k.SEG_3, k.SEG_4, k.SEG_5, 
		k.SEG_6, k.ACCT_TYPE, k.ACCT_TYPE_DESC, k.RATIO_TYPE_ID
	from KBI_YEARLY_ACCOUNT_BALANCE k
	join companies c on c.autoid=k.company_id
	where k.username=cast(@skbii_id as varchar) and k.ratio_type_id in (1,2,13,14)
	
	exec KBI_CF_UpdateGLBalanceAmt @CS, @CE, @PS, @PE, @skbii_id 
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_CF_ROE_Calc]') and xtype = 'P ')  
 drop Procedure KBI_CF_ROE_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[KBI_CF_ROE_Calc] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	declare 
	@IncomeC money,
	@IncomeP money,
	@EquityC money,	
	@EquityP money,	
	@Current money,
	@Previous money,
	@sqlstr varchar(8000)

	select @IncomeC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=9
	select @IncomeP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=9

	select @EquityC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=15
	select @EquityP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=15

	select @IncomeC=ABS(@IncomeC)
	select @IncomeP=ABS(@IncomeP)
	select @EquityC=ABS(@EquityC)
	select @EquityP=ABS(@EquityP)
	
	if( @EquityC = 0 )
		select @Current = 0
	else
		select @Current = @IncomeC / @EquityC

	if( @EquityP = 0 )
		select @Previous = 0
	else
		select @Previous = @IncomeP / @EquityP
	

	set @sqlstr = @webdb+'..sp_KBI_Fill_Summary '+cast(@skbii_id as varchar(15))+', '+cast(@companyid as varchar(15))+', '+cast(@Current as varchar(15))+', '+cast(@Previous as varchar(15))
	exec (@sqlstr)
	print 'Current:'+cast(@Current as varchar(15))
	print 'Previous:'+cast(@Previous as varchar(15))
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_CF_ROE_Fill]') and xtype = 'P ')  
 drop Procedure KBI_CF_ROE_Fill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[KBI_CF_ROE_Fill] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 9 --net sales
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 15 --avg equity

	delete from working_KBI_ACCOUNT_BALANCE where username=@skbii_id

	insert into working_KBI_ACCOUNT_BALANCE (USERNAME, KBII_ID, COMPANY_ID, COMPANY_NAME, ACCOUNT_NUMBER, ACCOUNT_DESC, SEG_1, SEG_2, SEG_3, 
		SEG_4, SEG_5, SEG_6, ACCT_TYPE, ACCT_TYPE_DESC, RATIO_TYPE_ID)
	select distinct @skbii_id, @skbii_id, k.COMPANY_ID, c.company_name, k.ACCOUNT_NUMBER, k.ACCOUNT_DESC, k.SEG_1, k.SEG_2, k.SEG_3, k.SEG_4, k.SEG_5, 
		k.SEG_6, k.ACCT_TYPE, k.ACCT_TYPE_DESC, k.RATIO_TYPE_ID
	from KBI_YEARLY_ACCOUNT_BALANCE k
	join companies c on c.autoid=k.company_id
	where k.username=cast(@skbii_id as varchar) and k.ratio_type_id in (9,15)
	
	exec KBI_CF_UpdateGLBalanceAmt @CS, @CE, @PS, @PE, @skbii_id 
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_CF_UpdateGLBalanceAmt]') and xtype = 'P ')  
 drop Procedure KBI_CF_UpdateGLBalanceAmt
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

--exec KBI_CF_UpdateGLBalanceAmt '01-01-2013', '02-13-2013', '01-01-2012', '12-31-2012', 120
CREATE proc [dbo].[KBI_CF_UpdateGLBalanceAmt] @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	declare @StartGL_year int, @EndGL_year int, @StartGL_per int, @EndGL_per int, @trdb varchar(50), @Company_ID int, 
		@sql varchar(max), @nsql nvarchar(max), @prev_bal_sel varchar(max), @cur_bal_sel varchar(max),
		@avg_ytd varchar(max), @twelve_mo_rolling varchar(max), 
		@PrevEndGL_year int, @PrevEndGL_per int, @CurrEndGL_year int, @CurrEndGL_per int

	declare tr_cur cursor for		
	select distinct c.treasurydbname, c.autoid 
	from companies c 
	join working_KBI_ACCOUNT_BALANCE w on w.company_id=c.autoid
	where w.kbii_id=@skbii_id

	open tr_cur fetch tr_cur into @trdb, @Company_ID
	while @@fetch_status=0
	begin	
		--PREVIOUS BALANCE SELECT	
		select @nsql = 'select @StartGL_per = ' +  @trdb + '.dbo.fn_GL_GetPeriodByDate('''+cast(@PS as varchar)+''')' 
		exec sp_executesql @nsql, N'@StartGL_per int OUT', @StartGL_per OUT		
		
		select @nsql = 'select @StartGL_year = ' +  @trdb + '.dbo.fn_GL_GetYearByDate('''+cast(@PS as varchar)+''')' 
		exec sp_executesql @nsql, N'@StartGL_year int OUT', @StartGL_year OUT
		
		select @nsql = 'select @EndGL_per = ' +  @trdb + '.dbo.fn_GL_GetPeriodByDate('''+cast(@PE as varchar)+''')' 
		exec sp_executesql @nsql, N'@EndGL_per int OUT', @EndGL_per OUT
	
		select @nsql = 'select @EndGL_year = ' +  @trdb + '.dbo.fn_GL_GetYearByDate('''+cast(@PE as varchar)+''')' 
		exec sp_executesql @nsql, N'@EndGL_year int OUT', @EndGL_year OUT	
		
		select @PrevEndGL_year=@EndGL_year, @PrevEndGL_per=@EndGL_per

		select @prev_bal_sel=dbo.fn_KBI_GetPeriodFields(@StartGL_year, @EndGL_year, @StartGL_per, @EndGL_per, @Company_ID)		
				
		--CURRENT BALANCE SELECT
		select @nsql = 'select @StartGL_per = ' +  @trdb + '.dbo.fn_GL_GetPeriodByDate('''+cast(@CS as varchar)+''')' 
		exec sp_executesql @nsql, N'@StartGL_per int OUT', @StartGL_per OUT
		
		select @nsql = 'select @StartGL_year = ' +  @trdb + '.dbo.fn_GL_GetYearByDate('''+cast(@CS as varchar)+''')' 
		exec sp_executesql @nsql, N'@StartGL_year int OUT', @StartGL_year OUT
		
		select @nsql = 'select @EndGL_per = ' +  @trdb + '.dbo.fn_GL_GetPeriodByDate('''+cast(@CE as varchar)+''')' 
		exec sp_executesql @nsql, N'@EndGL_per int OUT', @EndGL_per OUT
	
		select @nsql = 'select @EndGL_year = ' +  @trdb + '.dbo.fn_GL_GetYearByDate('''+cast(@CE as varchar)+''')' 
		exec sp_executesql @nsql, N'@EndGL_year int OUT', @EndGL_year OUT
		
		select @CurrEndGL_year=@EndGL_year, @CurrEndGL_per=@EndGL_per
		
		select @cur_bal_sel=dbo.fn_KBI_GetPeriodFields(@StartGL_year, @EndGL_year, @StartGL_per, @EndGL_per, @Company_ID)
		
		--AVG YTD SELECT
		select @nsql = 'select @StartGL_year = ' +  @trdb + '.dbo.fn_GL_GetYearByDate('''+dbo.fn_GetStringDate(GETDATE())+''')' 
		exec sp_executesql @nsql, N'@StartGL_year int OUT', @StartGL_year OUT
		
		select @nsql = 'select @EndGL_per = ' +  @trdb + '.dbo.fn_GL_GetPeriodByDate('''+dbo.fn_GetStringDate(GETDATE())+''')' 
		exec sp_executesql @nsql, N'@EndGL_per int OUT', @EndGL_per OUT
		
		select @avg_ytd='round(('+dbo.fn_KBI_GetPeriodFields(@StartGL_year, @StartGL_year, 1, @EndGL_per, @Company_ID) + ' / '+CAST(@EndGL_per as varchar)+'),2)'
		
		--12 MONTH ROLLING SELECT	
		select @nsql = 'select @StartGL_per = ' +  @trdb + '.dbo.fn_GL_GetPeriodByDate('''+dbo.fn_GetStringDate(dateadd(yyyy, -1, GETDATE()))+''')' 
		exec sp_executesql @nsql, N'@StartGL_per int OUT', @StartGL_per OUT		
		
		select @nsql = 'select @StartGL_year = ' +  @trdb + '.dbo.fn_GL_GetYearByDate('''+dbo.fn_GetStringDate(dateadd(yyyy, -1, GETDATE()))+''')' 
		exec sp_executesql @nsql, N'@StartGL_year int OUT', @StartGL_year OUT
		
		select @nsql = 'select @EndGL_per = ' +  @trdb + '.dbo.fn_GL_GetPeriodByDate('''+dbo.fn_GetStringDate(GETDATE())+''')' 
		exec sp_executesql @nsql, N'@EndGL_per int OUT', @EndGL_per OUT
	
		select @nsql = 'select @EndGL_year = ' +  @trdb + '.dbo.fn_GL_GetYearByDate('''+dbo.fn_GetStringDate(GETDATE())+''')' 
		exec sp_executesql @nsql, N'@EndGL_year int OUT', @EndGL_year OUT		

		select @twelve_mo_rolling=dbo.fn_KBI_GetPeriodFields(@StartGL_year, @EndGL_year, @StartGL_per, @EndGL_per, @Company_ID)

		
		select @sql = '
		update w
		set w.PREVIOUS_BALANCE='+@prev_bal_sel+', w.CURRENT_BALANCE='+@cur_bal_sel+',
		w.AVG_YTD='+@avg_ytd+', w.TWELVE_MO_ROLLING='+@twelve_mo_rolling+'
		from working_KBI_ACCOUNT_BALANCE w
		where w.USERNAME='+cast(@skbii_id as varchar)+' and w.COMPANY_ID='+cast(@Company_ID as varchar)+' and isnull(w.acct_type,'''') not in (''C'',''L'',''A'')'
		exec( @sql )	
		
		select @sql = '
		update w
		set w.PREVIOUS_BALANCE=
			( 
			isnull((select case when isnull(k.acct_type,'''') in (''C'',''L'',''A'') then
				isnull(k.per'+cast(@PrevEndGL_per as varchar)+',0) 
			else w.PREVIOUS_BALANCE end
			from KBI_YEARLY_ACCOUNT_BALANCE k
			where k.company_id='+cast(@Company_ID as varchar)+' and k.account_number=w.account_number and k.gl_year='+cast(@PrevEndGL_year as varchar)+' and k.USERNAME=w.USERNAME ),0)  
			),
		w.CURRENT_BALANCE=
			( 
			isnull((select case when isnull(k.acct_type,'''') in (''C'',''L'',''A'') then
				isnull(k.per'+cast(@CurrEndGL_per as varchar)+',0) 
			else w.CURRENT_BALANCE end
			from KBI_YEARLY_ACCOUNT_BALANCE k
			where k.company_id='+cast(@Company_ID as varchar)+' and k.account_number=w.account_number and k.gl_year='+cast(@CurrEndGL_year as varchar)+' and k.USERNAME=w.USERNAME ),0)  
			),
		w.TWELVE_MO_ROLLING=
			(
			isnull((select case when isnull(k.acct_type,'''') in (''C'',''L'',''A'') then
				isnull(k.per'+cast(@EndGL_per as varchar)+',0) - case when '+cast(@EndGL_per as varchar)+' > 1 then
				(
					isnull((select isnull(k1.per'+cast((@EndGL_per) as varchar)+',0) 
						from KBI_YEARLY_ACCOUNT_BALANCE k1 
						where k1.company_id='+cast(@Company_ID as varchar)+' and k1.account_number=k.account_number and k1.gl_year='+cast((@EndGL_year-1) as varchar)+' and k1.USERNAME=k.USERNAME 
					),0)
				)
				else
				(
					isnull((select isnull(k1.per12,0) 
						from KBI_YEARLY_ACCOUNT_BALANCE k1 
						where k1.company_id='+cast(@Company_ID as varchar)+' and k1.account_number=k.account_number and k1.gl_year='+cast((@EndGL_year-2) as varchar)+' and k1.USERNAME=k.USERNAME 
					),0)
				)
				end
			else w.TWELVE_MO_ROLLING end
			from KBI_YEARLY_ACCOUNT_BALANCE k
			where k.company_id='+cast(@Company_ID as varchar)+' and k.account_number=w.account_number and k.gl_year='+cast(@EndGL_year as varchar)+' and k.USERNAME=w.USERNAME ),0)  
			),
		w.AVG_YTD=
			(
			isnull((select case when isnull(k.acct_type,'''') in (''C'',''L'',''A'') then
				( isnull(k.per'+cast(@EndGL_per as varchar)+',0) - 
					(
						isnull((select isnull(k1.per12,0) 
							from KBI_YEARLY_ACCOUNT_BALANCE k1 
							where k1.company_id='+cast(@Company_ID as varchar)+' and k1.account_number=k.account_number and k1.gl_year='+cast(@StartGL_year as varchar)+' and k1.USERNAME=k.USERNAME 
						),0)
					)
				) / '+cast(@EndGL_per as varchar)+'
			else w.TWELVE_MO_ROLLING end
			from KBI_YEARLY_ACCOUNT_BALANCE k
			where k.company_id='+cast(@Company_ID as varchar)+' and k.account_number=w.account_number and k.gl_year='+cast(@EndGL_year as varchar)+' and k.USERNAME=w.USERNAME ),0)  			
			)
		from working_KBI_ACCOUNT_BALANCE w
		where w.USERNAME='+cast(@skbii_id as varchar)+' and w.COMPANY_ID='+cast(@Company_ID as varchar)+' and isnull(w.acct_type,'''') in (''C'',''L'',''A'')'
		exec( @sql )	
		
		fetch tr_cur into @trdb, @Company_ID
	end			
	close tr_cur
	deallocate tr_cur
	
	update w
	set w.PREV_BAL_ABS=abs(w.PREVIOUS_BALANCE), w.CURR_BAL_ABS=abs(w.CURRENT_BALANCE)
	from working_KBI_ACCOUNT_BALANCE w
	where w.USERNAME=@skbii_id	
end


		



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_CF_WorkingCapital_Calc]') and xtype = 'P ')  
 drop Procedure KBI_CF_WorkingCapital_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


create proc [dbo].[KBI_CF_WorkingCapital_Calc] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	declare 
	@RecC money,
	@RecP money,
	@InvC money,	
	@InvP money,	
	@ExpC money,	
	@ExpP money,	
	@PayC money,	
	@PayP money,	
	@Current money,
	@Previous money,
	@sqlstr varchar(8000)

	select @RecC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=16
	select @RecP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=16
	
	select @InvC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=20
	select @InvP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=20

	select @ExpC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=21
	select @ExpP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=21
	
	select @PayC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=18
	select @PayP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=18

	select @RecC=ABS(@RecC)
	select @RecP=ABS(@RecP)
	select @InvC=ABS(@InvC)
	select @InvP=ABS(@InvP)
	select @ExpC=ABS(@ExpC)
	select @ExpP=ABS(@ExpP)
	select @PayC=ABS(@PayC)
	select @PayP=ABS(@PayP)

	select @Current = (@RecC + @InvC + @ExpC) - @PayC
	select @Previous = (@RecP + @InvP + @ExpP) - @PayP

	set @sqlstr = @webdb+'..sp_KBI_Fill_Summary '+cast(@skbii_id as varchar(15))+', '+cast(@companyid as varchar(15))+', '+cast(@Current as varchar(15))+', '+cast(@Previous as varchar(15))
	exec (@sqlstr)
	print 'Current:'+cast(@Current as varchar(15))
	print 'Previous:'+cast(@Previous as varchar(15))
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_CF_WorkingCapital_Fill]') and xtype = 'P ')  
 drop Procedure KBI_CF_WorkingCapital_Fill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[KBI_CF_WorkingCapital_Fill] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 16 --receivables
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 20 --inventory
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 21 --prepaid expenses
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 18 --payables
	
	delete from working_KBI_ACCOUNT_BALANCE where username=@skbii_id
	
	insert into working_KBI_ACCOUNT_BALANCE (USERNAME, KBII_ID, COMPANY_ID, COMPANY_NAME, ACCOUNT_NUMBER, ACCOUNT_DESC, SEG_1, SEG_2, SEG_3, 
		SEG_4, SEG_5, SEG_6, ACCT_TYPE, ACCT_TYPE_DESC, RATIO_TYPE_ID)
	select distinct @skbii_id, @skbii_id, k.COMPANY_ID, c.company_name, k.ACCOUNT_NUMBER, k.ACCOUNT_DESC, k.SEG_1, k.SEG_2, k.SEG_3, k.SEG_4, k.SEG_5, 
		k.SEG_6, k.ACCT_TYPE, k.ACCT_TYPE_DESC, k.RATIO_TYPE_ID
	from KBI_YEARLY_ACCOUNT_BALANCE k
	join companies c on c.autoid=k.company_id
	where k.username=cast(@skbii_id as varchar) and k.ratio_type_id in (16,18,20,21)
	
	exec KBI_CF_UpdateGLBalanceAmt @CS, @CE, @PS, @PE, @skbii_id 
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_CF_WorkingCapitalPerSales_Calc]') and xtype = 'P ')  
 drop Procedure KBI_CF_WorkingCapitalPerSales_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


-- exec KBI_CF_WorkingCapitalPerSales_Calc 'web_summit_v10', -1, 'adam', '01-01-2013', '02-13-2013', '01-01-2012', '12-31-2012', 121
CREATE proc [dbo].[KBI_CF_WorkingCapitalPerSales_Calc] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	declare 
	@RecC money,
	@RecP money,
	@InvC money,	
	@InvP money,	
	@ExpC money,	
	@ExpP money,	
	@PayC money,	
	@PayP money,
	@SalesC money,	
	@SalesP money,	
	@Current money,
	@Previous money,
	@sqlstr varchar(8000)

	select @RecC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=16
	select @RecP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=16
	
	select @InvC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=20
	select @InvP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=20

	select @ExpC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=21
	select @ExpP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=21
	
	select @PayC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=18
	select @PayP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=18
	
	select @SalesC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=9
	select @SalesP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=9

	select @RecC=ABS(@RecC)
	select @RecP=ABS(@RecP)
	select @InvC=ABS(@InvC)
	select @InvP=ABS(@InvP)
	select @ExpC=ABS(@ExpC)
	select @ExpP=ABS(@ExpP)
	select @PayC=ABS(@PayC)
	select @PayP=ABS(@PayP)
	select @SalesC=ABS(@SalesC)
	select @SalesP=ABS(@SalesP)
	
	if( @SalesC <> 0 )
		select @Current = ((@RecC + @InvC + @ExpC) - @PayC) / @SalesC
	else 
		select @Current = 0
		
	if( @SalesP <> 0 )
		select @Previous = ((@RecP + @InvP + @ExpP) - @PayP) / @SalesP
	else
		select @Previous = 0;

	set @sqlstr = @webdb+'..sp_KBI_Fill_Summary '+cast(@skbii_id as varchar(15))+', '+cast(@companyid as varchar(15))+', '+cast(@Current as varchar(15))+', '+cast(@Previous as varchar(15))
	exec (@sqlstr)
	print 'Current:'+cast(@Current as varchar(15))
	print 'Previous:'+cast(@Previous as varchar(15))
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_CF_WorkingCapitalPerSales_Fill]') and xtype = 'P ')  
 drop Procedure KBI_CF_WorkingCapitalPerSales_Fill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[KBI_CF_WorkingCapitalPerSales_Fill] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 16 --receivables
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 20 --inventory
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 21 --prepaid expenses
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 18 --payables
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 9 --net sales
	
	delete from working_KBI_ACCOUNT_BALANCE where username=@skbii_id
	
	insert into working_KBI_ACCOUNT_BALANCE (USERNAME, KBII_ID, COMPANY_ID, COMPANY_NAME, ACCOUNT_NUMBER, ACCOUNT_DESC, SEG_1, SEG_2, SEG_3, 
		SEG_4, SEG_5, SEG_6, ACCT_TYPE, ACCT_TYPE_DESC, RATIO_TYPE_ID)
	select distinct @skbii_id, @skbii_id, k.COMPANY_ID, c.company_name, k.ACCOUNT_NUMBER, k.ACCOUNT_DESC, k.SEG_1, k.SEG_2, k.SEG_3, k.SEG_4, k.SEG_5, 
		k.SEG_6, k.ACCT_TYPE, k.ACCT_TYPE_DESC, k.RATIO_TYPE_ID
	from KBI_YEARLY_ACCOUNT_BALANCE k
	join companies c on c.autoid=k.company_id
	where k.username=cast(@skbii_id as varchar) and k.ratio_type_id in (9,16,18,20,21)
	
	exec KBI_CF_UpdateGLBalanceAmt @CS, @CE, @PS, @PE, @skbii_id 
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_ExecuteDashboardDataSource]') and xtype = 'P ')  
 drop Procedure KBI_ExecuteDashboardDataSource
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
create proc KBI_ExecuteDashboardDataSource @Security_KBI_Instance_ID int, @Security_KBI_ID int,
@Username varchar(10), @ContactID int, @CompanyID int, @ForceRefreshDataSet bit = 0 as

/*
	Author: Robg, 1/17/2017
	For each attached datasource, this proc will execute:
	1. The fill proc 
		- Includes the check for goals
		- Depending upon the particular setup of the KBI, this may or may not refresh the datasets
		- @ForceRefreshDataSet will always refresh the datasets if true
	2. The calculate proc
	3. "Friendly" security query is called after this is first called
*/
declare @TRDB varchar(max), @CurrentPeriod int, @SQL nvarchar(max)
select @TRDB = (select TreasuryDBName from COMPANIES where AutoID = @CompanyID)

set @SQL='select @CurrentPeriod = isnull((select top 1 period from '+@TRDB+'..AR_PERIODS where end_date > GETDATE() and period <> 13 order by end_date asc),1)'
exec sp_executesql @SQL,N'@CurrentPeriod int OUT ', @CurrentPeriod OUT

declare @StartOfFiscalYear datetime
select @Sql = '
select @StartOfFiscalYear = 
isnull((select DATEADD(dd,-DATEPART(dd,end_date)+1,END_DATE) from '+@TRDB+'..GL_PERIODS 
where PERIOD = 1 and DATEPART(YEAR,END_DATE) = DATEPART(YEAR,GETDATE())), ''1/1/'' + cast(datepart(year, getdate()) as varchar(50)))'
exec sp_executesql @Sql, N'@StartOfFiscalYear datetime OUT', @StartOfFiscalYear OUT 
print @StartOfFiscalYear


declare @FillProcName varchar(max), @KBICalcProcName varchar(max), @Security_Query_id int, @FriendlyQuerySQL varchar(max), 
@Flavour varchar(100), @Scheduled char(1), @CompanySpecific char(1), @TimeOut int, @Latency int, 
@Todate char(1), @Range int, @RangeScale char(1), @Gap int, @GapScale char(1), @source varchar(100),
@Parameters varchar(max)	

select @FillProcName = FillProcName, @KBICalcProcName = KBICalcProcName, @Security_Query_id = SQ_ID, @Flavour = flavour
from Security_KBIs 
where ID = @Security_KBI_ID

select distinct @Scheduled = i.Scheduled, @CompanySpecific = i.CompanySpecific, @TimeOut = isnull(i.TimeOut,99), 
@Latency = i.Latency, @Todate = i.[Todate?], @Range = i.Range, @RangeScale = i.RangeScale, @Gap = i.Gap, 
@GapScale = i.GapScale, @source = i.source	
from security_kbi_instance i 
where i.id = @Security_KBI_Instance_ID

--check for goals
exec sp_kbi_goals @Security_KBI_ID, @CurrentPeriod, @Username, @CompanyID

--get dates to run
declare @cs datetime, @ce datetime, @ps datetime, @pe datetime
select @cs = isnull(dbo.fn_Get_KBI_Date(@Todate, @Range, @RangeScale, @Gap, @GapScale, 'cs', @CurrentPeriod, @StartOfFiscalYear),'1/1/1950')
select @ce = isnull(dbo.fn_Get_KBI_Date(@Todate, @Range, @RangeScale, @Gap, @GapScale, 'ce', @CurrentPeriod, @StartOfFiscalYear),'1/1/1950')
select @ps = isnull(dbo.fn_Get_KBI_Date(@Todate, @Range, @RangeScale, @Gap, @GapScale, 'ps', @CurrentPeriod, @StartOfFiscalYear),'1/1/1950')
select @pe = isnull(dbo.fn_Get_KBI_Date(@Todate, @Range, @RangeScale, @Gap, @GapScale, 'pe', @CurrentPeriod, @StartOfFiscalYear),'1/1/1950')


if @CompanySpecific = 'T'	
	select @Parameters = ' ''' + DB_NAME() +''', ' + cast(@CompanyID as varchar(20)) + ' , ''' + @Username + ''',
	''' + cast(CONVERT(date, @cs) as varchar(50)) + ''', ''' + cast(CONVERT(date, @ce) as varchar(50)) + ''',''' + 
	cast(CONVERT(date, @ps) as varchar(50)) + ''', ''' + cast(CONVERT(date, @pe) as varchar(50)) + ''', ' + 
	cast(@Security_KBI_Instance_ID as varchar(50))
else
	select @Parameters = ' ''' + DB_NAME() +''', -1 , ''' + @Username + ''',
	''' + cast(CONVERT(date, @cs) as varchar(50)) + ''', ''' + cast(CONVERT(date, @ce) as varchar(50)) + ''',''' + 
	cast(CONVERT(date, @ps) as varchar(50)) + ''', ''' + cast(CONVERT(date, @pe) as varchar(50)) + ''', ' + 
	cast(@Security_KBI_Instance_ID as varchar(50))
	
insert into security_kbi_running(kbiInstance_ID, contactID, startTime) 
select @Security_KBI_Instance_ID, @ContactID, getDate()
	
select @sql = @FillProcName + @Parameters
exec(@sql)
select @sql = @KBICalcProcName + @Parameters
exec(@sql)

delete security_kbi_running where kbiinstance_id = @Security_KBI_Instance_ID
	

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_ExecuteDashboardDataSources]') and xtype = 'P ')  
 drop Procedure KBI_ExecuteDashboardDataSources
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc KBI_ExecuteDashboardDataSources @DashboardID int as


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_InsertWidgetUsers]') and xtype = 'P ')  
 drop Procedure KBI_InsertWidgetUsers
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc KBI_InsertWidgetUsers @KBII_ID int, @KBI_ID int
as 
begin
	declare @company_id int

	declare companies cursor for 
	select autoid from companies where active = 1
	open companies
	fetch companies into @company_id
	while @@fetch_status = 0
	begin 
		insert into Security_widget_users(sw_id, parentLocation, target, source, targettype, companyid) 
		select w.id, cast(w.sq_id as varchar), @KBII_ID, @KBII_ID, 'user', @company_id 
		from Security_widget w 
		where w.skbi_id=@KBI_ID
		
		fetch companies into @company_id
	end
	close companies
	deallocate companies
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_LD_LotInvSC]') and xtype = 'P ')  
 drop Procedure KBI_LD_LotInvSC
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
 

-- exec KBI_LD_LotInvSC 134
create proc KBI_LD_LotInvSC @SKBII_ID int
as
begin		
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#LandLot'))
		drop table #LandLot

    create table #LandLot(
		pri_id int,
		ProjectNameFull varchar(100)
	)
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#LandLotCurr'))
		drop table #LandLotCurr

    create table #LandLotCurr(
		pri_id int,
		CurrentCount int,
		CurrentPrice decimal(19,4)
	)
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#LandLotPrev'))
		drop table #LandLotPrev

    create table #LandLotPrev(
		pri_id int,
		PreviousCount int,
		PreviousOriginalPrice decimal(19,4)
	)
	
	declare @LandLot table (
		pri_id int,
		ProjectNameFull varchar(100),
		CurrentCount int,
		CurrentPrice decimal(19,4),
		PreviousCount int,
		PreviousOriginalPrice decimal(19,4),
		CountVariance int,
		PriceVariance decimal(19,4)
	)
	
	declare @cs datetime, @ce datetime, @ps datetime, @pe datetime, @tr_db varchar(50), @nsql nvarchar(max), @currentPeriod int,
		@StartOfFiscalYear datetime, @CompanyID int 
	
	select @CompanyID=Company_ID from security_kbi_summary where KBI_Instance_ID=@SKBII_ID
	select @tr_db=treasurydbname from COMPANIES where AutoID=@CompanyID
	
	select @nsql = 'select top 1 @currentPeriod=period 
		from '+@tr_db+'.dbo.AR_PERIODS 
		where end_date > GETDATE() and period <> 13 
		order by end_date asc'	
    exec sp_executesql @nsql, N'@currentPeriod int OUT ', @currentPeriod OUT
    
	select @nsql = 'select @StartOfFiscalYear=dateadd(dd,-DATEPART(dd,end_date)+1,end_date) 
		from '+@tr_db+'.dbo.GL_PERIODS where PERIOD = 1 and DATEPART(YEAR,END_DATE) = DATEPART(YEAR,GETDATE())'
	exec sp_executesql @nsql, N'@StartOfFiscalYear datetime OUT', @StartOfFiscalYear OUT

	select @cs = dbo.fn_Get_KBI_Date([Todate?], Range, RangeScale, Gap, GapScale, 'CS', @currentPeriod, @StartOfFiscalYear),
		   @ce = dbo.fn_Get_KBI_Date([Todate?], Range, RangeScale, Gap, GapScale, 'CE', @currentPeriod, @StartOfFiscalYear),
		   @ps = dbo.fn_Get_KBI_Date([Todate?], Range, RangeScale, Gap, GapScale, 'PS', @currentPeriod, @StartOfFiscalYear),
		   @pe = dbo.fn_Get_KBI_Date([Todate?], Range, RangeScale, Gap, GapScale, 'PE', @currentPeriod, @StartOfFiscalYear)
	from Security_KBI_Instance 
	where ID=@SKBII_ID

	
	select @nsql = '
		insert into #LandLotCurr (pri_id, CurrentCount, CurrentPrice)
		select pri_id, COUNT(*), SUM(isnull(Current_Price,0))
		from '+@tr_db+'.dbo.working_KBI_LD_Lot where username = cast(@SKBII_ID as varchar(15)) and 
		(
			(Status in (''Inventory'', ''Hold'')) or 
			(Status in (''Sold'', ''Pending'') and cast(Agreement_Date as date) > @CE)			
		)
		and cast(date_created as date) <= @CE
		group by pri_id '
	exec sp_executesql @nsql, N'@SKBII_ID int, @CS datetime, @CE datetime ', @SKBII_ID, @CS, @CE
	
	select @nsql = '
		insert into #LandLotPrev (pri_id, PreviousCount, PreviousOriginalPrice)
		select pri_id, COUNT(*), SUM(isnull(Original_Price,0))
		from '+@tr_db+'.dbo.working_KBI_LD_Lot where username = cast(@SKBII_ID as varchar(15)) and 
		(
			(Status in (''Inventory'', ''Hold'')) or 
			(Status in (''Sold'', ''Pending'') and cast(Agreement_Date as date) > @PE)			
		)
		and cast(date_created as date) <= @PE
		group by pri_id '
	exec sp_executesql @nsql, N'@SKBII_ID int, @PS datetime, @PE datetime ', @SKBII_ID, @PS, @PE
	
	select @nsql = '
		insert into #LandLot(pri_id, ProjectNameFull)
		select distinct pri_id, Project_Name_Full
		from '+@tr_db+'.dbo.working_KBI_LD_Lot 
		where username = cast(@SKBII_ID as varchar(15)) '
	exec sp_executesql @nsql, N'@SKBII_ID int ', @SKBII_ID
	
	insert into @LandLot (pri_id, ProjectNameFull, CurrentCount, CurrentPrice, PreviousCount, PreviousOriginalPrice, CountVariance, PriceVariance)
	select pri_id, ProjectNameFull, 0, 0, 0, 0, 0, 0
	from #LandLot
	
	update l
	set l.CurrentCount=isnull(c.CurrentCount,0), l.CurrentPrice=isnull(c.CurrentPrice,0)
	from @LandLot l
	join #LandLotCurr c on c.pri_id=l.pri_id
	
	update l
	set l.PreviousCount=isnull(p.PreviousCount,0), l.PreviousOriginalPrice=isnull(p.PreviousOriginalPrice,0)
	from @LandLot l
	join #LandLotPrev p on p.pri_id=l.pri_id

	update l
	set l.CountVariance=l.CurrentCount-l.PreviousCount, 
		l.PriceVariance=l.CurrentPrice-l.PreviousOriginalPrice
	from @LandLot l

	select pri_id, ProjectNameFull, CurrentCount, CurrentPrice, PreviousCount, PreviousOriginalPrice, CountVariance, PriceVariance
	from @LandLot
	order by ProjectNameFull
end 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_LD_LotRevActvsBudSC]') and xtype = 'P ')  
 drop Procedure KBI_LD_LotRevActvsBudSC
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
 

-- exec KBI_LD_LotRevActvsBudSC 135
create proc KBI_LD_LotRevActvsBudSC @SKBII_ID int
as
begin	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#LandLot'))
		drop table #LandLot

    create table #LandLot(
		pri_id int,
		ProjectNameFull varchar(100)
	)
	
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#LandLotSales'))
		drop table #LandLotSales

    create table #LandLotSales(
		pri_id int,
		LotSaleCount int,
		LotSales decimal(19,4)
	)
	
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#LandLotBudg'))
		drop table #LandLotBudg

    create table #LandLotBudg(
		pri_id int,
		BudgetedLotCount int,
		BudgetedSales decimal(19,4)
	)
	
	
	declare @LandLot table (
		pri_id int,
		ProjectNameFull varchar(100),
		LotSaleCount int,
		LotSales decimal(19,4),
		BudgetedLotCount int,
		BudgetedSales decimal(19,4),
		VarianceCount int,
		VarianceSales decimal(19,4)
	)
	
	
	declare @cs datetime, @ce datetime, @tr_db varchar(50), @nsql nvarchar(max), @currentPeriod int,
		@StartOfFiscalYear datetime, @CompanyID int 
	
	select @CompanyID=Company_ID from security_kbi_summary where KBI_Instance_ID=@SKBII_ID
	select @tr_db=treasurydbname from COMPANIES where AutoID=@CompanyID
	
	select @nsql = 'select top 1 @currentPeriod=period 
		from '+@tr_db+'.dbo.AR_PERIODS 
		where end_date > GETDATE() and period <> 13 
		order by end_date asc'	
    exec sp_executesql @nsql, N'@currentPeriod int OUT ', @currentPeriod OUT
    
	select @nsql = 'select @StartOfFiscalYear=dateadd(dd,-DATEPART(dd,end_date)+1,end_date) 
		from '+@tr_db+'.dbo.GL_PERIODS where PERIOD = 1 and DATEPART(YEAR,END_DATE) = DATEPART(YEAR,GETDATE())'
	exec sp_executesql @nsql, N'@StartOfFiscalYear datetime OUT', @StartOfFiscalYear OUT

	select @cs = dbo.fn_Get_KBI_Date([Todate?], Range, RangeScale, Gap, GapScale, 'CS', @currentPeriod, @StartOfFiscalYear),
		   @ce = dbo.fn_Get_KBI_Date([Todate?], Range, RangeScale, Gap, GapScale, 'CE', @currentPeriod, @StartOfFiscalYear)
	from Security_KBI_Instance 
	where ID=@SKBII_ID

	
	select @nsql = '
		insert into #LandLotSales (pri_id, LotSaleCount, LotSales)
		select pri_id, 
		SUM((case when Status=''Unsold'' then -1 else 1 end)),
		SUM(isnull(sell_price,0))
		from '+@tr_db+'.dbo.working_KBI_LD_Lot where username = cast(@SKBII_ID as varchar(15)) 
		and Status in (''Sold'', ''Unsold'') and (cast(Sale_Date as date) between @CS and @CE)
		group by pri_id '
	exec sp_executesql @nsql, N'@SKBII_ID int, @CS datetime, @CE datetime ', @SKBII_ID, @CS, @CE
	
	select @nsql = '
		insert into #LandLot(pri_id, ProjectNameFull)
		select distinct pri_id, Project_Name_Full
		from '+@tr_db+'.dbo.working_KBI_LD_Lot 
		where username = cast(@SKBII_ID as varchar(15)) '
	exec sp_executesql @nsql, N'@SKBII_ID int ', @SKBII_ID
	
	-- Only counts revenue budgetted numbers where the lot class is classified to be sold by 'Lots' not 'Acres'
	select @nsql = '
	insert into #LandLotBudg (pri_id, BudgetedLotCount, BudgetedSales)
	select t.pri_id, SUM(isnull(d.amount,0)), SUM(round(isnull(d.amount,0)*isnull(round(h.L_AvgSellPrice,2),0),2))
	from #LandLot t	
	join '+@tr_db+'.dbo.RE_CashFlow_Master m on m.LinkID=t.pri_id
	join '+@tr_db+'.dbo.RE_CashFlow_Header h on h.CFM_ID=m.id and h.CashFlowType=''Revenue''
	join '+@tr_db+'.dbo.LD_Lot_Class lc on lc.Lot_Class_ID=h.TypeID1
	join '+@tr_db+'.dbo.RE_CashFlow_Link l on l.CFH_ID=h.id 
	join '+@tr_db+'.dbo.RE_CashFlow_Detail d on d.id=l.CFD_ID
	where m.LinkType=''Project'' and m.CashFlowType=''Revenue'' and budgettype=''W'' and lc.SoldBy=''L'' 
		and d.amount <> 0 and d.Date between @CS and @CE
	group by t.pri_id '
	exec sp_executesql @nsql, N'@CS datetime, @CE datetime ', @CS, @CE
		
	
	insert into @LandLot (pri_id, ProjectNameFull, LotSaleCount, LotSales, BudgetedLotCount, BudgetedSales, VarianceCount, VarianceSales)
	select pri_id, ProjectNameFull, 0, 0, 0, 0, 0, 0
	from #LandLot 
	
	update l
	set l.LotSaleCount=isnull(s.LotSaleCount,0), l.LotSales=isnull(s.LotSales,0)
	from @LandLot l
	join #LandLotSales s on s.pri_id=l.pri_id
	
	update l
	set l.BudgetedLotCount=isnull(b.BudgetedLotCount,0), l.BudgetedSales=isnull(b.BudgetedSales,0)
	from @LandLot l
	join #LandLotBudg b on b.pri_id=l.pri_id

	update l
	set l.VarianceCount=l.LotSaleCount-l.BudgetedLotCount, 
		l.VarianceSales=l.LotSales-l.BudgetedSales
	from @LandLot l

	select pri_id, ProjectNameFull, LotSales, BudgetedSales, VarianceSales, LotSaleCount, BudgetedLotCount, VarianceCount
	from @LandLot
	order by ProjectNameFull
end 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_LD_LotRevCurrvsPrevSC]') and xtype = 'P ')  
 drop Procedure KBI_LD_LotRevCurrvsPrevSC
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
 

-- exec KBI_LD_LotRevCurrvsPrevSC 135
create proc KBI_LD_LotRevCurrvsPrevSC @SKBII_ID int
as
begin	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#LandLot'))
		drop table #LandLot

    create table #LandLot(
		pri_id int,
		ProjectNameFull varchar(100)
	)
	
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#LandLotCurr'))
		drop table #LandLotCurr

    create table #LandLotCurr(
		pri_id int,
		CurrentCount int,
		CurrentSales decimal(19,4)
	)
	
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#LandLotPrev'))
		drop table #LandLotPrev

    create table #LandLotPrev(
		pri_id int,
		PreviousCount int,
		PreviousSales decimal(19,4)
	)
	
	
	declare @LandLot table (
		pri_id int,
		ProjectNameFull varchar(100),
		CurrentCount int,
		CurrentSales decimal(19,4),
		PreviousCount int,
		PreviousSales decimal(19,4),
		VarianceCount int,
		VarianceSales decimal(19,4)
	)
	
	declare @cs datetime, @ce datetime, @ps datetime, @pe datetime, @tr_db varchar(50), @nsql nvarchar(max), @currentPeriod int,
		@StartOfFiscalYear datetime, @CompanyID int 
	
	select @CompanyID=Company_ID from security_kbi_summary where KBI_Instance_ID=@SKBII_ID
	select @tr_db=treasurydbname from COMPANIES where AutoID=@CompanyID
	
	select @nsql = 'select top 1 @currentPeriod=period 
		from '+@tr_db+'.dbo.AR_PERIODS 
		where end_date > GETDATE() and period <> 13 
		order by end_date asc'	
    exec sp_executesql @nsql, N'@currentPeriod int OUT ', @currentPeriod OUT
    
	select @nsql = 'select @StartOfFiscalYear=dateadd(dd,-DATEPART(dd,end_date)+1,end_date) 
		from '+@tr_db+'.dbo.GL_PERIODS where PERIOD = 1 and DATEPART(YEAR,END_DATE) = DATEPART(YEAR,GETDATE())'
	exec sp_executesql @nsql, N'@StartOfFiscalYear datetime OUT', @StartOfFiscalYear OUT

	select @cs = dbo.fn_Get_KBI_Date([Todate?], Range, RangeScale, Gap, GapScale, 'CS', @currentPeriod, @StartOfFiscalYear),
		   @ce = dbo.fn_Get_KBI_Date([Todate?], Range, RangeScale, Gap, GapScale, 'CE', @currentPeriod, @StartOfFiscalYear),
		   @ps = dbo.fn_Get_KBI_Date([Todate?], Range, RangeScale, Gap, GapScale, 'PS', @currentPeriod, @StartOfFiscalYear),
		   @pe = dbo.fn_Get_KBI_Date([Todate?], Range, RangeScale, Gap, GapScale, 'PE', @currentPeriod, @StartOfFiscalYear)
	from Security_KBI_Instance 
	where ID=@SKBII_ID
	
	
	select @nsql = '
		insert into #LandLotCurr (pri_id, CurrentCount, CurrentSales)
		select pri_id, 
		SUM((case when Status=''Unsold'' then -1 else 1 end)),
		SUM(isnull(sell_price,0))
		from '+@tr_db+'.dbo.working_KBI_LD_Lot where username = cast(@SKBII_ID as varchar(15)) 
		and Status in (''Sold'', ''Unsold'') and (cast(Sale_Date as date) between @CS and @CE)
		group by pri_id '
	exec sp_executesql @nsql, N'@SKBII_ID int, @CS datetime, @CE datetime ', @SKBII_ID, @CS, @CE
	
	select @nsql = '
		insert into #LandLotPrev (pri_id, PreviousCount, PreviousSales)
		select pri_id, 
		SUM((case when Status=''Unsold'' then -1 else 1 end)),
		SUM(isnull(sell_price,0))
		from '+@tr_db+'.dbo.working_KBI_LD_Lot where username = cast(@SKBII_ID as varchar(15)) 
		and Status in (''Sold'', ''Unsold'') and (cast(Sale_Date as date) between @PS and @PE)
		group by pri_id '
	exec sp_executesql @nsql, N'@SKBII_ID int, @PS datetime, @PE datetime ', @SKBII_ID, @PS, @PE
	
	select @nsql = '
		insert into #LandLot(pri_id, ProjectNameFull)
		select distinct pri_id, Project_Name_Full
		from '+@tr_db+'.dbo.working_KBI_LD_Lot 
		where username = cast(@SKBII_ID as varchar(15)) '
	exec sp_executesql @nsql, N'@SKBII_ID int ', @SKBII_ID
	
	insert into @LandLot (pri_id, ProjectNameFull, CurrentCount, CurrentSales, PreviousCount, PreviousSales, VarianceCount, VarianceSales)
	select pri_id, ProjectNameFull, 0, 0, 0, 0, 0, 0
	from #LandLot
	
	update l
	set l.CurrentCount=isnull(c.CurrentCount,0), l.CurrentSales=isnull(c.CurrentSales,0)
	from @LandLot l
	join #LandLotCurr c on c.pri_id=l.pri_id
	
	update l
	set l.PreviousCount=isnull(p.PreviousCount,0), l.PreviousSales=isnull(p.PreviousSales,0)
	from @LandLot l
	join #LandLotPrev p on p.pri_id=l.pri_id

	update l
	set l.VarianceCount=l.CurrentCount-l.PreviousCount, 
		l.VarianceSales=l.CurrentSales-l.PreviousSales
	from @LandLot l

	select pri_id, ProjectNameFull, CurrentSales, PreviousSales, VarianceSales, CurrentCount, PreviousCount, VarianceCount
	from @LandLot
	order by ProjectNameFull
end 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_Register_Datasource]') and xtype = 'P ')  
 drop Procedure KBI_Register_Datasource
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
create proc KBI_Register_Datasource @DashboardID int, @Security_KBI_Dashboard_Instance_ID int as 

if @DashboardID = -1
begin
	insert Security_KBI_Dashboard_Instance(DashboardDescription, DashboardType, ParentID)
	select 'In Design Mode', 'Page', -1
	select @DashboardID = SCOPE_IDENTITY()
end

declare @Security_KBI_ID int = (select SKBI_ID from Security_KBI_Instance where id = @Security_KBI_Dashboard_Instance_ID)

insert Security_KBI_Dashboard_Instance_Datasource(Security_KBI_Dashboard_Instance_ID, Security_KBI_Instance_ID, Security_KBI_ID)
select @DashboardID, @Security_KBI_Dashboard_Instance_ID, @Security_KBI_ID

select @DashboardID DashboardID


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_ScheduledJob_AgedAP]') and xtype = 'P ')  
 drop Procedure KBI_ScheduledJob_AgedAP
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[KBI_ScheduledJob_AgedAP]
as
begin
	declare @trdb varchar(500), @Company_ID int, @Comapany_Server varchar(500), @sql varchar(max)

	declare tr_cur cursor for	
	select treasurydbname, AutoID, CompanyServerName from companies where isnull(active,0) = 1

	open tr_cur fetch tr_cur into @trdb, @Company_ID, @Comapany_Server
	while @@fetch_status=0
	begin	
		set @sql =
		'declare @Aged_By varchar(1), @ServiceUsername varchar(50)
		
		select @Aged_By=isnull((select AP_AGED_BY from '+@trdb+'..KBI_Defaults),''I'')
		select @ServiceUsername=''KBISERVICE''
		
		delete from '+@trdb+'..KBI_Financial_Aged where inv_type=''AP''				
		delete from '+@trdb+'..ap_report_options where username = @ServiceUsername
		delete from '+@trdb+'..WORKING_SUPPLIER where username = @ServiceUsername
		delete from '+@trdb+'..WORKING_AP_CONTROL where username = @ServiceUsername
		delete from '+@trdb+'..WORKING_CURRENCY where username = @ServiceUsername
		delete from '+@trdb+'..Working_APReport_Grouping where username = @ServiceUsername
		delete from '+@trdb+'..working_seg2 where username = @ServiceUsername
		
		insert into '+@trdb+'..ap_report_options ( username, report_type, as_at_date, acct_year, acct_period, tmp_acct, byacct_yn, 
			from_cheque_date, to_cheque_date, to_acct_year, to_acct_period, g1_suppress, g2_suppress, g3_suppress, g4_suppress, g5_suppress, 
			summ_det, local_db, local_server, use_multi_company, calendar_fiscal, from_cal_year, from_cal_period, to_cal_year, to_cal_period, 
			age_by, sox_routing, asat, dotnet) 
		values (@ServiceUsername, ''A'', getdate(), 1950, 1, ''%-%-%'', ''Y'',
			''01-01-1900'', getdate(), 2900, 12, ''T'', ''T'', ''T'', ''T'', ''T'', 
			''S'', '''+@trdb+''', '''+@Comapany_Server+''', ''F'', ''D'', 1950, 1, 2900, 12, 
			@Aged_By, 0, ''True'', 1)
		
		exec '+@trdb+'..sp_dotnetAP_Report_Setup @ServiceUsername, ''A/P Aging''
		
		insert into '+@trdb+'..KBI_Financial_Aged (inv_type, aged_by, inv_num, inv_total, inv_bal, inv_hb, inv_cur, 
			inv_30, inv_60, inv_90, inv_120, 
			inv_pct_cur, inv_pct_30, inv_pct_60, inv_pct_90, inv_pct_120, run_date)		
		select ''AP'', @Aged_By, count(*), sum(isnull(INV_AMOUNT,0)), sum(isnull(BALANCE,0)), sum(isnull(hold_bal,0)), sum(isnull(BAL_CURRENT,0)), 
			sum(isnull(BAL_1,0)), sum(isnull(BAL_2,0)), sum(isnull(BAL_3,0)), sum(isnull(BAL_4,0)),
			0, 0, 0, 0, 0, getdate()
		from '+@trdb+'..ap_report_invoice_header 
		where (USERNAME = @ServiceUsername) and isnull(BALANCE,0) <> 0		
			
		update k 
		set 
			k.inv_total=isnull(k.inv_total,0),
			k.inv_bal=isnull(k.inv_bal,0),
			k.inv_hb=isnull(k.inv_hb,0),
			k.inv_cur=isnull(k.inv_cur,0),
			k.inv_30=isnull(k.inv_30,0),
			k.inv_60=isnull(k.inv_60,0),
			k.inv_90=isnull(k.inv_90,0),
			k.inv_120=isnull(k.inv_120,0),
			k.run_date=isnull(k.run_date,getdate()),
			k.inv_pct_cur=case when isnull(k.inv_bal,0) = 0 then 0 else round(100*k.inv_cur/k.inv_bal,1) end , 
			k.inv_pct_30=case when isnull(k.inv_bal,0) = 0 then 0 else round(100*k.inv_30/k.inv_bal,1) end , 
			k.inv_pct_60=case when isnull(k.inv_bal,0) = 0 then 0 else round(100*k.inv_60/k.inv_bal,1) end , 
			k.inv_pct_90=case when isnull(k.inv_bal,0) = 0 then 0 else round(100*k.inv_90/k.inv_bal,1) end , 
			k.inv_pct_120=case when isnull(k.inv_bal,0) = 0 then 0 else round(100*k.inv_120/k.inv_bal,1) end 
		from '+@trdb+'..KBI_Financial_Aged k
		where k.inv_type=''AP''	
		'
		
		exec(@sql)
		
		fetch tr_cur into @trdb, @Company_ID, @Comapany_Server
	end			
	close tr_cur
	deallocate tr_cur
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_ScheduledJob_AgedAR]') and xtype = 'P ')  
 drop Procedure KBI_ScheduledJob_AgedAR
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[KBI_ScheduledJob_AgedAR]
as
begin
	declare @trdb varchar(500), @Company_ID int, @Comapany_Server varchar(500), @sql varchar(max)

	declare tr_cur cursor for	
	select treasurydbname, AutoID, CompanyServerName from companies where isnull(active,0) = 1

	open tr_cur fetch tr_cur into @trdb, @Company_ID, @Comapany_Server
	while @@fetch_status=0
	begin
		set @sql =
		'declare @Aged_By varchar(1), @ServiceUsername varchar(50), @year int, @period int
		
		select @Aged_By=isnull((select AR_AGED_BY from '+@trdb+'..KBI_Defaults),''I'')
		select @ServiceUsername=''KBISERVICE''
		select @year=datepart(yyyy,getdate())
		select @period = period from '+@trdb+'..gl_periods where end_date > getdate() and datepart(yy, end_date) = @year order by end_date desc
		select @year=gl_year from '+@trdb+'..gl_periods where end_date > getdate() and datepart(yy, end_date) = @year order by end_date desc
		
		delete from '+@trdb+'..KBI_Financial_Aged where inv_type=''AR''				
		delete from '+@trdb+'..AR_REPORT_OPTIONS where username = @ServiceUsername
		delete from '+@trdb+'..working_customers where username=@ServiceUsername
		delete from '+@trdb+'..working_territory where username=@ServiceUsername
		delete from '+@trdb+'..working_warehouse where username=@ServiceUsername
		delete from '+@trdb+'..working_cust_groups where username=@ServiceUsername
		delete from '+@trdb+'..working_currency where username=@ServiceUsername
		delete from '+@trdb+'..working_salespersons where username=@ServiceUsername
		delete from '+@trdb+'..working_invoices where username=@ServiceUsername		
		delete from '+@trdb+'..working_company where username=@ServiceUsername
		delete from '+@trdb+'..working_invoices where username=@ServiceUsername
		delete from '+@trdb+'..working_inv_jnl where username=@ServiceUsername
		delete from '+@trdb+'..working_clear_segs where username=@ServiceUsername
		delete from '+@trdb+'..working_inventory where username=@ServiceUsername
		
		insert into '+@trdb+'..working_company (username, company_id, tr_server, tr_database, hr_server, hr_database) 
		values ( @ServiceUsername, '+cast(@Company_ID as varchar)+', '''+@Comapany_Server+''', '''+@trdb+''', '''', '''' ) 
				
		insert into '+@trdb+'..AR_REPORT_OPTIONS ( username, rep_type, to_date, to_year, to_period, from_date, from_year, from_period, as_of_date, 
			from_cal_year, from_cal_period, to_cal_year, to_cal_period, age_by ) 
		values (@ServiceUsername, ''A'', getdate(), @year, @period, ''1900-01-01'', 1900, 1, 
			Convert(datetime,Convert(varchar, getdate(),101)), 1900, 1, @year, @period, @Aged_By ) 
				
		exec '+@trdb+'..sp_dotnetARSetupAR @ServiceUsername
		
		exec '+@trdb+'..sp_dotnetAR_Report_Setup @ServiceUsername, ''A/R Aging''
		
		insert into '+@trdb+'..KBI_Financial_Aged (inv_type, aged_by, inv_num, inv_total, inv_bal, inv_hb, inv_cur, 
			inv_30, inv_60, inv_90, inv_120, 
			inv_pct_cur, inv_pct_30, inv_pct_60, inv_pct_90, inv_pct_120, run_date)		
		select ''AR'', @Aged_By, count(*), sum(isnull(ORIGINAL_INV_AMOUNT,0)), sum(isnull(BALANCE,0)), sum(isnull(Holdback_balance,0)), sum(isnull(BAL_CURRENT,0)), 
			sum(isnull(BAL_1,0)), sum(isnull(BAL_2,0)), sum(isnull(BAL_3,0)), sum(isnull(BAL_4,0)),
			0, 0, 0, 0, 0, getdate()
		from '+@trdb+'..AR_REPORT_INVOICE_HEADER 
		where (USERNAME = @ServiceUsername)		
			
		update k 
		set 
			k.inv_total=isnull(k.inv_total,0),
			k.inv_bal=isnull(k.inv_bal,0),
			k.inv_hb=isnull(k.inv_hb,0),
			k.inv_cur=isnull(k.inv_cur,0),
			k.inv_30=isnull(k.inv_30,0),
			k.inv_60=isnull(k.inv_60,0),
			k.inv_90=isnull(k.inv_90,0),
			k.inv_120=isnull(k.inv_120,0),
			k.run_date=isnull(k.run_date,getdate()),
			k.inv_pct_cur=case when isnull(k.inv_bal,0) = 0 then 0 else round(100*k.inv_cur/k.inv_bal,1) end , 
			k.inv_pct_30=case when isnull(k.inv_bal,0) = 0 then 0 else round(100*k.inv_30/k.inv_bal,1) end , 
			k.inv_pct_60=case when isnull(k.inv_bal,0) = 0 then 0 else round(100*k.inv_60/k.inv_bal,1) end , 
			k.inv_pct_90=case when isnull(k.inv_bal,0) = 0 then 0 else round(100*k.inv_90/k.inv_bal,1) end , 
			k.inv_pct_120=case when isnull(k.inv_bal,0) = 0 then 0 else round(100*k.inv_120/k.inv_bal,1) end 
		from '+@trdb+'..KBI_Financial_Aged k
		where k.inv_type=''AR''		
		'
		
		exec( @sql )
		
		fetch tr_cur into @trdb, @Company_ID, @Comapany_Server
	end			
	close tr_cur
	deallocate tr_cur
	
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_ScheduledJob_AgedCAR]') and xtype = 'P ')  
 drop Procedure KBI_ScheduledJob_AgedCAR
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec KBI_ScheduledJob_AgedCAR
create proc [dbo].[KBI_ScheduledJob_AgedCAR]
as
begin
	declare @trdb varchar(500), @Company_ID int, @Comapany_Server varchar(500), @sql varchar(max)

	declare tr_cur cursor for	
	select treasurydbname, AutoID, CompanyServerName from companies where isnull(active,0) = 1

	open tr_cur fetch tr_cur into @trdb, @Company_ID, @Comapany_Server
	while @@fetch_status=0
	begin
		set @sql =
		'exec '+@trdb+'..KBI_ScheduledJob_AgedRE_AR ''C'''		
		exec( @sql )
		
		fetch tr_cur into @trdb, @Company_ID, @Comapany_Server
	end			
	close tr_cur
	deallocate tr_cur
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_ScheduledJob_AgedRAR]') and xtype = 'P ')  
 drop Procedure KBI_ScheduledJob_AgedRAR
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
-- exec KBI_ScheduledJob_AgedRAR
create proc [dbo].[KBI_ScheduledJob_AgedRAR]
as
begin		
	declare @trdb varchar(500), @Company_ID int, @Comapany_Server varchar(500), @sql varchar(max)

	declare tr_cur cursor for	
	select treasurydbname, AutoID, CompanyServerName from companies where isnull(active,0) = 1

	open tr_cur fetch tr_cur into @trdb, @Company_ID, @Comapany_Server
	while @@fetch_status=0
	begin
		set @sql =
		'exec '+@trdb+'..KBI_ScheduledJob_AgedRE_AR ''R'''		
		exec( @sql )
		
		fetch tr_cur into @trdb, @Company_ID, @Comapany_Server
	end			
	close tr_cur
	deallocate tr_cur
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_ScheduledJob_CustInfo]') and xtype = 'P ')  
 drop Procedure KBI_ScheduledJob_CustInfo
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc KBI_ScheduledJob_CustInfo
as
begin
	declare @trdb varchar(500), @sql varchar(max)

	declare tr_cur cursor for	
	select treasurydbname from companies where isnull(active,0) = 1

	open tr_cur fetch tr_cur into @trdb
	while @@fetch_status=0
	begin	
		set @sql =
		'
		delete from '+@trdb+'..KBI_Financial_CustInfo
		
		insert into '+@trdb+'..KBI_Financial_CustInfo (new_this_month, new_this_quarter, new_this_year, new_last_month, new_last_quarter, 
			new_last_year, new_prior_month, new_prior_quarter, new_prior_year, de_this_month, de_this_quarter, de_this_year, de_last_month, 
			de_last_quarter, de_last_year, de_prior_month, de_prior_quarter, de_prior_year)
		select 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		
		update '+@trdb+'..KBI_Financial_CustInfo set
		--New Customers
		new_this_month=isnull((select COUNT(*) from '+@trdb+'..CUSTOMERS 
			where datepart(YYYY, date_created)=datepart(YYYY, GETDATE()) and datepart(mm, date_created)=datepart(mm, GETDATE())),0),
		new_this_quarter=isnull((select COUNT(*) from '+@trdb+'..CUSTOMERS 
			where datepart(YYYY, date_created)=datepart(YYYY, GETDATE()) and datepart(qq, date_created)=datepart(qq, GETDATE())),0),
		new_this_year=isnull((select COUNT(*) from '+@trdb+'..CUSTOMERS  
			where datepart(YYYY, date_created)=datepart(YYYY, GETDATE()) and 
				datepart(mm, date_created) between 1 and datepart(mm, GETDATE())),0), 
		new_last_month=isnull((select COUNT(*) from '+@trdb+'..CUSTOMERS 
			where datepart(YYYY, date_created)=datepart(YYYY, dateadd(mm, -1,GETDATE())) and datepart(mm, date_created)=datepart(mm, dateadd(mm, -1,GETDATE()))),0),
		new_last_quarter=isnull((select COUNT(*) from '+@trdb+'..CUSTOMERS 
			where datepart(YYYY, date_created)=datepart(YYYY, dateadd(qq, -1,GETDATE())) and datepart(qq, date_created)=datepart(qq, dateadd(qq, -1,GETDATE()))),0),
		new_last_year=isnull((select COUNT(*) from '+@trdb+'..CUSTOMERS 
			where datepart(YYYY, date_created)=datepart(YYYY, dateadd(yyyy, -1,GETDATE())) and 
				datepart(mm, date_created) between 1 and datepart(mm, GETDATE())),0), 
		new_prior_month=isnull((select COUNT(*) from '+@trdb+'..CUSTOMERS 
			where datepart(YYYY, date_created)=datepart(YYYY, dateadd(yyyy, -1,GETDATE())) and datepart(mm, date_created)=datepart(mm, GETDATE())),0),
		new_prior_quarter=isnull((select COUNT(*) from '+@trdb+'..CUSTOMERS 
			where datepart(YYYY, date_created)=datepart(YYYY, dateadd(yyyy, -1,GETDATE())) and datepart(qq, date_created)=datepart(qq, GETDATE())),0),
		new_prior_year=isnull((select COUNT(*) from '+@trdb+'..CUSTOMERS 
			where datepart(YYYY, date_created)=datepart(YYYY, dateadd(yyyy, -1,GETDATE()))),0),
		--Deactivated Customers
		de_this_month=isnull((select COUNT(*) from '+@trdb+'..CUSTOMERS 
			where datepart(YYYY, date_deactivated)=datepart(YYYY, GETDATE()) and datepart(mm, date_deactivated)=datepart(mm, GETDATE())),0),
		de_this_quarter=isnull((select COUNT(*) from '+@trdb+'..CUSTOMERS 
			where datepart(YYYY, date_deactivated)=datepart(YYYY, GETDATE()) and datepart(qq, date_deactivated)=datepart(qq, GETDATE())),0),
		de_this_year=isnull((select COUNT(*) from '+@trdb+'..CUSTOMERS  
			where datepart(YYYY, date_deactivated)=datepart(YYYY, GETDATE()) and 
				datepart(mm, date_deactivated) between 1 and datepart(mm, GETDATE())),0), 
		de_last_month=isnull((select COUNT(*) from '+@trdb+'..CUSTOMERS 
			where datepart(YYYY, date_deactivated)=datepart(YYYY, dateadd(mm, -1,GETDATE())) and datepart(mm, date_deactivated)=datepart(mm, dateadd(mm, -1,GETDATE()))),0),
		de_last_quarter=isnull((select COUNT(*) from '+@trdb+'..CUSTOMERS 
			where datepart(YYYY, date_deactivated)=datepart(YYYY, dateadd(qq, -1,GETDATE())) and datepart(qq, date_deactivated)=datepart(qq, dateadd(qq, -1,GETDATE()))),0),
		de_last_year=isnull((select COUNT(*) from '+@trdb+'..CUSTOMERS 
			where datepart(YYYY, date_deactivated)=datepart(YYYY, dateadd(yyyy, -1,GETDATE())) and 
				datepart(mm, date_deactivated) between 1 and datepart(mm, GETDATE())),0), 
		de_prior_month=isnull((select COUNT(*) from '+@trdb+'..CUSTOMERS 
			where datepart(YYYY, date_deactivated)=datepart(YYYY, dateadd(yyyy, -1,GETDATE())) and datepart(mm, date_deactivated)=datepart(mm, GETDATE())),0),
		de_prior_quarter=isnull((select COUNT(*) from '+@trdb+'..CUSTOMERS 
			where datepart(YYYY, date_deactivated)=datepart(YYYY, dateadd(yyyy, -1,GETDATE())) and datepart(qq, date_deactivated)=datepart(qq, GETDATE())),0),
		de_prior_year=isnull((select COUNT(*) from '+@trdb+'..CUSTOMERS 
			where datepart(YYYY, date_deactivated)=datepart(YYYY, dateadd(yyyy, -1,GETDATE()))),0)
		'
		exec(@sql)
		
		fetch tr_cur into @trdb
	end			
	close tr_cur
	deallocate tr_cur
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_ScheduledJob_ReflexService]') and xtype = 'P ')  
 drop Procedure KBI_ScheduledJob_ReflexService
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[KBI_ScheduledJob_ReflexService]
as
begin
	
	-- GL Account calculation for financial KBI's
	exec sp_KBI_MASTER_GL_ACCOUNT_CALCULATION
	if(@@error <> 0)
	begin
		insert into SYSTEM_EXCEPTION ( USERNAME, COMPANYID, ERROR_DATE, COMMAND_TEXT, CONNECTION_STRING, EX_MESSAGE, EX_STACKTRACE ) 
		values ( 'SERVER', -1, getdate(), 'exec sp_KBI_MASTER_GL_ACCOUNT_CALCULATION', '', 'Error occured in procedure KBI_ScheduledJob_ReflexService when executing sp_KBI_MASTER_GL_ACCOUNT_CALCULATION.', '' )
	end
	
	-- Aged AR for all companies for financial KBI Aged AR
	exec KBI_ScheduledJob_AgedAR
	if(@@error <> 0)
	begin
		insert into SYSTEM_EXCEPTION ( USERNAME, COMPANYID, ERROR_DATE, COMMAND_TEXT, CONNECTION_STRING, EX_MESSAGE, EX_STACKTRACE ) 
		values ( 'SERVER', -1, getdate(), 'exec KBI_ScheduledJob_AgedAR', '', 'Error occured in procedure KBI_ScheduledJob_ReflexService when executing KBI_ScheduledJob_AgedAR.', '' )
	end
	
	-- Aged Residential AR for all companies for Investment Properties KBI Aged Residential AR
	exec KBI_ScheduledJob_AgedRAR
	if(@@error <> 0)
	begin
		insert into SYSTEM_EXCEPTION ( USERNAME, COMPANYID, ERROR_DATE, COMMAND_TEXT, CONNECTION_STRING, EX_MESSAGE, EX_STACKTRACE ) 
		values ( 'SERVER', -1, getdate(), 'exec KBI_ScheduledJob_AgedRAR', '', 'Error occured in procedure KBI_ScheduledJob_ReflexService when executing KBI_ScheduledJob_AgedRAR.', '' )
	end
	
	-- Aged Commercial AR for all companies for Investment Properties KBI Aged Commercial AR
	exec KBI_ScheduledJob_AgedCAR
	if(@@error <> 0)
	begin
		insert into SYSTEM_EXCEPTION ( USERNAME, COMPANYID, ERROR_DATE, COMMAND_TEXT, CONNECTION_STRING, EX_MESSAGE, EX_STACKTRACE ) 
		values ( 'SERVER', -1, getdate(), 'exec KBI_ScheduledJob_AgedCAR', '', 'Error occured in procedure KBI_ScheduledJob_ReflexService when executing KBI_ScheduledJob_AgedCAR.', '' )
	end
	
	-- Aged AP for all companies for financial KBI Aged AP
	exec KBI_ScheduledJob_AgedAP
	if(@@error <> 0)
	begin
		insert into SYSTEM_EXCEPTION ( USERNAME, COMPANYID, ERROR_DATE, COMMAND_TEXT, CONNECTION_STRING, EX_MESSAGE, EX_STACKTRACE ) 
		values ( 'SERVER', -1, getdate(), 'exec KBI_ScheduledJob_AgedAP', '', 'Error occured in procedure KBI_ScheduledJob_ReflexService when executing KBI_ScheduledJob_AgedAP.', '' )
	end
	
	-- Customer Infor for all companies for financial KBI Cust Info
	exec KBI_ScheduledJob_CustInfo
	if(@@error <> 0)
	begin
		insert into SYSTEM_EXCEPTION ( USERNAME, COMPANYID, ERROR_DATE, COMMAND_TEXT, CONNECTION_STRING, EX_MESSAGE, EX_STACKTRACE ) 
		values ( 'SERVER', -1, getdate(), 'exec KBI_ScheduledJob_CustInfo', '', 'Error occured in procedure KBI_ScheduledJob_ReflexService when executing KBI_ScheduledJob_CustInfo.', '' )
	end
	
	-- Run each individual KBI Instance
	exec KBI_ScheduledJob_RunKBIInstance
	if(@@error <> 0)
	begin
		insert into SYSTEM_EXCEPTION ( USERNAME, COMPANYID, ERROR_DATE, COMMAND_TEXT, CONNECTION_STRING, EX_MESSAGE, EX_STACKTRACE ) 
		values ( 'SERVER', -1, getdate(), 'exec KBI_ScheduledJob_RunKBIInstance', '', 'Error occured in procedure KBI_ScheduledJob_ReflexService when executing KBI_ScheduledJob_RunKBIInstance.', '' )
	end	
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[KBI_ScheduledJob_RunKBIInstance]') and xtype = 'P ')  
 drop Procedure KBI_ScheduledJob_RunKBIInstance
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 


create proc [dbo].[KBI_ScheduledJob_RunKBIInstance]
as
begin
	declare @SKBII_ID int, @Target varchar(100), @FillProcName varchar(1000), @CalcProcName varchar(1000), @sql varchar(max),
		@cs datetime, @ce datetime,@ps datetime,@pe datetime, @todate varchar(1), @range int, @rangescale varchar(1), @gap int,
		@gapscale varchar(1), @company_id int, @flavour varchar(20), @current_period int, @tr_db varchar(500), @companySpec_id int,
		@db_name varchar(500), @nsql nvarchar(max)

	declare kbi_cur cursor for	
	select distinct s.company_id, k.flavour, i.id, i.target, i.[Todate?], i.[range], i.rangescale, i.gap, i.gapscale, k.FillProcName, k.KBICalcProcName 
	from Security_KBI_summary s
	join Security_KBI_Instance i on i.id=s.kbi_instance_id
	join Security_KBIs k on k.id=i.skbi_id

	open kbi_cur 
	fetch kbi_cur into @company_id, @flavour, @SKBII_ID, @Target, @todate, @range, @rangescale, @gap, @gapscale, @FillProcName, @CalcProcName
	while @@fetch_status=0
	begin
		insert into security_kbi_running (kbiInstance_ID, contactID, startTime) 
		values (@SKBII_ID, -1, getDate())
		
		if( @flavour = 'WEB' )
		begin
			select @current_period = -1
			select @companySpec_id = -1
			select @db_name=DB_NAME()
		end
		else if( @flavour = 'TR' )
		begin
			select @tr_db=treasurydbname from companies where AutoID=@company_id
			
			set @nsql =' select top 1 @current_period = period  from '+@tr_db+'..AR_PERIODS where end_date > GETDATE() and period <> 13 order by end_date asc'
			exec sp_executesql @nsql, N'@current_period int OUT ', @current_period  OUT
			
			select @companySpec_id=@company_id
			select @db_name=@tr_db
		end
		
		select @cs = dbo.fn_Get_KBI_Date( @todate, @range, @rangescale, @gap, @gapscale, 'cs', @current_period,@companySpec_id)
		select @ce = dbo.fn_Get_KBI_Date( @todate, @range, @rangescale, @gap, @gapscale, 'ce', @current_period,@companySpec_id)
		select @ps = dbo.fn_Get_KBI_Date( @todate, @range, @rangescale, @gap, @gapscale, 'ps', @current_period,@companySpec_id)
		select @pe = dbo.fn_Get_KBI_Date( @todate, @range, @rangescale, @gap, @gapscale, 'pe', @current_period,@companySpec_id)
		
		--exec fill
		select @sql = 'exec '+@db_name+'..'+@FillProcName+' '''+DB_NAME()+''', '+CAST(@companySpec_id as varchar)+', '''+@Target+''', '''+CAST(@cs as varchar)+''', '''+CAST(@ce as varchar)+''', '''+CAST(@ps as varchar)+''', '''+CAST(@pe as varchar)+''', '+CAST(@SKBII_ID as varchar)
		exec( @sql )
		
		--exec calc
		select @sql = 'exec '+@db_name+'..'+@CalcProcName+' '''+DB_NAME()+''', '+CAST(@companySpec_id as varchar)+', '''+@Target+''', '''+CAST(@cs as varchar)+''', '''+CAST(@ce as varchar)+''', '''+CAST(@ps as varchar)+''', '''+CAST(@pe as varchar)+''', '+CAST(@SKBII_ID as varchar)
		exec( @sql )
		
		delete security_kbi_running where kbiinstance_id = @SKBII_ID
		
		fetch kbi_cur into @company_id, @flavour, @SKBII_ID, @Target, @todate, @range, @rangescale, @gap, @gapscale, @FillProcName, @CalcProcName
	end			
	close kbi_cur
	deallocate kbi_cur
	
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LD_AgreementApproval]') and xtype = 'P ')  
 drop Procedure LD_AgreementApproval
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[LD_AgreementApproval]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@stat varchar(50),
	@Agreement_ID varchar(50)

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @Agreement_ID=module_reference_id, @stat=status from approvals_requested where id=@id


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..PROJ_LOT_AGREEMENT set ApprovalStatus=''D'' where agreement_id='+@Agreement_ID
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..PROJ_LOT_AGREEMENT set ApprovalStatus=''A'' where agreement_id='+@Agreement_ID
		exec( @sql )
	end
end






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LD_CashcallDisbursmentBatchCreate]') and xtype = 'P ')  
 drop Procedure LD_CashcallDisbursmentBatchCreate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
create proc LD_CashcallDisbursmentBatchCreate @username varchar(10), @AsAtDate datetime, @TRDB varchar(max), @Type varchar(20), @BatchID varchar(50) = '-1' as 
--declare @username varchar(10) = 'Robg', @AsAtDate datetime = '10/1/2016', @TRDB varchar(max) = 'TR_DMD_DEV_LAND', @Type varchar(20) = 'Disbursement', @BatchID varchar(50) = '109'

--get the companyid
declare @CompanyID int = (select AutoID from COMPANIES where rtrim(ltrim(TreasuryDBName)) = rtrim(ltrim(@TRDB)))
if @BatchID = '-1' 
or 
isnull((select max(isnull(InvoiceNumber,'-1')) from LD_CashcallDisbursementDetail d 
where d.BatchID = @BatchID and d.Type = 'Cashcall'),'-1') != '-1'--do not allow processed batch to be reused if invoicenumbers exist on it
or
isnull((select max(isnull(InvoiceNumber,'-1')) from LD_CashcallDisbursementDetail d 
where d.BatchID = @BatchID and d.Type = 'Distribution'),'-1') != '-1'--do not allow processed batch to be reused if invoicenumbers exist on it
begin
	insert LD_CashcallDisbursementHeader(BatchDate, CreatedBy, AsAtDate, CompanyID)
	select getdate(), @username, @AsAtDate, @CompanyID

	select @BatchID = scope_identity()
end
else
begin
	if exists(select * from LD_CashcallDisbursementHeader where ID = @BatchID and BatchStatus = 'Posted')
	begin--never overwrite a posted batch				
		insert LD_CashcallDisbursementHeader(BatchDate, CreatedBy, AsAtDate, CompanyID)
		select getdate(), @username, @AsAtDate, @CompanyID

		select @BatchID = scope_identity()
	end
	else
	begin
		update LD_CashcallDisbursementHeader set
		AsAtDate = @AsAtDate
		where ID = @BatchID
	end
end
declare @cBatchID varchar(50) = @BatchID

declare @SQL varchar(max) = '
delete LD_CashcallDisbursementDetail where BatchID = ' + @cBatchID + ' and isnull(InvoiceNumber,''-1'') = ''-1''--do not kill previously posted items

declare @Type varchar(50) = ''' + @Type + ''', @Username varchar(10) = ''' + @username + '''

insert LD_CashcallDisbursementDetail(BatchID, Project, [Required], [Date], [Site], [Address], City, [Prov/State], 
Proportinate, Responsibility, Distribution, Investor, [Call Date], Company, 
Amount, 
CompanyID, GL_Subcode, pri_id, Supplier_ID, username, [Type], 
so_trn_id, ap_inv_header_id, Shares_ID, ShareOwners_ID, AsAtDate, InvoiceNumber)

select ' + @cBatchID + ', Project, 
case when @Type = ''Cashcall'' then p1 
else isnull(ProjectToDate,0) end [Required], 
d1 [Date], pri_site1 [Site], site_address [Address], site_city [City], site_state [Prov/State], 
s.SHARE_PCT, s.Responsibility, s.Distribution, so.OwnerName, getdate() [Call Date], d.Company, 
case when @Type = ''Cashcall'' then
	(-1 * (s.Responsibility / 100)) * p1 
else
	((s.Distribution / 100)) * isnull(ProjectToDate,0)
end [Amount],
d.CompanyID, s.GL_Subcode, ph.pri_id, s.Supplier_ID, ''' + @username + ''' username, @Type [Type],
-1 so_trn_id, -1 ap_inv_header_id, s.Shares_ID, s.ShareOwners_ID, ''' + cast(@AsAtDate as varchar(50)) + ''', ''-1''

from working_CashcallDisbursement d 
join ' + @TRDB + '..proj_header ph on ph.pri_id = d.projectid
join ' + @TRDB + '..LD_Shares s on s.PRI_ID = d.ProjectID
join ' + @TRDB + '..LD_Share_Owners so on so.ShareOwners_ID = s.SHAREOWNERS_ID
where RowDescription = ''Cumulative Cash Position''
and d.username = @username

select ' + @cBatchID + ' BatchID
'
print @SQL
exec(@SQL)



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LD_CashcallWordmergeLetter]') and xtype = 'P ')  
 drop Procedure LD_CashcallWordmergeLetter
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc LD_CashcallWordmergeLetter @CompanyID int, @BatchID int as

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LD_EnterHomeOwner]') and xtype = 'P ')  
 drop Procedure LD_EnterHomeOwner
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[LD_EnterHomeOwner]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@stat varchar(50),
	@WS_ST_ID varchar(50),
	@notes varchar(8000),
	@contactID int	

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @contactID=last_changed_by_id, @WS_ST_ID=module_reference_id, @stat=status, @notes=replace(ISNULL(last_changed_by_notes,''), '''', '''''') from approvals_requested where id=@id


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..WS_SUB_TASK_HDR set STATUS=''D'' where WS_ST_ID='+@WS_ST_ID+'
		delete from '+@tr_db+'..WS_3rdPartyOwnerDet where Approved = ''F'' and WS_ST_ID='+@WS_ST_ID+'	
		
		insert into '+@tr_db+'..WS_EVENT_HISTORY (DETAIL_ID, EVENT_DATE, CONTACT_ID, EVENT, NOTES, ST_TYPE_ID) 
			select '+@WS_ST_ID+', GETDATE(), '+CAST(@contactID as varchar)+', ''Approval Request Declined.'', '''+@notes+''', 17 -- 17 = Enter Home Owner Task_ID 
		'
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='exec '+@tr_db+'..LD_ApproveHomeOwner '+@WS_ST_ID+', '''+@notes+''', '+CAST(@contactID as varchar)+' '		
		exec( @sql )	
	end
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LD_Lot_Hold_Approval]') and xtype = 'P ')  
 drop Procedure LD_Lot_Hold_Approval
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[LD_Lot_Hold_Approval]
@ID int,
@Status char(1)
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ChatLink')) 
		drop table #ChatLink 
	
	create table #ChatLink(LinkID int)

	declare 
	@tr_db varchar(100),
	@sql varchar(max),
	@CompanyID int,
	@stat varchar(50),
	@WS_LHR_ID varchar(50),
	@decline_notes varchar(max),
	@contactID int,
	@ChatLink_Sub int, 
	@ChatLink_Hold int,
	@ChatLink_Web int	

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @contactID=last_changed_by_id, @WS_LHR_ID=module_reference_id, @stat=status, @decline_notes=replace(ISNULL(last_changed_by_notes,''), '''', '''''') from approvals_requested where id=@id

	select @sql =
	'delete #ChatLink
	insert #ChatLink
	exec '+@tr_db+'.dbo.sp_WS_ChatFieldLinkGetID ''PROJ_LOT.proj_lot_id'', ''LotHold'''
	exec(@sql)
	select @ChatLink_Web=LinkID from #ChatLink

	select @sql =
	'delete #ChatLink
	insert #ChatLink
	exec '+@tr_db+'.dbo.sp_WS_ChatFieldLinkGetID ''WS_SUB_TASK_HDR.WS_ST_ID'', ''Tasks'''
	exec(@sql)
	select @ChatLink_Sub=LinkID from #ChatLink
	
	select @sql =
	'delete #ChatLink
	insert #ChatLink
	exec '+@tr_db+'.dbo.sp_WS_ChatFieldLinkGetID ''PROJ_LOT_HOLD.HOLD_ID'', ''HoldAttachments'''
	exec(@sql)
	select @ChatLink_Hold=LinkID from #ChatLink

	if( @stat = 'declined' )
	begin
		set @sql ='declare @WS_ST_ID int
		update '+@tr_db+'..WS_LotHoldRequest set route_status=''D'', comment=isnull(comment,'''')+'' '+@decline_notes+''' where WS_LHR_ID='+@WS_LHR_ID+'
		
		select @WS_ST_ID=WS_ST_ID from '+@tr_db+'..WS_LotHoldRequest where WS_LHR_ID='+@WS_LHR_ID+'
		
		update '+@tr_db+'..WS_SUB_TASK_HDR set status=''D'' where WS_ST_ID=@WS_ST_ID
		
		insert into '+@tr_db+'..WS_EVENT_HISTORY (DETAIL_ID, EVENT_DATE, CONTACT_ID, EVENT, NOTES, ST_TYPE_ID) 
		select @WS_ST_ID, GETDATE(), '+CAST(@contactID as varchar)+', ''Lot hold request declined.'', '''+@decline_notes+''', 19
		'
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='declare @lot_status_id int, @sub_status_id int, @proj_lot_id int, @priority varchar(1), @start_date datetime, 
			@end_date datetime, @Default_Hold_Period int, @hold_id int, @WS_ST_ID int, @lot_pair_id int, @cur_hold_id int, 
			@cur_lot_id int, @current_price money, @pri_id int, @purchaser_type_id int, @customer_id int, @telephone varchar(20), 
			@comment varchar(max), @now_date_str varchar(15), @start_str varchar(15), @end_str varchar(15)
					
		select @WS_ST_ID=WS_ST_ID from '+@tr_db+'..WS_LotHoldRequest where WS_LHR_ID='+@WS_LHR_ID+'
		
		update '+@tr_db+'..WS_SUB_TASK_HDR set status=''A'' where WS_ST_ID=@WS_ST_ID
		
		select @now_date_str=cast(DATEPART(mm, GETDATE()) as varchar)+''-''+cast(DATEPART(dd, GETDATE()) as varchar)+''-''+cast(DATEPART(yyyy, GETDATE()) as varchar)
		select @proj_lot_id=proj_lot_id, @start_date=start_date, @end_date=end_date from '+@tr_db+'..WS_LotHoldRequest where WS_LHR_ID='+@WS_LHR_ID+'
		select @lot_status_id=lot_status_id from '+@tr_db+'..LD_Lot_Status where Lot_Status=''Hold''
		select @sub_status_id=sub_status_id from '+@tr_db+'..LD_Sub_Lot_Status where LD_Lot_Status_ID=@lot_status_id and Sub_Status=''Interim Issued''		
		select @Default_Hold_Period=isnull(DEFAULT_HOLD_PERIOD,7) from '+@tr_db+'..LD_Setup
		
		if exists ( select * from '+@tr_db+'..PROJ_LOT_HOLD where proj_lot_id=@proj_lot_id and end_date >= @now_date_str )
		begin
			select @priority=''S''
			select top 1 @start_date=dateadd(dd, 1, end_date) from '+@tr_db+'..PROJ_LOT_HOLD where proj_lot_id=@proj_lot_id order by end_date desc			
		end
		else
		begin
			select @priority=''P''	
			select @start_date=getdate()
		end
		
		select @end_date = DATEADD(DD, @Default_Hold_Period, @start_date)
		
		select @start_str=cast(DATEPART(mm, @start_date) as varchar)+''-''+cast(DATEPART(dd, @start_date) as varchar)+''-''+cast(DATEPART(yyyy, @start_date) as varchar)
		select @end_str=cast(DATEPART(mm, @end_date) as varchar)+''-''+cast(DATEPART(dd, @end_date) as varchar)+''-''+cast(DATEPART(yyyy, @end_date) as varchar)
		
		select @current_price=p.current_price, @pri_id=p.pri_id,  
			@purchaser_type_id=c.purchaser_type_id, @customer_id=w.customer_id, @telephone=c.telephone, @comment=w.comment
		from '+@tr_db+'..WS_LotHoldRequest w
		join '+@tr_db+'..customers c on c.customer_id=w.customer_id
		join '+@tr_db+'..proj_lot p on p.proj_lot_id=w.proj_lot_id
		where w.WS_LHR_ID='+@WS_LHR_ID+'
		
		--Lot Pairing exists
		if exists( select * from '+@tr_db+'..LD_Lot_Pair_Det where proj_lot_id=@proj_lot_id )
		begin
			select @lot_pair_id=lot_pair_id from '+@tr_db+'..LD_Lot_Pair_Det where proj_lot_id=@proj_lot_id
			
			declare cur_lot cursor for	
			select proj_lot_id 
			from '+@tr_db+'..LD_Lot_Pair_Det 
			where Lot_Pair_ID=@lot_pair_id
			
			open cur_lot 
			fetch cur_lot into @cur_lot_id
			while @@fetch_status=0
			begin			
				select @current_price=isnull(current_price,0) from '+@tr_db+'..proj_lot where proj_lot_id=@cur_lot_id
			
				insert into '+@tr_db+'..PROJ_LOT_HOLD (proj_lot_id, pri_id, priority, start_date, end_date, lot_status_id, sub_status_id, purchaser_type_id, 
					purchaser_id, phone_num, price_quoted, trans_date, username, comments, Confirmed)
				select @cur_lot_id, @pri_id, @priority, @start_str, @end_str, @lot_status_id, @sub_status_id, @purchaser_type_id, 
					@customer_id, @telephone, @current_price, GETDATE(), ''Admin'', @comment, 0	
					
				select @cur_hold_id=@@IDENTITY
				
				if( @cur_lot_id = @proj_lot_id )
					select @hold_id = @cur_hold_id
			
				insert into '+@tr_db+'..WS_ChatAttachment (CLog_FieldLink_ID, CLog_IDValue, CAtch_FileName, CAtch_Type, CAtch_Length, CAtch_UploadDtTm, CAtch_SessionDtTm, CAtch_Image, WebContact_ID, CAtch_Description)
				select '+cast(@ChatLink_Hold as varchar)+', @cur_hold_id, CAtch_FileName, CAtch_Type, CAtch_Length, CAtch_UploadDtTm, CAtch_SessionDtTm, CAtch_Image, WebContact_ID, CAtch_Description
				from '+@tr_db+'..WS_ChatAttachment
				where CLog_FieldLink_ID='+cast(@ChatLink_Sub as varchar)+' and CLog_IDValue=@WS_ST_ID
				
				insert into '+@tr_db+'..PROJ_LOT_STATUS_HISTORY(proj_lot_id, change_date, lot_status_id, sub_status_id, purchaser_id, price_quoted, end_date, 
					phone_num, username, comments)
				select l.proj_lot_id, GETDATE(), l.lot_status_id, l.sub_status_id, @customer_id, l.current_price, @end_str, @telephone, 
				''Admin'', null 
				from '+@tr_db+'..Proj_Lot l 
				where proj_lot_id = @cur_lot_id
	            
				update '+@tr_db+'..proj_lot set lot_status_id=2, sub_status_id=@sub_status_id where proj_lot_id=@cur_lot_id
			
				fetch cur_lot into @cur_lot_id
			end			
			close cur_lot
			deallocate cur_lot	
		end
		else 
		begin
			select @current_price=isnull(current_price,0) from '+@tr_db+'..proj_lot where proj_lot_id=@proj_lot_id
			
			insert into '+@tr_db+'..PROJ_LOT_HOLD (proj_lot_id, pri_id, priority, start_date, end_date, lot_status_id, sub_status_id, purchaser_type_id, 
				purchaser_id, phone_num, price_quoted, trans_date, username, comments, Confirmed)
			select @proj_lot_id, @pri_id, @priority, @start_str, @end_str, @lot_status_id, @sub_status_id, @purchaser_type_id, 
				@customer_id, @telephone, @current_price, GETDATE(), ''Admin'', @comment, 0	
				
			select @hold_id=@@IDENTITY
			
			insert into '+@tr_db+'..WS_ChatAttachment (CLog_FieldLink_ID, CLog_IDValue, CAtch_FileName, CAtch_Type, CAtch_Length, CAtch_UploadDtTm, CAtch_SessionDtTm, CAtch_Image, WebContact_ID, CAtch_Description)
			select '+cast(@ChatLink_Hold as varchar)+', @hold_id, CAtch_FileName, CAtch_Type, CAtch_Length, CAtch_UploadDtTm, CAtch_SessionDtTm, CAtch_Image, WebContact_ID, CAtch_Description
			from '+@tr_db+'..WS_ChatAttachment
			where CLog_FieldLink_ID='+cast(@ChatLink_Sub as varchar)+' and CLog_IDValue=@WS_ST_ID
			
			insert into '+@tr_db+'..PROJ_LOT_STATUS_HISTORY(proj_lot_id, change_date, lot_status_id, sub_status_id, purchaser_id, price_quoted, end_date, 
				phone_num, username, comments)
			select l.proj_lot_id, GETDATE(), l.lot_status_id, l.sub_status_id, @customer_id, l.current_price, @end_str, @telephone, 
			''Admin'', null 
			from '+@tr_db+'..Proj_Lot l 
			where proj_lot_id = @proj_lot_id
            
            update '+@tr_db+'..proj_lot set lot_status_id=2, sub_status_id=@sub_status_id where proj_lot_id=@proj_lot_id
		end
		
		update '+@tr_db+'..WS_LotHoldRequest set hold_id=@hold_id, route_status=''A'' where WS_LHR_ID='+@WS_LHR_ID+'
		
		insert into '+@tr_db+'..WS_EVENT_HISTORY (DETAIL_ID, EVENT_DATE, CONTACT_ID, EVENT, NOTES, ST_TYPE_ID) 
		select @WS_ST_ID, GETDATE(), '+CAST(@contactID as varchar)+', ''Lot hold request approved.'', '''+@decline_notes+''', 19
		
		exec '+@tr_db+'..PC_LandLotOnHoldAlert ''admin'', @hold_id
		'
		exec( @sql )	
	end
end







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LD_Lot_Purchase_Approval]') and xtype = 'P ')  
 drop Procedure LD_Lot_Purchase_Approval
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[LD_Lot_Purchase_Approval]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@stat varchar(50),
	@WS_LPR_ID varchar(50),
	@decline_notes varchar(8000),
	@contactID int

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @contactID=last_changed_by_id, @WS_LPR_ID=module_reference_id, @stat=status, @decline_notes=replace(ISNULL(last_changed_by_notes,''), '''', '''''') from approvals_requested where id=@id


	if( @stat = 'declined' )
	begin
		set @sql ='declare @WS_ST_ID int
		update '+@tr_db+'..WS_LotPurchaseRequest set route_status=''D'', comment=isnull(comment,'''')+'' '+@decline_notes+''' where WS_LPR_ID='+@WS_LPR_ID+'
		
		select @WS_ST_ID=WS_ST_ID from '+@tr_db+'..WS_LotPurchaseRequest where WS_LPR_ID='+@WS_LPR_ID+'
		
		update '+@tr_db+'..WS_SUB_TASK_HDR set status=''D'' where WS_ST_ID=@WS_ST_ID
		
		insert into '+@tr_db+'..WS_EVENT_HISTORY (DETAIL_ID, EVENT_DATE, CONTACT_ID, EVENT, NOTES, ST_TYPE_ID) 
		select @WS_ST_ID, GETDATE(), '+CAST(@contactID as varchar)+', ''Lot purchase request declined.'', '''+@decline_notes+''', 20
		'
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='declare @WS_ST_ID int
					
		update '+@tr_db+'..WS_LotPurchaseRequest set route_status=''A'' where WS_LPR_ID='+@WS_LPR_ID+'
		
		select @WS_ST_ID=WS_ST_ID from '+@tr_db+'..WS_LotPurchaseRequest where WS_LPR_ID='+@WS_LPR_ID+'
		
		update '+@tr_db+'..WS_SUB_TASK_HDR set status=''A'' where WS_ST_ID=@WS_ST_ID
		
		insert into '+@tr_db+'..WS_EVENT_HISTORY (DETAIL_ID, EVENT_DATE, CONTACT_ID, EVENT, NOTES, ST_TYPE_ID) 
		select @WS_ST_ID, GETDATE(), '+CAST(@contactID as varchar)+', ''Lot purchase request approved.'', '''+@decline_notes+''', 20
				
		--Creates the third party purchasers
		exec '+@tr_db+'..WS_RequestPurchaseCreateTPP '+@WS_LPR_ID+'
		
		'
		exec( @sql )	
	end
end









Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LD_RoutingDistribution]') and xtype = 'P ')  
 drop Procedure LD_RoutingDistribution
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc LD_RoutingDistribution @ID int, @Status char(1) as 

declare @stat varchar(50), @BatchID varchar(50), @decline_notes varchar(8000)

select @BatchID = module_reference_id, @stat = status, @decline_notes = replace(ISNULL(last_changed_by_notes,''), '''', '''''') 
from approvals_requested where id=@id

update LD_CashcallDisbursementHeader set BatchStatus = @stat, Comments = isnull(Comments,'') + ', ' + @decline_notes where id = @BatchID



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Loader_spAddLinkedExcel]') and xtype = 'P ')  
 drop Procedure Loader_spAddLinkedExcel
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE   proc Loader_spAddLinkedExcel
as

set ANSI_Warnings on

exec('
 sp_addlinkedserver N''HMDataLoader'', N''Jet 4.0'',
                   N''Microsoft.Jet.OLEDB.4.0'',
                   N''c:\hm\apps\Loader.xls'', NULL, N''Excel 5.0''
')
exec('
 sp_addlinkedsrvlogin N''HMDataLoader'', ''false'', NULL, NULL, NULL
')



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LoaderSP_ExecValidateLinks]') and xtype = 'P ')  
 drop Procedure LoaderSP_ExecValidateLinks
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE   proc LoaderSP_ExecValidateLinks 
 @TableName varchar(500),
 @FriendlyFieldName varchar(33),
 @LoaderDetID int,
 @LinkTableName varchar(500)
as


set ANSI_Warnings on

 declare @SDID varchar(20)
 select @SDID = cast(@LoaderDetID as varchar(20))

exec('
 declare @ExecString varchar(8000)
 select @ExecString = ''
 if exists (select * from tempdb..sysobjects where id = object_id(N''''tempdb..#LinkErrors''''))
 drop table #LinkErrors
 create table #LinkErrors(SSRec int)


 Insert #LinkErrors
 select ReflexConversionAutoInc
 from #TEMP a
 where a.ReflexConversionAutoInc not in
  (select t.ReflexConversionAutoInc
   from #TEMP t
   join ' + @LinkTableName + ' l on ''

 --iterate through the record set and add the 
 declare @LForV varchar(500), @FFN varchar(500), @First bit

 select @First = 1

 declare LinkedGCursor cursor
 read_only
 for
 select LinkValueFieldOrValue, FriendlyFieldName
 from #TempLinkGroup
  

 open LinkedGCursor
 fetch next from LinkedGCursor into @LForV, @FFN
 while (@@fetch_status <> -1)
 begin
  if (@@fetch_status <> -2)
  begin
   if @First = 0
    select @ExecString = @ExecString + '' and ''
   select @ExecString = @ExecString + '' l.['' + @LForV + ''] = t.['' + @FFN + '']''
   select @First = 0 
  end
 fetch next from LinkedGCursor into  @LForV, @FFN
 end

 close LinkedGCursor 
 deallocate LinkedGCursor 

 
 select @ExecString = @ExecString + '') insert LoaderErrors
 select ' + @SDID + ', ''''' + @TableName + ''''', ''''' + @FriendlyFieldName + ''''', ''''Linked Value Missing'''', SSRec  from #LinkErrors''


 exec(@ExecString)
')
SET QUOTED_IDENTIFIER OFF 
SET ANSI_NULLS ON 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LoaderSP_GetThisLevel]') and xtype = 'P ')  
 drop Procedure LoaderSP_GetThisLevel
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE   proc LoaderSP_GetThisLevel
 @ThisTable varchar(500),
 @All bit
as


set ANSI_Warnings on

declare @SAll char(1)
select @SAll = cast(@All as char(1))

--note this is a self calling procedure
exec('

if ''this'' = ''will never = this''
begin
 Create Table #HT(
 Goal varchar (500) null,
 TableName varchar(500) null,
 FriendlyTabName varchar(50) null,
 ParentTableName varchar(500) null,
 Succeeded char(1) null)
end

if exists (select * from tempdb..sysobjects where id = object_id(N''tempdb..#' + @ThisTable + 'TT''))
drop table #' + @ThisTable + 'TT
Create Table #' + @ThisTable + 'TT(
 TableName varchar(500) null)


if ' + @SAll + '= 1
begin
 Insert #' + @ThisTable + 'TT
 select distinct l.TableName
 from Loaderdet d
 join LoaderDependencies l
 on l.LoaderDetID = d.Id 
 where d.actualtablename = ''' + @ThisTable + '''
  and l.Type = ''Keyed''  


 Insert #HT
 select distinct Goal, l.TableName, h.FriendlyTabName, ''' + @ThisTable + ''', h.Succeeded
 from Loaderdet d
 join LoaderDependencies l
 on l.LoaderDetID = d.Id 
 join loaderHead h
 on h.TableName = l.TableName
 where d.actualtablename = ''' + @ThisTable + '''
  and l.Type = ''Keyed''  
end
else
begin
 Insert #' + @ThisTable + 'TT
 select distinct l.TableName
 from Loaderdet d
 join LoaderDependencies l
 on l.LoaderDetID = d.Id 
 join loaderHead h
 on h.TableName = l.TableName
 where d.actualtablename = ''' + @ThisTable + '''
  and l.Type = ''Keyed''
  and h.LoadAs = ''Load''

 Insert #HT
 select distinct Goal, l.TableName, h.FriendlyTabName, ''' + @ThisTable + ''', h.Succeeded
 from Loaderdet d
 join LoaderDependencies l
 on l.LoaderDetID = d.Id 
 join loaderHead h
 on h.TableName = l.TableName
 where d.actualtablename = ''' + @ThisTable + '''
  and l.Type = ''Keyed''  
  and h.LoadAs = ''Load''

end 
exec(''
declare @TableName varchar(500)

declare ' + @ThisTable + 'ChildCursor cursor
read_only
for
select TableName
from #' + @ThisTable + 'TT
  
open ' + @ThisTable + 'ChildCursor 
fetch next from ' + @ThisTable + 'ChildCursor into @TableName
while (@@fetch_status <> -1)
begin
 if (@@fetch_status <> -2)
 begin
  exec LoaderSP_GetThisLevel @TableName, ' + @SAll + '    
 end
 fetch next from ' + @ThisTable + 'ChildCursor into @TableName
end

close ' + @ThisTable + 'ChildCursor 
deallocate ' + @ThisTable + 'ChildCursor 
drop table #' + @ThisTable + 'TT
'')')





SET QUOTED_IDENTIFIER OFF 
SET ANSI_NULLS ON 



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LoaderSP_LoadIntoPhysical]') and xtype = 'P ')  
 drop Procedure LoaderSP_LoadIntoPhysical
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE          proc LoaderSP_LoadIntoPhysical 
   @TableToLoad varchar(500)
  as


set ANSI_Warnings off

  -- at this point, the data has passed scrutiny and can be preloaded into a table exactly like the 
  -- physical one

--delete LoggerToKill
declare @IDon bit

select @IDon = 0
		
		if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#FNames'))
		drop table #FNAMES
		
		CREATE TABLE #FNAMES
		(
		TABLE_QUALIFIER varchar(500) null,
		TABLE_OWNER varchar(50) null,
		TABLE_NAME  varchar(100) null,
		COLUMN_NAME  varchar(100) null,
		DATA_TYPE int null,
		[TYPE_NAME]  varchar(50) null,
		[PRECISION] int null,
		[LENGTH] int null,
		[SCALE] int null,
		RADIX int null,
		NULLABLE bit null,
		REMARKS  varchar(500) null,
		COLUMN_DEF varchar(500) null,
		SQL_DATA_TYPE int null,
		SQL_DATETIME_SUB  varchar(100) null,
		CHAR_OCTET_LENGTH int null,
		ORDINAL_POSITION int null,
		IS_NULLABLE  varchar(500) null,
		SS_DATA_TYPE int null
		)
  insert #FNames
  exec sp_columns @TableToLoad 


 declare @COLUMN_NAME varchar(1000), @TYPE_NAME varchar(30), @LENGTH varchar(30), @PRECISION varchar(30), @SCALE varchar(30),
 @TempTableString varchar(8000), @FinalFieldsToLoad varchar(8000)

 select @FinalFieldsToLoad = ''

 select @TempTableString = '
 		if exists (select * from tempdb..sysobjects where id = object_id(N''tempdb..#PrePhysical''))
 		drop table #PrePhysical
   create table #PrePhysical('
 declare BTablesCursor cursor
 read_only
 for
 select COLUMN_NAME, TYPE_NAME, LENGTH, [PRECISION], SCALE
 from #FNames

 open BTablesCursor
 fetch next from BTablesCursor into @COLUMN_NAME, @TYPE_NAME, @LENGTH, @PRECISION, @SCALE
 while (@@fetch_status <> -1)
 begin
  if (@@fetch_status <> -2)
  begin
   if @TYPE_NAME = 'numeric' or @TYPE_NAME = 'decimal' 
   begin
    select @TempTableString = @TempTableString + '[' + @COLUMN_NAME + '] ' + @TYPE_NAME + ' (' + @PRECISION + ',' + @SCALE + ') null,'
   end   
   if @TYPE_NAME = 'char' or @TYPE_NAME = 'nchar' or @TYPE_NAME = 'varchar' or @TYPE_NAME = 'nvarchar' 
   or @TYPE_NAME = 'binary' or @TYPE_NAME = 'varbinary' 
   begin
    select @TempTableString = @TempTableString + '[' + @COLUMN_NAME + '] ' + @TYPE_NAME + ' (' + @LENGTH + ') null,'
   end    
   if @TYPE_NAME = 'bigint' or @TYPE_NAME = 'bit' or @TYPE_NAME = 'datetime' or
   @TYPE_NAME = 'float' or @TYPE_NAME = 'image' or @TYPE_NAME = 'int' or
   @TYPE_NAME = 'money' or @TYPE_NAME = 'ntext' or @TYPE_NAME = 'real' or
   @TYPE_NAME = 'smalldatetime' or @TYPE_NAME = 'smallint' or @TYPE_NAME = 'smallmoney' or
   @TYPE_NAME = 'sql_variant' or @TYPE_NAME = 'text' or @TYPE_NAME = 'timestamp' or
   @TYPE_NAME = 'tinyint' or @TYPE_NAME = 'uniqueidentifier' or @TYPE_NAME = 'int identity'
   begin
    if @TYPE_NAME = 'int identity'
    begin
     select @TYPE_NAME = 'int'
     select @IDon = 1
    end
    select @TempTableString = @TempTableString + '[' + @COLUMN_NAME + '] ' + @TYPE_NAME + ' null,'   
   end
   select @FinalFieldsToLoad = @FinalFieldsToLoad + ' [' + @COLUMN_NAME + '],'
  end
 fetch next from BTablesCursor into @COLUMN_NAME, @TYPE_NAME, @LENGTH, @PRECISION, @SCALE
 end

 close BTablesCursor
 deallocate BTablesCursor


-- insert LoggerToKill select '2'

  
 select @FinalFieldsToLoad = SubString(@FinalFieldsToLoad,1,len(@FinalFieldsToLoad)-1)
 select @TempTableString = SubString(@TempTableString,1,len(@TempTableString)-1) + ')'

 --build the field load list
 declare @FieldExecString varchar(8000),
  @FieldsToLoadTo varchar(8000), @FieldsToLoadFrom varchar(8000), @FieldtoLoad varchar(500), @FriendlyFieldToLoad varchar(32)

 declare PreLoadCursor cursor
 read_only
 for
 select ActualFieldName, FriendlyFieldName
 from LoaderDet
 where ActualTableName = @TableToLoad

 open PreLoadCursor
 fetch next from PreLoadCursor into @FieldtoLoad, @FriendlyFieldToLoad
 while (@@fetch_status <> -1)
 begin
  if (@@fetch_status <> -2)
  begin
   select @FieldsToLoadFrom = isNull(@FieldsToLoadFrom,'') + case 
    when @FriendlyFieldToLoad is null then 'null,'  
    when @FriendlyFieldToLoad = '' then 'null'
    else '[' + @FriendlyFieldToLoad + '], ' end
   select @FieldsToLoadTo = isNull(@FieldsToLoadTo,'') + '[' + @FieldtoLoad + '], '        
  end
 fetch next from PreLoadCursor into @FieldtoLoad, @FriendlyFieldToLoad
 end

 close PreLoadCursor
 deallocate PreLoadCursor

 

select @FieldExecString = '
declare @CountTemp int
select @CountTemp = Count(*)
from #Temp

if @CountTemp > 0
begin 
 insert #PrePhysical(' + SubString(@FieldsToLoadTo,1,len(@FieldsToLoadTo)-1) + ')' +
 ' select ' + SubString(@FieldsToLoadFrom,1,len(@FieldsToLoadFrom)-1) + '
 from #Temp   '

 declare @Scripts varchar(8000)
 select @Scripts = SQLScripts 
 from LoaderHead
 where TableName = @TableToLoad

 --now build the default load list
 declare @DefaultLoadList varchar(8000), @DLLField varchar(500), @DLLValue varchar(500), @DLLCount int

 select @DLLCount = Count(*)
 from LoaderDet d
 join LoaderDependencies l
 on l.LoaderDetID = d.[id]
 where
  l.Type = 'Default'
  and d.ActualTableName = @TableToLoad

 if @DLLCount > 0
 begin
	 select @DefaultLoadList = 'update #PrePhysical set '
	
	 declare DLLCursor cursor
	 read_only
	 for
	 select ActualFieldName, DisplayField
	 from LoaderDet d
	 join LoaderDependencies l
	 on l.LoaderDetID = d.[id]
	 where
	  l.Type = 'Default'
	  and d.ActualTableName = @TableToLoad
	
	 open DLLCursor
	 fetch next from DLLCursor into @DLLField, @DLLValue
	 while (@@fetch_status <> -1)
	 begin
	  if (@@fetch_status <> -2)
	  begin
	   select @DefaultLoadList = @DefaultLoadList + @DLLField + '=' + @DLLValue + ','
	  end
	 fetch next from DLLCursor into @DLLField, @DLLValue
	 end
	
	 close DLLCursor
	 deallocate DLLCursor
	
	 select @DefaultLoadList = SubString(@DefaultLoadList,1,len(@DefaultLoadList)-1)
 end
 else
  select @DefaultLoadList = ''


declare @InsertIntoHardTable varchar(8000)

select @InsertIntoHardTable = case when @IDon = 1 then
' SET IDENTITY_INSERT ' + @TableToLoad + ' ON '
else ' ' end +
' insert ' + @TableToLoad + '( ' + @FinalFieldsToLoad + ')
  select ' + @FinalFieldsToLoad + ' from #PrePhysical ' +
case when @IDon = 1 then
' SET IDENTITY_INSERT ' + @TableToLoad + ' OFF '
else ' '  end
--delete LoggerToKill
--insert LoggerToKill select @TempTableString 
--insert LoggerToKill select @FieldExecString 
--insert LoggerToKill select @DefaultLoadList 
--insert LoggerToKill select @Scripts 
--insert LoggerToKill select @InsertIntoHardTable

 exec(@TempTableString + @FieldExecString + @DefaultLoadList + @Scripts + @InsertIntoHardTable + ' end')

 --restore all null restrictions on the actual target table

SET QUOTED_IDENTIFIER OFF 
SET ANSI_NULLS ON 



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LoaderSP_LoadShell]') and xtype = 'P ')  
 drop Procedure LoaderSP_LoadShell
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE      proc LoaderSP_LoadShell
--declare
 @TableToLoad varchar(500), 
 @LoadMethod varchar(10)
as
--select @TableToLoad = 'bank_ctrl', @LoadMethod = 'Insert'



set ANSI_Warnings on


if @TableToLoad = '***ALL***' 
begin

 declare AllTableLoadCursor cursor
	read_only
	for
	select TableName
	from LoaderHead
 where LoadAs = 'Load'
 order by Ordinal

	open AllTableLoadCursor
	fetch next from AllTableLoadCursor into @TableToLoad
	while (@@fetch_status <> -1)	
	begin
	 if (@@fetch_status <> -2)
	 begin  
   exec('delete ' + @TableToLoad)
   exec LoaderSP_LoadTable @TableToLoad
	 end
	 fetch next from AllTableLoadCursor into @TableToLoad
	end
	
	close AllTableLoadCursor
	deallocate AllTableLoadCursor

end
else
begin
 if @LoadMethod = 'Overwrite' 
  exec('delete ' + @TableToLoad)
  exec LoaderSP_LoadTable @TableToLoad

end

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#LoaderErrorsSummary'))
	drop table #LoaderErrorsSummary
	create table #LoaderErrorsSummary(
	 ActualTableName varchar(500) null,
	 CountT int null)
	
	insert #LoaderErrorsSummary
	select TableName, Count(*)
	from LoaderHead
	join LoaderErrors
	on ActualTableName = TableName
	group by TableName
	
	update LoaderHead
	set Succeeded = case when CountT > 0 then 0 else 1 end
	from LoaderHead
	join #LoaderErrorsSummary
	on ActualTableName = TableName


select 'Done' Result



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LoaderSP_LoadTable]') and xtype = 'P ')  
 drop Procedure LoaderSP_LoadTable
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE proc LoaderSP_LoadTable
 @TableToLoad varchar(500)
as

set ANSI_Warnings on
exec('
 --first validate fields for size and type compatibility
 if exists (select * from tempdb..sysobjects where id = object_id(N''tempdb..#Temp''))
 drop table #Temp
 
 select * 
 into #Temp
 from HMDataLoader...[' + @TableToLoad + ']

	
 declare 
  @FieldName varchar(500), @FieldType varchar(50), @FieldSize int,
  @FieldRequired bit, @FriendlyFieldName varchar(33), @LoaderDetID int, @ErrorCount int
 --iterate through to determine if all fields contain valid values according to ddl 
 declare FCursor cursor
	read_only
	for
	select d.ActualFieldName, d.Type, d.Size, d.Required, d.[FriendlyFieldName], d.[id]
	from LoaderDet d
  where d.ActualTableName = ''' + @TableToLoad + '''
  and d.InLoad = 1
	
	open FCursor
	fetch next from FCursor into @FieldName, @FieldType, @FieldSize, @FieldRequired, @FriendlyFieldName, @LoaderDetID
	while (@@fetch_status <> -1)	
	begin
	 if (@@fetch_status <> -2)
	 begin 
   exec LoaderSP_ValidateDDL ''' + @TableToLoad + ''', @FieldName, @FriendlyFieldName, @FieldType, @FieldSize, @FieldRequired, @LoaderDetID

   select @ErrorCount = count(*)
   from LoaderErrors
   where 
    ActualTableName = ''' + @TableToLoad + '''
    and ErrorLine is null

   if @ErrorCount = 0
    exec LoaderSP_ValidateContent ''' + @TableToLoad + ''', @FriendlyFieldName, @LoaderDetID
	 end
	 fetch next from FCursor into @FieldName, @FieldType, @FieldSize, @FieldRequired, @FriendlyFieldName, @LoaderDetID
	end
	
	close FCursor
	deallocate FCursor

 declare @FriendlyTabName varchar(40)
 select @FriendlyTabName = FriendlyTabName
 from LoaderHead 
 where
  TableName =  ''' + @TableToLoad + ''' 

 select @ErrorCount = count(*)
 from LoaderErrors
 where 
  ActualTableName = ''' + @TableToLoad + '''

 if @ErrorCount = 0
  exec LoaderSP_LoadIntoPhysical ''' + @TableToLoad + ''' 
')



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LoaderSP_ValidateContent]') and xtype = 'P ')  
 drop Procedure LoaderSP_ValidateContent
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE       proc LoaderSP_ValidateContent 
 @TableName varchar(500),
 @FriendlyFieldName varchar(33),
 @LoaderDetID int
as


set ANSI_Warnings on

exec('
 declare
 @LinkType varchar(50), @LinkTableName varchar(500), 
 @LinkDisplayField varchar(500), @LinkValueFieldOrValue varchar(500), 
 @LinkGroupCode varchar(2)

 exec LoaderSP_ValidateSetValues ''' + @TableName + ''', ''' + @FriendlyFieldName + ''', ''' + @LoaderDetID + '''

 --iterate through to determine if the field conforms to all dependencies
 declare dCursor cursor
	read_only
	for
	select distinct e.Type
	from LoaderDet d
 join LoaderDependencies e
 on d.[id] = e.LoaderDetID
  where d.[id] = ''' + @LoaderDetID + '''
	
	open dCursor
	fetch next from dCursor into @LinkType
	while (@@fetch_status <> -1)	
	begin
	 if (@@fetch_status <> -2)
	 begin 
   if @LinkType = ''Keyed''
   begin
 		 select @LinkTableName = e.TableName, @LinkValueFieldOrValue = e.ValueFieldOrValue, @LinkGroupCode = e.GroupCode
	 		from LoaderDet d
		  join LoaderDependencies e
		  on d.[id] = e.LoaderDetID
		   where d.[id] = ''' + @LoaderDetID + '''     		 
    exec LoaderSP_ValidateLinks ''' + @TableName + ''', ''' + @FriendlyFieldName + ''', ''' + @LoaderDetID + ''', @LinkTableName, @LinkValueFieldOrValue, @LinkGroupCode
   end

	 end
	 fetch next from dCursor into  @LinkType
	end
	
	close dCursor
	deallocate dCursor

') 



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LoaderSP_ValidateDDL]') and xtype = 'P ')  
 drop Procedure LoaderSP_ValidateDDL
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE       proc LoaderSP_ValidateDDL 
 @TableName varchar(500),
 @FieldName varchar(500), 
 @FriendlyFieldName varchar(33),
 @FieldType varchar(50), 
 @FieldSize int, 
 @FieldRequired bit,
 @LoaderDetID int
as

set ANSI_Warnings on


--validates the users data according to ddl
exec('
 delete LoaderErrors where LoaderDetID = ' + @LoaderDetID + '

 declare @ErrorCount int

 --now search for column type miss matches
 if ''' + @FieldType + ''' = ''Integer'' or ''' + @FieldType + '''= ''Numeric'' 
 begin
  select @ErrorCount = count(*)
  from #Temp
  where IsNumeric([' + @FriendlyFieldName + ']) = 0

  if @ErrorCount > 0
  begin
   insert LoaderErrors
   select ' + @LoaderDetID + ', ''' + @TableName +  ''', ''' + @FriendlyFieldName + ''',''Numeric Type Not Supplied'', null
  end
 end

 if ''' + @FieldType + ''' = ''DateTime''
 begin
  select @ErrorCount = count(*)
  from #Temp
  where IsDate([' + @FriendlyFieldName + ']) = 0
  if @ErrorCount > 0
  begin
   insert LoaderErrors
   select ' + @LoaderDetID + ', ''' + @TableName +  ''', ''' + @FriendlyFieldName + ''',''Date Type Not Supplied'', null
  end
 end


 declare @Value varchar(4000), @RecNo int

 declare RCursor cursor
	read_only
	for
	select [' + @FriendlyFieldName  + '], ReflexConversionAutoInc
	from #Temp
	
 declare @R int
 select @R = 1 

	open RCursor
	fetch next from RCursor into @Value, @RecNo
	while (@@fetch_status <> -1)	
	begin
	 if (@@fetch_status <> -2)
	 begin
   if ' + @FieldRequired + ' = 1
   begin
    if @Value is null
     insert LoaderErrors
     select ' + @LoaderDetID + ', ''' + @TableName +  ''', ''' + @FriendlyFieldName + ''',''Missing Value'', @RecNo
   end
	 end
  select @R = @R + 1
	 fetch next from RCursor into @Value, @RecNo
	end
	
	close RCursor
	deallocate RCursor


')



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LoaderSP_ValidateLinks]') and xtype = 'P ')  
 drop Procedure LoaderSP_ValidateLinks
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE   proc LoaderSP_ValidateLinks 
 @TableName varchar(500),
 @FriendlyFieldName varchar(33),
 @LoaderDetID int,
 @LinkTableName varchar(500), 
 @LinkValueFieldOrValue varchar(500), 
 @LinkGroupCode varchar(2)
as

set ANSI_Warnings on


 --this proc will verify that FriendlyFieldName in #Temp exists in LinktableName's LinkValueFieldOrValue
 -- if a group exists then all that are part of the group will be analyzedto exist as a multi keyed group
 
 if @LinkGroupCode = ''
  set @LinkGroupCode = null

exec('
 --first validate fields for size and type compatibility
 if exists (select * from tempdb..sysobjects where id = object_id(N''tempdb..#TempLinkGroup''))
 drop table #TempLinkGroup
 create table #TempLinkGroup( 
  FriendlyFieldName varchar(500),
  LinkValueFieldOrValue varchar(500)
 )

 insert #TempLinkGroup
 select d.FriendlyFieldName, e.ValueFieldOrValue
 from LoaderDet d
	join LoaderDependencies e
	on d.[id] = e.LoaderDetID
	where e.LoaderDetID in
 (select td.[id]
  from LoaderDet td
 	join LoaderDependencies te
	 on td.[id] = te.LoaderDetID
  where te.GroupCode = ''' + @LinkGroupCode + '''
  and ActualTableName = ''' + @TableName + ''')
  
 declare @TLG int
 select @TLG = count(*)
 from #TempLinkGroup
 
 if @TLG = 0
 begin--add this one then (wasnt part of a group)
  insert #TempLinkGroup
  select ''' + @FriendlyFieldName + ''', ''' + @LinkValueFieldOrValue + '''
 end

 exec LoaderSP_ExecValidateLinks ''' + @TableName + ''', ''' + @FriendlyFieldName + ''', ' + @LoaderDetID + ', ''' + @LinkTableName + '''
')



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LoaderSP_ValidateSetValues]') and xtype = 'P ')  
 drop Procedure LoaderSP_ValidateSetValues
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE   proc LoaderSP_ValidateSetValues 
 @TableName varchar(500),
 @FriendlyFieldName varchar(33),
 @LoaderDetID int
as

set ANSI_Warnings on

declare @IsSet int

 select @IsSet = count(*)
 from LoaderDet d
 join loaderDependencies l
 on d.ID = l.LoaderDetID
 where d.ID = @LoaderDetID
 and l.Type = 'Set Values'
 and FriendlyFieldName = @FriendlyFieldName

if @IsSet > 0
exec('
 insert LoaderErrors
 select ' + @LoaderDetID + ', ''' + @TableName + ''', ''' + @FriendlyFieldName + ''', ''Set Value Missing'', ReflexConversionAutoInc 
 from #Temp
 where [' + @FriendlyFieldName + ']
 not in 
 (select ValueFieldOrValue
 from loaderDependencies
 where LoaderDetID = ' + @LoaderDetID + '
 and Type = ''Set Values'')
')



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[MSP_BACKUP_ASSN]') and xtype = 'P ')  
 drop Procedure MSP_BACKUP_ASSN
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE PROCEDURE MSP_BACKUP_ASSN   	@PROJ_ID							INTEGER, 	@ASSN_UID							INTEGER  AS  	DECLARE @VALUE_LIST					VARCHAR(255)  	DECLARE @ASSN_UNITS					VARCHAR(255)  	DECLARE @ASSN_START_DATE			VARCHAR(255)  	DECLARE @ASSN_FINISH_DATE			VARCHAR(255)  	DECLARE @ASSN_DELAY					VARCHAR(255)  	DECLARE @ASSN_LEVELING_DELAY		VARCHAR(255)  	DECLARE @ASSN_ACT_START				VARCHAR(255)  	DECLARE @ASSN_ACT_FINISH			VARCHAR(255)  	DECLARE @ASSN_ACT_WORK				VARCHAR(255)  	DECLARE @ASSN_REM_WORK				VARCHAR(255)  	DECLARE @ASSN_REG_WORK				VARCHAR(255)  	DECLARE @ASSN_WORK					VARCHAR(255)  	DECLARE @ASSN_ACT_OVT_WORK			VARCHAR(255) 	DECLARE @ASSN_REM_OVT_WORK			VARCHAR(255) 	DECLARE @ASSN_OVT_WORK				VARCHAR(255)  	SELECT 		@ASSN_UNITS = CONVERT(VARCHAR(255),ASSN_UNITS), 		@ASSN_START_DATE = CONVERT(VARCHAR(255),ASSN_START_DATE), 		@ASSN_FINISH_DATE = CONVERT(VARCHAR(255),ASSN_FINISH_DATE), 		@ASSN_DELAY = CONVERT(VARCHAR(255),ASSN_DELAY), 		@ASSN_LEVELING_DELAY = CONVERT(VARCHAR(255),ASSN_LEVELING_DELAY), 		@ASSN_ACT_START = CONVERT(VARCHAR(255),ASSN_ACT_START), 		@ASSN_ACT_FINISH = CONVERT(VARCHAR(255),ASSN_ACT_FINISH), 		@ASSN_ACT_WORK = CONVERT(VARCHAR(255),ASSN_ACT_WORK), 		@ASSN_REM_WORK = CONVERT(VARCHAR(255),ASSN_REM_WORK), 		@ASSN_REG_WORK = CONVERT(VARCHAR(255),ASSN_REG_WORK), 		@ASSN_WORK = CONVERT(VARCHAR(255),ASSN_WORK), 		@ASSN_ACT_OVT_WORK = CONVERT(VARCHAR(255),ASSN_ACT_OVT_WORK), 		@ASSN_REM_OVT_WORK = CONVERT(VARCHAR(255),ASSN_REM_OVT_WORK), 		@ASSN_OVT_WORK = CONVERT(VARCHAR(255),ASSN_OVT_WORK) 	FROM 		MSP_ASSIGNMENTS 	WHERE 		PROJ_ID = @PROJ_ID AND 		ASSN_UID = @ASSN_UID  	SELECT @VALUE_LIST = '1,' 	IF (@ASSN_UNITS IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @ASSN_UNITS 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@ASSN_START_DATE IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @ASSN_START_DATE 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@ASSN_FINISH_DATE IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @ASSN_FINISH_DATE 	SELECT @VALUE_LIST = @VALUE_LIST + ',' IF (@ASSN_DELAY IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @ASSN_DELAY 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@ASSN_LEVELING_DELAY IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @ASSN_LEVELING_DELAY 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@ASSN_ACT_START IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @ASSN_ACT_START 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@ASSN_ACT_FINISH IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @ASSN_ACT_FINISH 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@ASSN_ACT_WORK IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @ASSN_ACT_WORK 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@ASSN_REM_WORK IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @ASSN_REM_WORK 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@ASSN_REG_WORK IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @ASSN_REG_WORK 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@ASSN_WORK IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @ASSN_WORK 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@ASSN_ACT_OVT_WORK IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @ASSN_ACT_OVT_WORK 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@ASSN_REM_OVT_WORK IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @ASSN_REM_OVT_WORK 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@ASSN_OVT_WORK IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @ASSN_OVT_WORK  UPDATE MSP_ASSIGNMENTS SET EXT_EDIT_REF_DATA = @VALUE_LIST WHERE PROJ_ID = @PROJ_ID AND ASSN_UID = @ASSN_UID 





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[MSP_BACKUP_LINK]') and xtype = 'P ')  
 drop Procedure MSP_BACKUP_LINK
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE PROCEDURE MSP_BACKUP_LINK   	@PROJ_ID				INTEGER, 	@LINK_UID				INTEGER AS  	DECLARE @VALUE_LIST			VARCHAR(255) 	DECLARE @LINK_TYPE			VARCHAR(255) 	DECLARE @LINK_LAG			VARCHAR(255)  	SELECT 		@LINK_TYPE = CONVERT(VARCHAR(255),LINK_TYPE), 		@LINK_LAG = CONVERT(VARCHAR(255),LINK_LAG) 	FROM 		MSP_LINKS 	WHERE 		PROJ_ID = @PROJ_ID AND 		LINK_UID = @LINK_UID  	SELECT @VALUE_LIST = '1,' 	IF (@LINK_TYPE IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @LINK_TYPE 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@LINK_LAG IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @LINK_LAG  	UPDATE MSP_LINKS SET EXT_EDIT_REF_DATA = @VALUE_LIST WHERE PROJ_ID = @PROJ_ID AND LINK_UID = @LINK_UID





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[MSP_BACKUP_RES]') and xtype = 'P ')  
 drop Procedure MSP_BACKUP_RES
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE PROCEDURE MSP_BACKUP_RES  	@PROJ_ID				INTEGER, 	@RES_UID				INTEGER AS  	DECLARE @VALUE_LIST			VARCHAR(255) 	DECLARE @RES_ACCRUE_AT			VARCHAR(255) 	DECLARE @RES_AVAIL_FROM			VARCHAR(255) 	DECLARE @RES_AVAIL_TO			VARCHAR(255)  	SELECT 		@RES_ACCRUE_AT = CONVERT(VARCHAR(255),RES_ACCRUE_AT), 		@RES_AVAIL_FROM = CONVERT(VARCHAR(255),RES_AVAIL_FROM), 		@RES_AVAIL_TO = CONVERT(VARCHAR(255),RES_AVAIL_TO) 	FROM 		MSP_RESOURCES 	WHERE 		PROJ_ID = @PROJ_ID AND 		RES_UID = @RES_UID  	SELECT @VALUE_LIST = '1,' 	IF (@RES_ACCRUE_AT IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @RES_ACCRUE_AT 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@RES_AVAIL_FROM IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @RES_AVAIL_FROM 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@RES_AVAIL_TO IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @RES_AVAIL_TO  	UPDATE MSP_RESOURCES SET EXT_EDIT_REF_DATA = @VALUE_LIST WHERE PROJ_ID = @PROJ_ID AND RES_UID = @RES_UID





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[MSP_BACKUP_TASK]') and xtype = 'P ')  
 drop Procedure MSP_BACKUP_TASK
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE PROCEDURE MSP_BACKUP_TASK 	@PROJ_ID				INTEGER, 	@TASK_UID		   INTEGER AS 	DECLARE @VALUE_LIST				VARCHAR(255) 	DECLARE @TASK_ACT_WORK			VARCHAR(255) 	DECLARE @TASK_WORK				VARCHAR(255) 	DECLARE @TASK_REM_WORK			VARCHAR(255) 	DECLARE @TASK_DUR				VARCHAR(255) 	DECLARE @TASK_ACT_DUR			VARCHAR(255) 	DECLARE @TASK_REM_DUR			VARCHAR(255) 	DECLARE @TASK_START_DATE		VARCHAR(255) 	DECLARE @TASK_FINISH_DATE		VARCHAR(255) 	DECLARE @TASK_CONSTRAINT_TYPE	VARCHAR(255) 	DECLARE @TASK_CONSTRAINT_DATE	VARCHAR(255) 	DECLARE @TASK_ACT_START			VARCHAR(255) 	DECLARE @TASK_ACT_FINISH		VARCHAR(255) 	DECLARE @TASK_STOP_DATE			VARCHAR(255) 	DECLARE @TASK_RESUME_DATE		VARCHAR(255) 	DECLARE @TASK_PCT_COMP			VARCHAR(255) 	DECLARE @TASK_COST				VARCHAR(255) 	DECLARE @TASK_FIXED_COST		VARCHAR(255) 	DECLARE @TASK_ACT_COST			VARCHAR(255) 	DECLARE @TASK_LEVELING_DELAY	VARCHAR(255) 	DECLARE @TASK_PCT_WORK_COMP		VARCHAR(255) 	DECLARE @TASK_FIXED_COST_ACCRUAL	VARCHAR(255)  SELECT 		@TASK_ACT_WORK = CONVERT(VARCHAR(255),TASK_ACT_WORK), 		@TASK_WORK = CONVERT(VARCHAR(255),TASK_WORK), 		@TASK_REM_WORK = CONVERT(VARCHAR(255),TASK_REM_WORK), 		@TASK_DUR = CONVERT(VARCHAR(255),TASK_DUR), 		@TASK_ACT_DUR = CONVERT(VARCHAR(255),TASK_ACT_DUR), 		@TASK_REM_DUR = CONVERT(VARCHAR(255),TASK_REM_DUR), 		@TASK_START_DATE = CONVERT(VARCHAR(255),TASK_START_DATE), 		@TASK_FINISH_DATE = CONVERT(VARCHAR(255),TASK_FINISH_DATE), 		@TASK_CONSTRAINT_TYPE = CONVERT(VARCHAR(255),TASK_CONSTRAINT_TYPE), 		@TASK_CONSTRAINT_DATE = CONVERT(VARCHAR(255),TASK_CONSTRAINT_DATE), 		@TASK_ACT_START = CONVERT(VARCHAR(255),TASK_ACT_START), 		@TASK_ACT_FINISH = CONVERT(VARCHAR(255),TASK_ACT_FINISH), 		@TASK_STOP_DATE = CONVERT(VARCHAR(255),TASK_STOP_DATE), 		@TASK_RESUME_DATE = CONVERT(VARCHAR(255),TASK_RESUME_DATE), 		@TASK_PCT_COMP = CONVERT(VARCHAR(255),TASK_PCT_COMP), 		@TASK_COST = CONVERT(VARCHAR(255),TASK_COST), 		@TASK_FIXED_COST = CONVERT(VARCHAR(255),TASK_FIXED_COST), 		@TASK_ACT_COST = CONVERT(VARCHAR(255),TASK_ACT_COST),  @TASK_LEVELING_DELAY = CONVERT(VARCHAR(255),TASK_LEVELING_DELAY),       @TASK_PCT_WORK_COMP = CONVERT(VARCHAR(255),TASK_PCT_WORK_COMP), 		@TASK_FIXED_COST_ACCRUAL = CONVERT(VARCHAR(255),TASK_FIXED_COST_ACCRUAL) 	FROM 		MSP_TASKS 	WHERE 		PROJ_ID = @PROJ_ID AND 		TASK_UID = @TASK_UID  	SELECT @VALUE_LIST = '1,' 	IF (@TASK_ACT_WORK IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_ACT_WORK 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@TASK_WORK IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_WORK 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@TASK_REM_WORK IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_REM_WORK 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@TASK_DUR IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_DUR 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@TASK_ACT_DUR IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_ACT_DUR 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@TASK_REM_DUR IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_REM_DUR 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@TASK_START_DATE IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_START_DATE 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@TASK_FINISH_DATE IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_FINISH_DATE 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@TASK_CONSTRAINT_TYPE IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_CONSTRAINT_TYPE 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@TASK_CONSTRAINT_DATE IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_CONSTRAINT_DATE 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@TASK_ACT_START IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_ACT_START 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@TASK_ACT_FINISH IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_ACT_FINISH 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@TASK_STOP_DATE IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_STOP_DATE 	SELECT @VALUE_LIST = @VALUE_LIST + ','    IF (@TASK_RESUME_DATE IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_RESUME_DATE SELECT @VALUE_LIST = @VALUE_LIST + ',' IF (@TASK_PCT_COMP IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_PCT_COMP    SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@TASK_COST IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_COST 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@TASK_FIXED_COST IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_FIXED_COST 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@TASK_ACT_COST IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_ACT_COST 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@TASK_LEVELING_DELAY IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_LEVELING_DELAY 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@TASK_PCT_WORK_COMP IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_PCT_WORK_COMP 	SELECT @VALUE_LIST = @VALUE_LIST + ',' 	IF (@TASK_FIXED_COST_ACCRUAL IS NOT NULL) SELECT @VALUE_LIST = @VALUE_LIST + @TASK_FIXED_COST_ACCRUAL 	UPDATE MSP_TASKS SET EXT_EDIT_REF_DATA = @VALUE_LIST WHERE PROJ_ID = @PROJ_ID AND TASK_UID = @TASK_UID 





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[OE_QuoteApproval]') and xtype = 'P ')  
 drop Procedure OE_QuoteApproval
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc OE_QuoteApproval @ID int, @Status char(1) as
declare @tr_db varchar(100), @sql varchar(8000), @CompanyID int, @stat varchar(50), @SO_ID varchar(50)

	select @CompanyID=CompanyID from approvals_requested where id = @id
	select @tr_db=treasurydbname from companies where autoid = @CompanyID
	select @SO_ID=module_reference_id, @stat=status from approvals_requested where id=@id

	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..so_master_hdr set QuoteRoutingStatus=''D'' where so_id='+@SO_ID
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..so_master_hdr set QuoteRoutingStatus=''A'' where so_id='+@SO_ID
		exec( @sql )
	end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[OE_TrainingRouting]') and xtype = 'P ')  
 drop Procedure OE_TrainingRouting
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc [dbo].[OE_TrainingRouting] @ID int, @Status char(1) as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@stat varchar(50),
	@SO_ID varchar(50)

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @SO_ID=module_reference_id, @stat=status from approvals_requested where id=@id


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..so_master_hdr set KC_RoutedForTraining=''D'' where so_id='+@SO_ID
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin

		set @sql ='
			update '+@tr_db+'..so_master_hdr set KC_RoutedForTraining=''A'' where so_id='+@SO_ID


		exec( @sql )
	end
end
	
		
		









Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[PC_FLEM_Email]') and xtype = 'P ')  
 drop Procedure PC_FLEM_Email
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

/*
begin tran
exec PC_FLEM_Email
rollback tran
*/
create proc PC_FLEM_Email
as
begin
	declare @nSql nvarchar(max), @tr_db varchar(50), @CompanyId int 
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#LEMSheet'))
		drop table #LEMSheet

	create table #LEMSheet ( 
		MatchId int,
		CompanyId int,
		Handled bit
	)

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Email'))
		drop table #Email

	create table #Email (   
		MatchId int,
		CompanyId int,
		ContactId int,
		LemNum varchar(20), 
		ProjectId int,
		LemDate datetime,
		ToEmail varchar(128),
		FromEmail varchar(128)
	)

	insert into #LEMSheet(MatchId, CompanyId, Handled)
	select h.MatchId, h.CompanyId, 0
	from WS_Sync s
	join WS_SyncLogHeader h on h.SyncId=s.SyncId
	where s.Status='Complete' and h.EmailData is not null and isnull(h.Emailing,0)=0


	update h	
	set h.Emailing=1
	from WS_SyncLogHeader h 
	join #LEMSheet l on l.MatchId=h.MatchId


	declare cur cursor for
	select distinct c.TreasuryDBName, l.CompanyId 
	from #LEMSheet l
	join companies c on c.autoId=l.CompanyId
	
	open cur 
	fetch cur into @tr_db, @CompanyId
	while @@fetch_status=0
	begin
		select @nSql = '
		insert into #Email (MatchId, CompanyId, ContactId, LemNum, ProjectId, LemDate, ToEmail, FromEmail)
		select h.MatchId, @CompanyId, h.ContactId, h.LemNum, h.ProjectId, h.LogDate, custc.Email1Address, fmc.Email1Address
		from #LEMSheet l
		join WS_SyncLogHeader h on h.MatchId=l.MatchId
		join '+@tr_db+'.dbo.PROJ_CONTACTS pc on pc.pri_id=h.ProjectId  
		join contact fmc on fmc.id=h.ContactId
		join contact custc on custc.id=pc.customer_contact
		where l.CompanyId=@CompanyId and rtrim(isnull(custc.Email1Address,'''')) <> '''' and rtrim(isnull(fmc.Email1Address,'''')) <> '''' '
		exec sp_executesql @nSql, N'@tr_db varchar(50), @CompanyId int ', @tr_db, @CompanyId
		
		fetch cur into @tr_db, @CompanyId
	end			
	close cur
	deallocate cur

	update l
	set l.Handled = 1
	from #LEMSheet l
	join #Email e on e.MatchId=l.MatchId

	update h
	set h.Emailing=0
	from WS_SyncLogHeader h 
	join #LEMSheet l on l.MatchId=h.MatchId
	where l.Handled = 0

	select MatchId, CompanyId, ContactId, LemNum, ProjectId, LemDate, ToEmail, FromEmail 
	from #Email
end 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[PC_Q_Sync]') and xtype = 'P ')  
 drop Procedure PC_Q_Sync
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

-- exec PC_Q_Sync 12
create proc PC_Q_Sync @CompanyId int
as
begin	
	declare @Sync table (
		SyncId int,
		SyncTransactionNum int,
		SyncDate datetime
	)

	insert into @Sync (SyncId, SyncTransactionNum, SyncDate)
	select distinct s.SyncId, s.SyncId, s.SyncStart 
	from WS_Sync s 
	join WS_SyncLogHeader l on l.SyncId=s.SyncId
	where s.CompanyId=@CompanyId and l.Quarantine = 1
	union
	select distinct s.SyncId, s.SyncId, s.SyncStart 
	from WS_Sync s 
	join WS_SyncPOHeader p on p.SyncId=s.SyncId
	where s.CompanyId=@CompanyId and p.Quarantine = 1

	select SyncId, SyncTransactionNum, SyncDate from @Sync order by SyncId
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[PC_Q_SyncLabor]') and xtype = 'P ')  
 drop Procedure PC_Q_SyncLabor
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

-- exec PC_Q_SyncLabor 203
create proc PC_Q_SyncLabor @LinkMatchId int 
as
begin
	select MatchId, EmpNum, wc_code, Level1Id, Level2Id, Level3Id, Level4Id
	from WS_SyncLabourTimeEntry 
	where HeaderMatchId=@LinkMatchId
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[PC_Q_SyncLEM]') and xtype = 'P ')  
 drop Procedure PC_Q_SyncLEM
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

-- exec PC_Q_SyncLEM 203
create proc PC_Q_SyncLEM @SyncId int 
as
begin	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#SyncLem'))
		drop table #SyncLem

	create table #SyncLem (
		MatchId int,
		LinkMatchId int,
		LemNum varchar(20),
		ProjectNum int,
		Project varchar(50),
		LemDate datetime
	)

	declare @tr_db varchar(50), @nSql nvarchar(max)

	select @tr_db=c.treasurydbname 
	from WS_Sync w 
	join companies c on c.AutoID=w.CompanyId
	where w.SyncId=@SyncId

	select @nSql = '
	insert into #SyncLem (MatchId, LinkMatchId, LemNum, ProjectNum, Project, LemDate)
	select w.MatchId, isnull(w.PrevMatchId, w.MatchId), w.LemNum, p.pri_code, p.pri_name, w.LogDate
	from WS_SyncLogHeader w
	join '+@tr_db+'.dbo.PROJ_HEADER p on p.pri_id=w.ProjectId
	where w.syncid=@SyncId and w.Quarantine = 1 '
	exec sp_executesql @nSql, N'@SyncId int ', @SyncId 

	select MatchId, LinkMatchId, LemNum, ProjectNum, Project, LemDate 
	from #SyncLem 
	order by LemNum
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[PC_SyncQuarantineValidation]') and xtype = 'P ')  
 drop Procedure PC_SyncQuarantineValidation
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
/*
	begin tran
	declare @Message varchar(max), @Valid bit
	exec PC_SyncQuarantineValidation 232, @Message output, @Valid output
	select @Valid, @Message
	rollback tran
*/
create proc PC_SyncQuarantineValidation @SyncId int, @Message varchar(max) output, @Valid bit output
as
begin
	declare @nSql nvarchar(max), @CompanyId int, @tr_db varchar(50), @level int, @CNT int

	select @CompanyId=CompanyId from WS_Sync where syncid=@syncid

	select @tr_db=treasurydbname from companies where autoid = @CompanyId

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#labor'))
		drop table #labor

	create table #labor (   
		MatchId int
	)


	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#laborDet'))
		drop table #laborDet

	create table #laborDet (   
		MatchId int
	)


	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#equip'))
		drop table #equip

	create table #equip (   
		MatchId int
	)


	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#attach'))
		drop table #attach

	create table #attach (   
		MatchId int,
		TableDotField varchar(60)
	)


	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#po'))
		drop table #po

	create table #po (   
		MatchId int
	)


	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#poDet'))
		drop table #poDet

	create table #poDet (   
		MatchId int
	)
	
	
	select @nSql = '
	select @level=case when isnull(lv4_active_gc,''F'') = ''T'' then 4 when isnull(lv3_active_gc,''F'') = ''T'' then 3
		when isnull(lv2_active_gc,''F'') = ''T'' then 2 when isnull(lv1_active_gc,''F'') = ''T'' then 1 else 0 end
	from '+@tr_db+'.dbo.[proj_cntl] '
	exec sp_executesql @nSql, N'@level int output ', @level OUT

	-- Labor 
		-- Missing Earning codes for employee 
		select @nSql = '
		declare @innerMessage varchar(max)
		select @innerMessage = STUFF((select distinct '' Emp:'' + cast(e.emp_no as varchar(50)) + '' ('' + c.eg_code + '', '' + c.ec_code + '')''
		from WS_SyncLogHeader w
		join WS_SyncLabourTimeEntry l on l.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and l.SyncId=w.SyncId		
		join WS_SyncLabourTimeDetail ld on ld.EntryId=isnull(l.PrevMatchId, l.MatchId) and l.SyncId=ld.SyncId
		join '+@tr_db+'.dbo.employee e on e.emp_no=l.EmpNum
		join '+@tr_db+'.dbo.WS_EMP_Time_Code c on c.ID=ld.TimeCodeId		
		left outer join '+@tr_db+'.[dbo].[earn_code] ec on ec.ec_code = c.EC_CODE and ec.eg_code = c.EG_CODE
		left outer join '+@tr_db+'.[dbo].[emp_earn] ee on ee.ec_code = c.EC_CODE and ee.eg_code = c.EG_CODE and ee.emp_no = l.EmpNum
		where w.syncid=@syncid and ee.ee_account is null and ld.WorkHours > 0
		FOR XML PATH('''')), 1, 1, '''') 

		if( @innerMessage is not null )
		begin
			select @innerMessage = Replace(@innerMessage, '' Emp:'', char(13) + char(10) + '' Emp:'')
			select @innerMessage = ''***Error'' + char(13) + char(10) + 
				''There are missing employee earning codes / accounts for: '' + char(13) + char(10) + '' '' + @innerMessage 
			select @message = @innerMessage + char(13) + char(10)
		end '
		exec sp_executesql @nSql, N'@syncid int, @message varchar(max) output ', @syncid, @message output


		-- missing employee
		select @nSql = '
		insert into #labor(MatchId)
		select t.MatchId
		from WS_SyncLogHeader w 
		join WS_SyncLabourTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
		left outer join '+@tr_db+'.dbo.employee e on e.emp_no=t.EmpNum
		where w.syncid=@syncid and e.emp_no is null '
		exec sp_executesql @nSql, N'@syncid int ', @syncid	
						
		-- missing work class
		select @nSql = '
		insert into #labor(MatchId)
		select t.MatchId
		from WS_SyncLogHeader w 
		join WS_SyncLabourTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
		left outer join '+@tr_db+'.dbo.work_class wc on wc.wc_code=t.wc_code
		where w.syncid=@syncid and wc.wc_code is null '
		exec sp_executesql @nSql, N'@syncid int ', @syncid	
			
		-- missing level id 
		if( @level >= 1 )
		begin
			select @nSql = '
			insert into #labor(MatchId)
			select t.MatchId
			from WS_SyncLogHeader w 
			join WS_SyncLabourTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level1_Codes l on l.lv1ID=t.Level1Id
			where w.syncid=@syncid and l.lv1ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid	
		end

		if( @level >= 2 )
		begin
			select @nSql = '
			insert into #labor(MatchId)
			select t.MatchId
			from WS_SyncLogHeader w 
			join WS_SyncLabourTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level2_Codes l on l.lv2ID=t.Level2Id
			where w.syncid=@syncid and l.lv2ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid	
		end

		if( @level >= 3 )
		begin
			select @nSql = '
			insert into #labor(MatchId)
			select t.MatchId 
			from WS_SyncLogHeader w 
			join WS_SyncLabourTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level3_Codes l on l.lv3ID=t.Level3Id
			where w.syncid=@syncid and l.lv3ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid	
		end

		if( @level = 4 )
		begin
			select @nSql = '
			insert into #labor(MatchId)
			select t.MatchId
			from WS_SyncLogHeader w 
			join WS_SyncLabourTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level4_Codes l on l.lv4ID=t.Level4Id
			where w.syncid=@syncid and l.lv4ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid	
		end
	
		
	-- Labor Detail
		-- missing time code id 
		select @nSql = '
		insert into #laborDet(MatchId)
		select ld.MatchId
		from WS_SyncLogHeader w
		join WS_SyncLabourTimeEntry l on l.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and l.SyncId=w.SyncId		
		join WS_SyncLabourTimeDetail ld on ld.EntryId=isnull(l.PrevMatchId, l.MatchId) and l.SyncId=ld.SyncId
		left outer join '+@tr_db+'.dbo.WS_EMP_Time_Code tc on tc.ID=ld.TimeCodeId
		where w.syncid=@syncid and tc.ID is null '
		exec sp_executesql @nSql, N'@syncid int ', @syncid	


	-- Equipment
		-- Missing Equipment  
		select @nSql = '
		insert into #equip(MatchId)
		select t.MatchId
		from WS_SyncLogHeader w 
		join WS_SyncEquipTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
		left outer join '+@tr_db+'.dbo.equip_id e on e.eqi_num=t.EqpNum
		where w.syncid=@syncid and e.eqi_num is null '
		exec sp_executesql @nSql, N'@syncid int ', @syncid	

		-- Missing level id 
		if( @level >= 1 )
		begin
			select @nSql = '
			insert into #equip(MatchId)
			select t.MatchId
			from WS_SyncLogHeader w 
			join WS_SyncEquipTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level1_Codes l on l.lv1ID=t.Level1Id
			where w.syncid=@syncid and l.lv1ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid	
		end

		if( @level >= 2 )
		begin
			select @nSql = '
			insert into #equip(MatchId)
			select t.MatchId
			from WS_SyncLogHeader w 
			join WS_SyncEquipTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level2_Codes l on l.lv2ID=t.Level2Id
			where w.syncid=@syncid and l.lv2ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid	
		end

		if( @level >= 3 )
		begin
			select @nSql = '
			insert into #equip(MatchId)
			select t.MatchId 
			from WS_SyncLogHeader w 
			join WS_SyncEquipTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level3_Codes l on l.lv3ID=t.Level3Id
			where w.syncid=@syncid and l.lv3ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid	
		end

		if( @level = 4 )
		begin
			select @nSql = '
			insert into #equip(MatchId)
			select t.MatchId 
			from WS_SyncLogHeader w 
			join WS_SyncEquipTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level4_Codes l on l.lv4ID=t.Level4Id
			where w.syncid=@syncid and l.lv4ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid	
		end

		-- Employee Owned Equipment -- Missing Earning codes for employee
		select @nSql = '
		declare @innerMessage varchar(max)
		select @innerMessage = STUFF((select distinct '' Emp:'' + cast(emp.emp_no as varchar(50)) + '' ('' + ec.eg_code + '', '' + ec.ec_code + '')''
		from WS_SyncLogHeader w
		join WS_SyncEquipTimeEntry l on l.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and l.SyncId=w.SyncId	
		join '+@tr_db+'.[dbo].[equip_id] e on e.eqi_num=l.EqpNum	
		join '+@tr_db+'.[dbo].[equip_assign] ea on ea.eqi_num=e.eqi_num and cast(w.LogDate as date) between cast(ea.ea_date as date) and cast(ea.ea_release_date as date)
		join '+@tr_db+'.[dbo].[employee] emp on emp.emp_no=ea.emp_no
		join '+@tr_db+'.[dbo].[earn_code] ec on ec.ec_code = ea.ec_code and ec.eg_code = ea.eg_code
		left outer join '+@tr_db+'.[dbo].[emp_earn] ee on ee.ec_code = ea.EC_CODE and ee.eg_code = ea.EG_CODE and ee.emp_no = emp.emp_no
		where w.syncid=@syncid and ee.ee_account is null 
		FOR XML PATH('''')), 1, 1, '''') 
		
		if( @innerMessage is not null )
		begin
			select @innerMessage = Replace(@innerMessage, '' Emp:'', char(13) + char(10) + '' Emp:'')
			select @innerMessage = ''***Error'' + char(13) + char(10) + 
				''There are missing employee earning codes / accounts for: '' + char(13) + char(10) + '' '' + @innerMessage 
			select @message = isnull(@message,'''') + @innerMessage + char(13) + char(10) 
		end '
		exec sp_executesql @nSql, N'@syncid int, @message varchar(max) output ', @syncid, @message output


	-- Attachments 
		-- Missing ContextItem ID		
		insert into #attach(MatchId, TableDotField)
		select a.MatchId, 'LemHeader.Id'
		from WS_SyncLogHeader w
		join WS_SyncAttachment a on a.LinkMatchId=isnull(w.PrevMatchId, w.MatchId) and a.TableDotField='LemHeader.Id' and a.SyncId=w.SyncId
		left outer join ContextItem c on c.ID=a.ContextItemId
		where w.syncid=@syncid and c.ID is null


	-- PO Header
		-- Missing Supplier Code
		select @nSql = '
		insert into #po(MatchId)
		select w.MatchId
		from WS_SyncPOHeader w
		left outer join '+@tr_db+'.dbo.supplier_master s on s.Supplier=w.SupplierCode 
		where w.syncid=@syncid and s.Supplier is null '
		exec sp_executesql @nSql, N'@syncid int ', @syncid
		
	-- PO Det 
		-- Missing Level ID 
		if( @level >= 1 )
		begin
			select @nSql = '
			insert into #poDet(MatchId)
			select d.MatchId
			from WS_SyncPOHeader w
			join WS_SyncPODetail d on d.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and d.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level1_Codes l on l.lv1ID=d.Level1Id
			where w.syncid=@syncid and l.lv1ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid
		end

		if( @level >= 2 )
		begin
			select @nSql = '
			insert into #poDet(MatchId)
			select d.MatchId
			from WS_SyncPOHeader w
			join WS_SyncPODetail d on d.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and d.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level2_Codes l on l.lv2ID=d.Level2Id
			where w.syncid=@syncid and l.lv2ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid
		end

		if( @level >= 3 )
		begin
			select @nSql = '
			insert into #poDet(MatchId)
			select d.MatchId
			from WS_SyncPOHeader w
			join WS_SyncPODetail d on d.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and d.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level3_Codes l on l.lv3ID=d.Level3Id
			where w.syncid=@syncid and l.lv3ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid
		end

		if( @level = 4 )
		begin
			select @nSql = '
			insert into #poDet(MatchId)
			select d.MatchId
			from WS_SyncPOHeader w
			join WS_SyncPODetail d on d.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and d.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level4_Codes l on l.lv4ID=d.Level4Id
			where w.syncid=@syncid and l.lv4ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid
		end

	-- Attachments 
		-- Missing ContextItem ID		
		insert into #attach(MatchId, TableDotField)
		select a.MatchId, 'FieldPO.Id'
		from WS_SyncPOHeader w
		join WS_SyncAttachment a on a.LinkMatchId=isnull(w.PrevMatchId, w.MatchId) and a.TableDotField='FieldPO.Id' and a.SyncId=w.SyncId
		left outer join ContextItem c on c.ID=a.ContextItemId
		where w.syncid=@syncid and c.ID is null


	select @CNT=count(distinct MatchId) from #labor
	if( @CNT > 0 )
		select @message = isnull(@message,'') + cast(@CNT as varchar(15))+ ' Labor record(s) still require correcting.' + char(13) + char(10) 

	select @CNT=count(distinct MatchId) from #laborDet
	if( @CNT > 0 )
		select @message = isnull(@message,'') + cast(@CNT as varchar(15))+ ' Labor time code record(s) still require correcting.' + char(13) + char(10) 

	select @CNT=count(distinct MatchId) from #equip
	if( @CNT > 0 )
		select @message = isnull(@message,'') + cast(@CNT as varchar(15))+ ' Equipment record(s) still require correcting.' + char(13) + char(10) 

	select @CNT=count(distinct MatchId) from #attach where TableDotField='LemHeader.Id'
	if( @CNT > 0 )
		select @message = isnull(@message,'') + cast(@CNT as varchar(15))+ ' LEM attachment record(s) still require correcting.' + char(13) + char(10) 

	select @CNT=count(distinct MatchId) from #po
	if( @CNT > 0 )
		select @message = isnull(@message,'') + cast(@CNT as varchar(15))+ ' PO header record(s) still require correcting.' + char(13) + char(10) 

	select @CNT=count(distinct MatchId) from #poDet
	if( @CNT > 0 )
		select @message = isnull(@message,'') + cast(@CNT as varchar(15))+ ' PO detail record(s) still require correcting.' + char(13) + char(10) 

	select @CNT=count(distinct MatchId) from #attach where TableDotField='FieldPO.Id'
	if( @CNT > 0 )
		select @message = isnull(@message,'') + cast(@CNT as varchar(15))+ ' PO attachment record(s) still require correcting.' + char(13) + char(10) 
		

	select @message=isnull(@message,'OK')

	if( @message <> 'OK')
		select @Valid = 0
	else
		select @Valid = 1
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[PO_SubConApproval]') and xtype = 'P ')  
 drop Procedure PO_SubConApproval
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

CREATE proc PO_SubConApproval
@ID int,
@Status char(1)
as
begin
	declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@stat varchar(50),
	@PO_ID varchar(50)

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @PO_ID=module_reference_id, @stat=status from approvals_requested where id=@id


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..PO_HEADER set KC_SUBCON_STATUS=''D'' where PO_ID='+@PO_ID
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..PO_HEADER set KC_SUBCON_STATUS=''A'' where PO_ID='+@PO_ID
		exec( @sql )
		
		set @sql ='if exists( select * from '+@tr_db+'.dbo.po_header p 
			join '+@tr_db+'.dbo.ws_pcpo_hdr w on p.po_id=w.po_id 
			where ISNULL(p.kc_status,'''') in ('''', ''A'') and p.po_id='+@PO_ID+' )
			begin
				exec '+@tr_db+'..WS_PCPO_Print '+@PO_ID+'
			end'
		exec( @sql )
	end
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[PP_AutoRunReports]') and xtype = 'P ')  
 drop Procedure PP_AutoRunReports
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
 
CREATE proc [dbo].[PP_AutoRunReports]   
@Report_Schedule_ID int
as

--declare @ReportSaves_ID int
--select  @ReportSaves_ID =61

declare @Next_Run_Date datetime, @Run_Date datetime, @Report_Schedule_Hist_ID int, @Overwrite_Report varchar(1)
     

select @Run_Date = Next_Run_Date, @Overwrite_Report =Overwrite_Report
-- select Overwrite_Report,* 
from Report_Schedule 
where id = @Report_Schedule_ID


set @Next_Run_Date = dbo.PP_SetNextRunDate(@Report_Schedule_ID,@Run_Date)

update Report_Schedule set Last_Run_Date = Next_Run_Date, Actual_Last_Run_Date = GETDATE()
where id = @Report_Schedule_ID
		
update Report_Schedule set Next_Run_Date = @Next_Run_Date
where id = @Report_Schedule_ID 


	insert Report_Schedule_Hist (Report_Schedule_ID, ReportSaves_ID, Module_ID, ReportGroup_ID, Report_ID, Rpt_AliasID, 
		   Creator, Company_ID, Last_Run_Date, Next_Run_Date, Last_Status, Is_FRW, FRW_TITLE,FRW_TYPE, Period_Selection)
	select id, ReportSaves_ID, Module_ID, ReportGroup_ID, Report_ID, Rpt_AliasID, 
		  Creator, Company_ID, Actual_Last_Run_Date, Next_Run_Date, Last_Status, Is_FRW, FRW_TITLE,FRW_TYPE, Period_Selection
	from Report_Schedule 
	where id = @Report_Schedule_ID

    select @Report_Schedule_Hist_ID=SCOPE_IDENTITY()
    	    
	insert Report_Schedule_Hist_Recipients (Report_Schedule_Hist_ID,Contact_ID)
	select @Report_Schedule_Hist_ID,Contact_ID
	from Report_Schedule_Recipients
	where Report_Schedule_ID =@Report_Schedule_ID
		
	update Report_Schedule set Last_Status = 'S'
		where id = @Report_Schedule_ID 

		
select @Report_Schedule_Hist_ID [Report_Schedule_Hist_ID]		



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[PP_ReportHist]') and xtype = 'P ')  
 drop Procedure PP_ReportHist
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[PP_ReportHist]
@top int
as

set rowcount @top

SELECT        id, ReportSaves_ID, Module_ID, ReportGroup_ID, Report_ID,   
               (select Description from Report_Modules m where m.DBModule_ID = s.Module_ID )[Module],
               case when isnull(s.Is_FRW,'')='T' then 'FRW' else (select SubGroupName from Report_Sub_Groups g where g.SubReportGroupID = s.ReportGroup_ID and g.DBModule_ID = s.Module_ID )end [Group],
    case when isnull(s.Is_FRW,'')='T' then FRW_TITLE else (select ReportName from REPORTS r where r.ReportID  = s.Report_ID) end [Report Name],
Creator, Company_ID, Rpt_AliasID,
  case when isnull(s.Is_FRW,'')='T' then FRW_Type else (select SaveDescription from ReportSaves rs where rs.id = s.ReportSaves_ID ) end [SaveDescription],
(select SaveNotes from ReportSaves rs where rs.id = s.ReportSaves_ID )[Notes], Last_Run_Date, Next_Run_Date,
case when isnull(s.Last_Status,'') = 'S' then 'Succeeded' else '' end [Last Status], s.Is_FRW
FROM   Report_Schedule_Hist s
order by id desc


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[PP_RerunReports]') and xtype = 'P ')  
 drop Procedure PP_RerunReports
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
create  proc [dbo].[PP_RerunReports]   
@Report_Schedule_ID int
as

--declare @Report_Schedule_ID int, @company_id int
--select @Report_Schedule_ID = 2, @company_id = 12

declare @Report_Schedule_Hist_ID int
    

select  @Report_Schedule_Hist_id =  (select top 1(id) from Report_Schedule_Hist h where Report_Schedule_ID = @Report_Schedule_ID order by h.Last_Run_Date desc)
from Report_Schedule_Hist h
where Report_Schedule_ID = @Report_Schedule_ID 

update Report_Schedule set Actual_Last_Run_Date = GETDATE()
where id = @Report_Schedule_ID

delete Report_Schedule_Hist_Recipients 
where Report_Schedule_Hist_ID = @Report_Schedule_Hist_ID
		
delete Report_Schedule_Hist 
where id = @Report_Schedule_Hist_ID


select @Report_Schedule_Hist_ID [Report_Schedule_Hist_ID]

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[PP_UpdateSchedulingOptions]') and xtype = 'P ')  
 drop Procedure PP_UpdateSchedulingOptions
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc [dbo].[PP_UpdateSchedulingOptions]
@Report_Schedule_ID int
as

--declare @ReportSaves_ID int
--select  @ReportSaves_ID =10

declare @Next_Run_Date datetime, @Last_Run_Date datetime,@Run_Date datetime
       
select @Run_Date = Last_Run_Date
-- select *
from Report_Schedule 
where id = @Report_Schedule_ID


update Report_Schedule set Days_Following_Start_Run_Start_Point = 0
where id = @Report_Schedule_ID and Run_Interval_Period ='D' and isnull(Days_Following_Start_Run_Start_Point,0) <> 0

--select @Run_Date = '2015-04-05 02:00:00.000'
set @Next_Run_Date = dbo.PP_SetNextRunDate(@Report_Schedule_ID,@Run_Date)

select @Next_Run_Date

update Report_Schedule set Next_Run_Date = @Next_Run_Date
where id = @Report_Schedule_ID 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[PY_GrossNetApproval]') and xtype = 'P ')  
 drop Procedure PY_GrossNetApproval
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[PY_GrossNetApproval]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@modref varchar(100),
	@stat varchar(50)


	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=TreasuryDBName from companies where autoid = @CompanyID

	select @modref=module_reference_id, @stat=status from approvals_requested where id=@id

	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..PY_Batch_Routing_Header set Status=''D'' where id='+@modref
		exec( @sql )		
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..PY_Batch_Routing_Header set Status=''A'' where id='+@modref
		exec( @sql )
	end

	

end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[PY_Routing_EmployeeCreate]') and xtype = 'P ')  
 drop Procedure PY_Routing_EmployeeCreate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create   proc [dbo].[PY_Routing_EmployeeCreate]
@ID int,
@Status char(1)
as

--declare 
--@ID int,
--@Status char(1)

--select @id =23


begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@modref varchar(100),
	@stat varchar(50)

    
	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db= treasurydbname  from companies where autoid = @CompanyID
	 

	select @modref=module_reference_id, @stat=status from approvals_requested where id=@id

	if( @stat = 'declined' )
	begin
		
        set @sql ='update '+@tr_db+'..batch_employee set approval_status =''D''  where emp_no='+@modref
	    exec( @sql )		
	end
	else if( @stat = 'approved' )
	begin
		set @sql = 'exec ' + @tr_db+'..PY_EmpCopy_FromBatch ' + @modref  + ',' + convert (varchar,@CompanyID) 
		exec( @sql )
	end

	

end





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[QuoteApprovalTopic]') and xtype = 'P ')  
 drop Procedure QuoteApprovalTopic
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[QuoteApprovalTopic] @TotalProd money, @SO_NO varchar(50), @Customer varchar(100), @TRDB varchar(max) as
--declare @TotalProd money = 299999, @TRDB varchar(max) = 'tr_summit_v10'


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#AmountLevels'))
drop table #AmountLevels
CREATE TABLE #AmountLevels(
	id int,
	APPROVAL_TOPIC_ID int,
	Amount money)

exec(' insert #AmountLevels(id, APPROVAL_TOPIC_ID, Amount) select id, APPROVAL_TOPIC_ID, Amount from '+@TRDB+'..OE_QUOTE_ROUTING_LIMIT')

if (select count(*) from approval_topic where active = 1 and id = 82) = 0
	delete #AmountLevels where APPROVAL_TOPIC_ID = 82
if (select count(*) from approval_topic where active = 1 and id = 81) = 0
	delete #AmountLevels where APPROVAL_TOPIC_ID = 81
if (select count(*) from approval_topic where active = 1 and id = 80) = 0
	delete #AmountLevels where APPROVAL_TOPIC_ID = 80
if (select count(*) from approval_topic where active = 1 and id = 79) = 0
	delete #AmountLevels where APPROVAL_TOPIC_ID = 79
	
--check to see if the amount violates any
declare @ApprovalTopicID int = -1, @Threshold money
select @ApprovalTopicID = MAX(APPROVAL_TOPIC_ID) from #AmountLevels where Amount < @TotalProd
select @Threshold = amount from #AmountLevels where #AmountLevels.APPROVAL_TOPIC_ID = @ApprovalTopicID
select isnull(@ApprovalTopicID,-1) ApprovalTopicID, 'This quote (' + @SO_NO + ', ' + @Customer + ') has exceeded the threshhold of $' + 
CONVERT(varchar(12), @Threshold, 1) + 
' by $' + 
CONVERT(varchar(12), @TotalProd-@Threshold, 1) + ' (The current quote value is $' + 
CONVERT(varchar(12), @TotalProd, 1)+ ').' Detail

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RE_Contact_Lease_Sync]') and xtype = 'P ')  
 drop Procedure RE_Contact_Lease_Sync
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc RE_Contact_Lease_Sync(@ContactID int,@CompanyID int)
as

declare @ContactType varchar(20),@TRDB varchar(100),@sql varchar(8000)

select @TRDB = TreasuryDBName from COMPANIES
select @ContactType = Type from Contact where ID = @ContactID


if( @ContactType = 'Lease Contact' )
begin 

set @sql = 'update '+@TRDB+'.dbo.RE_Lease_TenantContacts set 
		FirstName = o.FirstName,LastName = o.LastName,Address1 = o.BusinessStreet,
		City = o.BusinessCity,Postal_CD = o.BusinessPostalCode, State_Prov_ID = isnull(sp.stp_ID,'+@TRDB+'.dbo.RE_Lease_TenantContacts.State_Prov_ID), Phone = o.BusinessTelephoneNumber,Fax = o.BusinessFaxNumber,
		Cell = o.MobileTelephoneNumber,Email = o.Email1Address from Contact o left outer join '+@TRDB+'.dbo.state_prov sp on sp.stp_desc = o.BusinessState 
		where o.ID = ' +convert(varchar(10),@ContactID ) +' and '+@TRDB+'.dbo.RE_Lease_TenantContacts.Contact_ID = '+convert(varchar(10),@ContactID )

		

end
else if ( @ContactType = 'Lease Occupant')
begin 

	set @sql = 'update '+@TRDB+'.dbo.re_lease_Occupants set
		FirstName = o.FirstName,LastName = o.LastName,'+
		' HomePhone = o.HomeTelephoneNumber,WorkPhone = o.BusinessTelephoneNumber,Email = o.Email1Address '+
		'from contact o where o.ID = '+	convert(varchar(10),@ContactID)+' and '+@TRDB+'.dbo.re_lease_Occupants.Contact_ID = '+convert(varchar(10),@ContactID )


end


exec (@sql)










Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RE_Land_CF2_BLANK_WEB]') and xtype = 'P ')  
 drop Procedure RE_Land_CF2_BLANK_WEB
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc RE_Land_CF2_BLANK_WEB @Underlining varchar(30), @Bold bit, @Format varchar(50), @CFSG_SEQ int, @CFG_DESC varchar(200), @CFSG_ID int, @CompanyID int, @Debug bit = 0 as
--declare @Underlining varchar(30), @Bold bit, @Format varchar(50), @CFSG_SEQ int, @CFG_DESC varchar(200), @CompanyID int, @Debug bit 
--select @Underlining = 'None', @Bold = 0, @Format = '', @CFSG_SEQ = 1, @CFG_DESC = 'Lot Deposits', @CompanyID = 12, @Debug = 1
set nocount on
print 'In RE_Land_CF2_BLANK_WEB on ' + db_name()

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ResultsTR'))
	truncate table #ResultsTR
else
	CREATE TABLE #ResultsTR(
	id int not null identity(1,1) primary key,	
	--formatting
	Underline varchar(30),
	Bold bit,
	Format varchar(30),
	Sequence int,
	--header
	ProjectID int,
	--row information
	RowDescription varchar(200),	
	AverageSalePrice money,
	ProjectToDate money,
	P1 money,
	P2 money,
	P3 money,
	P4 money,
	P5 money,
	P6 money,
	P7 money,
	P8 money,
	P9 money,
	P10 money,
	P11 money,
	P12 money,
	Balance money,
	Total money)

if not exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Driver'))
CREATE TABLE #Driver(
	id int not null identity(1,1) primary key,
	DriverType varchar(20),
	DriverID int,
	DriverName varchar(100),
	DriverTR sysname,
	DriverCompany varchar(100),
	DriverCompanyID int)


insert #ResultsTR(Underline, Bold, Format, Sequence, ProjectID, RowDescription, ProjectToDate, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, Balance, Total) 
select @Underlining, @Bold, @Format, @CFSG_SEQ, DriverID, @CFG_DESC,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null
from #Driver

print 'Out RE_Land_CF2_BLANK_WEB on ' + db_name()

/*
select * from #Group
select * from #SubGroup
select * from #Driver
select * from #JV
select * from #Type
select * from #Group
select * from #SubGroup where cfg_id = 47 order by cfsg_seq
select * from #Accounts
select * from #CostCodes
select * from #ResultsTR
*/

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RE_Land_CF2_CO_SFI]') and xtype = 'P ')  
 drop Procedure RE_Land_CF2_CO_SFI
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc RE_Land_CF2_CO_SFI @Underlining varchar(30), @Bold bit, @Format varchar(50), @CFSG_SEQ int, @CFG_DESC varchar(200), @CFSG_ID int, @CompanyID int, @Debug bit = 0 as
--declare @Underlining varchar(30), @Bold bit, @Format varchar(50), @CFSG_SEQ int, @CFG_DESC varchar(200), @CompanyID int, @Debug bit 
--select @Underlining = 'None', @Bold = 0, @Format = '', @CFSG_SEQ = 1, @CFG_DESC = 'Lot Deposits', @CompanyID = 12, @Debug = 1
set nocount on
print 'In RE_Land_CF2_CO_SFI on ' + db_name()

exec RE_Land_CF2_CI_CFByCost @Underlining, @Bold, @Format, @CFSG_SEQ, @CFG_DESC, @CFSG_ID, @CompanyID

print 'Out RE_Land_CF2_CO_SFI on ' + db_name()


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RE_Land_CFA_CI_MF_WEB]') and xtype = 'P ')  
 drop Procedure RE_Land_CFA_CI_MF_WEB
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc RE_Land_CFA_CI_MF_WEB @Underlining varchar(30), @Bold bit, @Format varchar(50), @CFSG_SEQ int, @CFG_DESC varchar(200), @CFSG_ID int, @CompanyID int, @Debug bit = 0 as
--declare @Underlining varchar(30), @Bold bit, @Format varchar(50), @CFSG_SEQ int, @CFG_DESC varchar(200), @CompanyID int, @Debug bit 
--select @Underlining = 'None', @Bold = 0, @Format = '', @CFSG_SEQ = 1, @CFG_DESC = 'Lot Deposits', @CompanyID = 12, @Debug = 1
set nocount on
print 'In RE_Land_CFA_CI_MF_WEB on ' + db_name()


if not exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ResultsTR'))
CREATE TABLE #ResultsTR(
	id int not null identity(1,1) primary key,	
	--formatting
	Underline varchar(30),
	Bold bit,
	Format varchar(30),
	Sequence int,
	--header
	ProjectID int,
	--row information
	RowDescription varchar(200),	
	AverageSalePrice money,
	ProjectToDate money,
	P1 money,
	P2 money,
	P3 money,
	P4 money,
	P5 money,
	P6 money,
	P7 money,
	P8 money,
	P9 money,
	P10 money,
	P11 money,
	P12 money,
	Balance money,
	Total money)
else
	truncate table #ResultsTR


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ResultsTR_temp'))
drop table #ResultsTR_temp
CREATE TABLE #ResultsTR_temp(
	id int not null identity(1,1) primary key,	
	--formatting
	Underline varchar(30),
	Bold bit,
	Format varchar(30),
	Sequence int,
	--header
	ProjectID int,
	--row information
	RowDescription varchar(200),
	ProjectToDate money,
	P1 money,
	P2 money,
	P3 money,
	P4 money,
	P5 money,
	P6 money,
	P7 money,
	P8 money,
	P9 money,
	P10 money,
	P11 money,
	P12 money,
	Balance money,
	Total money)

if not exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#CFManFeeAndProgramFees'))
CREATE TABLE #CFManFeeAndProgramFees(
	id int not null identity(1,1) primary key,	
	CompanyID int,
	ProjectID int,
	AgreementID int,
	Level1 int,
	Level2 int,
	Level3 int,
	Level4 int,
	Account varchar(21),
	TransType char, --P=Projection, D=Direct Expense
	TransGroup char, --M = Manfees, P = Program fees
	TransDate datetime,
	TransAmount money,
	ProjectName varchar(200))	

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#DriverWEB'))
drop table #DriverWEB
CREATE TABLE #DriverWEB(
	id int not null identity(1,1) primary key,
	DriverType varchar(20),
	DriverID int,
	DriverName varchar(100),
	DriverTR sysname,
	DriverCompany varchar(100),
	DriverCompanyID int)


if @Debug = 1
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Driver'))
	drop table #Driver
	select * 
	into #Driver
	from ##Driver
		
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ReportOptions'))
	drop table #ReportOptions
	select * 
	into #ReportOptions
	from ##ReportOptions	
end

insert #DriverWEB(DriverType, DriverID, DriverName, DriverTR, DriverCompany, DriverCompanyID)
select DriverType, DriverID, DriverName, DriverTR, DriverCompany, DriverCompanyID
from #Driver


declare @AsAtDate datetime, @SystemDate datetime
select @AsAtDate = AsAtDate, @SystemDate = SystemDate from #ReportOptions

exec RE_Land_CF2_BLANK_WEB @Underlining, @Bold, @Format, @CFSG_SEQ, @CFG_DESC, @CFSG_ID, @CompanyID

declare @DB sysname, @ProjCompanyID varchar(20)
declare cur_db_proj cursor for
select distinct map.Project_TR, map.Project_Company_ID
from #DriverWEB d
join AdminProjectMapping map on map.Admin_Pri_ID = d.DriverID and map.Admin_Company_ID = d.DriverCompanyID

open cur_db_proj
fetch cur_db_proj into @DB, @CompanyID
while @@fetch_status=0
begin	
	truncate table #Driver		
	truncate table #CFManFeeAndProgramFees
	truncate table #ResultsTR_temp
	
	insert #Driver(DriverType, DriverID, DriverName, DriverTR, DriverCompany, DriverCompanyID )
	select 'Land Project', Project_Pri_ID, '', @DB, '', @CompanyID
	from AdminProjectMapping 
	where Project_Company_ID = @CompanyID
	
	exec(@DB + '.dbo.RE_Land_CF2_CI_AgreementTransactions ' + @CompanyID + ' update #CFManFeeAndProgramFees set ProjectName = (select companyname from '+@DB+'.dbo.company) + '' ('' +
	(select cast(pri_code as varchar(20)) + '': '' + pri_name from '+@DB+'.dbo.proj_header p where p.pri_id = #CFManFeeAndProgramFees.ProjectID) + '')''')		
	
	insert #ResultsTR_temp(Underline, Bold, Format, Sequence, ProjectID, RowDescription, 
	ProjectToDate, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, Balance, Total) 
	select @Underlining, 0, @Format, @CFSG_SEQ, map.Admin_Pri_ID, d.ProjectName,
	case when TransDate <= @AsAtDate then sum(d.TransAmount) end,
	case when TransDate <= dateadd(month, P1, @AsAtDate) and TransDate > @AsAtDate then sum(d.TransAmount) end,
	case when TransDate <= dateadd(month, P2, @AsAtDate) and TransDate > dateadd(month, P1, @AsAtDate) then sum(d.TransAmount) end,
	case when TransDate <= dateadd(month, P3, @AsAtDate) and TransDate > dateadd(month, P2, @AsAtDate) then sum(d.TransAmount) end,
	case when TransDate <= dateadd(month, P4, @AsAtDate) and TransDate > dateadd(month, P3, @AsAtDate) then sum(d.TransAmount) end,
	case when TransDate <= dateadd(month, P5, @AsAtDate) and TransDate > dateadd(month, P4, @AsAtDate) then sum(d.TransAmount) end,
	case when TransDate <= dateadd(month, P6, @AsAtDate) and TransDate > dateadd(month, P5, @AsAtDate) then sum(d.TransAmount) end,
	case when TransDate <= dateadd(month, P7, @AsAtDate) and TransDate > dateadd(month, P6, @AsAtDate) then sum(d.TransAmount) end,
	case when TransDate <= dateadd(month, P8, @AsAtDate) and TransDate > dateadd(month, P7, @AsAtDate) then sum(d.TransAmount) end,
	case when TransDate <= dateadd(month, P9, @AsAtDate) and TransDate > dateadd(month, P8, @AsAtDate) then sum(d.TransAmount) end,
	case when TransDate <= dateadd(month, P10, @AsAtDate) and TransDate > dateadd(month, P9, @AsAtDate) then sum(d.TransAmount) end,
	case when TransDate <= dateadd(month, P11, @AsAtDate) and TransDate > dateadd(month, P10, @AsAtDate) then sum(d.TransAmount) end,
	case when TransDate <= dateadd(month, P12, @AsAtDate) and TransDate > dateadd(month, P11, @AsAtDate) then sum(d.TransAmount) end,
	case when TransDate >= dateadd(month, P12, @AsAtDate) then sum(d.TransAmount) end,
	sum(d.TransAmount)
	from #CFManFeeAndProgramFees d
	join AdminProjectMapping map on map.Project_Pri_ID = d.ProjectID and map.Project_Company_ID = d.CompanyID
	join #ReportOptions on 1=1
	group by map.Admin_Pri_ID, d.ProjectName, TransDate, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12

	insert #ResultsTR(Underline, Bold, Format, Sequence, ProjectID, RowDescription, ProjectToDate, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, Balance, Total) 
	select Underline, Bold, Format, Sequence, ProjectID, RowDescription, 
	sum(isnull(ProjectToDate,0)), sum(isnull(P1,0)), sum(isnull(P2,0)), sum(isnull(P3,0)), sum(isnull(P4,0)), sum(isnull(P5,0)), sum(isnull(P6,0)), 
	sum(isnull(P7,0)), sum(isnull(P8,0)), sum(isnull(P9,0)), sum(isnull(P10,0)), sum(isnull(P11,0)), sum(isnull(P12,0)), sum(isnull(Balance,0)), 
	sum(isnull(Total,0))
	from #ResultsTR_temp
	group by Underline, Bold, Format, Sequence, ProjectID, RowDescription 		
	
	
						
	fetch cur_db_proj into @DB, @CompanyID
end

close cur_db_proj
deallocate cur_db_proj				

truncate table #Driver
insert #Driver(DriverType, DriverID, DriverName, DriverTR, DriverCompany, DriverCompanyID)
select DriverType, DriverID, DriverName, DriverTR, DriverCompany, DriverCompanyID 
from #DriverWEB

print 'Out RE_Land_CFA_CI_MF_WEB on ' + db_name()


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RE_Land_Projections_Fill_WorkingTable]') and xtype = 'P ')  
 drop Procedure RE_Land_Projections_Fill_WorkingTable
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[RE_Land_Projections_Fill_WorkingTable] @Username varchar(10), @AsAtDate datetime, @SystemDate datetime, @RunDescription varchar(500), @Periods varchar(100) as
--declare @Username varchar(10), @AsAtDate datetime, @SystemDate datetime, @RunDescription varchar(500), @Periods varchar(100)
--select @Username = 'blaine', @AsAtDate = '11/1/2009', @SystemDate  = getdate(), @RunDescription = 'hello world', @Periods = 'First 2 years quarterly, next 4 years annually'
/*
Periods
--------

Monthly
Quarterly
Semi-Annually
Annually
First year quarterly, next 2 years semi-annually and following 4 years annually
First year quarterly, next 8 years annually
First 2 years quarterly, next 4 years annually
*/
delete RE_LandProj_ReportOptions where username = @Username

if @Periods = 'Monthly'
	insert RE_LandProj_ReportOptions(Username, AsAtDate, SystemDate, RunDescription, 
	P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12,
	PDesc1, PDesc2, PDesc3, PDesc4, PDesc5, PDesc6, PDesc7, PDesc8, PDesc9, PDesc10, PDesc11, PDesc12)
	select @Username, @AsAtDate, @SystemDate, @RunDescription,
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
	cast(substring(DATENAME(mm, DateAdd(month, 1, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 1, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 2, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 2, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 4, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 4, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 5, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 5, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 6, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 6, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 7, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 7, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 8, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 8, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 9, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 9, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 10, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 10, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 11, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 11, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 12, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 12, @AsAtDate)), 3, 2) as varchar(20))
	
if @Periods = 'Quarterly'
	insert RE_LandProj_ReportOptions(Username, AsAtDate, SystemDate, RunDescription, 
	P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12,
	PDesc1, PDesc2, PDesc3, PDesc4, PDesc5, PDesc6, PDesc7, PDesc8, PDesc9, PDesc10, PDesc11, PDesc12)
	select @Username, @AsAtDate, @SystemDate, @RunDescription,
	1*3, 2*3, 3*3, 4*3, 5*3, 6*3, 7*3, 8*3, 9*3, 10*3, 11*3, 12*3,
	cast(substring(DATENAME(mm, DateAdd(month, 1*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 1*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 2*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 2*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 3*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 3*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 4*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 4*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 5*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 5*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 6*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 6*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 7*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 7*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 8*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 8*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 9*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 9*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 10*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 10*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 11*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 11*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 12*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 12*3, @AsAtDate)), 3, 2) as varchar(20))
	
if @Periods = 'Semi-Annually'
	insert RE_LandProj_ReportOptions(Username, AsAtDate, SystemDate, RunDescription, 
	P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12,
	PDesc1, PDesc2, PDesc3, PDesc4, PDesc5, PDesc6, PDesc7, PDesc8, PDesc9, PDesc10, PDesc11, PDesc12)
	select @Username, @AsAtDate, @SystemDate, @RunDescription,
	1*6, 2*6, 3*6, 4*6, 5*6, 6*6, 7*6, 8*6, 9*6, 10*6, 11*6, 12*6,
	cast(substring(DATENAME(mm, DateAdd(month, 1*6, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 1*6, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 2*6, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 2*6, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 3*6, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 3*6, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 4*6, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 4*6, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 5*6, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 5*6, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 6*6, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 6*6, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 7*6, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 7*6, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 8*6, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 8*6, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 9*6, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 9*6, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 10*6, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 10*6, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 11*6, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 11*6, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 12*6, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 12*6, @AsAtDate)), 3, 2) as varchar(20))
	

if @Periods = 'Annually'
	insert RE_LandProj_ReportOptions(Username, AsAtDate, SystemDate, RunDescription, 
	P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12,
	PDesc1, PDesc2, PDesc3, PDesc4, PDesc5, PDesc6, PDesc7, PDesc8, PDesc9, PDesc10, PDesc11, PDesc12)
	select @Username, @AsAtDate, @SystemDate, @RunDescription,
	1*12, 2*12, 3*12, 4*12, 5*12, 6*12, 7*12, 8*12, 9*12, 10*12, 11*12, 12*12,
	cast(substring(DATENAME(mm, DateAdd(month, 1*12, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 1*12, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 2*12, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 2*12, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 3*12, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 3*12, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 4*12, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 4*12, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 5*12, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 5*12, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 6*12, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 6*12, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 7*12, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 7*12, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 8*12, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 8*12, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 9*12, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 9*12, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 10*12, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 10*12, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 11*12, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 11*12, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 12*12, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 12*12, @AsAtDate)), 3, 2) as varchar(20))
		
if @Periods = 'First year quarterly, next 2 years semi-annually and following 4 years annually'
	insert RE_LandProj_ReportOptions(Username, AsAtDate, SystemDate, RunDescription, 
	P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12,
	PDesc1, PDesc2, PDesc3, PDesc4, PDesc5, PDesc6, PDesc7, PDesc8, PDesc9, PDesc10, PDesc11, PDesc12)
	select @Username, @AsAtDate, @SystemDate, @RunDescription,
	1*3, 2*3, 3*3, 4*3, 18, 24, 30, 36, 48, 60, 72, 84,
	cast(substring(DATENAME(mm, DateAdd(month, 1*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 1*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 2*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 2*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 3*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 3*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 4*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 4*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 18, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 18, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 24, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 24, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 30, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 30, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 36, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 36, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 48, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 48, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 60, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 60, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 72, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 72, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 84, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 84, @AsAtDate)), 3, 2) as varchar(20))

if @Periods = 'First year quarterly, next 8 years annually'
	insert RE_LandProj_ReportOptions(Username, AsAtDate, SystemDate, RunDescription, 
	P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12,
	PDesc1, PDesc2, PDesc3, PDesc4, PDesc5, PDesc6, PDesc7, PDesc8, PDesc9, PDesc10, PDesc11, PDesc12)
	select @Username, @AsAtDate, @SystemDate, @RunDescription,
	1*3, 2*3, 3*3, 4*3, 24, 36, 48, 60, 72, 84, 96, 108,
	cast(substring(DATENAME(mm, DateAdd(month, 1*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 1*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 2*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 2*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 3*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 3*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 4*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 4*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 24, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 24, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 36, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 36, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 48, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 48, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 60, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 60, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 72, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 72, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 84, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 84, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 96, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 96, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 108, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 108, @AsAtDate)), 3, 2) as varchar(20))

if @Periods = 'First 2 years quarterly, next 4 years annually'
	insert RE_LandProj_ReportOptions(Username, AsAtDate, SystemDate, RunDescription, 
	P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12,
	PDesc1, PDesc2, PDesc3, PDesc4, PDesc5, PDesc6, PDesc7, PDesc8, PDesc9, PDesc10, PDesc11, PDesc12)
	select @Username, @AsAtDate, @SystemDate, @RunDescription,
	1*3, 2*3, 3*3, 4*3, 5*3, 6*3, 7*3, 8*3, 36, 48, 60, 72,
	cast(substring(DATENAME(mm, DateAdd(month, 1*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 1*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 2*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 2*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 3*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 3*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 4*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 4*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 5*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 5*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 6*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 6*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 7*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 7*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 8*3, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 8*3, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 36, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 36, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 48, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 48, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 60, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 60, @AsAtDate)), 3, 2) as varchar(20)),
	cast(substring(DATENAME(mm, DateAdd(month, 72, @AsAtDate)), 1, 3) as varchar(20)) + '-' + cast(substring(DATENAME(YEAR, DateAdd(month, 72, @AsAtDate)), 3, 2) as varchar(20))

	

 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RE_Land_Projections_FromCache]') and xtype = 'P ')  
 drop Procedure RE_Land_Projections_FromCache
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc RE_Land_Projections_FromCache @TempTableName sysname, @CacheDate datetime, @User varchar(10) as

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RE_Land_Projections_Report]') and xtype = 'P ')  
 drop Procedure RE_Land_Projections_Report
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[RE_Land_Projections_Report] @Username varchar(10), @ReportID int, @RunType varchar(20), @CacheDate datetime, @Function varchar(50) = 'Report', @Debug bit = 0  as
--declare @Username varchar(10), @ReportID int, @RunType varchar(20), @CacheDate datetime, @Function varchar(50), @Debug bit
--select @Username = 'ken ingram', @ReportID = 1, @RunType = 'Real Time', @CacheDate = null, @Function = 'Distribution', @Debug = 1

/*
	Note, debug will copy the # table results into ## tables 
	Each proc also has a debug variable that, when set to true, will load data from the ## table
	
	@Function allows you to:
		1. 'Report' = just run the report
		2. 'Management Fees' = update the management fees projections and update the budget to be actuals + manfees projections
		3. 'Interest Costs' = update the interest cost projections and update the budget to be actuals + interest cost projections
		4. 'Update All' = 2 & 3 above
		5. 'CashCall' / 'Distribution' = just run the report but save regular (non-consolidated) to a working table to use to support the consolidated total
		
*/
set nocount on

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ReportOptions'))
drop table #ReportOptions
CREATE TABLE #ReportOptions(
	AsAtDate datetime,
	SystemDate datetime,
	RunDescription varchar(500),
	Consolidated bit,
	P1 int,
	P2 int,
	P3 int,
	P4 int,
	P5 int,
	P6 int,
	P7 int,
	P8 int,
	P9 int,
	P10 int,
	P11 int,
	P12 int,
	PDesc1 varchar(50),
	PDesc2 varchar(50),
	PDesc3 varchar(50),
	PDesc4 varchar(50),
	PDesc5 varchar(50),
	PDesc6 varchar(50),
	PDesc7 varchar(50),
	PDesc8 varchar(50),
	PDesc9 varchar(50),
	PDesc10 varchar(50),
	PDesc11 varchar(50),
	PDesc12 varchar(50))
	
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#RemoveProjIDs'))
drop table #RemoveProjIDs
create table #RemoveProjIDs(
	ProjectID int)


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Sums'))
drop table #Sums
CREATE TABLE #Sums(
	id int not null identity(1,1) primary key,
	CompanyID int,	
	DriverType varchar(20),
	DriverID int,
	DriverTR sysname,	
	CashAffect int, ---1 or 1
	Amount money,
	MonthsAfterSystem int,
	Financing_ID int not null default -1,--months past the system date (for calculating draws, repayments & interest costs
	Lot_Class_ID int not null default -1,
	Lot_Sub_Class_ID int not null default -1,
	RepayApplicable char,
	CFSG_ID int)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Results'))
drop table #Results
CREATE TABLE #Results(
	id int not null identity(1,1) primary key,	
	CFG_ID int,
	CFG_SEQ int,
	CFSG_ID int,
	CFSG_SEQ int,
	LoadToProjection bit not null default 0,
	Totaling varchar(30),
	--formatting
	Underline varchar(30),
	Bold bit,
	Format varchar(30),
	--header
	Report varchar(100),
	Company varchar(100),
	CompanyID int,
	Project varchar(100),
	ProjectID int,
	JVOwnerAndPercentage varchar(100),
	RunDescription varchar(500),		
	RunDate datetime,
	AsAtDate datetime,
	CalculationDate datetime,		
	--row information
	RowDescription varchar(200),
	AverageSalePrice money,
	ProjectToDate money,
	P1 money,
	P2 money,
	P3 money,
	P4 money,
	P5 money,
	P6 money,
	P7 money,
	P8 money,
	P9 money,
	P10 money,
	P11 money,
	P12 money,
	Balance money,
	Total money,		
	D1 varchar(100),
	D2 varchar(100),
	D3 varchar(100),
	D4 varchar(100),
	D5 varchar(100),
	D6 varchar(100),
	D7 varchar(100),
	D8 varchar(100),
	D9 varchar(100),
	D10 varchar(100),
	D11 varchar(100),
	D12 varchar(100))
	

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ConsoldatedResults'))
drop table #ConsoldatedResults
CREATE TABLE #ConsoldatedResults(
	id int not null identity(1,1) primary key,	
	CFG_ID int,
	CFG_SEQ int,
	CFSG_ID int,
	CFSG_SEQ int,
	LoadToProjection bit not null default 0,
	Totaling varchar(30),
	--formatting
	Underline varchar(30),
	Bold bit,
	Format varchar(30),
	--header
	Report varchar(100),
	Company varchar(100),
	CompanyID int,
	Project varchar(100),
	ProjectID int,
	JVOwnerAndPercentage varchar(100),
	RunDescription varchar(500),		
	RunDate datetime,
	AsAtDate datetime,
	CalculationDate datetime,		
	--row information
	RowDescription varchar(200),
	AverageSalePrice money,
	ProjectToDate money,
	P1 money,
	P2 money,
	P3 money,
	P4 money,
	P5 money,
	P6 money,
	P7 money,
	P8 money,
	P9 money,
	P10 money,
	P11 money,
	P12 money,
	Balance money,
	Total money,		
	D1 varchar(100),
	D2 varchar(100),
	D3 varchar(100),
	D4 varchar(100),
	D5 varchar(100),
	D6 varchar(100),
	D7 varchar(100),
	D8 varchar(100),
	D9 varchar(100),
	D10 varchar(100),
	D11 varchar(100),
	D12 varchar(100))


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Driver'))
drop table #Driver
CREATE TABLE #Driver(
	id int not null identity(1,1) primary key,
	DriverType varchar(20),
	DriverID int,
	DriverName varchar(100),
	DriverTR sysname,
	DriverCompany varchar(100),
	DriverCompanyID int)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ResultsTR'))
drop table #ResultsTR
CREATE TABLE #ResultsTR(
	id int not null identity(1,1) primary key,	
	--formatting
	Underline varchar(30),
	Bold bit,
	Format varchar(30),
	Sequence int,
	--header
	ProjectID int,
	--row information
	RowDescription varchar(200),	
	AverageSalePrice money,
	ProjectToDate money,
	P1 money,
	P2 money,
	P3 money,
	P4 money,
	P5 money,
	P6 money,
	P7 money,
	P8 money,
	P9 money,
	P10 money,
	P11 money,
	P12 money,
	Balance money,
	Total money)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#CFInvoices'))
drop TABLE #CFInvoices
CREATE TABLE #CFInvoices(
	id int not null identity(1,1) primary key,	
	CompanyID int,
	invoice_id int,
	agreement_id int,
	Total money,
	Applied money,
	InvoiceDate datetime)


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#CFLotAgreements'))
drop TABLE #CFLotAgreements
CREATE TABLE #CFLotAgreements(
	id int not null identity(1,1) primary key,	
	CompanyID int,
	ProjectID int,
	AgreementId int,
	AgreementType char, --P=Projection, A=Actual
	AgreementStatus int, --determine if a projection contribution is still possible
	EffectiveDate datetime,
	SaleDate datetime,	
	Lot_Class_ID int not null default -1,
	Lot_Sub_Class_ID int not null default -1,
	SoldAmount money)
	
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#CFLotAgreementTransactions'))
drop TABLE #CFLotAgreementTransactions
CREATE TABLE #CFLotAgreementTransactions(
	id int not null identity(1,1) primary key,	
	A_ID int,
	CompanyID int,
	ProjectID int,
	AgreementId int,
	TransType char, --P=Projection, A=Actual
	TransGroup char, --D=Deposit or Down Payment, C=Closing Amount, I=Interest
	TransDate datetime,
	TransAmount money,
	Invoice_ID int,
	SO_TYPE_CODE varchar(50),
	Lot_Class_ID int not null default -1,
	Lot_Sub_Class_ID int not null default -1)	

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ISLotAgreementTransactions'))
drop table #ISLotAgreementTransactions
CREATE TABLE #ISLotAgreementTransactions(
	id int not null identity(1,1) primary key,	
	A_ID int,
	CompanyID int,
	ProjectID int,
	AgreementId int,
	TransType char, --P=Projection, A=Actual
	TransGroup char, --D=Deposit or Down Payment, C=Closing Amount, I=Interest
	TransDate datetime,
	TransAmount money,
	Invoice_ID int,
	SO_TYPE_CODE varchar(50),	
	Lot_Class_ID int not null default -1,
	Lot_Sub_Class_ID int not null default -1)	

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#CFManFeeAndProgramFees'))
drop TABLE #CFManFeeAndProgramFees
CREATE TABLE #CFManFeeAndProgramFees(
	id int not null identity(1,1) primary key,	
	CompanyID int,
	ProjectID int,
	AgreementID int,
	Account varchar(21),
	Level1 int,
	Level2 int,
	Level3 int,
	Level4 int,
	TransType char, --P=Projection, D=Direct Expense
	TransGroup char, --M = Manfees, P = Program fees
	TransDate datetime,
	TransAmount money,
	ProjectName varchar(200))	

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Draws'))
DROP TABLE #Draws
CREATE TABLE #Draws(
	id int not null identity(1,1) primary key,
	CompanyID int,	
	DriverType varchar(20),
	DriverID int,
	DriverTR sysname,	
	CashAffect int, ---1 or 1
	Amount money,
	MonthsAfterSystem int,
	Financing_ID int not null default -1,--months past the system date (for calculating draws, repayments & interest costs
	Lot_Class_ID int not null default -1,
	Lot_Sub_Class_ID int not null default -1)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Repays'))
DROP TABLE #Repays
CREATE TABLE #Repays(
	id int not null identity(1,1) primary key,
	CompanyID int,	
	DriverType varchar(20),
	DriverID int,
	DriverTR sysname,	
	CashAffect int, ---1 or 1
	Amount money,
	MonthsAfterSystem int,
	Financing_ID int not null default -1,--months past the system date (for calculating draws, repayments & interest costs
	Lot_Class_ID int not null default -1,
	Lot_Sub_Class_ID int not null default -1)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Interest'))
DROP TABLE #Interest
CREATE TABLE #Interest(
	id int not null identity(1,1) primary key,
	CompanyID int,	
	DriverType varchar(20),
	DriverID int,
	DriverTR sysname,	
	CashAffect int, ---1 or 1
	Amount money,
	MonthsAfterSystem int,
	Financing_ID int not null default -1,--months past the system date (for calculating draws, repayments & interest costs
	Lot_Class_ID int not null default -1,
	Lot_Sub_Class_ID int not null default -1)


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ShareOwners'))
drop table #ShareOwners
CREATE TABLE #ShareOwners(
	id int identity(1,1) not null,
	TR sysname not null default db_name(),
	Pri_id int,
	Share_ID int,
	ShareOwners_ID int,
	Financing_ID int,
	Lender_ID int,
	Precedence int,
	FinType varchar(30),--Lender, LendingShareOwner, ShareOwner
	Name varchar(200),
	Share_PCT money,
	DrawAccount varchar(21),
	FullDrawAccount varchar(21),
	RepayAccount varchar(21),
	FullRepayAccount varchar(21),
	ActualDraws money,
	ActualRepays money,
	DrawsToDate money,
	RepaysToDate money,
	LoanMax money,
	LoanType int,
	FirstDraw datetime,
	Expiry datetime,
	AllowableDrawPercentage money,
	InterestRate money,
	RepayType char,
	PercentageOfReceipts money,
	GLSubCode varchar(50))

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Forecast'))
drop table #Forecast
CREATE TABLE #Forecast(
	id int not null identity(1,1) primary key,
	Pri_ID int,
	Amount money,
	Date datetime,
	ForcastType char)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#JV'))
drop table #JV

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Type'))
drop table #Type

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Group'))
drop table #Group

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#SubGroup'))
drop table #SubGroup

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Accounts'))
drop table #Accounts

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#CostCodes'))
drop table #CostCodes

if @Function != 'Report'
	select @ReportID = t.CFT_ID from RE_CashFlow_Type t where DefaultCashFlow = 1

select *
into #Type
from RE_CashFlow_Type t
where t.CFT_ID = @ReportID

select *
into #Group 
from RE_CashFlow_Group g
where g.CFT_ID = @ReportID 

select *
into #SubGroup
from RE_CashFlow_SubGroup s
where s.CFG_ID in (select g.CFG_ID from #Group g)

select *
into #Accounts
from RE_CashFlow_GLAccts a
where a.CFSG_ID in (select s.CFSG_ID from #SubGroup s)

select *
into #CostCodes
from RE_CashFlow_CostCodes c
where c.CFSG_ID in (select s.CFSG_ID from #SubGroup s)

--TESTING CODE
/*
if not exists (select * from working_RECF_Driver d where d.username = 'blaine' and CompanyID = 14) 
and @Username = 'Blaine'
begin
	insert working_RECF_Driver (TR, Company, CompanyID, Pri_ID, Pri_Name, Pri_Code, username)
	select 'TR_RGCF_2', 'Dome Co. #2', 14, Pri_ID, Pri_Name, Pri_Code, username
	from working_RECF_Driver where username = 'blaine'	
end
update RE_LandProj_ReportOptions set consolidated = 1 where Username = 'Blaine'
*/
--TESTING CODE
			
insert #Driver(DriverType, DriverID, DriverName, DriverTR, DriverCompany, DriverCompanyID)
select 'Land Project', d.Pri_id, d.Pri_Name, d.TR, d.Company, d.CompanyID
from working_RECF_Driver d
where d.username = @Username


select *
into #JV
from working_RECF_JVS j
where j.username = @Username

declare @Consolidated bit, @RunDate datetime = getdate(), @Report varchar(100), @SystemDate datetime, @AsAtDate datetime

select @Report = CFT_DESC from RE_CashFlow_Type t where t.CFT_ID = @ReportID

insert #ReportOptions(AsAtDate, SystemDate, RunDescription, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12,
	PDesc1, PDesc2, PDesc3, PDesc4, PDesc5, PDesc6, PDesc7, PDesc8, PDesc9, PDesc10, PDesc11, PDesc12, Consolidated)
select AsAtDate, SystemDate, RunDescription, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12,
	PDesc1, PDesc2, PDesc3, PDesc4, PDesc5, PDesc6, PDesc7, PDesc8, PDesc9, PDesc10, PDesc11, PDesc12, Consolidated
from RE_LandProj_ReportOptions where username = @username

select @Consolidated = Consolidated, @SystemDate = SystemDate, @AsAtDate = AsAtDate from #ReportOptions

--declare @x int = 0
--while @x < DATEDIFF(month, @SystemDate, ())

if @RunType = 'Real Time' or @RunType = 'Do Cache'
begin

	declare @Gid int, @Sgid int, @Gidseq int, @Sgidseq int, @Proc varchar(max), @Totaling varchar(50)

	declare cur_group cursor for
	select cfg_id, CFG_SEQ
	from #Group
	order by CFG_SEQ

	open cur_group
	fetch cur_group into @Gid, @Gidseq 
	while @@fetch_status=0
	begin		
		declare cur_subgroup cursor for
		select cfsg_id, 
		isnull(cfsg_sql,'') + '''' +  Underlining + ''', ' + cast(Bold as varchar(20)) + ', ''' + '' + ''', ' + cast(CFSG_SEQ as varchar(30)) + ', ''' + isnull(CFG_DESC,'') + ''', ' + cast(cfsg_id as varchar(30)), 
		Totaling, CFSG_SEQ
		from #SubGroup
		where cfg_id = @Gid
		order by CFSG_SEQ

		open cur_subgroup
		fetch cur_subgroup into @Sgid, @Proc, @Totaling, @Sgidseq
		while @@fetch_status=0
		begin
			if ISNULL(@Proc,'') != '' --and substring(@Proc, 1, 15) = 'RE_Land_CF2_CI_'		
			begin
				declare @DB sysname, @CompanyID varchar(20)
				declare cur_db cursor for
				select distinct DriverTR, DriverCompanyID
				from #Driver
				
				open cur_db
				fetch cur_db into @DB, @CompanyID
				while @@fetch_status=0
				begin	
					truncate table #ResultsTR					
					print @Proc
					
					begin try
						exec(@DB + '.dbo.' + @Proc + ', ' + @CompanyID)
					end try
					begin catch
						print @@Error
					end catch
						
					insert #Results(CFG_ID, CFG_SEQ, CFSG_ID, CFSG_SEQ, Report, Totaling, Underline, Bold, Format, Company, CompanyID, Project, ProjectID, JVOwnerAndPercentage, 
					RunDescription, RunDate, AsAtDate, CalculationDate, RowDescription, AverageSalePrice,
					ProjectToDate, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, Balance, Total)
					select @Gid, @Gidseq, @Sgid, @Sgidseq, @Report, @Totaling, r.Underline, r.Bold, r.Format, d.DriverCompany, d.DriverCompanyID, d.DriverName, ProjectID, '', 
					o.RunDescription, o.SystemDate, o.AsAtDate, @RunDate, RowDescription, AverageSalePrice,
					ProjectToDate, r.P1, r.P2, r.P3, r.P4, r.P5, r.P6, r.P7, r.P8, r.P9, r.P10, r.P11, r.P12, r.Balance, r.Total
					from #ResultsTR r
					join #Driver d on d.DriverTR = @DB and DriverID = r.ProjectID
					join #ReportOptions o on 1=1
					where r.Sequence != -1--insert
					
					if exists (select * from #ResultsTR tr where tr.Sequence = -1)--update
					begin
						--update if sequence = -1 (financing interest)
						update r
						set ProjectToDate = tr.ProjectToDate, P1 = tr.P1, P2 = tr.P2, P3 = tr.P3, P4 = tr.P4, P5 = tr.P5, P6 = tr.P6, 
						P7 = tr.P7, P8 = tr.P8, P9 = tr.P9, P10 = tr.P10, P11 = tr.P11, P12 = tr.P12, Balance = tr.Balance, Total = tr.Total
						from #Results r
						join #ResultsTR tr on r.ProjectID = tr.ProjectID and r.CompanyID = CompanyID
						join RE_CashFlow_SubGroup sg on sg.CFG_CODE = tr.RowDescription and r.CFSG_ID = sg.CFSG_ID
						where tr.Sequence = -1--update				
						
						
						exec(@DB + '.dbo.RE_Land_CF2_Total_Update ''CO'',  ''CO-NETCASH'', ' + @CompanyID)
						exec(@DB + '.dbo.RE_Land_CF2_NCBPF_UPDATE ''NCBPF'', ' + @CompanyID)
					end
				
										
					fetch cur_db into @DB, @CompanyID
				end

				close cur_db
				deallocate cur_db				
			end
			fetch cur_subgroup into @Sgid, @Proc, @Totaling, @Sgidseq
		end

		close cur_subgroup
		deallocate cur_subgroup

		fetch cur_group into  @Gid, @Gidseq 
	end

	close cur_group
	deallocate cur_group	

	if @RunType = 'Do Cache'
	begin--save results to a hard table for later retrieval
		exec RE_Land_Projections_ToCache '#Results', @CacheDate, @Username
	end
end
else
begin--retrieve from a previous cache
	exec RE_Land_Projections_FromCache '#Results', @CacheDate, @Username
end

update #Results set
D1 = PDesc1, D2 = PDesc2, D3 = PDesc3, D4 = PDesc4, D5 = PDesc5, D6 = PDesc6, D7 = PDesc7, D8 = PDesc8, D9 = PDesc9, D10 = PDesc10, D11 = PDesc11, D12 = PDesc12
FROM #ReportOptions


if (@RunType = 'Real Time' or @RunType = 'Read Cache') and (@Function = 'Report' or @Function = 'CashCall' or @Function = 'Distribution')
begin
	if @Consolidated = 0
		select * from #Results order by CFG_SEQ, CFSG_SEQ
	else	
	begin	
		if @Function = 'CashCall' or @Function = 'Distribution'
		begin
			delete working_CashcallDisbursement where username = @username
			insert working_CashcallDisbursement(CallType, username, CFG_ID, CFG_SEQ, CFSG_ID, CFSG_SEQ, LoadToProjection, Totaling, 
			Underline, Bold, [Format], Report, Company, CompanyID, Project, ProjectID, JVOwnerAndPercentage, RunDescription, RunDate, AsAtDate, CalculationDate,
			RowDescription, AverageSalePrice, ProjectToDate, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, Balance, Total, 
			D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12)
			select @Function, @username, CFG_ID, CFG_SEQ, CFSG_ID, CFSG_SEQ, LoadToProjection, Totaling, 
			Underline, Bold, [Format], Report, Company, CompanyID, Project, ProjectID, JVOwnerAndPercentage, RunDescription, RunDate, AsAtDate, CalculationDate,
			RowDescription, AverageSalePrice, ProjectToDate, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, Balance, Total, 
			D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12
			from #Results
			
			if @Function = 'CashCall'
			begin
				--if cashcall, remove positive valued projects
				insert #RemoveProjIDs
				select ProjectID from #Results where isnull(P1,0) >= 0 and RowDescription = 'Cumulative Cash Position'--use asat date as period to request cashcall
			end
			else
			begin
				--if disbursment, remove negative valued projects
				insert #RemoveProjIDs
				select ProjectID from #Results where isnull(ProjectToDate,0) <= 0 and RowDescription = 'Cumulative Cash Position'--use actuals only for distribution
			end
			delete #Results where ProjectID in (select ProjectID from #RemoveProjIDs)
		end
		
		insert #ConsoldatedResults(CFG_ID, CFG_SEQ, CFSG_ID, CFSG_SEQ, LoadToProjection, Totaling, Underline, Bold, Format, Report, Company, CompanyID, Project, ProjectID,
		JVOwnerAndPercentage, RunDescription, RunDate, AsAtDate, CalculationDate, RowDescription, AverageSalePrice, ProjectToDate, 
		P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, Balance, Total,
		D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12)
		select CFG_ID, CFG_SEQ, CFSG_ID, CFSG_SEQ, LoadToProjection, Totaling, Underline, Bold, Format, Report, 'Consolidated Inter-Company', -1, '-1', -1,
		JVOwnerAndPercentage, RunDescription, RunDate, AsAtDate, CalculationDate, RowDescription, AverageSalePrice, 
		sum(ProjectToDate), sum(P1), sum(P2), sum(P3), sum(P4), sum(P5), sum(P6), sum(P7), sum(P8), sum(P9), sum(P10), sum(P11), sum(P12), sum(Balance), sum(Total),
		D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12
		from #Results 
		group by CFG_ID, CFG_SEQ, CFSG_ID, CFSG_SEQ, LoadToProjection, Totaling, Underline, Bold, Format, Report, 
		JVOwnerAndPercentage, RunDescription, RunDate, AsAtDate, CalculationDate, RowDescription, AverageSalePrice, 
		D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12

		
		truncate table #Results
		
		insert #Results(CFG_ID, CFG_SEQ, CFSG_ID, CFSG_SEQ, LoadToProjection, Totaling, Underline, Bold, Format, Report, Company, CompanyID, Project, ProjectID,
		JVOwnerAndPercentage, RunDescription, RunDate, AsAtDate, CalculationDate, RowDescription, AverageSalePrice, ProjectToDate, 
		P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, Balance, Total,
		D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12)
		select CFG_ID, CFG_SEQ, CFSG_ID, CFSG_SEQ, LoadToProjection, Totaling, Underline, Bold, Format, Report, Company, CompanyID, Project, ProjectID,
		JVOwnerAndPercentage, RunDescription, RunDate, AsAtDate, CalculationDate, RowDescription, AverageSalePrice, ProjectToDate, 
		P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, Balance, Total,
		D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12
		from #ConsoldatedResults
		
		select * from #Results
		order by CFG_SEQ, CFSG_SEQ
	end
end

if @Function != 'Report'
begin
	declare cur_db_function cursor for
	select distinct DriverTR, DriverCompanyID
	from #Driver
	
	open cur_db_function
	fetch cur_db_function into @DB, @CompanyID
	while @@fetch_status=0
	begin			
		truncate table #Forecast
					
		if @Function = 'Management Fees' or @Function = 'Update All'	
		begin
			insert #Forecast (Pri_ID, Amount, Date, ForcastType)
			select f.ProjectID, sum(f.TransAmount), f.TransDate, 'M'
			from #CFManFeeAndProgramFees f
			where f.TransType = 'P' and f.TransGroup = 'M'
			and f.CompanyID = @CompanyID and isnull(f.Level1,-1) != -1
			group by f.ProjectID, f.TransDate
		end
		if @Function = 'Interest Costs' or @Function = 'Update All'	
		begin
			insert #Forecast (Pri_ID, Amount, Date, ForcastType)
			select i.DriverID, sum(i.Amount), dateAdd(month, i.MonthsAfterSystem, @SystemDate), 'I'
			from #Interest i
			where i.CompanyID = @CompanyID
			group by i.DriverID, dateAdd(month, i.MonthsAfterSystem, @SystemDate)
		end	
		
		--select * from #Forecast order by ForcastType, Date
		exec(@DB + '.dbo.RE_LD_CF_UpdateProjections ')
									
		fetch cur_db_function into @DB, @CompanyID
	end

	close cur_db_function
	deallocate cur_db_function				
end

if @Debug = 1
begin	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..##Forecast'))
	drop table ##Forecast
	select * 
	into ##Forecast
	from #Forecast
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..##Driver'))
	drop table ##Driver
	select * 
	into ##Driver
	from #Driver

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..##JV'))
	drop table ##JV
	select * 
	into ##JV
	from #JV

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..##Type'))
	drop table ##Type
	select * 
	into ##Type
	from #Type

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..##Group'))
	drop table ##Group
	select * 
	into ##Group
	from #Group

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..##SubGroup'))
	drop table ##SubGroup
	select * 
	into ##SubGroup
	from #SubGroup

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..##Accounts'))
	drop table ##Accounts
	select * 
	into ##Accounts
	from #Accounts

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..##CostCodes'))
	drop table ##CostCodes
	select * 
	into ##CostCodes
	from #CostCodes
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..##ReportOptions'))
	drop table ##ReportOptions
	select * 
	into ##ReportOptions
	from #ReportOptions	
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..##CFManFeeAndProgramFees'))
	drop table ##CFManFeeAndProgramFees
	select * 
	into ##CFManFeeAndProgramFees
	from #CFManFeeAndProgramFees
		
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..##Sums'))
	drop table ##Sums
	select * 
	into ##Sums
	from #Sums	
		
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..##CFLotAgreementTransactions'))
	drop table ##CFLotAgreementTransactions
	select * 
	into ##CFLotAgreementTransactions
	from #CFLotAgreementTransactions
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..##CFLotAgreements'))
	drop table ##CFLotAgreements
	select * 
	into ##CFLotAgreements
	from #CFLotAgreements
end	
 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RE_Land_Projections_ToCache]') and xtype = 'P ')  
 drop Procedure RE_Land_Projections_ToCache
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc RE_Land_Projections_ToCache @TempTableName sysname, @CacheDate datetime, @User varchar(10) as

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Reassign_Communication_Fill]') and xtype = 'P ')  
 drop Procedure Reassign_Communication_Fill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc [dbo].[Reassign_Communication_Fill](@username varchar(500),@ContactID int)
as
begin
--declare @username varchar(500) = 'DevGreg'
--exec Reassign_Communication_Fill @username,86


delete working_Communication_Contact_Reassign where username = @username

insert into working_Communication_Contact_Reassign(
username,Comm_DateTime,Comm_Subject,TopicalArea,Comm_Type,Comm_Group,ContactKnownAs,NewContactID,SourceTable,SourceTableID)
Select @username,ch.DateCreated,ch.Subject,ci.Name,ct.ContactType,ctg.ContactTypeGroup,c.KnownAs,null,'ContactHistory',ch.ID
	From ContactHistory ch
	Inner Join Contact c on c.id = ch.ContactID
	Inner Join ContactType ct on ch.ContactType_ID = ct.id
	Inner Join ContactTypeGroup ctg on ct.ContactGroupID = ctg.id  /**/
	left outer join ContextItem ci on ci.ID=ch.ContextItemId
	Where ContactOwnerID = @ContactID


insert into working_Communication_Contact_Reassign(
username,Comm_DateTime,Comm_Subject,TopicalArea,Comm_Type,Comm_Group,ContactKnownAs,NewContactID,SourceTable,SourceTableID)
Select @username,N.DateCreated,cast(n.Content as varchar(500)),ci.Name,'Note' [Type], 'Note' [Group],c.KnownAs,null,'Notes',n.ID
	From Notes n
	join Relations r on ItemID = n.id and r.ItemType = 'Notes'
	join Contact c on c.id = r.TargetID
	left outer join ContextItem ci on ci.ID=n.ContextItemID
	where n.Owner_ID = @ContactID


end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Reassign_Communication_Finish]') and xtype = 'P ')  
 drop Procedure Reassign_Communication_Finish
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc Reassign_Communication_Finish(@username varchar(500))
as
begin
--declare @username varchar(500) = 'DevGreg'
--exec Reassign_Communication_Finish @username


update ContactHistory set ContactOwnerID = w.NewContactID
from ContactHistory h
join working_Communication_Contact_Reassign w on w.username= @username and w.SourceTable = 'ContactHistory' and w.SourceTableID = h.ID
where w.NewContactID is not null

update Notes set Owner_ID = w.NewContactID
from Notes h
join working_Communication_Contact_Reassign w on w.username= @username and w.SourceTable = 'Notes' and w.SourceTableID = h.ID
where w.NewContactID is not null


end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Report_Company_Logo]') and xtype = 'P ')  
 drop Procedure Report_Company_Logo
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 





CREATE proc Report_Company_Logo( @tr_db varchar(100))
as
begin


declare @sql varchar(8000)


set @sql = 'select Logo_Description,Directory,Size,Logo_Image from '+@tr_db+'..report_logo'

exec(@sql)

end






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ReportLauncher_ResolveDateOrPeriodYear]') and xtype = 'P ')  
 drop Procedure ReportLauncher_ResolveDateOrPeriodYear
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[ReportLauncher_ResolveDateOrPeriodYear] @Type varchar(100), @TR sysname as
--declare @Type varchar(100), @TR sysname select @Tr = 'TR_FOUR_X_DEV_V11_DEV', @Type = 'This Year'

declare @ResultDate datetime = null, @ResultPeriod int = null, @ResultYear int = null

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#CurrentPeriod'))
drop table #CurrentPeriod
CREATE TABLE #CurrentPeriod(
       aPeriod int,
       aYear int)

declare @Start datetime = DATEADD(D, 0, DATEDIFF(D, 0, GETDATE()))--get rid of time portion



--date calculation
if @Type = 'Today'
       select @ResultDate = @Start
else if @Type = 'Yesterday'
       select @ResultDate = DATEADD(d,-1,@Start)
else if @Type = 'Monday, This Week'
       SELECT @ResultDate = DATEADD(wk, DATEDIFF(wk,0,@Start), 0)    
else if @Type = 'Monday, Last Week'
       SELECT @ResultDate = DATEADD(wk, -1, DATEADD(wk, DATEDIFF(wk,0,@Start), 0))
else if @Type = 'Start Of This Month'
       select @ResultDate = DATEADD(MONTH, DATEDIFF(MONTH, 0, @Start), 0)
else if @Type = 'End Of Last Month'
       SELECT @ResultDate = DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,dateadd(month, -1, @Start))+1,0))
else if @Type = 'Today Minus One Month'
       select @ResultDate = dateadd(month,-1,@Start)
else if @Type = 'Today Minus Two Months'
       select @ResultDate = dateadd(month,-2,@Start)
else if @Type = 'Today Minus Three Months'
       select @ResultDate = dateadd(month,-3,@Start)
else if @Type = 'Today Minus One Year'
       select @ResultDate = dateadd(year,-1,@Start)
else if @Type = 'Today Minus Two Years'
       select @ResultDate = dateadd(year,-2,@Start)
else if @Type = 'Start Of Last Month'
       select @ResultDate = DATEADD(MONTH, DATEDIFF(MONTH, 0, @start) - 1, 0)
else if @Type = 'Start Of Two Months ago'
       select @ResultDate = dateadd(month, -1, DATEADD(MONTH, DATEDIFF(MONTH, 0, @start) - 1, 0))
else if @Type = 'Start Of Three Months ago'
       select @ResultDate = dateadd(month, -2, DATEADD(MONTH, DATEDIFF(MONTH, 0, @start) - 1, 0))
else if @Type = 'Start Of This Year'
       select @ResultDate = DATEADD(YEAR, DATEDIFF(YEAR, 0, @start), 0)
else if @Type = 'Start Of Last Year'
       select @ResultDate = dateadd(year,-1,DATEADD(YEAR, DATEDIFF(YEAR, 0, @start), 0))
else if @Type = 'End Of Last Year'
       select @ResultDate = DATEADD(MILLISECOND, -3, DATEADD(YEAR, DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0))
       
else --must be a period or year calculation
begin
       declare @StartPeriod int, @StartYear int, @SQL varchar(max)
          select @Start = DATEADD(month, ((YEAR(GETDATE()) - 1900) * 12) + MONTH(getdate()), -1)--set to last day of the month
       
       select @SQL = ' 
          
insert #CurrentPeriod(aPeriod, aYear)
select Current_Period, Current_Year
from '+@TR+'..GL_SETUP
/*
deprecated in favour of GL setup storage of current_year & current_period
declare @Year int, @Period int
select @Year = max(GL_Year)
from '+@TR+'..gl_periods where End_Date <= ''' + cast(@Start as varchar(50)) + '''

insert #CurrentPeriod(aPeriod, aYear)
select min(Period), @Year
from '+@TR+'..gl_periods where End_Date >= ''' + cast(@Start as varchar(50)) + '''
and GL_YEAR = @Year
*/'

       exec(@SQL)
       select @StartPeriod = aPeriod, @StartYear = aYear from #CurrentPeriod
       
       --period calculations             
       if @Type = 'This Period'
              select @ResultPeriod = @StartPeriod
       else if @Type = 'Last Period'
              select @ResultPeriod = case when @StartPeriod > 1 then @StartPeriod - 1 else 12 end
       else if @Type = 'First Period, This Quarter'
              select @ResultPeriod = case when @StartPeriod between 1 and 3 then 1
              when @StartPeriod between 4 and 6 then 4
              when @StartPeriod between 7 and 9 then 7
              when @StartPeriod between 10 and 12 then 10 end        
       else if @Type = 'First Period, Last Quarter'
              select @ResultPeriod = case when @StartPeriod between 1 and 3 then 10
              when @StartPeriod between 4 and 6 then 1
              when @StartPeriod between 7 and 9 then 4
              when @StartPeriod between 10 and 12 then 7 end         
       else if @Type = 'This Period, Last Quarter'
        select @ResultPeriod = case when @StartPeriod > 3 then @StartPeriod - 3 
              when @StartPeriod = 3 then 12 
              when @StartPeriod = 2 then 11 
              when @StartPeriod = 1 then 10 end        
       else if @Type = 'Last Period, Last Quarter'
              select @ResultPeriod = case when @StartPeriod between 1 and 3 then 12
              when @StartPeriod between 4 and 6 then 3
              when @StartPeriod between 7 and 9 then 6
              when @StartPeriod between 10 and 12 then 9 end         
       
       --year calculations        
       else if @Type = 'This Year'
              select @ResultYear = @StartYear
       else if @Type = 'Last Year'
              select @ResultYear = @StartYear - 1             
end

if @ResultDate is not null
       select @ResultDate Result
else if @ResultPeriod is not null
       select @ResultPeriod Result
if @ResultYear is not null
       select @ResultYear Result
  



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RM_CreateCopy_Campaign]') and xtype = 'P ')  
 drop Procedure RM_CreateCopy_Campaign
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure RM_CreateCopy_Campaign (@Description varchar(128), @ContactID int, @CompanyID int, @CopyMode bit, @OldCampaignID int, 
										 @IncludeProcess bit, @IncludeCustomers bit, @IncludeProspects bit, @IncludeDocuments bit)

AS

--Begin Tran

--Declare @Description varchar(128), @ContactID int, @CompanyID int, @CopyMode bit, @OldCampaignID int, @IncludeProcess bit, @IncludeCustomers bit, @IncludeProspects bit, @IncludeDocuments bit
--Select @Description = 'Test Copy', @ContactID = 97, @CopyMode = 1, @OldCampaignID = 71, @IncludeProcess = 1, @IncludeCustomers = 1, @IncludeProspects = 1, @IncludeDocuments = 1

Declare @NewID int, @nSql varchar(max), @TR_DB varchar(500), @TR_Server varchar(500)

Insert Into scCampaign(Description,SalesManID,CompanyID, CreatedDate, LastEditedBy, LastEditDate)
Select @Description, @ContactID, @CompanyID, GETDATE(), @ContactID, GETDATE()
	
Select @NewID = SCOPE_IDENTITY()

If @CopyMode = 1
Begin

	If @IncludeProcess = 1
	Begin	
		Insert Into scProcessInstance(ProcessID, OwnerID, ProcessTypeInstance, LinkID, ProcessStatus, CurrentProcessStep)
		Select  pr.ProcessID, @ContactID, 'Campaign',@NewID, 'Not Started', pr.id
		From scProcessInstance pr
		Where pr.LinkID = @OldCampaignID and pr.ProcessTypeInstance = 'Campaign'
		
		Insert Into scStepInstance(Company_ID, StepID, PI_ID, Process_ID, Method_ID, MethodType, StepNumber, Description, Offset, CreateAs, Type, EmailSignature_ID, 
						   ReplyEmail_ID, Subject, Body, AltBodyType, AltBody, 
						   TopcialArea_ID, StepStatus, AssignTo_ID, TempID)
		Select si.Company_ID, si.StepID, pr.id, si.Process_ID, si.Method_ID, si.MethodType, si.StepNumber, si.Description, si.Offset, si.CreateAs, si.Type, si.EmailSignature_ID, 
						   si.ReplyEmail_ID, si.Subject, si.Body, si.AltBodyType, si.AltBody, 
						   si.TopcialArea_ID, 'N', si.AssignTo_ID, si.ID
		From scStepInstance si
		Inner Join scProcessInstance ip on ip.id = si.PI_ID
		Inner Join scProcessInstance pr on pr.CurrentProcessStep = ip.id
		Where ip.LinkID = @OldCampaignID and ip.ProcessTypeInstance = 'Campaign'
		
		Update scProcessInstance
		Set CurrentProcessStep = null
		From scProcessInstance ip
		Where ip.LinkID = @NewID and ip.ProcessTypeInstance = 'Campaign'
		
		If @IncludeDocuments = 1
		Begin
		
			Select @TR_DB = TreasuryDBName, @TR_Server = SQLServerName From COMPANIES Where AutoID = @CompanyID
			
			Select @nSql =
			'Declare @StepType varchar(15) = ''CAMPAIGN_STEP'', @FileOrigin varchar(100) = ''Campaign Step'', @TempLink varchar(50) = ''CampaignCopy'' + ''' + CONVERT(varchar(10),@NewID) + ''', 
					@StepMethodType varchar(8) = ''Email'', @DocMgr_Types_ID int, @ProcessTypeInstance varchar(20) = ''Campaign'', @SPRefType varchar(50) = ''StepInstance''
			
			Select @DocMgr_Types_ID = ID From ' + @TR_DB + '.dbo.DocMgr_Types where [Type] = ''Process Manager'' 
			
			Update ' + @TR_DB + '.dbo.CFS_FileRepository Set TempID = null, TempLink = null Where TempLink = @TempLink
					
			--Copy Email documents
			Insert Into ' + @TR_DB + '.dbo.CFS_FileRepository(FileName, FileData, FileTypeDescription, AddedBy, DateAdded, FileType, TempID, TempLink, Mime_type, InternalOnly, FileStatus)
			Select r.FileName, r.FileData, r.FileTypeDescription, r.AddedBy, r.DateAdded, r.FileType, r.ID, @TempLink, r.Mime_type, r.InternalOnly, r.FileStatus
			From ' + @TR_DB + '.dbo.CFS_FileRepository r
			Inner Join ' + @TR_DB + '.dbo.CFS_FileReleations d on d.FileRepository_ID = r.ID
			Inner Join scStepInstance si on si.ID = d.RelType_ID and si.MethodType = @StepMethodType
			Inner Join scProcessInstance ip on ip.id = si.PI_ID
			Where d.RelType = @StepType and ip.LinkID = @OldCampaignID and ip.ProcessTypeInstance = @ProcessTypeInstance
			
			Insert Into ' + @TR_DB + '.dbo.CFS_FileReleations(FileRepository_ID, RelType, RelType_ID, ContextItemID, FileOrigin, Campaign_ID)
			Select r.ID, @StepType, si.ID, d.ContextItemID, @FileOrigin, ip.LinkID
			From ' + @TR_DB + '.dbo.CFS_FileReleations d
			Inner Join scStepInstance si on si.ID = d.RelType_ID and si.MethodType = @StepMethodType
			Inner Join ' + @TR_DB + '.dbo.CFS_FileRepository r on r.TempID = d.FileRepository_ID
			Inner Join scProcessInstance ip on ip.id = si.PI_ID
			Where d.RelType = @StepType and ip.ProcessTypeInstance = @ProcessTypeInstance and ip.LinkID = @OldCampaignID
			
			Insert Into ' + @TR_DB + '.dbo.DocMgr_Documents(DocMgr_Types_ID, Reference_Type, Referece_ID, Document_ID, DisplayName, FileName, ContextItem_ID, DateAdded, 
														DocumentOrigin, Campaign_ID)
			Select @DocMgr_Types_ID, @SPRefType, si.ID, d.Document_ID, d.DisplayName, d.FileName, d.ContextItem_ID, GETDATE(),
				   @FileOrigin, ip.LinkID
			From ' + @TR_DB + '.dbo.DocMgr_Documents d
			Inner Join scStepInstance si on si.ID = d.Referece_ID
			Inner Join scProcessInstance ip on ip.id = si.PI_ID
			Where d.DocMgr_Types_ID = @DocMgr_Types_ID and d.Reference_Type = @SPRefType and ip.ProcessTypeInstance = @ProcessTypeInstance and si.MethodType = @StepMethodType
			
			Update ' + @TR_DB + '.dbo.CFS_FileRepository Set TempID = null, TempLink = null Where TempLink = @TempLink
			
			--Copy Task Documents
			Select @StepMethodType = ''Task''
			
			Insert Into ' + @TR_DB + '.dbo.CFS_FileRepository(FileName, FileData, FileTypeDescription, AddedBy, DateAdded, FileType, TempID, TempLink, Mime_type, InternalOnly, FileStatus)
			Select r.FileName, r.FileData, r.FileTypeDescription, r.AddedBy, r.DateAdded, r.FileType, r.ID, @TempLink, r.Mime_type, r.InternalOnly, r.FileStatus
			From ' + @TR_DB + '.dbo.CFS_FileRepository r
			Inner Join ' + @TR_DB + '.dbo.CFS_FileReleations d on d.FileRepository_ID = r.ID
			Inner Join scStepInstance si on si.ID = d.RelType_ID and si.MethodType = @StepMethodType
			Inner Join scProcessInstance ip on ip.id = si.PI_ID
			Where d.RelType = @StepType and ip.LinkID = @OldCampaignID and ip.ProcessTypeInstance = @ProcessTypeInstance
			
			Insert Into ' + @TR_DB + '.dbo.CFS_FileReleations(FileRepository_ID, RelType, RelType_ID, ContextItemID, FileOrigin, Campaign_ID)
			Select r.ID, @StepType, si.ID, d.ContextItemID, @FileOrigin, ip.LinkID
			From ' + @TR_DB + '.dbo.CFS_FileReleations d
			Inner Join scStepInstance si on si.ID = d.RelType_ID and si.MethodType = @StepMethodType
			Inner Join ' + @TR_DB + '.dbo.CFS_FileRepository r on r.TempID = d.FileRepository_ID
			Inner Join scProcessInstance ip on ip.id = si.PI_ID
			Where d.RelType = @StepType and ip.ProcessTypeInstance = @ProcessTypeInstance and ip.LinkID = @OldCampaignID
			
			Insert Into ' + @TR_DB + '.dbo.DocMgr_Documents(DocMgr_Types_ID, Reference_Type, Referece_ID, Document_ID, DisplayName, FileName, ContextItem_ID, DateAdded, 
														DocumentOrigin, Campaign_ID)
			Select @DocMgr_Types_ID, @SPRefType, si.ID, d.Document_ID, d.DisplayName, d.FileName, d.ContextItem_ID, GETDATE(),
				   @FileOrigin, ip.LinkID
			From ' + @TR_DB + '.dbo.DocMgr_Documents d
			Inner Join scStepInstance si on si.ID = d.Referece_ID
			Inner Join scProcessInstance ip on ip.id = si.PI_ID
			Where d.DocMgr_Types_ID = @DocMgr_Types_ID and d.Reference_Type = @SPRefType and ip.ProcessTypeInstance = @ProcessTypeInstance and si.MethodType = @StepMethodType
			
			Update ' + @TR_DB + '.dbo.CFS_FileRepository Set TempID = null, TempLink = null Where TempLink = @TempLink
			'
			
		End
		
		Update scStepInstance
		Set TempID = null
		From scStepInstance si
		Inner Join scProcessInstance ip on ip.id = si.PI_ID
		Where ip.ProcessTypeInstance = 'Campaign' and ip.LinkID = @NewID
		
	End
	
	If @IncludeCustomers = 1
	Begin
		Insert Into scCampaignees(CampaignID, LeadID, Added, DeActivated, ContactID)
		Select @NewID, -1, GETDATE(), 0, c.ContactID
		From scCampaignees c
		Inner Join Contact co on co.ID = c.ContactID
		Where co.Type = 'Customer' and c.CampaignID = @OldCampaignID
	End
	
	If @IncludeProspects = 1
	Begin
		Insert Into scCampaignees(CampaignID, LeadID, Added, DeActivated, ContactID)
		Select @NewID, -1, GETDATE(), 0, c.ContactID
		From scCampaignees c
		Inner Join Contact co on co.ID = c.ContactID
		Where co.Type = 'Prospect' and c.CampaignID = @OldCampaignID
	End
End

Select @NewID [ID]

--Select * From scCampaign where ID = @NewID
--Select * From scProcessInstance where LinkID = @OldCampaignID and ProcessTypeInstance = 'Campaign'
--Select * From scProcessInstance where LinkID = @NewID and ProcessTypeInstance = 'Campaign'
--Select * From scCampaignees where CampaignID = @OldCampaignID
--Select * From scCampaignees where CampaignID = @NewID 
--Select * from scStepInstance where PI_ID in (Select ip.id From scProcessInstance ip where ip.LinkID = @NewID and ip.ProcessTypeInstance = 'Campaign')

--Rollback Tran

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RM_CreateStepInstance]') and xtype = 'P ')  
 drop Procedure RM_CreateStepInstance
Go
SET QUOTED_IDENTIFIER ON
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure RM_CreateStepInstance (@ProcessInstanceID int, @CompanyID int, @AssignTo_ID int)

AS

--Begin Tran
--Declare @ProcessInstanceID int, @CompanyID int, @AssignTo_ID int
--Select @ProcessInstanceID = 389, @CompanyID = 12, @AssignTo_ID = 97

Declare @MethodType varchar(8), @TR_DB varchar(500), @TR_SERVER varchar(500), @nSQL nvarchar(max), @DocType varchar(15) = 'CAMPAIGN_STEP'

Select @TR_DB = TreasuryDBName, @TR_SERVER = SQLServerName From COMPANIES Where AutoID = @CompanyID

Insert Into scStepInstance(Company_ID, StepID, PI_ID, Process_ID, Method_ID, MethodType, StepNumber, Description, Offset, CreateAs, Type, EmailSignature_ID, 
						   ReplyEmail_ID, Subject, Body, AltBodyType, AltBody, 
						   TopcialArea_ID, StepStatus, AssignTo_ID)
Select @CompanyID, s.ID, @ProcessInstanceID, ip.ProcessID, s.MethodID, s.MethodType, s.StepNumber, s.Description, s.Offset, s.CreateAs, s.Type, s.EmailSignature_ID, 
s.ReplyEmail_ID, e.Subject, Case When s.MethodType = 'Email' Then e.Body else t.Notes End, e.AltBodyType, e.AltBody, 
Case When s.MethodType = 'Email' Then e.TopicalArea_ID Else t.TopicalArea_ID End, 'N', @AssignTo_ID
From scProcessInstance ip
inner join scStep s on s.ProcessID = ip.ProcessID
Left Outer join scMethodEmail e on e.ID = s.MethodID and s.MethodType = 'Email'
Left Outer join scMethodTask t on t.ID = s.MethodID and s.MethodType = 'Task'
Where ip.ID = @ProcessInstanceID
and s.ID not in (Select si.StepID from scStepInstance si Where si.PI_ID = @ProcessInstanceID)


--Preform Email First
Select @nSQL =
'Declare @StepType varchar(15) = ''STEP_EMAIL'', @FileOrigin varchar(100) = ''Campaign Step'', @TempLink varchar(50) = ''CampaignCopy'' + ''' + CONVERT(varchar(10),@AssignTo_ID) + ''', 
		@StepMethodType varchar(8) = ''Email'', @DocMgr_Types_ID int, @ProcessTypeInstance varchar(20) = ''Campaign''

Update ' + @TR_DB + '.dbo.CFS_FileRepository Set TempID = null, TempLink = null Where TempLink = @TempLink

Insert Into ' + @TR_DB + '.dbo.CFS_FileRepository(FileName, FileData, FileTypeDescription, AddedBy, DateAdded, FileType, TempID, TempLink, Mime_type, InternalOnly, FileStatus)
Select Distinct r.FileName, r.FileData, r.FileTypeDescription, r.AddedBy, r.DateAdded, r.FileType, r.ID, @TempLink, r.Mime_type, r.InternalOnly, r.FileStatus
From ' + @TR_DB + '.dbo.CFS_FileRepository r
Inner Join ' + @TR_DB + '.dbo.CFS_FileReleations d on d.FileRepository_ID = r.ID
Inner Join scStepInstance si on si.Method_ID = d.RelType_ID and si.MethodType = @StepMethodType
Inner Join scProcessInstance ip on ip.id = si.PI_ID
Where d.RelType = @StepType and ip.ID = ' + Convert(varchar(10),@ProcessInstanceID) +'

Insert Into ' + @TR_DB + '.dbo.CFS_FileReleations(FileRepository_ID, RelType, RelType_ID, ContextItemID, FileOrigin, Campaign_ID)
Select r.ID, ''' + @DocType + ''', si.ID, d.ContextItemID, @FileOrigin, ip.LinkID
From ' + @TR_DB + '.dbo.CFS_FileReleations d
Inner Join scStepInstance si on si.Method_ID = d.RelType_ID and si.MethodType = @StepMethodType
Inner Join ' + @TR_DB + '.dbo.CFS_FileRepository r on r.TempID = d.FileRepository_ID
Inner Join scProcessInstance ip on ip.id = si.PI_ID
Where d.RelType = @StepType and ip.ID = ' + Convert(varchar(10),@ProcessInstanceID) +' and r.TempLink = @TempLink and ip.ProcessTypeInstance = @ProcessTypeInstance 

Select @DocMgr_Types_ID = ID From ' + @TR_DB + '.dbo.DocMgr_Types where [Type] = ''Process Manager'' 

Insert Into ' + @TR_DB + '.dbo.DocMgr_Documents(DocMgr_Types_ID, Reference_Type, Referece_ID, Document_ID, DisplayName, FileName, ContextItem_ID, DateAdded, 
											DocumentOrigin, Campaign_ID)
Select @DocMgr_Types_ID, ''StepInstance'', si.ID, d.Document_ID, d.DisplayName, d.FileName, d.ContextItem_ID, GETDATE(),
	   @FileOrigin, ip.LinkID
From ' + @TR_DB + '.dbo.DocMgr_Documents d
Inner Join scStepInstance si on si.Method_ID = d.Referece_ID
Inner Join scProcessInstance ip on ip.id = si.PI_ID
Where d.DocMgr_Types_ID = @DocMgr_Types_ID and d.Reference_Type = @StepMethodType and ip.ID = ' + Convert(varchar(10),@ProcessInstanceID) +' and ip.ProcessTypeInstance = @ProcessTypeInstance	

Update ' + @TR_DB + '.dbo.CFS_FileRepository Set TempID = null, TempLink = null Where TempLink = @TempLink
'
--print @nSQL
exec sp_executesql @nSQL

Select @nSQL =
'Declare @StepType varchar(15) = ''STEP_TASK'', @FileOrigin varchar(100) = ''Campaign Step'', @TempLink varchar(50) = ''CampaignCopy''  + ''' + CONVERT(varchar(10),@AssignTo_ID) + ''', 
		@StepMethodType varchar(8) = ''Task'', @DocMgr_Types_ID int, @ProcessTypeInstance varchar(20) = ''Campaign''
		
Update ' + @TR_DB + '.dbo.CFS_FileRepository Set TempID = null, TempLink = null Where TempLink = @TempLink

Insert Into ' + @TR_DB + '.dbo.CFS_FileRepository(FileName, FileData, FileTypeDescription, AddedBy, DateAdded, FileType, TempID, TempLink, Mime_type, InternalOnly, FileStatus)
Select r.FileName, r.FileData, r.FileTypeDescription, r.AddedBy, r.DateAdded, r.FileType, r.ID, @TempLink, r.Mime_type, r.InternalOnly, r.FileStatus
From ' + @TR_DB + '.dbo.CFS_FileRepository r
Inner Join ' + @TR_DB + '.dbo.CFS_FileReleations d on d.FileRepository_ID = r.ID
Inner Join scStepInstance si on si.Method_ID = d.RelType_ID and si.MethodType = @StepMethodType
Inner Join scProcessInstance ip on ip.id = si.PI_ID
Where d.RelType = @StepType and ip.ID = ' + Convert(varchar(10),@ProcessInstanceID) +'

Insert Into ' + @TR_DB + '.dbo.CFS_FileReleations(FileRepository_ID, RelType, RelType_ID, ContextItemID, FileOrigin, Campaign_ID)
Select r.ID, ''' + @DocType + ''', si.ID, d.ContextItemID, @FileOrigin, ip.LinkID
From ' + @TR_DB + '.dbo.CFS_FileReleations d
Inner Join scStepInstance si on si.Method_ID = d.RelType_ID and si.MethodType = @StepMethodType
Inner Join ' + @TR_DB + '.dbo.CFS_FileRepository r on r.TempID = d.FileRepository_ID
Inner Join scProcessInstance ip on ip.id = si.PI_ID
Where d.RelType = @StepType and ip.ID = ' + Convert(varchar(10),@ProcessInstanceID) +' and r.TempLink = @TempLink and ip.ProcessTypeInstance = @ProcessTypeInstance	

Select @DocMgr_Types_ID = ID From ' + @TR_DB + '.dbo.DocMgr_Types where [Type] = ''Process Manager'' 

Insert Into ' + @TR_DB + '.dbo.DocMgr_Documents(DocMgr_Types_ID, Reference_Type, Referece_ID, Document_ID, DisplayName, FileName, ContextItem_ID, DateAdded, 
											DocumentOrigin, Campaign_ID)
Select @DocMgr_Types_ID, ''StepInstance'', si.ID, d.Document_ID, d.DisplayName, d.FileName, d.ContextItem_ID, GETDATE(),
	   @FileOrigin, ip.LinkID
From ' + @TR_DB + '.dbo.DocMgr_Documents d
Inner Join scStepInstance si on si.Method_ID = d.Referece_ID
Inner Join scProcessInstance ip on ip.id = si.PI_ID
Where d.DocMgr_Types_ID = @DocMgr_Types_ID and d.Reference_Type = @StepMethodType and ip.ID = ' + Convert(varchar(10),@ProcessInstanceID) +' and ip.ProcessTypeInstance = @ProcessTypeInstance	

Update ' + @TR_DB + '.dbo.CFS_FileRepository Set TempID = null, TempLink = null Where TempLink = @TempLink

'
exec sp_executesql @nSQL

--Select * From scStepInstance
--Select * From scStepInstance
--Select * From scProcessInstance ip
--Select * From scStep
--Rollback Tran



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RM_Filter_FillContactSelect]') and xtype = 'P ')  
 drop Procedure RM_Filter_FillContactSelect
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
 
-- exec RM_Filter_FillContactSelect 'adam', 12, 'Purchaser', 1, null, null, null, null, null, null, null, null, null, null, null, null, null
CREATE Procedure RM_Filter_FillContactSelect (@Username varchar(500), @CompanyID int, @Type varchar(20), @Active bit, @CompanyName varchar(100), @KnownAs varchar(50), @FirstName varchar(50), @LastName varchar(50), 
	    @JobTitle varchar(128), @BusinessPhone varchar(64), @BusinessFax varchar(64), @BusinessStreet varchar(255), @BusinessCity varchar(64), @BusinessProvince varchar(32), 
	    @BusinessCountry varchar(64), @Comm_Purpose_ID int, @UDFFilter varchar(max))
	    
As

--Declare @Username varchar(500), @CompanyID int, @Type varchar(20), @Active bit, @CompanyName varchar(100), @KnownAs varchar(50), @FirstName varchar(50), @LastName varchar(50), 
--	    @JobTitle varchar(128), @BusinessPhone varchar(64), @BusinessFax varchar(64), @BusinessStreet varchar(255), @BusinessCity varchar(64), @BusinessProvince varchar(32), 
--	    @BusinessCountry varchar(64), @Comm_Purpose_ID int, @UDFFilter varchar(max)
	    
--Select @Username = 'mike', @CompanyID = 12, @Type = 'Prospect', @Active = 0, @CompanyName = '', @KnownAs = '', @FirstName = '', @LastName = '',
--	   @JobTitle = '', @BusinessPhone = '', @BusinessFax = '', @BusinessStreet = '', @BusinessCity = '', @BusinessProvince = '',
--	   @BusinessCountry = '', @Comm_Purpose_ID = -1, @UDFFilter = ''

Declare @nSql nvarchar(max)

If exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Contacts'))
drop table #Contacts
CREATE TABLE #Contacts(
ID int identity(1,1) not null primary key,
Contact_ID int null,
Parent_ID int null,
RecordType varchar(1) null
)
--Select *
--From Contact c
--Inner Join Relations r on r.ItemID = c.ID
--Inner Join Working_RM_CustFilter_CustList w on w.Customer_ID = r.TargetID 
--Left Outer Join COMMUNICATION_DEFAULTS cd on cd.COMPANY_ID = r.CompanyID and cd.[TYPE] = 'C' and cd.SOURCE_ID = r.TargetID and c.ID = cd.CONTACT_ID
--Where r.ItemType = 'Contact' and r.Target = 'Customer' and w.Username = 'mike' and c.Type = 'Customer' and r.CompanyID = 12
----and ( IsNull(cd.COMM_PURPOSE_ID,-1) = Case When IsNull(@Comm_Purpose_ID,-1) = -1 Then IsNull(cd.COMM_PURPOSE_ID,-1) Else IsNull(@Comm_Purpose_ID,-1) End)
--Order by c.ID

--Delete Relations Where ID in (217, 220, 221, 205, 218, 219)

--Select * From TR_GC_TEST.dbo.CUSTOMERS where CUSTOMER_ID in (31, 38)
--Select * From Contact where ID = 161
--Select * From Relations where ItemType = 'Contact' order by Convert(int,ItemID), TargetID
--Select * From Relations where Target = 'Customer' and ItemType = 'Contact' order by Convert(int,ItemID), TargetID
--Select * From Relations where Target = 'Prospect' and ItemType = 'Contact' order by Convert(int,ItemID), TargetID

If @Type = 'Customer'
Begin
	Insert Into #Contacts(Contact_ID,RecordType, Parent_ID)
	Select Distinct c.ID, '1', w.ID
	From Contact c
	Inner Join Relations r on r.ItemID = c.ID
	Inner Join Working_RM_CustFilter_CustList w on w.Customer_ID = r.TargetID 
	Left Outer Join COMMUNICATION_DEFAULTS cd on cd.COMPANY_ID = r.CompanyID and cd.[TYPE] = 'C' and cd.SOURCE_ID = r.TargetID and c.ID = cd.CONTACT_ID
	Where r.ItemType = 'Contact' and r.Target = 'Customer' and w.Username = @Username and c.Type = 'Customer' and r.CompanyID = @CompanyID
	and ( IsNull(cd.COMM_PURPOSE_ID,-1) = Case When IsNull(@Comm_Purpose_ID,-1) = -1 Then IsNull(cd.COMM_PURPOSE_ID,-1) Else IsNull(@Comm_Purpose_ID,-1) End) and w.Selected = 1
	Order by c.ID 
End
Else If @Type = 'Prospect'
Begin
	Insert Into #Contacts(Contact_ID,RecordType, Parent_ID)
	Select Distinct c.ID, '1', w.ID
	From Contact c
	Inner Join Relations r on r.ItemID = c.ID
	Inner Join Working_RM_ProspectFilter_ProspectList w on w.PROSPECT_ID = r.TargetID 
	Left Outer Join COMMUNICATION_DEFAULTS cd on cd.COMPANY_ID = r.CompanyID and cd.[TYPE] = 'P' and cd.SOURCE_ID = r.TargetID and c.ID = cd.CONTACT_ID
	Where r.ItemType = 'Contact' and r.Target = 'Prospect' and w.Username = @Username and c.Type = 'Prospect' and r.CompanyID = @CompanyID
	and ( IsNull(cd.COMM_PURPOSE_ID,-1) = Case When IsNull(@Comm_Purpose_ID,-1) = -1 Then IsNull(cd.COMM_PURPOSE_ID,-1) Else IsNull(@Comm_Purpose_ID,-1) End) and w.Selected = 1
	Order by c.ID 
End
Else
Begin
	Insert Into #Contacts(Contact_ID,RecordType, Parent_ID)
	Select Distinct c.ID, '1', w.ID
	From Contact c
	Inner Join Relations r on r.ItemID = c.ID
	Inner Join Working_RM_CustFilter_CustList w on w.Customer_ID = r.TargetID
	Left Outer Join COMMUNICATION_DEFAULTS cd on cd.COMPANY_ID = r.CompanyID and cd.TYPE = 'C' and cd.SOURCE_ID = r.TargetID and c.ID = cd.CONTACT_ID
	Where r.ItemType = 'Contact' and r.Target = 'Customer' and w.Username = @Username and c.Type = 'Customer' and r.CompanyID = @CompanyID
	and ( IsNull(cd.COMM_PURPOSE_ID,-1) = Case When IsNull(@Comm_Purpose_ID,-1) = -1 Then IsNull(cd.COMM_PURPOSE_ID,-1) Else IsNull(@Comm_Purpose_ID,-1) End) and w.Selected = 1
End

If LTRIM(RTRIM(IsNull(@UDFFilter,''))) = ''
Begin
	Update #Contacts Set RecordType = '2' Where RecordType = '1'
End
Else
Begin
	
	Select @nSql = 'Insert Into #Contacts(Contact_ID,RecordType,Parent_ID) Select Contact_ID, ''2'', Parent_ID From #Contacts f where Contact_ID in ' + @UDFFilter + ' '
	--print @nSql
	Exec sp_executesql @nSql
	
End

Insert Into #Contacts(Contact_ID,RecordType, Parent_ID)
Select c.ID, '3', f.Parent_ID
From Contact c
Inner Join #Contacts f on f.Contact_ID = c.ID
Where f.RecordType = '2' and IsNull(c.InActive,'N') = Case When @Active = 1 Then 'N' Else IsNull(c.InActive,'Y') End and
	( IsNull(c.BusinessCompany,'') like Case When IsNull(@CompanyName,'') = '' Then IsNull(c.BusinessCompany,'') Else IsNull(@CompanyName,'') + '%' End) and
	( IsNull(c.KnownAs,'') like Case When IsNull(@KnownAs,'') = '' Then IsNull(c.KnownAs,'') Else IsNull(@KnownAs,'') + '%' End) and
	( IsNull(c.FirstName,'') like Case When IsNull(@FirstName,'') = '' Then IsNull(c.FirstName,'') Else IsNull(@FirstName,'') + '%' End) and
	( IsNull(c.LastName,'') like Case When IsNull(@LastName,'') = '' Then IsNull(c.LastName,'') Else IsNull(@LastName,'') + '%' End) and
	( IsNull(c.JobTitle,'') like Case When IsNull(@JobTitle,'') = '' Then IsNull(c.JobTitle,'') Else IsNull(@JobTitle,'') + '%' End) and
	( IsNull(c.BusinessTelephoneNumber,'') like Case When IsNull(@BusinessPhone,'') = '' Then IsNull(c.BusinessTelephoneNumber,'') Else IsNull(@BusinessPhone,'') + '%' End) and
	( IsNull(c.BusinessFaxNumber,'') like Case When IsNull(@BusinessFax,'') = '' Then IsNull(c.BusinessFaxNumber,'') Else IsNull(@BusinessFax,'') + '%' End) and
	( IsNull(c.BusinessStreet,'') like Case When IsNull(@BusinessStreet,'') = '' Then IsNull(c.BusinessStreet,'') Else IsNull(@BusinessStreet,'') + '%' End) and
	( IsNull(c.BusinessCity,'') like Case When IsNull(@BusinessCity,'') = '' Then IsNull(c.BusinessCity,'') Else IsNull(@BusinessCity,'') + '%' End) and
	( IsNull(c.BusinessState,'') like Case When IsNull(@BusinessProvince,'') = '' Then IsNull(c.BusinessState,'') Else IsNull(@BusinessProvince,'') + '%' End) and
	( IsNull(c.BusinessCountry,'') like Case When IsNull(@BusinessCountry,'') = '' Then IsNull(c.BusinessCountry,'') Else IsNull(@BusinessCountry,'') + '%' End)
	
Delete Working_RM_Filter_ContactList where Username = @Username and FilterType = @Type

Insert Into Working_RM_Filter_ContactList(Username, Selected, Contact_ID, Active,
										  CompanyName, KnownAs, FirstName, LastName, JobTitle, BusinessPhone,
										  BusinessFax, BusinessStreet, BusinessCity, BusinessState, BusinessPostalCode,
										  BusinessCountry, EmailAddress, Parent_ID, FilterType,SummarySelected)
Select @Username [Username], CONVERT(bit,0) [Selected], c.ID [Contact_ID], Case When ISNULL(c.InActive,'N') = 'N' Then CONVERT(bit,1) Else CONVERT(bit,0) End [Active],
	   c.BusinessCompany [CompanyName], c.KnownAs [KnownAs], c.FirstName [FirstName], c.LastName [LastName], c.JobTitle [JobTitle], c.BusinessTelephoneNumber [BusinessPhone],
	   c.BusinessFaxNumber [BusinessFax], c.BusinessStreet [BusinessStreet], c.BusinessCity [BusinessCity], c.BusinessState [BusinessState], c.BusinessPostalCode [BusinessPostalCode],
	   c.BusinessCountry [BusinessCountry], c.Email1Address [EmailAddress], f.Parent_ID, @Type [FilterType], 0 [SummarySelected]
From Contact c
Inner Join #Contacts f on f.Contact_ID = c.ID
Where f.RecordType = '3'
order by c.ID

If @Type = 'Customer'
Begin
	Update Working_RM_Filter_ContactList
	Set ParentCode = c.Customer_Code, ParentName = c.Customer_Name
	From Working_RM_Filter_ContactList w
	Inner Join Working_RM_CustFilter_CustList c on c.ID = w.Parent_ID
	Where w.FilterType = 'Customer' and w.Username = @Username and c.Username = @Username
End
Else If @Type = 'Prospect'
Begin
	Update Working_RM_Filter_ContactList
	Set ParentCode = c.Prospect_Code, ParentName = c.Prospect_Name
	From Working_RM_Filter_ContactList w
	Inner Join Working_RM_ProspectFilter_ProspectList c on c.ID = w.Parent_ID
	Where w.FilterType = 'Prospect' and w.Username = @Username and c.Username = @Username
End
Else
Begin
	Update Working_RM_Filter_ContactList
	Set ParentCode = c.Customer_Code, ParentName = c.Customer_Name
	From Working_RM_Filter_ContactList w
	Inner Join Working_RM_CustFilter_CustList c on c.ID = w.Parent_ID
	Where w.FilterType = 'Customer' and w.Username = @Username and c.Username = @Username
End

--Select * From COMMUNICATION_DEFAULTS Where Type = 'C'
--Select * From COMMUNICATION_PURPOSE


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RM_Filter_FillContactSummarySelect]') and xtype = 'P ')  
 drop Procedure RM_Filter_FillContactSummarySelect
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
Create Procedure RM_Filter_FillContactSummarySelect (@Username varchar(500), @CompanyID int, @FilterType varchar(20), @CampaignID int)
as
begin
	Declare @nSql nvarchar(max), @TR_DB varchar(500), @TR_Server varchar(500), @IsPurchaser bit

	Delete Working_RM_Filter_ContactSummaryList Where Username = @Username

	if( @FilterType = 'Purchaser' )
	begin
		select @FilterType = 'Customer', @IsPurchaser = 1
	end
	else
	begin
		select @IsPurchaser = 0
	end

	If @FilterType = 'Customer'
	Begin
		Insert Into Working_RM_Filter_ContactSummaryList(Username, Selected, In_Campaign, Contact_ID, Active, CompanyName, KnownAs, FirstName, LastName, JobTitle, BusinessPhone, BusinessFax, BusinessStreet,
														 BusinessCity, BusinessState, BusinessPostalCode, BusinessCountry, EmailAddress, Parent_ID, Parent, ParentCode, ParentName, FilterType)
		Select @Username, 1, 0, w.Contact_ID, w.Active, w.CompanyName, w.KnownAs, w.FirstName, w.LastName, w.JobTitle, w.BusinessPhone, w.BusinessFax, w.BusinessStreet,
			   w.BusinessCity, w.BusinessState, w.BusinessPostalCode, w.BusinessCountry, w.EmailAddress, w.Parent_ID, w.ParentName + '(' + w.ParentCode + ')', w.ParentCode, w.ParentName, @FilterType
		From Working_RM_Filter_ContactList w
		Inner Join Working_RM_CustFilter_CustList c on c.ID = w.Parent_ID
		Where w.Username = @Username and w.FilterType = @FilterType and w.Selected = 1 and isnull(c.IsPurchaser,0) = @IsPurchaser
	End
	Else If @FilterType = 'Prospect'
	Begin
		Insert Into Working_RM_Filter_ContactSummaryList(Username, Selected, In_Campaign, Contact_ID, Active, CompanyName, KnownAs, FirstName, LastName, JobTitle, BusinessPhone, BusinessFax, BusinessStreet,
														 BusinessCity, BusinessState, BusinessPostalCode, BusinessCountry, EmailAddress, Parent_ID, FilterType)
		Select @Username, 1, 0, w.Contact_ID, w.Active, w.CompanyName, w.KnownAs, w.FirstName, w.LastName, w.JobTitle, w.BusinessPhone, w.BusinessFax, w.BusinessStreet,
			   w.BusinessCity, w.BusinessState, w.BusinessPostalCode, w.BusinessCountry, w.EmailAddress, w.Parent_ID, @FilterType
		From Working_RM_Filter_ContactList w
		Inner Join Working_RM_ProspectFilter_ProspectList c on c.ID = w.Parent_ID
		Where w.Username = @Username and w.FilterType = @FilterType and w.Selected = 1
	End

	Select @TR_DB = TreasuryDBName, @TR_Server = SQLServerName From COMPANIES where AutoID = @CompanyID

	--Insert campgain values then update any existing values
	If IsNull(@CampaignID,-1) > 0
	Begin
		Update Working_RM_Filter_ContactSummaryList
		Set In_Campaign = 1
		From Working_RM_Filter_ContactSummaryList w
		Inner Join scCampaignees c on c.ContactID = w.Contact_ID
		Where c.CampaignID = @CampaignID
		
		Insert Into Working_RM_Filter_ContactSummaryList(Username, Selected, In_Campaign, Contact_ID, Active, CompanyName, KnownAs, FirstName, LastName, JobTitle, BusinessPhone, BusinessFax, 
														 BusinessStreet, BusinessCity, BusinessState, BusinessPostalCode, BusinessCountry, EmailAddress, Parent_ID, FilterType)
		Select @Username, 1, 1, ce.ContactID, Case When IsNull(c.InActive,'N') = 'N' Then 1 Else 0 End, c.BusinessCompany, c.KnownAs, c.FirstName, c.LastName, c.JobTitle, c.BusinessTelephoneNumber,
			   c.BusinessFaxNumber, c.BusinessStreet, c.BusinessCity, c.BusinessState, c.BusinessPostalCode, c.BusinessCountry, c.Email1Address, r.TargetID, @FilterType
		From scCampaignees ce
		Left Outer Join Working_RM_Filter_ContactSummaryList w on w.Contact_ID = ce.ContactID
		Inner Join Contact c on c.ID = ce.ContactID
		Inner Join Relations r on r.ItemID = ce.ContactID and r.ItemType = 'Contact' and r.Target = c.Type
		Where IsNull(w.Contact_ID,-1) = -1 and c.Type = @FilterType and ce.CampaignID = @CampaignID 		
		
		if(@FilterType = 'Customer' and @IsPurchaser = 1)
		begin
			select @nSql = '
			delete w 
			from Working_RM_Filter_ContactSummaryList w 
			join Relations r on r.ItemID = w.Contact_ID and r.ItemType = ''Contact'' and r.CompanyID=@CompanyID
			join '+@TR_DB+'.dbo.customers c on c.CUSTOMER_ID=r.TargetID and r.Target=''Customer''
			where w.username=@username and isnull(c.PURCHASER_TYPE_ID,-1) not in (1,2,3)'
			exec sp_executesql @nSql, N'@username varchar(500), @CompanyID int ', @username, @CompanyID
		end
		else if(@FilterType = 'Customer' and @IsPurchaser = 0)
		begin
			select @nSql = '
			delete w 
			from Working_RM_Filter_ContactSummaryList w 
			join Relations r on r.ItemID = w.Contact_ID and r.ItemType = ''Contact'' and r.CompanyID=@CompanyID
			join '+@TR_DB+'.dbo.customers c on c.CUSTOMER_ID=r.TargetID and r.Target=''Customer''
			where w.username=@username and isnull(c.Is_Purchaser,0) = 1'
			exec sp_executesql @nSql, N'@username varchar(500), @CompanyID int ', @username, @CompanyID
		end
	End

	If @FilterType = 'Customer' --AND ISNULL(@TR_DB,'') <> '' AND ISNULL(@TR_Server,'') <> ''
	Begin
		Update Working_RM_Filter_ContactSummaryList
		Set Parent_ID = p.Customer_ID
		From Working_RM_Filter_ContactSummaryList w
		Inner Join Working_RM_CustFilter_CustList p on p.ID = w.Parent_ID
		where w.Username = @Username
		
		Select @nSql =
		'Update Working_RM_Filter_ContactSummaryList
		Set Parent = c.NAME + ''('' + c.CUSTOMER_CODE + '')'',
			ParentCode = c.CUSTOMER_CODE,
			ParentName = c.NAME
		From Working_RM_Filter_ContactSummaryList w
		Inner Join ' + @TR_DB + '.dbo.CUSTOMERS c on c.CUSTOMER_ID = w.Parent_ID
		Where w.FilterType = ''' + @FilterType + ''' and w.Username = ''' + @Username + ''' and IsNull(w.Parent,'''') = '''''
		
		exec sp_executesql @nSql
	End
	Else If @FilterType = 'Prospect' --AND ISNULL(@TR_DB,'') <> '' AND ISNULL(@TR_Server,'') <> ''
	Begin
		Update Working_RM_Filter_ContactSummaryList
		Set Parent_ID = p.PROSPECT_ID
		From Working_RM_Filter_ContactSummaryList w
		Inner Join Working_RM_ProspectFilter_ProspectList p on p.ID = w.Parent_ID
		where w.Username = @Username
		
		Select @nSql =
		'Update Working_RM_Filter_ContactSummaryList
		Set Parent = c.NAME + ''('' + c.PROSPECT_CODE + '')'',
			ParentCode = c.PROSPECT_CODE,
			ParentName = c.NAME
		From Working_RM_Filter_ContactSummaryList w
		Inner Join ' + @TR_DB + '.dbo.PROSPECTS c on c.PROSPECT_ID = w.Parent_ID
		Where w.FilterType = ''' + @FilterType + ''' and w.Username = ''' + @Username + ''' and IsNull(w.Parent,'''') = '''''
		
		exec sp_executesql @nSql		
	End
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RM_Filter_SummaryUpdate]') and xtype = 'P ')  
 drop Procedure RM_Filter_SummaryUpdate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

CREATE Procedure RM_Filter_SummaryUpdate (@Username varchar(500), @CompanyID int, @FilterType varchar(20), @CampaignID int, @Contact_ID int)
as 
begin

	Declare @nSql nvarchar(max), @TR_DB varchar(500), @TR_Server varchar(500), @IsPurchaser bit
	Select @TR_DB = TreasuryDBName, @TR_Server = SQLServerName From COMPANIES where AutoID = @CompanyID

	if( @FilterType = 'Purchaser' )
	begin
		select @FilterType = 'Customer', @IsPurchaser = 1
	end
	else
	begin
		select @IsPurchaser = 0
	end

	--Do normal table filter fill first

	If @FilterType = 'Customer'
	Begin
		Select @nSql = 'Delete ' + @TR_DB + '.dbo.working_FilterCustomers Where Username = ''' + @Username + ''' and [Type] = ''CustomerFilter''  ' +
			   'Insert into ' + @TR_DB + '.dbo.working_FilterCustomers(Username, Customer_ID, [Type]) ' +
			   'Select ''' + @Username + ''', customer_id, ''CustomerFilter'' from Working_RM_CustFilter_CustList where username = ''' + @Username + ''' and selected = 1 '
		exec sp_executesql @nSql
		
		Delete working_FilterContacts Where UserID = @Contact_ID and [Type] = 'CustomerFilter'
		Insert into working_FilterContacts (UserID, ContactID, [Type]) 
		Select @Contact_ID, Contact_ID , 'CustomerFilter' from Working_RM_Filter_ContactSummaryList where Username = @Username and FilterType = @FilterType and Selected = 1  
		
		Select @Contact_ID, Contact_ID , 'CustomerFilter' from Working_RM_Filter_ContactSummaryList where Username = @Username and FilterType = @FilterType and Selected = 1  
	End
	Else If @FilterType = 'Prospect'
	Begin
		Select @nSql = 'Delete ' + @TR_DB + '.dbo.working_FilterProspects Where Username = ''' + @Username + ''' and [Type] = ''ProspectFilter''  ' +
			   'Insert into ' + @TR_DB + '.dbo.working_FilterProspects(Username, Prospect_ID, [Type]) ' +
			   'Select ''' + @Username + ''', Prospect_ID, ''ProspectFilter'' from Working_RM_ProspectFilter_ProspectList where username = ''' + @Username + ''' and selected = 1 '
		exec sp_executesql @nSql
		
		Delete working_FilterContacts Where UserID = @Contact_ID and [Type] = 'ProspectFilter'
		Insert into working_FilterContacts (UserID, ContactID, [Type]) 
		Select @Contact_ID, Contact_ID , 'ProspectFilter' from Working_RM_Filter_ContactSummaryList where Username = @Username and FilterType = @FilterType and Selected = 1  
	End

	--If Edit mode for campaign is active we have a campaign ID and preform additonal steps here
	If @CampaignID > 0
	Begin

		--Add New Contacts ONLY
		If @FilterType = 'Customer'
		Begin
			Insert Into scCampaignees (CampaignID,leadID,Added,DeActivated,ContactID)
			Select @CampaignID,-1, GetDate(), 0, contactID from working_FilterContacts w 
			Where w.type = 'CustomerFilter' 
			and w.UserID = @Contact_ID
			and w.contactID not in ( select s.contactID from scCampaignees s where s.campaignID = @CampaignID)
		End
		Else If @FilterType = 'Prospect'
		Begin
			Insert Into scCampaignees (CampaignID,leadID,Added,DeActivated,ContactID)
			Select @CampaignID,-1, GetDate(), 0, contactID from working_FilterContacts w 
			Where w.type = 'ProspectFilter' 
			and w.UserID = @Contact_ID
			and w.contactID not in ( select s.contactID from scCampaignees s where s.campaignID = @CampaignID)
		End
		
		--Remove Completed Items Links ONLY
		Delete scMethodInstance
		From scMethodInstance mi
		Inner Join scProcessInstance ip on ip.id = mi.PI_ID
		Inner Join Working_RM_Filter_ContactSummaryList w on w.Contact_ID = mi.ContactID
		Where ip.ProcessTypeInstance = 'Campaign' and ip.LinkID = @CampaignID and w.Username = @Username
		and ip.ProcessStatus = 'Started' and mi.Status = 'Complete' and w.In_Campaign = 1 and w.Selected = 0 and w.FilterType = @FilterType
		
		--Remove Contact History From Uncompleted Tasks as 	
		Delete ContactHistory
		From ContactHistory ch
		Inner Join scMethodInstance mi on mi.LinkID = ch.ID
		Inner Join scProcessInstance ip on ip.id = mi.PI_ID
		Inner Join Working_RM_Filter_ContactSummaryList w on w.Contact_ID = mi.ContactID
		Where ip.ProcessTypeInstance = 'Campaign' and ip.LinkID = @CampaignID and w.Username = @Username
		and ip.ProcessStatus = 'Started' and mi.Status in ('New', 'Created') and w.In_Campaign = 1 and w.Selected = 0 and w.FilterType = @FilterType
		
		--Remove Contact Appt Task values From Uncompleted Tasks as 
		Delete contact_AptsTasks
		From contact_AptsTasks ch
		Inner Join scMethodInstance mi on mi.LinkID = ch.contactHistoryID
		Inner Join scProcessInstance ip on ip.id = mi.PI_ID
		Inner Join Working_RM_Filter_ContactSummaryList w on w.Contact_ID = mi.ContactID
		Where ip.ProcessTypeInstance = 'Campaign' and ip.LinkID = @CampaignID and w.Username = @Username
		and ip.ProcessStatus = 'Started' and mi.Status in ('New', 'Created') and w.In_Campaign = 1 and w.Selected = 0 and w.FilterType = @FilterType
		
		--Allow exchange/outlook sync to remove the task as well from it
		Update OutlookManagerNotification
		Set Mgr_TriggerUDI = 'D', Mgr_SeenItYN = 'N'
		From OutlookManagerNotification omn
		Inner Join scMethodInstance mi on mi.LinkID = omn.LinkID
		Inner Join scProcessInstance ip on ip.id = mi.PI_ID
		Inner Join Working_RM_Filter_ContactSummaryList w on w.Contact_ID = mi.ContactID
		Where ip.ProcessTypeInstance = 'Campaign' and ip.LinkID = @CampaignID and w.Username = @Username
		and ip.ProcessStatus = 'Started' and mi.Status in ('New', 'Created') and w.In_Campaign = 1 and w.Selected = 0 and w.FilterType = @FilterType
		and omn.LinkType = 'Task'
		
		--Reomve New and Created Tasks and Emails
		Delete scMethodInstance
		From scMethodInstance mi
		Inner Join scProcessInstance ip on ip.id = mi.PI_ID
		Inner Join Working_RM_Filter_ContactSummaryList w on w.Contact_ID = mi.ContactID
		Where ip.ProcessTypeInstance = 'Campaign' and ip.LinkID = @CampaignID and w.Username = @Username
		and ip.ProcessStatus = 'Started' and mi.Status in ('New', 'Created') and w.In_Campaign = 1 and w.Selected = 0 and w.FilterType = @FilterType
		
		--Now remove the campaignees
		Delete scCampaignees
		From scCampaignees ce
		Inner Join Working_RM_Filter_ContactSummaryList w on w.Contact_ID = ce.ContactID
		Where w.In_Campaign = 1 and w.Selected = 0 and w.FilterType = @FilterType and w.Username = @Username
						
		Delete Working_RM_ProcessUpdateStatusList where Username = @Username
		Insert Into Working_RM_ProcessUpdateStatusList(Username,ProccessInstanceID) 
		Select @Username, ip.id From scCampaign c Inner Join scProcessInstance ip on ip.LinkID = c.ID and ip.ProcessTypeInstance = 'Campaign' where c.ID = @CampaignID
		exec RM_UpdateProcessStatus @Username, @Contact_ID, -1 

	End
end
	 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RM_ProcessManagerSearch]') and xtype = 'P ')  
 drop Procedure RM_ProcessManagerSearch
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 CREATE Procedure RM_ProcessManagerSearch(@Username varchar(500), @ContactID int, @ProcessType varchar(20), @CampaignName varchar(128), @ProcessName varchar(64), @StepType varchar(8), @MethodStatus varchar(20), 
		@ProcessStartDateFrom datetime, @ProcessStartDateTo datetime, @StepStartDateFrom datetime, @StepStartDateTo datetime, @AssignedTo_ID int)

AS

--Declare @Username varchar(500), @ContactID int, @ProcessType varchar(20), @CampaignName varchar(128), @ProcessName varchar(64), @StepType varchar(8), @MethodStatus varchar(20), 
--		@ProcessStartDateFrom datetime, @ProcessStartDateTo datetime, @StepStartDateFrom datetime, @StepStartDateTo datetime, @AssignedTo_ID int
--Select @Username = 'mike', @ContactID = 97, @ProcessType = 'Campaign', @StepStartDateFrom = '5/28/2012', @StepStartDateTo = '5/29/2012', @AssignedTo_ID = 97

If exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#MethodIDList'))
drop table #MethodIDList
CREATE TABLE #MethodIDList(
ID int identity(1,1) not null primary key,
MetohodID int null
)

Insert Into #MethodIDList(MetohodID)
Select mi.id
--Select *
From scProcessInstance ip
--left outer join scCampaign c on c.ID = ip.LinkID and ip.ProcessTypeInstance = 'Campaign'
Inner Join scMethodInstance mi on mi.PI_ID = ip.id
Inner Join scStepInstance si on si.ID = mi.StepInstance_ID and si.PI_ID = ip.id
Where ip.OwnerID = @ContactID
and IsNull(ip.ProcessTypeInstance,'') = Case When IsNull(@ProcessType,'') = '' Then IsNull(ip.ProcessTypeInstance,'') Else ISNULL(@ProcessType,'') End
and ISNULL(si.MethodType,'') = Case When IsNull(@StepType,'') = '' Then ISNULL(si.MethodType,'') Else IsNull(@StepType,'') End
and ISNULL(mi.Status,'') = Case When ISNULL(@MethodStatus,'') = '' Then IsNull(mi.Status,'') Else ISNULL(@MethodStatus,'') End
and ISNULL(Convert(date,ip.ProcessStartDate),'1/1/1900') >= Case When ISNULL(Convert(date,@ProcessStartDateFrom),'1/1/1900') = '1/1/1900' Then ISNULL(Convert(date,ip.ProcessStartDate),'1/1/1900') Else ISNULL(Convert(date,@ProcessStartDateFrom),'1/1/1900') End
and ISNULL(Convert(date,ip.ProcessStartDate),'1/1/1900') <= Case When ISNULL(Convert(date,@ProcessStartDateTo),'1/1/2900') = '1/1/2900' Then ISNULL(Convert(date,ip.ProcessStartDate),'1/1/2900') Else ISNULL(Convert(date,@ProcessStartDateTo),'1/1/2900') End
and ISNULL(Convert(date,mi.StartDate),'1/1/1900') >= Case When ISNULL(Convert(date,@StepStartDateFrom),'1/1/1900') = '1/1/1900' Then ISNULL(Convert(date,mi.StartDate),'1/1/1900') Else ISNULL(Convert(date,@StepStartDateFrom),'1/1/1900') End
and ISNULL(Convert(date,mi.StartDate),'1/1/2900') <= Case When ISNULL(Convert(date,@StepStartDateTo),'1/1/2900') = '1/1/2900' Then ISNULL(Convert(date,mi.StartDate),'1/1/2900') Else ISNULL(Convert(date,@StepStartDateTo),'1/1/2900') End
and ISNULL(si.AssignTo_ID,-1) = Case When ISNULL(@AssignedTo_ID,-1) = -1 Then ISNULL(si.AssignTo_ID,-1) Else ISNULL(@AssignedTo_ID,-1) End

Delete working_RM_ProcessManager where Username = @Username

Insert Into working_RM_ProcessManager(Username, Selected, ProcessType, Description, ProcessName, ProcessStartDate, ContactName, MethodName, MethodType, MethodStartDate, MethodStatus, AssignedToID,
									  ProcessInstanceID, StepInstanceID, MethodInstanceID, CampaignDisplayID)
Select @Username, 0 [Selected], ip.ProcessTypeInstance, CASE WHEN ip.LinkID IN
                          (SELECT     ID
                            FROM          scCampaign) and ip.ProcessTypeInstance = 'Campaign' THEN (C.Description) WHEN ip.LinkID IN --'C' + CAST(C.ID AS Varchar(10)) + ' ' + 
                          (SELECT     ID
                            FROM          scLead) THEN con.KnownAs END, p.Description, ip.ProcessStartDate, con.KnownAs, si.Description, si.MethodType, mi.StartDate, mi.Status, si.AssignTo_ID,
                            ip.id, si.ID, mi.id, c.ID
From scProcessInstance ip
Inner Join scProcess p on p.ID = ip.ProcessID
Inner Join scMethodInstance mi on mi.PI_ID = ip.id
Inner Join scStepInstance si on si.PI_ID = ip.id and si.ID = mi.StepInstance_ID
Left Outer Join Contact con on con.ID = mi.ContactID
left outer join scCampaign c on c.ID = ip.LinkID and ip.ProcessTypeInstance = 'Campaign'
Left Outer Join Contact con1 on con1.ID = si.AssignTo_ID
Inner Join #MethodIDList w on w.MetohodID = mi.id
Where ip.OwnerID = @ContactID 
and c.Description like IsNull(@CampaignName,'') + '%'
and p.Description like ISNULL(@ProcessName,'') + '%'


--Select * From working_RM_ProcessManager where Username = @Username



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RM_StepInstance_AddStepTypeValues]') and xtype = 'P ')  
 drop Procedure RM_StepInstance_AddStepTypeValues
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure RM_StepInstance_AddStepTypeValues(@StepInstance_ID int, @CompanyID int, @DocType varchar(15))

AS

--begin tran
--Declare @StepInstance_ID int = 16 --15 email 16 task
--Declare @CompanyID int = 12, @DocType varchar(15) = 'CAMPAIGN_STEP'

Declare @MethodType varchar(8), @TR_DB varchar(500), @TR_SERVER varchar(500), @nSQL nvarchar(max)

Select @MethodType = MethodType From scStepInstance where ID = @StepInstance_ID
Select @TR_DB = TreasuryDBName, @TR_SERVER = SQLServerName From COMPANIES Where AutoID = @CompanyID

If @MethodType = 'Email'
Begin
	Update scStepInstance 
	Set Subject = e.Subject, Body = e.Body, AltBodyType = e.AltBodyType, AltBody = e.AltBody, TopcialArea_ID = e.TopicalArea_ID
	From scStepInstance si
	Inner Join scMethodEmail e on e.ID = si.Method_ID
	Where si.ID = @StepInstance_ID
	
	Select @nSQL =
	'Declare @StepType varchar(15) = ''STEP_EMAIL'', @FileOrigin varchar(100) = ''Campaign Step'', @TempLink varchar(50) = ''CampaignCopy'' + ''' + CONVERT(varchar(10),@StepInstance_ID) + ''', 
			@StepMethodType varchar(8) = ''Email'', @DocMgr_Types_ID int, @ProcessTypeInstance varchar(20) = ''Campaign''
			
	Update ' + @TR_DB + '.dbo.CFS_FileRepository Set TempID = null, TempLink = null Where TempLink = @TempLink
	
	Insert Into ' + @TR_DB + '.dbo.CFS_FileRepository(FileName, FileData, FileTypeDescription, AddedBy, DateAdded, FileType, TempID, TempLink, Mime_type, InternalOnly, FileStatus)
	Select r.FileName, r.FileData, r.FileTypeDescription, r.AddedBy, r.DateAdded, r.FileType, r.ID, @TempLink, r.Mime_type, r.InternalOnly, r.FileStatus
	From ' + @TR_DB + '.dbo.CFS_FileRepository r
	Inner Join ' + @TR_DB + '.dbo.CFS_FileReleations d on d.FileRepository_ID = r.ID
	Inner Join scStepInstance si on si.Method_ID = d.RelType_ID and si.MethodType = @StepMethodType
	Where d.RelType = @StepType and si.ID = ' + Convert(varchar(10),@StepInstance_ID) +'
	
	Insert Into ' + @TR_DB + '.dbo.CFS_FileReleations(FileRepository_ID, RelType, RelType_ID, ContextItemID, FileOrigin, Campaign_ID)
	Select r.ID, ''' + @DocType + ''', si.ID, d.ContextItemID, @FileOrigin, ip.LinkID
	From ' + @TR_DB + '.dbo.CFS_FileReleations d
	Inner Join scStepInstance si on si.Method_ID = d.RelType_ID and si.MethodType = @StepMethodType
	Inner Join ' + @TR_DB + '.dbo.CFS_FileRepository r on r.TempID = d.FileRepository_ID
	Inner Join scProcessInstance ip on ip.id = si.PI_ID
	Where d.RelType = @StepType and si.ID = ' + Convert(varchar(10),@StepInstance_ID) +' and r.TempLink = @TempLink and ip.ProcessTypeInstance = @ProcessTypeInstance 
	
	Select @DocMgr_Types_ID = ID From ' + @TR_DB + '.dbo.DocMgr_Types where [Type] = ''Process Manager'' 
	
	Insert Into ' + @TR_DB + '.dbo.DocMgr_Documents(DocMgr_Types_ID, Reference_Type, Referece_ID, Document_ID, DisplayName, FileName, ContextItem_ID, DateAdded, 
												DocumentOrigin, Campaign_ID)
	Select @DocMgr_Types_ID, ''StepInstance'', si.ID, d.Document_ID, d.DisplayName, d.FileName, d.ContextItem_ID, GETDATE(),
		   @FileOrigin, ip.LinkID
	From ' + @TR_DB + '.dbo.DocMgr_Documents d
	Inner Join scStepInstance si on si.Method_ID = d.Referece_ID
	Inner Join scProcessInstance ip on ip.id = si.PI_ID
	Where d.DocMgr_Types_ID = @DocMgr_Types_ID and d.Reference_Type = @StepMethodType and si.ID = ' + Convert(varchar(10),@StepInstance_ID) +' and ip.ProcessTypeInstance = @ProcessTypeInstance	
	
	Update ' + @TR_DB + '.dbo.CFS_FileRepository Set TempID = null, TempLink = null Where TempLink = @TempLink
	'

	exec sp_executesql @nSQL	
End
Else
Begin
	Update scStepInstance 
	Set Body = t.Notes, TopcialArea_ID = t.TopicalArea_ID
	From scStepInstance si
	Inner Join scMethodTask t on t.ID = si.Method_ID
	Where si.ID = @StepInstance_ID
	
	Select @nSQL =
	'Declare @StepType varchar(15) = ''STEP_TASK'', @FileOrigin varchar(100) = ''Campaign Step'', @TempLink varchar(50) = ''CampaignCopy'' + ''' + CONVERT(varchar(10),@StepInstance_ID) + ''', 
			@StepMethodType varchar(8) = ''Task'', @DocMgr_Types_ID int, @ProcessTypeInstance varchar(20) = ''Campaign''
	
	Update ' + @TR_DB + '.dbo.CFS_FileRepository Set TempID = null, TempLink = null Where TempLink = @TempLink
	
	Insert Into ' + @TR_DB + '.dbo.CFS_FileRepository(FileName, FileData, FileTypeDescription, AddedBy, DateAdded, FileType, TempID, TempLink, Mime_type, InternalOnly, FileStatus)
	Select r.FileName, r.FileData, r.FileTypeDescription, r.AddedBy, r.DateAdded, r.FileType, r.ID, @TempLink, r.Mime_type, r.InternalOnly, r.FileStatus
	From ' + @TR_DB + '.dbo.CFS_FileRepository r
	Inner Join ' + @TR_DB + '.dbo.CFS_FileReleations d on d.FileRepository_ID = r.ID
	Inner Join scStepInstance si on si.Method_ID = d.RelType_ID and si.MethodType = @StepMethodType
	Where d.RelType = @StepType and si.ID = ' + Convert(varchar(10),@StepInstance_ID) +'
	
	Insert Into ' + @TR_DB + '.dbo.CFS_FileReleations(FileRepository_ID, RelType, RelType_ID, ContextItemID, FileOrigin, Campaign_ID)
	Select r.ID, ''' + @DocType + ''', si.ID, d.ContextItemID, @FileOrigin, ip.LinkID
	From ' + @TR_DB + '.dbo.CFS_FileReleations d
	Inner Join scStepInstance si on si.Method_ID = d.RelType_ID and si.MethodType = @StepMethodType
	Inner Join ' + @TR_DB + '.dbo.CFS_FileRepository r on r.TempID = d.FileRepository_ID
	Inner Join scProcessInstance ip on ip.id = si.PI_ID
	Where d.RelType = @StepType and si.ID = ' + Convert(varchar(10),@StepInstance_ID) +' and r.TempLink = @TempLink and ip.ProcessTypeInstance = @ProcessTypeInstance	
	
	Select @DocMgr_Types_ID = ID From ' + @TR_DB + '.dbo.DocMgr_Types where [Type] = ''Process Manager'' 
	
	Insert Into ' + @TR_DB + '.dbo.DocMgr_Documents(DocMgr_Types_ID, Reference_Type, Referece_ID, Document_ID, DisplayName, FileName, ContextItem_ID, DateAdded, 
												DocumentOrigin, Campaign_ID)
	Select @DocMgr_Types_ID, ''StepInstance'', si.ID, d.Document_ID, d.DisplayName, d.FileName, d.ContextItem_ID, GETDATE(),
		   @FileOrigin, ip.LinkID
	From ' + @TR_DB + '.dbo.DocMgr_Documents d
	Inner Join scStepInstance si on si.Method_ID = d.Referece_ID
	Inner Join scProcessInstance ip on ip.id = si.PI_ID
	Where d.DocMgr_Types_ID = @DocMgr_Types_ID and d.Reference_Type = @StepMethodType and si.ID = ' + Convert(varchar(10),@StepInstance_ID) +' and ip.ProcessTypeInstance = @ProcessTypeInstance
	
	Update ' + @TR_DB + '.dbo.CFS_FileRepository Set TempID = null, TempLink = null Where TempLink = @TempLink
		
	'

	exec sp_executesql @nSQL
End


--Rollback Tran


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RM_StepInstanceReSequence]') and xtype = 'P ')  
 drop Procedure RM_StepInstanceReSequence
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure RM_StepInstanceReSequence(@StepInstance_ID int, @PI_ID int)

AS

--Begin Tran
--Declare @StepInstance_ID int, @PI_ID int
--Select @StepInstance_ID = 15, @PI_ID = 79
--Update scStepInstance Set StepNumber = 2 where ID = 3

If Exists (Select * From tempdb..sysobjects Where id = object_id(N'tempdb..#Working_RM_StepInstanceNewSeq'))
Drop Table #Working_RM_StepInstanceNewSeq

Create Table #Working_RM_StepInstanceNewSeq
(
	ID int identity(1,1) not null,
	StepInstance_ID int not null
)

Insert Into #Working_RM_StepInstanceNewSeq(StepInstance_ID)
Select ID From scStepInstance 
Where PI_ID = @PI_ID and ( StepNumber < (Select StepNumber From scStepInstance Where ID = @StepInstance_ID) or ID = @StepInstance_ID)
Order By StepNumber

Insert Into #Working_RM_StepInstanceNewSeq(StepInstance_ID)
Select ID From scStepInstance 
Where PI_ID = @PI_ID and StepNumber >= (Select StepNumber From scStepInstance Where ID = @StepInstance_ID) And ID != @StepInstance_ID
Order By StepNumber

Update scStepInstance Set StepNumber = (Select ID From #Working_RM_StepInstanceNewSeq w where w.StepInstance_ID = scStepInstance.ID) Where PI_ID = @PI_ID

--Select * From #Working_RM_StepInstanceNewSeq
--Select * From scStepInstance

--Rollback Tran


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RM_UpdateProcessStatus]') and xtype = 'P ')  
 drop Procedure RM_UpdateProcessStatus
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE Procedure [dbo].[RM_UpdateProcessStatus] (@Username varchar(500), @ContactID int, @ProcessInstanceID int)

AS

--Begin Tran
--Declare @Username varchar(500), @ContactID int, @ProcessInstanceID int
--Select @Username = 'Mike', @ContactID = 97, @ProcessInstanceID = -1

If Exists(Select 1 From working_RM_ProcessManager where Username = @Username) AND ISNull(@ProcessInstanceID,-1) = -1
Begin
	Delete Working_RM_ProcessUpdateStatusList where Username = @Username
	
	Insert Into Working_RM_ProcessUpdateStatusList(Username,ProccessInstanceID)
	Select @Username, id
	From scProcessInstance where OwnerID = @ContactID
End
Else If ISNULL(@ProcessInstanceID,-1) > 0
Begin	
	Delete Working_RM_ProcessUpdateStatusList where Username = @Username
	
	Insert Into Working_RM_ProcessUpdateStatusList(Username,ProccessInstanceID)
	Select @Username, @ProcessInstanceID
End

Update scStepInstance
Set StepStatus = Case When (Select COUNT(1) From scMethodInstance mi Where mi.StepInstance_ID = si.ID) = 0 Then 'N'
					  When (Select COUNT(1) From scMethodInstance mi Where mi.StepInstance_ID = si.ID) =
						   (Select COUNT(1) From scMethodInstance mi Where mi.StepInstance_ID = si.ID and mi.Status = 'Complete') Then 'F'
					  Else 'S' End
From scStepInstance si
Inner Join Working_RM_ProcessUpdateStatusList w on w.ProccessInstanceID = si.PI_ID
Where w.Username = @Username

Update scProcessInstance
Set ProcessStatus = Case When (Select COUNT(1) From scStepInstance si Where si.PI_ID= ip.ID) = 
							  (Select COUNT(1) From scStepInstance si Where si.PI_ID= ip.ID and si.StepStatus = 'N') Then 'Not Started'
					     When (Select COUNT(1) From scStepInstance si Where si.PI_ID= ip.ID) =
						      (Select COUNT(1) From scStepInstance si Where si.PI_ID= ip.ID and si.StepStatus = 'F') Then 'Finished'
					     Else 'Started' End
From scProcessInstance ip

--Select * From scStepInstance si Where si.PI_ID in (Select w.ProccessInstanceID From Working_RM_ProcessUpdateStatusList w where w.Username = @Username)
--Select * From scProcessInstance ip Where ip.id in (Select w.ProccessInstanceID From Working_RM_ProcessUpdateStatusList w where w.Username = @Username)

--Rollback Tran




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RPT_GetOperationalReportOverride]') and xtype = 'P ')  
 drop Procedure RPT_GetOperationalReportOverride
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure RPT_GetOperationalReportOverride (@CompanyID int, @ReportName varchar(500), @CrystalName varchar(500) output)

AS

--Declare @CompanyID int = 12, @ReportName varchar(500) = 'ARInvoiceX.rpt', @CrystalName varchar(500) --output --'ARInvoiceX.rpt' 'ARInvoice_ISO_NoBO_TypeSX.rpt'

Declare @TR_DB varchar(500), @TR_SERVER varchar(500), @nSql nvarchar(4000), @Rpt_AliasID int
Select @TR_DB = TreasuryDBName, @TR_SERVER = SQLServerName From Companies where AutoID = @CompanyID

Select @Rpt_AliasID = Rpt_AliasID From dbo.REPORTS Where CrystalName = @ReportName  and Report_Type = 'O'


Select @nSql = N'Select @CrystalName = CrystalName From dbo.REPORT_OVERRIDES ro Inner Join [' + @TR_DB + '].dbo.Report_Overrides_List rol on rol.OverrideID = ro.OverrideID Where rol.Report_AliasID = ' + Convert(varchar,@Rpt_AliasID)
exec sp_executesql @nSql, N'@CrystalName varchar(500) output', @CrystalName output

Select @CrystalName = IsNull(@CrystalName,@ReportName)
Select @CrystalName [CrystalName]

--Select * From Report_Overrides_List
--Select * From WEB_SUMMIT_V10.dbo.REPORTS where Rpt_AliasID in (1855,323)



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RT_CCC_Search]') and xtype = 'P ')  
 drop Procedure RT_CCC_Search
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec RT_CCC_Search 'csw_resg_demo_c', 12, null, null, null, null, null, null, null
create proc RT_CCC_Search @CSW_DB varchar(50), @CompanyID int, @REQ_ID int, @TicketNum int, @CustomerID int, @OwnerID int, 
	@AssigneeID int, @FromDT datetime, @ToDT datetime
as
begin
	--*** SELECT QUERY USED TO LOAD DATASET ***
	--select r.REQ_ID, r.REQ_TicketNum, r.REQ_Date, r.REQ_Subject,
	--	case r.REQ_Status
	--		when 0 then 'Incomplete'
	--		when 5 then 'Submitted'
	--		when 10 then 'Resubmitted'
	--		when 14 then 'Reflex Suspended'
	--		when 16 then 'Reflex Awaiting Response'
	--		when 18 then 'Client Suspended'
	--		when 20 then 'QA Failed'
	--		when 30 then 'QA'
	--		when 33 then 'GAP WIP'
	--		when 35 then 'QA Passed'
	--		when 60 then 'Failed'
	--		when 70 then 'Deployed'
	--		when 80 then 'Passed'
	--		when 85 then 'Cancelled'
	--		when 90 then 'Historical' end [Status],
	--	case when (r.Client_SubmittedBy_ContactID = -9999) then '[Internal]' else isnull(C_OWN.KnownAs, '[Unknown]') end [Owner],
	--	CUST.NAME [Customer], CUST.CUSTOMER_CODE [Customer_Code], CUST.Customer_ID,
	--	ISNULL(C_Asg.KnownAs, 'Unassigned') As [Assignee], ISNULL(C_Comm.KnownAs, 'Unassigned') [Communicator] 
	--from csw_resg_demo_c.dbo.HM_SvcReq r
	--LEFT JOIN dbo.Contact C_OWN ON C_OWN.ID = r.Client_SubmittedBy_ContactID
	--LEFT JOIN dbo.Contact C_Comm  ON C_Comm.ID  = r.Communications_ContactID
	--LEFT JOIN dbo.Contact C_Asg   ON C_Asg.ID   = r.Assign_ContactID
	--LEFT JOIN dbo.Relations R_ADDED ON R_ADDED.Target='Customer' and R_ADDED.ItemType='Contact' AND R_ADDED.ItemID=r.Client_SubmittedBy_ContactID
	--LEFT JOIN tr_resg_demo_c.dbo.CUSTOMERS CUST ON CUST.CUSTOMER_ID= R_ADDED.TargetID
	--where r.REQ_Status not in (85, 90)
	--order by r.REQ_Date desc


	declare @TR_DB varchar(50), @sql varchar(max), @WREQ_ID varchar(250), @WTicket varchar(250), @WCustomerID varchar(250), 
		@WOwnerID varchar(250), @WAssigneeID varchar(250), @WFromDT varchar(250), @WToDT varchar(250)

	select @TR_DB=TreasuryDBName FROM COMPANIES where AutoID=@CompanyID	


	if( @REQ_ID is null )
		select @WREQ_ID = ' r.REQ_ID = r.REQ_ID '
	else
		select @WREQ_ID = ' r.REQ_ID = '+cast(@REQ_ID as varchar(15))+' '

	if( @TicketNum is null )
		select @WTicket = ' r.REQ_TicketNum = r.REQ_TicketNum '
	else
		select @WTicket = ' r.REQ_TicketNum = '+cast(@TicketNum as varchar(15))+' '
		
	if( @CustomerID is null )
		select @WCustomerID = ' isnull(CUST.Customer_ID,-1) = isnull(CUST.Customer_ID,-1) '
	else 
		select @WCustomerID = ' CUST.Customer_ID = '+cast(@CustomerID as varchar(15))+' '
		
	if( @OwnerID is null )
		select @WOwnerID = ' isnull(C_OWN.ID,-1) = isnull(C_OWN.ID,-1) '
	else 
		select @WOwnerID = ' C_OWN.ID = '+cast(@OwnerID as varchar(15))+' '
		
	if( @AssigneeID is null )
		select @WAssigneeID = ' isnull(C_Asg.ID,-1) = isnull(C_Asg.ID,-1) '
	else 
		select @WAssigneeID = ' C_Asg.ID = '+cast(@AssigneeID as varchar(15))+' '
		
	if( @FromDT is null )
		select @WFromDT = ' isnull(r.REQ_Date,getdate()) = isnull(r.REQ_Date,getdate()) '
	else 
		select @WFromDT = ' cast(r.REQ_Date as date) >= '''+cast(cast(@FromDT as DATE) as varchar(15))+''' '
		
	if( @ToDT is null )
		select @WToDT = ' isnull(r.REQ_Date,getdate()) = isnull(r.REQ_Date,getdate()) '
	else 
		select @WToDT = ' cast(r.REQ_Date as date) <= '''+cast(cast(@ToDT as DATE) as varchar(15))+''' '

	select @sql =
	'select r.REQ_ID, r.REQ_TicketNum, r.REQ_Date, r.REQ_Subject,
		case r.REQ_Status
			when 0 then ''Incomplete''
			when 5 then ''Submitted''
			when 10 then ''Resubmitted''
			when 14 then ''Reflex Suspended''
			when 16 then ''Reflex Awaiting Response''
			when 18 then ''Client Suspended''
			when 20 then ''QA Failed''
			when 30 then ''QA''
			when 33 then ''GAP WIP''
			when 35 then ''QA Passed''
			when 60 then ''Failed''
			when 70 then ''Deployed''
			when 80 then ''Passed''
			when 85 then ''Cancelled''
			when 90 then ''Historical'' end [Status],
		case when (r.Client_SubmittedBy_ContactID = -9999) then ''[Internal]'' else isnull(C_OWN.KnownAs, ''[Unknown]'') end [Owner],
		CUST.NAME [Customer], CUST.CUSTOMER_CODE [Customer_Code], CUST.Customer_ID,
		ISNULL(C_Asg.KnownAs, ''Unassigned'') As [Assignee], ISNULL(C_Comm.KnownAs, ''Unassigned'') [Communicator] 
	from '+@CSW_DB+'.dbo.HM_SvcReq r
	LEFT JOIN dbo.Contact C_OWN ON C_OWN.ID = r.Client_SubmittedBy_ContactID
	LEFT JOIN dbo.Contact C_Comm  ON C_Comm.ID  = r.Communications_ContactID
	LEFT JOIN dbo.Contact C_Asg   ON C_Asg.ID   = r.Assign_ContactID
	LEFT JOIN dbo.Relations R_ADDED ON R_ADDED.Target=''Customer'' and R_ADDED.ItemType=''Contact'' AND R_ADDED.ItemID=r.Client_SubmittedBy_ContactID
	LEFT JOIN '+@TR_DB+'.dbo.CUSTOMERS CUST ON CUST.CUSTOMER_ID= R_ADDED.TargetID
	where r.REQ_Status not in (85, 90)
	and '+@WREQ_ID+'
	and '+@WTicket+'
	and '+@WCustomerID+'
	and '+@WOwnerID+'
	and '+@WAssigneeID+'
	and '+@WFromDT+'
	and '+@WToDT+'
	order by r.REQ_Date desc'
	exec(@sql)
	
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SC_ContactHistoryViewer]') and xtype = 'P ')  
 drop Procedure SC_ContactHistoryViewer
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE Procedure [dbo].[SC_ContactHistoryViewer](@Username varchar(500),
@ContactID int, 
@CompanyID int,
@type varchar(50), 

@descriptionName varchar(40), 
@topicalArea varchar(100), 
@assignedTo varchar(50), 
@assignedBy varchar(50),
@startDate datetime, 
@endDate datetime, 
@refType varchar(6),
@ref int, 
@status char
) AS

-- *** THIS PROC IS CALLED BY THE WEB PROC WS_RM_OutstandingTaskApp_Get, ANY CHANGES IN PARAMS NEED TO BE REFLECTED IN THE CALLING PROC ***

Declare @TRDBName varchar(500), @nSql nvarchar(4000)
Select @TRDBName = TreasuryDBName From COMPANIES where AutoID = @CompanyID


Select @nSql = 
'Select distinct
ch.ID ContactHistoryID, ctg.ContactTypeGroup [Type], ch.Subject [DescriptionName], ci.Name [TopcialArea], c.KnownAs [AssignedTo], o.KnownAs [AssignedBy], 
Case When IsNull(ph.pri_name,'''') = '''' Then ph.pri_desc1 else ph.pri_name End ProjectWO, at.StartDate, at.EndDate, at.pct_comp [pct_comp], ch.Body [Notes], 
ch.ContactID, r.Target, r.TargetID, Case 
WHen r.Target = ''Customer'' Then cus.NAME 
When r.Target = ''Prospect'' Then p.NAME 
WHen r.Target = ''Supplier'' Then sup.NAME 
WHen r.Target = ''Schedule'' Then sch.[ReferenceType] + '' '' + cast(sch.[ReferenceID] as varchar(max)) + '', Task #'' + cast(sd.sort as varchar(max)) + '', '' + sd.NAME 
Else '''' End [Name],

case 
when ch.ReferenceType = ''SOQ'' then ''Sales Order/Quote #'' 
when ch.ReferenceType = ''ProjWO'' then ''Project/Work Order #'' 
when ch.ReferenceType = ''OPP'' then ''Opportunity #'' 
when ch.ReferenceType = ''ST'' then ''Schedule Task'' 
else '''' end [ReferenceType], 

isnull(isnull(isnull(proj.pri_code,smh.so_no), opp.opportuntity_num), sd.Sort) [Reference]

From ContactHistory ch
Inner Join contact_AptsTasks at on at.contactHistoryID = ch.ID
Inner Join Contact c on c.ID = at.AssignedTo
Inner Join Contact o on o.ID = ch.ContactOwnerID
Inner Join ContactType ct on ct.ID = ch.ContactType_ID
Inner Join ContactTypeGroup ctg on ctg.ID = ct.ContactGroupID
Left Outer Join ContextItem ci on ci.ID = ch.ContextItemId
left outer join ' + @TRDBName + '.dbo.proj_header proj on proj.pri_id=ch.referenceID and ch.ReferenceType = ''ProjWO''
left outer join ' + @TRDBName + '.dbo.so_master_hdr smh on smh.so_id=ch.referenceID and ch.ReferenceType = ''SOQ''
left outer join ' + @TRDBName + '.dbo.rm_opportunity opp on opp.rm_opportunity_id=ch.referenceID and ch.ReferenceType = ''OPP''
left outer join ' + @TRDBName + '.dbo.ScheduleTasks sd on sd.id=ch.referenceID and ch.ReferenceType = ''ST''
left outer join ' + @TRDBName + '.dbo.ScheduleHeader sch on sd.ScheduleHeaderID=sch.ID 

Inner Join Relations r on r.ItemID = ch.ContactID and r.ItemType = ''Contact''
Left Outer Join ' + @TRDBName + '.dbo.PROJ_HEADER ph on ph.pri_id = ch.pri_num
Inner Join ' + @TRDBName + '.dbo.MLUSER m on m.ContactID = o.ID
Inner Join ' + @TRDBName + '.dbo.working_mluser_supervisor ms on ms.mluser = m.NAME
Left Outer Join ' + @TRDBName + '.dbo.Customers cus on cus.Customer_ID = r.TargetID
Left Outer Join ' + @TRDBName + '.dbo.PROSPECTS p on p.PROSPECT_ID = r.TargetID
Left Outer Join ' + @TRDBName + '.dbo.SUPPLIER_MASTER sup on sup.SUPPLIER_ID = r.TargetID

Where ' + 
(case when @type is null then 'ctg.ContactTypeGroup in (''Task'', ''Appointment'')' 
else 'ctg.ContactTypeGroup = ''' + @type + ''' '
end) + '
and r.CompanyID = ' + CONVERT(varchar(20),@CompanyID) + ' 
and ms.username = ''' + @Username + '''' 
+ (case when @descriptionName is null then '' else ' and ch.Subject like ''%' + Replace(Replace(@descriptionName,'[','^['),'','''''') +'%'' escape ''^''' end) 
+(case when @topicalArea is null then '' else ' and ci.ID =' + @topicalArea + '' end) 
+(case when @assignedTo is null then '' else ' and c.ID =' + @assignedTo end) 
+(case when @assignedBy is null then '' else ' and o.ID =' + @assignedBy end) 
+(case when @startDate is null then '' else ' and at.StartDate > convert(date,''' + convert(varchar(20),@startDate)+''')' end) 
+(case when @endDate is null then '' else ' and at.EndDate < convert(date,''' + convert(varchar(20),@endDate)+''')' end) 
+(case when @refType is null then '' else ' and ch.ReferenceType = ''' + @refType+'''' end)
+(case when @ref is null then '' else ' and isnull(isnull(isnull(proj.pri_code,smh.so_no), opp.opportuntity_num), sd.Sort) = ' + convert(varchar(20),@ref) end) +
+(case when @status = 'c' then ' and at.pct_comp = 100' 
when @status = 'o' then ' and at.StartDate >= cast(getdate() as date) and at.pct_comp < 100' 
when @status = 'n' then ' and at.pct_comp = 0' 
when @status = 'i' then ' and at.pct_comp != 100'else '' end) +

'
and r.Target in (''Customer'', ''Prospect'', ''Supplier'', ''Schedule'')



and ( (Case When ctg.ContactTypeGroup = ''Task'' Then IsNull(at.pct_comp,0) Else 100 End < 101)
		or Case When ctg.ContactTypeGroup = ''Appointment'' Then Convert(date,IsNull(at.EndDate,GetDate())) Else ''1/1/1900'' End >= Convert(date,GetDate())) 
and (IsNull(ch.isPrivate,0) = 0 or (IsNull(ch.isPrivate,0) = 1 and ch.ContactOwnerID = ' + Convert(varchar(20),@ContactID) + ')) 
Order by ch.ContactID desc'
 
exec(@nSql)
print @nSql


--dotnet data adapter select
--Select ch.ID ContactHistoryID, ctg.ContactTypeGroup [Type], ch.Subject [DescriptionName], ci.Name [TopcialArea], c.KnownAs [AssignedTo], o.KnownAs [AssignedBy], 
--Case When IsNull(ph.pri_name,'') = '' Then ph.pri_desc1 else ph.pri_name End ProjectWO, at.StartDate, at.EndDate, at.pct_comp, ch.Body [Notes], ch.ContactID,
--r.Target, r.TargetID, Case WHen r.Target = 'Customer' Then cus.NAME When r.Target = 'Prospect' Then p.NAME WHen r.Target = 'Supplier' Then sup.NAME Else '' End [Name],
--cast('' as varchar(100)) [ReferenceType], 0 [Reference]
--From ContactHistory ch
--Inner Join contact_AptsTasks at on at.contactHistoryID = ch.ID
--Inner Join Contact c on c.ID = at.AssignedTo
--Inner Join Contact o on o.ID = ch.ContactOwnerID
--Inner Join ContactType ct on ct.ID = ch.ContactType_ID
--Inner Join ContactTypeGroup ctg on ctg.ID = ct.ContactGroupID
--Inner Join ContextItem ci on ci.ID = ch.ContextItemId
--Inner Join Relations r on r.ItemID = ch.ContactID and r.ItemType = 'Contact'
--Left Outer Join tr_strike_test10.dbo.PROJ_HEADER ph on ph.pri_id = ch.pri_num
--Inner Join tr_strike_test10.dbo.MLUSER m on m.ContactID = o.ID
--Inner Join tr_strike_test10.dbo.working_mluser_supervisor ms on ms.mluser = m.NAME
--Left Outer Join tr_strike_test10.dbo.Customers cus on cus.Customer_ID = r.TargetID
--Left Outer Join tr_strike_test10.dbo.PROSPECTS p on p.PROSPECT_ID = r.TargetID
--Left Outer Join tr_strike_test10.dbo.SUPPLIER_MASTER sup on sup.SUPPLIER_ID = r.TargetID
--Where ctg.ContactTypeGroup in ('Task', 'Appointment') and r.CompanyID = 12 and ms.username = 'mike' 
--and r.Target in ('Customer', 'Prospect', 'Supplier')
--and ( (Case When ctg.ContactTypeGroup = 'Task' Then Convert(date,IsNull(at.EndDate,GetDate())) Else Convert(date,GetDate()) End <= Convert(date,GetDate()) and IsNull(at.pct_comp,0) < 100)
--or Case When ctg.ContactTypeGroup = 'Appointment' Then IsNull(at.EndDate,GetDate()) Else GetDate() End <= GetDate()) 

--Select * From TR_GC_TEST.dbo.working_mluser_supervisor
--Select * From TR_GC_TEST.dbo.MLUSER

--Select * From ContactTypeGroup
--Select * From COMPANIES
--Select * From contact_AptsTasks
--Select * From ContactHistory




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scAlterscLead]') and xtype = 'P ')  
 drop Procedure scAlterscLead
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE PROCEDURE dbo.scAlterscLead AS
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scFNGetKnownAs]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[scFNGetKnownAs]





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scCheckLoginCredentials]') and xtype = 'P ')  
 drop Procedure scCheckLoginCredentials
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


-- scCheckLoginCredentials robg, 1
CREATE PROCEDURE dbo.scCheckLoginCredentials

	(
		@UserName varchar(50),
		@Password varchar(20)
	)

AS
	SET NOCOUNT ON
	
	SELECT	Contact.ID as UserID, 
			Contact.Windows_Login as UserName, 
			Access.UserLevel as UserLevel
	FROM	Contact INNER JOIN
				Access ON Contact.ID = Access.ContactID
	WHERE	(Access.UserLevel IN ('S', 'M')) 
		AND (Contact.Password = @Password) 
		AND (Contact.Windows_Login = @UserName)
	
	RETURN 




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scGetAccounts]') and xtype = 'P ')  
 drop Procedure scGetAccounts
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





-- scGetAccounts ken, ken
CREATE   PROCEDURE [dbo].[scGetAccounts]
	(
		@UserName varchar(50),
		@Password varchar(20)
	)
AS
	SET NOCOUNT ON

	SELECT	distinct Contact.ID AS UserID,
			Contact.Windows_Login AS UserName,
			Contact.Password AS Password
	FROM	Contact INNER JOIN
	               Access ON Contact.ID = Access.ContactID
	WHERE	Contact.Password = @Password 
		AND Contact.FirstName = @UserName
		AND Access.UserLevel in ('S','M','A','C')
		
	SELECT	ContactID AS UserID, 
			UserLevel AS Permission
	FROM	Access
	WHERE	ContactID IN (
		SELECT	Contact.ID 
		FROM	Contact INNER JOIN
	               Access ON Contact.ID = Access.ContactID
		WHERE	Contact.Password = @Password 
			AND Contact.FirstName = @UserName)
			AND Access.UserLevel in ('S','M','A','C')
	
	RETURN 









Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SchedulingGetChangedHeaders]') and xtype = 'P ')  
 drop Procedure SchedulingGetChangedHeaders
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[SchedulingGetChangedHeaders] as
--begin tran

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ExternallyChangedTasks'))
drop table #ExternallyChangedTasks
CREATE TABLE #ExternallyChangedTasks(
	id int not null identity(1,1) primary key,
	TaskID int,
	AptTaskID int,
	ReferenceID int,
	ReferenceType varchar(100),
	CompanyID int,
	HeaderReference varchar(100),
	HeaderReferenceType varchar(100))


insert #ExternallyChangedTasks(TaskID, AptTaskID, ReferenceID, ReferenceType, CompanyID)
select i.ID, at.ID, i.ReferenceID, i.ReferenceType, i.CompanyID
from ContactHistory i
join contact_AptsTasks at on at.contactHistoryID = i.ID
where i.ChangedExternal = 1

--secure the records
update ContactHistory set 
ChangedExternal = 0
where id in (select TaskID from #ExternallyChangedTasks)

--add these to the others to form a basis of alert for schecduling
insert SchedulingExternallyChangedTasks(CompanyId, ScheduleTaskID, ScheduleTaskReferenceID, ScheduleTaskReferenceType, 
HeaderReference, HeaderReferenceType, Completed, Origin, CreationDate, NotificationReceivedDate)
select CompanyID, ReferenceID, null, 'ST',
null, null, 1, 'ExchangeBasedInsert', getdate(), getdate()
from #ExternallyChangedTasks


/*now grab externally changed tasks that are not outlook/exchange based 
  for example, schedule tasks not marked as task or appointments that have had their completion changed from other subsystems such as:
	A. SOs
		1. Drawing Approval
		2. Free Issue / VA Shipping
		3. PO Print
		4. PO Receipt - Finished Goods
		5. PO Receipt - Raw Materials
		6. Shipping
	B. WOs
	C. Projects
	D. POs
	E. Other
*/

insert #ExternallyChangedTasks(TaskID, AptTaskID, ReferenceID, ReferenceType, CompanyID, HeaderReference, HeaderReferenceType)
select null, null, ScheduleTaskReferenceID, ScheduleTaskReferenceType, CompanyId, HeaderReference, HeaderReferenceType
from SchedulingExternallyChangedTasks
where Completed = 0

update SchedulingExternallyChangedTasks
set Completed = 1,
NotificationReceivedDate = getdate()
where cast(ScheduleTaskReferenceID as varchar(50)) + cast(ScheduleTaskReferenceType as varchar(200)) in
(select cast(ReferenceID as varchar(50)) + cast(ReferenceType as varchar(200)) from #ExternallyChangedTasks)

declare @CompanyID varchar(50), @TreasuryDBName varchar(max), @CompanyServerName varchar(max), @sql varchar(max)
declare cur cursor for 
select distinct CompanyID, TreasuryDBName, CompanyServerName
from #ExternallyChangedTasks ol
join COMPANIES c on c.AutoID = ol.CompanyID
open cur
fetch cur into @CompanyID, @TreasuryDBName, @CompanyServerName
while @@fetch_status = 0
begin
	select @sql = '
update SchedulingExternallyChangedTasks set 
HeaderReference = case when sh.ReferenceType = ''Free Schedule'' then sh.id else sh.ReferenceID end,
HeaderReferenceType = sh.ReferenceType
from SchedulingExternallyChangedTasks et
join ' + @TreasuryDBName + '..Scheduletasks st on st.id = et.ScheduleTaskID and et.ScheduleTaskReferenceType = ''ST''
join ' + @TreasuryDBName + '..ScheduleHeader sh on sh.id = st.ScheduleHeaderID
where et.HeaderReference is null
and et.Origin = ''ExchangeBasedInsert''
and et.CompanyID = ' + @CompanyID + '

update #ExternallyChangedTasks set 
HeaderReference = case when sh.ReferenceType = ''Free Schedule'' then sh.id else sh.ReferenceID end,
HeaderReferenceType = sh.ReferenceType
from #ExternallyChangedTasks et
join ' + @TreasuryDBName + '..Scheduletasks st on st.id = et.ReferenceID and et.ReferenceType = ''ST''
join ' + @TreasuryDBName + '..ScheduleHeader sh on sh.id = st.ScheduleHeaderID
where et.HeaderReference is null
and et.CompanyID = ' + @CompanyID
	print @sql
	exec(@sql)
	
	fetch cur into @CompanyID, @TreasuryDBName, @CompanyServerName
end
close cur
deallocate cur

select distinct HeaderReference, HeaderReferenceType, CompanyID from #ExternallyChangedTasks

--select * from SchedulingExternallyChangedTasks
--rollback tran

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSP_ListOfOptions]') and xtype = 'P ')  
 drop Procedure scSP_ListOfOptions
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





CREATE   PROCEDURE [dbo].[scSP_ListOfOptions]

@QuoteID int,
@Company varchar(128)

AS

-- exec scSP_ListOfOptions 2429, tr_realestatebeta


BEGIN
--	Declare @QuoteID int Select @QuoteID = 2435

	SELECT DISTINCT 
		Q.DepositTotal,
		Case When (Q.DepositTotal - (Select IsNull(Sum(Amount),0) from scPaymentMain PM
							inner join scPaymentDetail PD on PM.ID = PD.PaymentID
							Where PD.OptionID = Q.ID and PM.QuoteID = @QuoteID)) < 0 Then 0
			 Else Q.DepositTotal - (Select IsNull(Sum(Amount),0) from scPaymentMain PM
							inner join scPaymentDetail PD on PM.ID = PD.PaymentID
							Where PD.OptionID = Q.ID and PM.QuoteID = @QuoteID) End as DepositRemaining,
		Case When (Q.PayableTotal - (Select IsNull(Sum(Amount),0) from scPaymentMain PM
							inner join scPaymentDetail PD on PM.ID = PD.PaymentID
							Where PD.OptionID = Q.ID and PM.QuoteID = @QuoteID)) < 0 Then 0
			 Else Q.PayableTotal - (Select IsNull(Sum(Amount),0) from scPaymentMain PM
							inner join scPaymentDetail PD on PM.ID = PD.PaymentID
							Where PD.OptionID = Q.ID and PM.QuoteID = @QuoteID) End as AmountRemaining,
		Q.ID, 
		CAST( O.EXP_DESC AS Varchar(128)) AS Description, 
		ISNULL(MAJ.Group_Desc, 'No Description') AS GroupDesc
	
	
	FROM		HB_Options O

	LEFT JOIN	scQuoteOptions Q 
			ON Q.Option_ID = O.Option_ID

	LEFT JOIN	HB_OPT_MAJ_GROUP MAJ 
			ON MAJ.MAJ_GROUP_ID = O.MAJ_GROUP_ID
	
	WHERE Q.QuoteID = @QuoteID AND ISNULL(Q.DepositTotal,0) > 0 and IsNull(Q.Removed,0) != 1

END








Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSP_PaymentDelete]') and xtype = 'P ')  
 drop Procedure scSP_PaymentDelete
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





CREATE   PROCEDURE dbo.scSP_PaymentDelete

	@PaymentID		int

AS
BEGIN

	DELETE FROM scPaymentDetail
	WHERE PaymentID = @PaymentID

	DELETE FROM scPaymentMain
	WHERE ID = @PaymentID
END







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSP_PaymentInsert]') and xtype = 'P ')  
 drop Procedure scSP_PaymentInsert
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go








CREATE   PROCEDURE dbo.scSP_PaymentInsert

	@BatchID		int,
	@QuoteID		int,
	@PaymentType		varchar(32),
	@Amount		money,
	@CheckDated		smalldatetime,
	@CheckNumber	varchar(64),
	@PaymentFormID	int

AS

BEGIN

INSERT INTO scPaymentMain
(
	BatchID, QuoteID, CheckDated, CheckNumber, PaymentFormID
)
VALUES
(
	@BatchID, @QuoteID, @CheckDated, @CheckNumber, @PaymentFormID
)

DECLARE	@NewPaymentID int
SELECT		@NewPaymentID = @@IDENTITY

IF @PaymentType = 'Deposit' OR @PaymentType = 'Progress'
BEGIN

	INSERT INTO scPaymentDetail
	(
		PaymentID, Amount, PaymentType, OptionID, StageID
	)
	VALUES
	(
		@NewPaymentID, @Amount, @PaymentType, 0, 0
	)
END

IF @PaymentType = 'Distribution'
BEGIN
	INSERT INTO scPaymentDetail
	(
		PaymentID, Amount, PaymentType, OptionID, StageID
	)
	VALUES
	(
		@NewPaymentID, @Amount, 'Progress', 0, 0
	)

	INSERT INTO scPaymentDetail
	(
		PaymentID, Amount, PaymentType, OptionID, StageID
	)
	VALUES
	(
		@NewPaymentID, 0, 'Progress', 0, 0
	)

END

SELECT @NewPaymentID AS LeadID

END










Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSP_PaymentScheduleForPaymentDetail]') and xtype = 'P ')  
 drop Procedure scSP_PaymentScheduleForPaymentDetail
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE PROCEDURE [dbo].[scSP_PaymentScheduleForPaymentDetail]

	(
		@QuoteID int
	)
AS

--Declare @QuoteID int set @QuoteID = 1212

Declare @MSP_Proj_ID int, @StartDate datetime 
Select @MSP_Proj_ID = MSP_Proj_ID, @StartDate = SaleDate From scQuote Where ID = @QuoteID

select S.ID, S.TemplateID, S.StageNumber, S.Description, Amount, 
CASE WHEN (S.Amount - (SELECT IsNull(SUM(Amount) , 0) FROM scPaymentMain PM INNER JOIN scPaymentDetail PD ON PM.ID = PD.PaymentID 
						WHERE PD.StageID = S.ID AND PM.QuoteID = S.ID)) < 0 THEN 0 
	 ELSE (S.Amount - (SELECT IsNull(SUM(Amount) , 0) FROM scPaymentMain PM INNER JOIN scPaymentDetail PD ON PM.ID = PD.PaymentID 
						WHERE PD.StageID = S.ID AND PM.QuoteID = S.ID)) END AS AmountRemaining,
CASE WHEN IsNull(@MSP_Proj_ID,-1) <> -1  AND
		  Exists (Select MSP_Task_UID from HB_ScheduleMap Where QuoteID = @QuoteID and SchedulePoint_ID = S.SchedulePoint_ID and IsNull(MSP_Task_UID,-1) <> -1)
	 THEN  (Select [Description] from HB_SchedulePoints Where ID = S.SchedulePoint_ID) + ': ' +
		   (Select Convert(Varchar(10),MONTH(TASK_START_DATE)) + '-' + Convert(Varchar(10),DAY(TASK_START_DATE)) + '-' + 
				  Convert(Varchar(10),YEAR(TASK_START_DATE)) from MSP_Tasks WHere PROJ_ID = @MSP_Proj_ID and Task_UID =
		   (Select MSP_Task_UID from HB_ScheduleMap Where QuoteID = @QuoteID and SchedulePoint_ID = S.SchedulePoint_ID
			and IsNull(MSP_Task_UID,-1) <> -1))
	 WHEN IsNull(@MSP_Proj_ID,-1) <> -1  AND
		  Not Exists (Select MSP_Task_UID from HB_ScheduleMap Where QuoteID = @QuoteID and SchedulePoint_ID = S.SchedulePoint_ID and IsNull(MSP_Task_UID,-1) <> -1)
	 THEN (Select [Description] from HB_SchedulePoints Where ID = 2) + ': Date Not Scheduled Yet' 
	 ELSE Convert(Varchar(10),IsNull(DaysElapsed,0)) + ' Days From Sale Date : ' + Convert(Varchar(10),MONTH(@StartDate)) + '-' +
		  Convert(Varchar(10),DAY(@StartDate)) + '-' + Convert(Varchar(10),YEAR(@StartDate)) END AS DueByDate
 
FROM	scQuotePaymentStage S

--LEFT JOIN scQuote Q ON Q.PaymentTemplateID = S.TemplateID
WHERE S.QuoteID =@QuoteID
AND AmountStyle = 'Amount'	

UNION

select S.ID, S.TemplateID, S.StageNumber, S.Description,
Q.FinalPrice
- ( SELECT sum(Amount) FROM scPaymentStage S1 LEFT JOIN scQuote Q ON Q.PaymentTemplateID = S1.TemplateID WHERE Q.ID = @QuoteID AND S1.AmountStyle = 'Amount')
- ( SELECT ( sum(S2.Amount) * Q.FinalPrice / 100 ) FROM scPaymentStage S2 LEFT JOIN scQuote Q ON Q.PaymentTemplateID = S2.TemplateID WHERE Q.ID = @QuoteID AND S2.AmountStyle = 'Percentage' GROUP BY Q.FinalPrice),
CASE WHEN (Q.FinalPrice
- ( SELECT sum(Amount) FROM scPaymentStage S1 LEFT JOIN scQuote Q ON Q.PaymentTemplateID = S1.TemplateID WHERE Q.ID = @QuoteID AND S1.AmountStyle = 'Amount')
- ( SELECT ( sum(S2.Amount) * Q.FinalPrice / 100 ) FROM scPaymentStage S2 LEFT JOIN scQuote Q ON Q.PaymentTemplateID = S2.TemplateID WHERE Q.ID = @QuoteID AND S2.AmountStyle = 'Percentage' GROUP BY Q.FinalPrice) 
-  (SELECT IsNull(SUM(Amount) , 0) FROM scPaymentMain PM INNER JOIN scPaymentDetail PD ON PM.ID = PD.PaymentID 
						WHERE PD.StageID = S.ID AND PM.QuoteID = Q.ID)) < 0 THEN 0 
ELSE (Q.FinalPrice
- ( SELECT sum(Amount) FROM scPaymentStage S1 LEFT JOIN scQuote Q ON Q.PaymentTemplateID = S1.TemplateID WHERE Q.ID = @QuoteID AND S1.AmountStyle = 'Amount')
- ( SELECT ( sum(S2.Amount) * Q.FinalPrice / 100 ) FROM scPaymentStage S2 LEFT JOIN scQuote Q ON Q.PaymentTemplateID = S2.TemplateID WHERE Q.ID = @QuoteID AND S2.AmountStyle = 'Percentage' GROUP BY Q.FinalPrice) 
-  (SELECT IsNull(SUM(Amount) , 0) FROM scPaymentMain PM INNER JOIN scPaymentDetail PD ON PM.ID = PD.PaymentID 
						WHERE PD.StageID = S.ID AND PM.QuoteID = Q.ID)) END AS AmountRemaining,
CASE WHEN IsNull(@MSP_Proj_ID,-1) <> -1  AND
		  Exists (Select MSP_Task_UID from HB_ScheduleMap Where QuoteID = @QuoteID and SchedulePoint_ID = S.SchedulePoint_ID and IsNull(MSP_Task_UID,-1) <> -1)
	 THEN  (Select [Description] from HB_SchedulePoints Where ID = S.SchedulePoint_ID) + ': ' +
		   (Select Convert(Varchar(10),MONTH(TASK_START_DATE)) + '-' + Convert(Varchar(10),DAY(TASK_START_DATE)) + '-' + 
				  Convert(Varchar(10),YEAR(TASK_START_DATE)) from MSP_Tasks WHere PROJ_ID = @MSP_Proj_ID and Task_UID =
		   (Select MSP_Task_UID from HB_ScheduleMap Where QuoteID = @QuoteID and SchedulePoint_ID = S.SchedulePoint_ID
			and IsNull(MSP_Task_UID,-1) <> -1))
	 WHEN IsNull(@MSP_Proj_ID,-1) <> -1  AND
		  Not Exists (Select MSP_Task_UID from HB_ScheduleMap Where QuoteID = @QuoteID and SchedulePoint_ID = S.SchedulePoint_ID and IsNull(MSP_Task_UID,-1) <> -1)
	 THEN (Select [Description] from HB_SchedulePoints Where ID = 2) + ': Date Not Scheduled Yet' 
	 ELSE Convert(Varchar(10),IsNull(DaysElapsed,0)) + ' Days From Sale Date : ' + Convert(Varchar(10),MONTH(@StartDate)) + '-' +
		  Convert(Varchar(10),DAY(@StartDate)) + '-' + Convert(Varchar(10),YEAR(@StartDate)) END AS DueByDate

FROM	scQuotePaymentStage S

LEFT JOIN scQuote Q ON Q.ID = S.QuoteID
WHERE S.QuoteID =@QuoteID
AND AmountStyle = 'Balance'

UNION


select S.ID, S.TemplateID, S.StageNumber, S.Description,
S.Amount * FinalPrice / 100,
CASE WHEN ((S.Amount * FinalPrice / 100) - (SELECT IsNull(SUM(Amount) , 0) FROM scPaymentMain PM INNER JOIN scPaymentDetail PD ON PM.ID = PD.PaymentID 
						WHERE PD.StageID = S.ID AND PM.QuoteID = Q.ID)) < 0 THEN 0 
	 ELSE ((S.Amount * FinalPrice / 100) - (SELECT IsNull(SUM(Amount) , 0) FROM scPaymentMain PM INNER JOIN scPaymentDetail PD ON PM.ID = PD.PaymentID 
						WHERE PD.StageID = S.ID AND PM.QuoteID = Q.ID)) END AS AmountRemaining,
CASE WHEN IsNull(@MSP_Proj_ID,-1) <> -1  AND
		  Exists (Select MSP_Task_UID from HB_ScheduleMap Where QuoteID = @QuoteID and SchedulePoint_ID = S.SchedulePoint_ID and IsNull(MSP_Task_UID,-1) <> -1)
	 THEN  (Select [Description] from HB_SchedulePoints Where ID = S.SchedulePoint_ID) + ': ' +
		   (Select Convert(Varchar(10),MONTH(TASK_START_DATE)) + '-' + Convert(Varchar(10),DAY(TASK_START_DATE)) + '-' + 
				  Convert(Varchar(10),YEAR(TASK_START_DATE)) from MSP_Tasks WHere PROJ_ID = @MSP_Proj_ID and Task_UID =
		   (Select MSP_Task_UID from HB_ScheduleMap Where QuoteID = @QuoteID and SchedulePoint_ID = S.SchedulePoint_ID
			and IsNull(MSP_Task_UID,-1) <> -1))
	 WHEN IsNull(@MSP_Proj_ID,-1) <> -1  AND
		  Not Exists (Select MSP_Task_UID from HB_ScheduleMap Where QuoteID = @QuoteID and SchedulePoint_ID = S.SchedulePoint_ID and IsNull(MSP_Task_UID,-1) <> -1)
	 THEN (Select [Description] from HB_SchedulePoints Where ID = 2) + ': Date Not Scheduled Yet' 
	 ELSE Convert(Varchar(10),IsNull(DaysElapsed,0)) + ' Days From Sale Date : ' + Convert(Varchar(10),MONTH(@StartDate)) + '-' +
		  Convert(Varchar(10),DAY(@StartDate)) + '-' + Convert(Varchar(10),YEAR(@StartDate)) END AS DueByDate
  
FROM	scQuotePaymentStage S

LEFT JOIN scQuote Q ON Q.ID = S.QuoteID
WHERE Q.ID =@QuoteID
AND AmountStyle = 'Percentage'

ORDER BY StageNumber

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSP_PaymentScheduleForQuote]') and xtype = 'P ')  
 drop Procedure scSP_PaymentScheduleForQuote
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE PROCEDURE [dbo].[scSP_PaymentScheduleForQuote]

	(
		@QuoteID int
	)
AS

--Declare @QuoteID int
--Select @QuoteID = 1049

select Q.ID, Q.FinalPrice, 
Case When (Select T.Task_Start_Date from MSP_TASKS T Where T.PROJ_ID = Q.MSP_Proj_ID and T.Task_UID = (Select Top 1 sm.MSP_Task_UID from HB_ScheduleMap sm Where sm.QuoteID = @QuoteID and SchedulePoint_ID = s.SchedulePoint_ID)) is null Then DateAdd(dd, S.DaysElapsed, Q.SaleDate)
	 Else (Select T.Task_Start_Date from MSP_TASKS T Where T.PROJ_ID = Q.MSP_Proj_ID and T.Task_UID = (Select Top 1 sm.MSP_Task_UID from HB_ScheduleMap sm Where sm.QuoteID = @QuoteID and SchedulePoint_ID = s.SchedulePoint_ID))
End as DueDate,
S.StageNumber, S.Description, S.DaysElapsed, S.AmountStyle, S.Amount,
Amount as ActualAmount, (Select Top 1 sp.Description from HB_SchedulePoints sp Where sp.ID = S.SchedulePoint_ID) as SchedulePoint
FROM	scPaymentStage S

LEFT JOIN scQuote Q ON Q.PaymentTemplateID = S.TemplateID
WHERE Q.ID =@QuoteID
AND AmountStyle = 'Amount'

UNION

select Q.ID, Q.FinalPrice, 
Case When (Select T.Task_Start_Date from MSP_TASKS T Where T.PROJ_ID = Q.MSP_Proj_ID and T.Task_UID = (Select Top 1 sm.MSP_Task_UID from HB_ScheduleMap sm Where sm.QuoteID = @QuoteID and SchedulePoint_ID = s.SchedulePoint_ID)) is null Then DateAdd(dd, S.DaysElapsed, Q.SaleDate)
	 Else (Select T.Task_Start_Date from MSP_TASKS T Where T.PROJ_ID = Q.MSP_Proj_ID and T.Task_UID = (Select Top 1 sm.MSP_Task_UID from HB_ScheduleMap sm Where sm.QuoteID = @QuoteID and SchedulePoint_ID = s.SchedulePoint_ID))
End as DueDate, 
S.StageNumber, S.Description, S.DaysElapsed, S.AmountStyle, S.Amount,
Q.FinalPrice
- ( SELECT sum(Amount) FROM scPaymentStage S1 LEFT JOIN scQuote Q ON Q.PaymentTemplateID = S1.TemplateID WHERE Q.ID = @QuoteID AND S1.AmountStyle = 'Amount')
- ( SELECT ( sum(S2.Amount) * Q.FinalPrice / 100 ) FROM scPaymentStage S2 LEFT JOIN scQuote Q ON Q.PaymentTemplateID = S2.TemplateID WHERE Q.ID = @QuoteID AND S2.AmountStyle = 'Percentage' GROUP BY Q.FinalPrice),
(Select Top 1 Description from HB_SchedulePoints sp Where sp.ID = S.SchedulePoint_ID)

FROM	scPaymentStage S

LEFT JOIN scQuote Q ON Q.PaymentTemplateID = S.TemplateID
WHERE Q.ID =@QuoteID
AND AmountStyle = 'Balance'

UNION

select Q.ID, Q.FinalPrice, 
Case When (Select T.Task_Start_Date from MSP_TASKS T Where T.PROJ_ID = Q.MSP_Proj_ID and T.Task_UID = (Select Top 1 sm.MSP_Task_UID from HB_ScheduleMap sm Where sm.QuoteID = @QuoteID and SchedulePoint_ID = s.SchedulePoint_ID)) is null Then DateAdd(dd, S.DaysElapsed, Q.SaleDate)
	 Else (Select T.Task_Start_Date from MSP_TASKS T Where T.PROJ_ID = Q.MSP_Proj_ID and T.Task_UID = (Select Top 1 sm.MSP_Task_UID from HB_ScheduleMap sm Where sm.QuoteID = @QuoteID and SchedulePoint_ID = s.SchedulePoint_ID))
End as DueDate, 
S.StageNumber, S.Description, S.DaysElapsed, S.AmountStyle, S.Amount,
S.Amount * FinalPrice / 100, (Select Top 1 Description from HB_SchedulePoints sp Where sp.ID = S.SchedulePoint_ID)
FROM	scPaymentStage S

LEFT JOIN scQuote Q ON Q.PaymentTemplateID = S.TemplateID
WHERE Q.ID =@QuoteID
AND AmountStyle = 'Percentage'

ORDER BY StageNumber










Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSP_PaymentSelect]') and xtype = 'P ')  
 drop Procedure scSP_PaymentSelect
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





CREATE      PROCEDURE dbo.scSP_PaymentSelect

@BatchID int

AS

BEGIN

SELECT ID, BatchID, QuoteID, PaymentFormID, CheckDated, CheckNumber, Amount, Detail, PaymentType

FROM scV_Payments

WHERE BatchID = @BatchID

END









Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSP_PaymentUpdate]') and xtype = 'P ')  
 drop Procedure scSP_PaymentUpdate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go







CREATE  PROCEDURE dbo.scSP_PaymentUpdate

	@PaymentID		int,
	@QuoteID		int,
	@PaymentType		varchar(32),
	@Amount		money,
	@CheckDated		smalldatetime,
	@CheckNumber	varchar(64),
	@PaymentFormID	int

AS

BEGIN
	DECLARE @DetailCount int
		
		SELECT	@DetailCount = COUNT(*) 
		FROM		scPaymentDetail
		WHERE	PaymentID = @PaymentID
		
	UPDATE scPaymentMain
	SET	QuoteID		= @QuoteID,
		CheckDated		= @CheckDated,
		CheckNumber		= @CheckNumber, 
		PaymentFormID	= @PaymentFormID
	WHERE	ID			= @PaymentID
	
	IF @PaymentType = 'Deposit' OR @PaymentType = 'Progress'
	BEGIN
		
		IF @DetailCount > 1
		BEGIN
			DELETE	FROM scPaymentDetail
			WHERE	PaymentID = @PaymentID	
		
			INSERT INTO scPaymentDetail
			(
				PaymentID, Amount, PaymentType, OptionID, StageID 
			)
			VALUES
			(
				@PaymentID, @Amount, @PaymentType, 0, 0
			)
		END
		ELSE
		BEGIN
			UPDATE scPaymentDetail
			SET Amount = @Amount, PaymentType = @PaymentType
			WHERE PaymentID = @PaymentID
		END
	END
	
--	IF @PaymentType = 'Distribution'
--	BEGIN
--		IF @DetailCount = 1
--		BEGIN
--			INSERT INTO scPaymentDetail
--			(
--				PaymentID, Amount, PaymentType, OptionID, StageID 
--			)
--			VALUES
--			(
--				@PaymentID, @Amount, 'Progress', 0, 0
--			)
--		END
--	END
END









Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSP_PostPaymentBatch]') and xtype = 'P ')  
 drop Procedure scSP_PostPaymentBatch
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





CREATE PROCEDURE scSP_PostPaymentBatch
	(
		@BatchID int,
@PostDate smalldatetime
	)
AS
BEGIN

UPDATE		scPaymentBatch
SET			PostedDate = @PostDate
WHERE	ID = @BatchID

END






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPAddNewLead]') and xtype = 'P ')  
 drop Procedure scSPAddNewLead
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE  Procedure [dbo].[scSPAddNewLead](@UserID int, @Corporate bit, @ParentID int, @Flavour varchar(15))
AS

if(@ParentID is not null)
	Begin	
		insert into contact (Type, KnownAs, Owner_ID, PersonalEmailOnly, BusinessStreet, BusinessCity, BusinessPostalCode, 
							 BusinessState, BusinessCountry, BusinessTelephoneNumber, BusinessFaxNumber, Email1Address, BusinessCompany)
		Select 'Prospect', '', @UserId, 1, IsNull(BusinessStreet,IsNull(HomeStreet,IsNull(OtherStreet,''))), 
		IsNull(BusinessCity,IsNull(HomeCity,IsNull(OtherCity,''))), 
		IsNull(BusinessPostalCode,IsNull(HomePostalCode,IsNull(OtherPostalCode,''))),
		IsNull(BusinessState,IsNull(HomeState,IsNull(OtherState,''))),
		IsNull(BusinessCountry,IsNull(HomeCountry,IsNull(OtherCountry,''))),
		IsNull(BusinessTelephoneNumber,IsNull(Business2TelephoneNumber,IsNull(HomeTelephoneNumber,IsNull(Home2TelephoneNumber,IsNull(OtherTelephoneNumber,''))))),
		IsNull(BusinessFaxNumber,IsNull(HomeFaxNumber,IsNull(OtherFaxNumber,''))),
		IsNull(Email1Address,IsNull(Email2Address,IsNull(Email3Address,''))),
		IsNull(BusinessCompany,IsNull(KnownAs,''))
		From Contact Where ID = (Select Contact_ID from scLead WHere ID = @ParentID)
	End
else
	Begin
		insert into contact (Type, KnownAs, Owner_ID, PersonalEmailOnly) 
		Values ('Prospect', '', @UserID, 1)
	End

select @@Identity [ID]

Declare @ContactID int

Select @ContactID = @@Identity

insert sclead(IncompleteYN, DateCreated, DateModified, CorporateYN, ParentID, Contact_ID) 
select 0, getdate(), getdate(), @Corporate, @ParentID, (select @@Identity)

Declare @ID int

Select @ID = @@Identity

insert scUDFStore(OwnerID, OwnerTableName) Values (@ContactID, 'Contact')
 
insert into working_FilteredLeads (LeadID, UserID, Flavour) Values (@ID, @UserID, @Flavour)

insert into working_sc_items (original_contact_id, contact_id, item_id, item_type) Values (@UserID, @UserID, @ID, 'L')






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPAddProspectToProcessInstance]') and xtype = 'P ')  
 drop Procedure scSPAddProspectToProcessInstance
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE   PROCEDURE scSPAddProspectToProcessInstance (@ProcessID int, @OwnerID int, @ProcessTypeInstance varchar(20), @LeadID int, @StartDate datetime)

AS

Declare @ProcessInstanceID int

Insert into scProcessInstance (ProcessID, OwnerID, ProcessTypeInstance, LinkID, ProcessStartDate, ProcessStatus)
Values(@ProcessID, @OwnerID, @ProcessTypeInstance, @LeadID, @StartDate, 'Not Started')

Select @ProcessInstanceID = @@Identity

Insert Into scMethodInstance (PI_ID, StepID, StartDate, Status, LinkID)
Select @ProcessInstanceID, ID, null ,'Created', 0 From scStep Where ProcessID = @ProcessID





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPCreateCampaign]') and xtype = 'P ')  
 drop Procedure scSPCreateCampaign
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go






CREATE  PROCEDURE dbo.scSPCreateCampaign
	
	@SalesManID int
	
AS
BEGIN
INSERT INTO scCampaign
(
	[Description],
	SalesManID,
	StartDate,
	EndDate
)
VALUES
(
	'Type Something',
	@SalesManID,
	null,
	null
) 
SELECT @@IDENTITY AS ProcessID
END








Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPCreateCompany]') and xtype = 'P ')  
 drop Procedure scSPCreateCompany
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE PROCEDURE dbo.scSPCreateCompany
AS
BEGIN
INSERT INTO scCompany	
(
	CompanyName,
	ParentID
)
VALUES
(
	'Type Something',
	0
) 
SELECT @@IDENTITY AS CompanyID
END






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPCreateLead]') and xtype = 'P ')  
 drop Procedure scSPCreateLead
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE PROCEDURE dbo.scSPCreateLead
	@SalesManID	int,
	@ParentID	int
AS
BEGIN

INSERT INTO scLead
(
	CorporateYN,
	IncompleteYN,
	SalesManID,
	ParentID
)
VALUES
(
	0,
	1,
	@SalesManID,
	@ParentID
) 

DECLARE @NewLeadID int
SELECT	@NewLeadID = @@IDENTITY



INSERT INTO scLeadAddress
(
	LeadID, 
	DefaultAddress,
	FirstName,
	LastName,
	KnownAs
)
VALUES
(
	@NewLeadID,
	0,
	'New Lead...',
	'', ''
)

SELECT @NewLeadID AS LeadID

END




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPCreatePaymentBatch]') and xtype = 'P ')  
 drop Procedure scSPCreatePaymentBatch
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE PROCEDURE dbo.scSPCreatePaymentBatch
	@UserID		int,
	@CompanyID	int
AS
BEGIN
INSERT INTO scPaymentBatch
(
	Narrative,
	UserID,
	CompanyID,
	Dated
)
VALUES
(
	'[New]',
	@UserID,
	@CompanyID,
	getDate()
) 

DECLARE @NewID int
SELECT	@NewID = @@IDENTITY

SELECT @NewID AS ID

END






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPCreateProcess]') and xtype = 'P ')  
 drop Procedure scSPCreateProcess
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE PROCEDURE [dbo].[scSPCreateProcess]
AS
BEGIN
INSERT INTO scProcess
(
	[Description],
	AsCampaign, AsFollowup, SalesManID, AsClosing
)
VALUES
(
	'Type Something',
	0, 0, 0, 0
) 
SELECT @@IDENTITY AS ProcessID
END







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPCreateQuote]') and xtype = 'P ')  
 drop Procedure scSPCreateQuote
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go









CREATE       PROCEDURE [dbo].[scSPCreateQuote]
	@LeadID	int,
	@HoldingID int,
	@CommunityID int,
	@ProjectID int

AS
BEGIN

declare @CommissionStructureID int
select @CommissionStructureID = max(id)
from scCommissionStructure
where [Default] = 1


INSERT INTO scQuote
(
	LeadID, HoldingID, CommunityID, ProjectID, LotID, ModelID, ModelNameID, LotGuesstimate, FinalPrice, GoodUntilDate, CommissionStructureID, BasePriceDate
)
VALUES
(
	@LeadID, @HoldingID, @CommunityID, @ProjectID, 0, 0, 0, 0, 0, getdate()+7, @CommissionStructureID, getdate()
) 
SELECT @@IDENTITY AS QuoteID
END















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPDeleteTask]') and xtype = 'P ')  
 drop Procedure scSPDeleteTask
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





CREATE PROCEDURE scSPDeleteTask 
	@Proj_ID	int,
	@Task_UID	int
AS
BEGIN
DELETE	
FROM	MSP_Dashboard_Tasks
WHERE	Proj_ID		= @Proj_ID
AND	Task_UID	= @Task_UID
DELETE 
FROM	MSP_Tasks
WHERE	Proj_ID		= @Proj_ID
AND	Task_UID	= @Task_UID
END







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPFillMailMergeList]') and xtype = 'P ')  
 drop Procedure scSPFillMailMergeList
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE Procedure [dbo].[scSPFillMailMergeList] (@UserID int, @LeadID int, @CampainID int)
AS

Delete working_MailMergeList
Where UserID = @UserID
	
	if(ISNULL(@LeadID, 0) <> 0)
	Begin
		Insert Into working_MailMergeList (LeadID, UserID, ContactID)
		Select ID,@UserID, Contact_ID From scLead where Contact_ID = @LeadID
	End
	
	Else if (ISNULL(@CampainID, 0) <> 0)
	Begin
		Insert Into working_MailMergeList(LeadID, UserID, ContactID)
		Select LeadID, @UserID, ContactID from scCampaignees where CampaignID = @CampainID
	
	End


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPFillscMethodInstances]') and xtype = 'P ')  
 drop Procedure scSPFillscMethodInstances
Go
SET QUOTED_IDENTIFIER ON
Go
SET ANSI_NULLS ON 
Go
 
CREATE   Procedure [dbo].[scSPFillscMethodInstances] (@ProcessInstanceID int, @Flavour varchar(15))
as
begin	
	Declare @LinkID int, @OwnerID int, @SOwnerID varchar(500)
	If (@Flavour = 'Campaign')
	Begin
		Insert Into scMethodInstance (PI_ID, StepID, Status, LinkID, StartDate, LeadID, ContactID, StepInstance_ID)

		Select  @ProcessInstanceID, s.ID, 'New', 0,DATEADD(Day, OffSet, GetDate()),C.LeadID, CC.ID, S.ID
		From scStepInstance S
		Left Outer Join scProcessInstance PI on PI.id = S.PI_ID
		Left Outer Join scCampaignees C on C.CampaignID = PI.LinkID
		Left Outer Join Contact CC on CC.ID = C.ContactID
		Where PI.ProcessTypeInstance = 'Campaign' 
		AND S.Type = 'Each Lead' 
		AND PI.ID = @ProcessInstanceID
		AND ((S.MethodType = 'Email' AND CC.PersonalEmailOnly = 1 and C.DeActivated = 0) OR (S.MethodType IN('Task','Letter'))) And C.DeActivated = 0

		Insert Into scMethodInstance (PI_ID, StepID, Status, LinkID, StartDate, LeadID, StepInstance_ID)
		Select @ProcessInstanceID, s.ID, 'New',0,DATEADD(Day, Offset,GetDate()),0, s.ID From scStepInstance s
		Left Outer Join scProcessInstance PI on PI.ID = s.PI_ID
		Where s.Type = 'Entire Campaign' AND PI.ID = @ProcessInstanceID AND s.MethodType = 'Task'
		
		Update scCampaign set StartDate = GetDate() Where ID in (Select LinkID from scProcessInstance Where ID = @ProcessInstanceID)  AND ISNULL(StartDate,'') = ''	
		
		Select  @LinkID = LinkID from scProcessInstance p where P.ID = @ProcessInstanceID
		
		Update scCampaign 
		Set EndDate = (Select DATEADD(Day, 1, Max(M.StartDate)) from scMethodInstance M Left Outer Join scProcessInstance P on P.ID = M.PI_ID Where P.id = @ProcessInstanceID)
		Where ID = @LinkID
		
		Update scStepInstance
		Set StepStatus = 'S'
		From scStepInstance s
		Inner join scMethodInstance mi on mi.StepInstance_ID = s.ID
		Where mi.PI_ID = @ProcessInstanceID
		
	End

	Else If (@Flavour = 'UpdateCampaign')
	Begin
		Insert Into scMethodInstance (PI_ID, StepID,Status,LinkID,StartDate,LeadID,ContactID, StepInstance_ID)
		Select  @ProcessInstanceID, s.ID, 'New', 0,DATEADD(Day, OffSet, GetDate()),C.LeadID, CC.ID, S.ID
		From scStepInstance S
		Left Outer Join scProcessInstance PI on PI.id= S.PI_ID
		Left Outer Join scCampaignees C on C.CampaignID = PI.LinkID
		Left Outer Join Contact CC on CC.ID = C.ContactID
		Where PI.ProcessTypeInstance = 'Campaign' 
		AND S.Type = 'Each Lead' 
		AND PI.ID = @ProcessInstanceID
		AND cc.ID NOT IN (Select IsNull(MC.ContactID,-1) from scProcessInstance PC 
							left outer join scMethodInstance MC on MC.PI_ID = PC.ID 
							left outer join scStepInstance si on si.PI_ID = PC.id and si.ID = MC.StepInstance_ID 
						  Where PC.id = S.PI_ID)
		AND ((S.MethodType = 'Email' AND CC.PersonalEmailOnly = 1 and C.DeActivated = 0) OR (S.MethodType IN('Task','Letter'))) And C.DeActivated = 0
		
		Select  @LinkID = LinkID from scProcessInstance p where P.ID = @ProcessInstanceID
		
		Update scCampaign 
		Set EndDate = (Select DATEADD(Day, 1, Max(M.StartDate)) from scMethodInstance M Left Outer Join scProcessInstance P on P.ID = M.PI_ID Where P.id = @ProcessInstanceID)
		Where ID = @LinkID
		
	End


	Update scProcessInstance Set ProcessStatus = 'Started', ProcessStartDate = GetDate() Where ID = @ProcessInstanceID

	Select @OwnerID = OwnerID from scProcessInstance where LinkID = @LinkID
	Select @SOwnerID = CONVERT(varchar(500),@OwnerID)

	Delete Working_RM_ProcessUpdateStatusList where Username = @SOwnerID

	Insert Into Working_RM_ProcessUpdateStatusList(Username,ProccessInstanceID)
	Select @SOwnerID, id
	From scProcessInstance where LinkID = @LinkID and ProcessTypeInstance = 'Campaign'

	exec RM_UpdateProcessStatus @SOwnerID, @OwnerID, -1

	Delete Working_RM_ProcessUpdateStatusList where Username = @SOwnerID

end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPFillTrafficCount]') and xtype = 'P ')  
 drop Procedure scSPFillTrafficCount
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go











CREATE           proc scSPFillTrafficCount
@PhaseID varchar(50), @StartDate datetime, @EndDate datetime, @User varchar(30), @CompanyID int, @ContactTypeGroupdID int, @UserID int
as 
--declare
-- @PhaseID varchar(50), @StartDate datetime, @EndDate datetime
--select @PhaseID = 50003, @StartDate = '1/1/06', @EndDate = '2/9/06'
--exec scSPFillTrafficCount 1 , '07/05/06' , '07/12/06' , '595' , 7 , 4, 571
--Select * from scVisits


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#RunningDays'))
drop table #RunningDays
create table #RunningDays(
 id int identity(1,1) not null,
 Date datetime null,
 Day varchar(20) null,
 block1 int,
 block2 int,
 block3 int,
 block4 int,
 block5 int,
 block6 int,
 block7 int,
 block8 int,
 block9 int,
 block10 int,
 block11 int,
 block12 int,
 Totals int,
 UserID int,
 CompanyID int, 
 VisitType1 int,
 VisitType2 int,
 VisitType3 int,
 VisitType4 int,
 VisitType5 int,
 VisitType6 int,
 VisitType7 int,
 VisitType8 int,
 VisitType9 int,
 VisitType10 int
 )

declare @x int, @RunDate datetime

select @x = datediff(day, @EndDate, @Startdate), @RunDate = @Startdate
declare @Start int, @End int


while @RunDate <= @EndDate
begin 

 declare @b1 int, @b2 int, @b3 int, @b4 int, @b5 int, @b6 int, @b7 int, @b8 int, @b9 int, @b10 int, @b11 int, @b12 int, @t int,
 @AP1 int, @AP2 int, @vt1 int, @vt2 int, @vt3 int, @vt4 int, @vt5 int, @vt6 int, @vt7 int, @vt8 int, @vt9 int, @vt10 int

--block 1
 select @AP1 = patindex('%P.M.%',block1s),
 @AP2 =  patindex('%P.M.%',block1e)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block1s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block1e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b1 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
-- and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User


--block 2 
 select @AP1 = patindex('%P.M.%',block2s),
 @AP2 =  patindex('%P.M.%',block2e)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block2s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block2e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b2 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User


--block 3
 select @AP1 = patindex('%P.M.%',block3s),
 @AP2 =  patindex('%P.M.%',block3e)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block3s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block3e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b3 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User

--block 4 
 select @AP1 = patindex('%P.M.%',block4s),
 @AP2 =  patindex('%P.M.%',block4e)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID


 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block4s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block4e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b4 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User

--block 5 
 select @AP1 = patindex('%P.M.%',block5s),
 @AP2 =  patindex('%P.M.%',block5e)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block5s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block5e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b5 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User

--block 6 
 select @AP1 = patindex('%P.M.%',block6s),
 @AP2 =  patindex('%P.M.%',block6e)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block6s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block6e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b6 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User

--block 7 
 select @AP1 = patindex('%P.M.%',block7s),
 @AP2 =  patindex('%P.M.%',block7e)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block7s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block7e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b7 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User

--block 8
 select @AP1 = patindex('%P.M.%',block8s),
 @AP2 =  patindex('%P.M.%',block8e)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block8s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block8e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b8 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User

--block 9
 select @AP1 = patindex('%P.M.%',block9s),
 @AP2 =  patindex('%P.M.%',block9e)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block9s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block9e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b9 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User

--block 10
 select @AP1 = patindex('%P.M.%',block10s),
 @AP2 =  patindex('%P.M.%',block10e)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block10s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block10e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b10 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User

--block 11 
 select @AP1 = patindex('%P.M.%',block11s),
 @AP2 =  patindex('%P.M.%',block11e)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block11s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block11e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b11 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User

--block 12
 select @AP1 = patindex('%P.M.%',block12s),
 @AP2 =  patindex('%P.M.%',block12e)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block12s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block12e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid AND CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b12 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User

-- .. block 12

--totals

 select @t = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User


--vt tempt table

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#temp'))
begin
	drop table #temp
end

create table #temp(
ordernum int identity(1,1),
ID int null,
VisitType varchar(100) null,
ContactTypeGroup_ID int null)

insert #temp(ID, VisitType, ContactTypeGroup_ID)
select ID, VisitType, ContactTypeGroup_ID
from visittype t
where ContactTypeGroup_ID = @ContactTypeGroupdID
order by t.visittype 


--vt1
 select @vt1 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and VisitType in (select ID from #temp where ordernum = 1)
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User


 

--vt2
 select @vt2 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and VisitTYpe in (select ID from #temp where ordernum = 2)
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User




 
--vt3
 select @vt3 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and VisitTYpe in (select ID from #temp where ordernum = 3)
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User

--vt4
select @vt4 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and VisitTYpe in (select ID from #temp where ordernum = 4)
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User

--vt5
 select @vt5 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and VisitTYpe in (select ID from #temp where ordernum = 5)
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User

--vt6
 select @vt6 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and VisitTYpe  in (select ID from #temp where ordernum = 6)
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User

--vt7
 select @vt7 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and VisitTYpe  in (select ID from #temp where ordernum = 7)
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User

--vt8
 select @vt8 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and VisitTYpe  in (select ID from #temp where ordernum = 8)
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User

--vt9
 select @vt9 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and VisitTYpe  in (select ID from #temp where ordernum = 9)
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User

--vt10
 select @vt10 = sum(NumberOfVisits)
 from ContactHistory
 where Phaseid = @Phaseid AND CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and VisitTYpe  in (select ID from #temp where ordernum = 10)
 and ContactType_ID in (Select ID from ContactType Where ContactGroupID = @ContactTypeGroupdID)
 and CAST(ContactOwnerID as varchar(30)) Like @User



 insert #RunningDays(Date, Day, block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, totals, UserID, CompanyID,  VisitType1,  
			VisitType2,  VisitType3,  VisitType4,  VisitType5,  VisitType6,  VisitType7,  VisitType8,  VisitType9,  VisitType10)
 select @RunDate, datename(dw, @RunDate), @b1, @b2, @b3, @b4, @b5, @b6, @b7, @b8, @b9, @b10, @b11, @b12, @t, @UserID, @CompanyID, @vt1, @vt2, @vt3, @vt4, @vt5, @vt6, @vt7, @vt8, @vt9, @vt10
 select @RunDate = dateadd(day,1,@RunDate)

end

delete scVisits
where UserID = @UserID AND CompanyID=@CompanyID

insert scVisits
select *
from #RunningDays













Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPFilteredLeads]') and xtype = 'P ')  
 drop Procedure scSPFilteredLeads
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE    procedure [dbo].[scSPFilteredLeads] (@UserID int, @Flavour varchar(15), @ShowAll bit)
AS

--Execute scSPFilteredLeads 571, 'ProspectFilter', 0
--IF NOT EXISTS (SELECT LeadID FROM working_FilteredLeads WHERE UserID = @UserID)
--BEGIN
--	INSERT INTO working_FilteredLeads (LeadID, UserID,Flavour)
--	SELECT l.ID, @UserID,@Flavour FROM scLead l INNER JOIN Contact c ON l.Contact_ID = c.ID 
--	--join working_sc_items w on w.original_contact_id=@UserID and w.item_type='L' and w.item_id=l.id
--	WHERE (l.IncompleteYN = 0)
--END

Declare @InActiveList Table
(
  InActiveFlag varchar(1) null
)

Insert Into @InActiveList (InActiveFlag)
Values ('N')

IF @ShowAll = 1
	BEGIN
		Insert Into @InActiveList(InActiveFlag)
		Values ('Y')
	END

SELECT ISNULL(l.CorporateYN, 0) AS [Contact Type], c.ID AS [Contact ID], l.ID AS [Prospect ID], l.ParentID, ISNULL(c.FirstName, '') AS [First Name], ISNULL(c.LastName, '') AS [Last Name], ISNULL(c.KnownAs, ISNULL(c.Title, '') + ISNULL(c.LastName, '') + CASE WHEN C.Lastname IS NULL THEN '' ELSE ', 
		' END + ISNULL(c.FirstName, '')) AS Name, CASE WHEN PrimaryTelephoneNumber IS NOT NULL THEN 'Primary - ' + PrimaryTelephoneNumber WHEN BusinessTelephoneNumber IS NOT NULL THEN 'Bus. - ' + BusinessTelephoneNumber WHEN HomeTelephoneNumber IS NOT NULL THEN 'Home - ' + HomeTelephoneNumber WHEN MobileTelephoneNumber IS NOT NULL THEN 'Cell - ' + MobileTelephoneNumber WHEN OtherTelephoneNumber IS NOT NULL THEN 'Other - ' + OtherTelephoneNumber END AS Phone,
C.InActive
FROM scLead l INNER JOIN Contact c ON l.Contact_ID = c.ID 
--join working_sc_items w on w.original_contact_id=@UserID and w.item_type='L' and w.item_id=l.id	
WHERE (l.IncompleteYN = 0) AND l.ID IN (Select LeadID from working_FilteredLeads where UserID =@UserID AND Flavour = @Flavour) AND IsNull(C.InActive,'N') in (Select InActiveFlag From @InActiveList)






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPGetLotComboItem]') and xtype = 'P ')  
 drop Procedure scSPGetLotComboItem
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





CREATE    proc scSPGetLotComboItem
 @Company varchar(500),
 @ProjID  varchar(500)
as
--select @Company = 'tr_reflex_demo1'

exec('
select Lot_ID as ID, Lot as Description
from ' + @Company + '..hb_lots
where PROJECT_CD = ' + @ProjID + '
and LOT_ID not in 
(select LotID 
 from scQuote 
 where isnull(status,''U'') <> ''C'' and isnull(status,''U'') <> ''S''
)
order by PLAN_NO, BLOCK, lot
')






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPGetLotComboSold]') and xtype = 'P ')  
 drop Procedure scSPGetLotComboSold
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE     proc [dbo].[scSPGetLotComboSold]
 	@Company varchar(500),
 	@ProjID  varchar(500),
	@QuoteID varchar(500)
as

--Declare @Company varchar(500), @ProjID  varchar(500), @QuoteID varchar(500)
--Select @Company = 'Web_KIDEMO', @ProjID = '50000', @QuoteID = '985'

select L.Lot_ID as ID, case when ltrim(rtrim(IsNull(BLOCK,''))) = '' then '' else 'Block:' + BLOCK + ', ' end + 'Lot:' + L.Lot as Description
from hb_lots L
where L.PROJECT_CD = @ProjID
and L.LOT_ID not in 
(select IsNull(Q.LotID, 0)
 from scQuote Q
 where isnull(Q.status,'U') = 'C' or isnull(Q.status,'U') = 'S'
) and L.Lot_ID not in (Select Lot_ID From HB_LOT_EXCEPT 
			Where Model_ID = (Select ModelID from scQuote Where ID = @QuoteID) 
			and Model_Name_ID = (Select ModelNameID from scQuote Where ID = @QuoteID))
or L.Lot_ID in (Select Q.LotID From scQuote Q Where Q.LotReserveExpiryDate < GetDate() and isnull(Q.status,'U') = 'S' and Q.QuoteSubStatusID = 1 and PROJECT_CD = @ProjID )

UNION

SELECT L.Lot_ID, case when ltrim(rtrim(IsNull(BLOCK,''))) = '' then '' else 'Block:' + BLOCK + ', ' end + 'Lot:' + L.Lot as Description
FROM HB_Lots L
WHERE L.LOT_ID IN ( SELECT LOTID FROM scQUOTE WHERE ID = @QuoteID)
AND L.PROJECT_CD =@ProjID
and L.Lot_ID not in (Select Lot_ID From HB_LOT_EXCEPT 
			Where Model_ID = (Select ModelID from scQuote Where ID = @QuoteID) 
			and Model_Name_ID = (Select ModelNameID from scQuote Where ID = @QuoteID))
order by [Description]

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPGetTrafficManagerSalesPersons]') and xtype = 'P ')  
 drop Procedure scSPGetTrafficManagerSalesPersons
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

Create Procedure scSPGetTrafficManagerSalesPersons
as

Select 'All' as 'Name', '%' as 'ID'


Union

Select Distinct KnownAs, Cast(Contact.ID as Varchar(30))
From Contact
Left Join Access on Contact.ID = Access.ContactID
Where Access.UserLevel in ('S', 'M')
Order By 'Name'



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPGetVisitDatetime]') and xtype = 'P ')  
 drop Procedure scSPGetVisitDatetime
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE    proc scSPGetVisitDatetime
 @AsAtDate datetime, 
 @Block varchar(20), 
 @PhaseID varchar(50),
 @CompanyID int
as
declare
 @hour int, @Temp varchar(50)


if @Block > 0
begin

 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#BlockResult'))
 drop table #BlockResult
 create table #BlockResult(result varchar(20))

 insert #BlockResult
 exec('
 select block' + @Block + 's
 from scschedules
 where phaseID = ' + @PhaseID + ' AND CompanyID=' + @CompanyID)

 select @Temp = result from #BlockResult
 select @Temp = replace(@Temp, 'A.M.', '')
 declare @pat int
 select @pat = Patindex('%P.M.%', @Temp)

 if @pat > 0
  select @Temp = cast(Cast(replace(@Temp, 'P.M.', '') as int) + 12 as varchar(50))
 
 if @Temp = 24
  select @Temp = 12

 select @Hour = ltrim(rtrim(@Temp))
 select dateadd(hour, @Hour, @AsAtDate)
end
else
begin
 select getdate() --now
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPLeadsByStage]') and xtype = 'P ')  
 drop Procedure scSPLeadsByStage
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE PROCEDURE scSPLeadsByStage
	@SalesManID int
AS
SELECT		count(*) LeadCount, 
		S.Description
FROM		scTaskRegister	TR,
		scStep	S
WHERE		TR.CompleteDate IS NULL
AND 		TR.OriginatorID = @SalesManID
AND		TR.StepID = S.ID
GROUP BY 	 S.Description
UNION
select  	count(*),
		'<Inactive>'	
FROM		scLead
WHERE		SalesManID = @SalesManID
AND		ID NOT IN (SELECT DISTINCT LeadID FROM scTaskRegister WHERE CompleteDate IS NULL)






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPLoadDefaultAttributes]') and xtype = 'P ')  
 drop Procedure scSPLoadDefaultAttributes
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go










-- exec scSPLoadDefaultAttributes 'tr_realestatebeta', 1097, 18

CREATE          proc scSPLoadDefaultAttributes
  @QuoteID varchar(20)
as

 declare
   @Company varchar(500), 
   @Model varchar(20),
   @Companyid int


 select @Company = TreasuryDBName, @Model = ModelID, @Companyid = AutoID
 from scQuote q
 join companies c
 on q.CompanyID = c.AutoID

set @Company = ' '

if isnull(@Company,'') <> ''
begin

 declare @HoldingID int, @CommunityID int, @ProjectID int

 select @HoldingID = HoldingID, @CommunityID = CommunityID, @ProjectID = ProjectID
 from scQuote
 where [id] = @QuoteID

declare
    @Holding varchar(500), @Community varchar(500),	
		  @Project varchar(500)
		
		  if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ResultTR'))
		  drop table #ResultTR
		  create table #ResultTR(result varchar(50) null)
		
		  exec('
		  insert #ResultTR
		  select RAW_LAND_DESC
		  from ' + @Company + '..hb_raw_land
		  where Raw_Land_CD = ' + @HoldingID)
		  select @Holding = result
		  from #ResultTR
		  delete #ResultTR
		
		  exec('
		  insert #ResultTR
		  select COMMUNITY_DESC
		  from ' + @Company + '..hb_communities
		  where COMMUNITY_CD = ' + @CommunityID
		  + ' and Raw_Land_CD = ' + @HoldingID)
		  select @Community = result
		  from #ResultTR
		  delete #ResultTR
		
		  exec('
		  insert #ResultTR
		  select PROJECT_DESC
		  from ' + @Company + '..hb_project
		  where PROJECT_CD = ' + @ProjectID 
		  + ' and Raw_Land_CD = ' + @HoldingID 
		  + ' and COMMUNITY_CD = ' + @CommunityID )
		  select @Project = result
		  from #ResultTR
		  delete #ResultTR
		
-- update scQuote
-- set CommunityDesc = @Community, HoldingDesc = @Holding, ProjectDesc = @Project,
-- Companyid = @Companyid
-- where [id] = @QuoteID
declare @SQL varchar(8000)

select @SQl = '
insert scattributes(MODEL_ID, MAJOR_ID, SUB_ID, OPTION_ID, Attr_ID, QuoteID, DES, DEFAULT_YN, OATYP_ID, OptionListType)
select ' + @Model + ', Major_ID, Sub_ID, s.Option_ID, h.OATVAL_ID, ' + @QuoteID + ', OATVAL_DESC, 1, h.OATYP_ID, ''lstAlternates''
from scquoteoption s
join ' + @Company + '..HB_OPT_ATTR_TSEL ss
on OASEL_GSO_ID = Option_ID
join ' + @Company + '..hb_opt_attr_ovalues h
on s.Option_ID = h.OPTION_ID
and h.OATYP_ID = ss.OATYP_ID
join ' + @Company + '..hb_opt_attr_tvalues t
on t.oatval_id = h.OATVAL_ID
where quoteid = ' + @QuoteID + '
and ss.OASEL_TYPE_GSO = ''O''
and DEFAULT_TF = ''T''
and OriginalOption_ID = s.Option_ID
and s.OPTION_ID not in 
 (select OPTION_ID
 from scattributes
 where quoteid = ' + @QuoteID +')'
print @SQL
exec(@SQL)


select @SQl = '
insert scattributes(MODEL_ID, MAJOR_ID, SUB_ID, OPTION_ID, Attr_ID, QuoteID, DES, DEFAULT_YN, OATYP_ID, OptionListType)
select ' + @Model + ', Major_ID, Sub_ID, s.Option_ID, h.OATVAL_ID, ' + @QuoteID + ', OATVAL_DESC, 1, h.OATYP_ID, ''chkRealAlt''
from scquoteoption s
join ' + @Company + '..HB_OPT_ATTR_TSEL ss
on OASEL_GSO_ID = Option_ID
join ' + @Company + '..hb_opt_attr_ovalues h
on s.Option_ID = h.OPTION_ID
and h.OATYP_ID = ss.OATYP_ID
join ' + @Company + '..hb_opt_attr_tvalues t
on t.oatval_id = h.OATVAL_ID
where quoteid = ' + @QuoteID + '
and ss.OASEL_TYPE_GSO = ''O''
and DEFAULT_TF = ''T''
and OriginalOption_ID <> s.Option_ID
and s.OPTION_ID not in 
 (select OPTION_ID
 from scattributes
 where quoteid = ' + @QuoteID +')'
print @SQL
exec(@SQL)


select @SQl = '
insert scattributes(MODEL_ID, MAJOR_ID, SUB_ID, OPTION_ID, Attr_ID, QuoteID, DES, DEFAULT_YN, OptionListType)
select ' + @Model + ', Major_ID, Sub_ID, s.Option_ID, h.OATVAL_ID, ' + @QuoteID + ', OATVAL_DESC, 1, ''lstAlternates''
from scquotestructural s
join ' + @Company + '..HB_OPT_ATTR_TSEL ss
on OASEL_GSO_ID = Option_ID
join ' + @Company + '..hb_opt_attr_ovalues h
on s.Option_ID = h.OPTION_ID
and h.OATYP_ID = ss.OATYP_ID
join ' + @Company + '..hb_opt_attr_tvalues t
on t.oatval_id = h.OATVAL_ID
where quoteid = ' + @QuoteID + '
and ss.OASEL_TYPE_GSO = ''O''
and DEFAULT_TF = ''T''
and s.OPTION_ID not in 
 (select OPTION_ID
 from scattributes
 where quoteid = ' + @QuoteID + ')'
print @SQL
exec(@SQL)

select @SQl = '
insert scattributes(MODEL_ID, MAJOR_ID, SUB_ID, OPTION_ID, Attr_ID, QuoteID, DES, DEFAULT_YN, OptionListType)
select ' + @Model + ', MAJ_GROUP_ID, SUB_GROUP_ID, s.UpgradeID, h.OATVAL_ID, ' + @QuoteID + ', OATVAL_DESC, 1, ''lstUpgrades''
from scquoteUpgrade s
join ' + @Company + '..HB_OPT_ATTR_TSEL ss
on OASEL_GSO_ID = s.UpgradeID
join ' + @Company + '..hb_options o
on o.OPTION_ID = s.UpgradeID
join ' + @Company + '..hb_opt_attr_ovalues h
on s.UpgradeID = h.OPTION_ID
and h.OATYP_ID = ss.OATYP_ID
join ' + @Company + '..hb_opt_attr_tvalues t
on t.oatval_id = h.OATVAL_ID
where quoteid = ' + @QuoteID + '
and ss.OASEL_TYPE_GSO = ''O''
and DEFAULT_TF = ''T''
and s.UpgradeID not in 
 (select OPTION_ID
  from scattributes
  where quoteid = ' + @QuoteID + '
  and optionlisttype <> ''lstAlternates''
  )'
print @SQL
exec(@SQL)
end





















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPManageQuoteToInventory]') and xtype = 'P ')  
 drop Procedure scSPManageQuoteToInventory
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec scSPManageQuoteToInventory 1893, 'Inventory'
-- exec scSPManageQuoteToInventory 2037 , 'Spec'

CREATE          Procedure [dbo].[scSPManageQuoteToInventory](
@QuoteID int, @Flavour varchar(50), @UserID int)
AS


-- declare @QuoteID int, @Flavour varchar(50)
-- select @QuoteID =2425, @Flavour = 'Inventory'

	declare @Status varchar(50), @SubStatus varchar(50), @Inventorize bit, @InventoryID int

	select @Status = Status, @SubStatus = SubDescription, @InventoryID = InventoryID 
	from scQuote q
 left outer join scQuoteSubStatus s
 on q.QuoteSubStatusID = s.id
	where q.id = @QuoteID



 select @Inventorize = InventorizeNewHomeSales
 from system_ctrl

if (@Flavour != 'Inventory') AND Exists(Select QuoteID from Inventory Where QuoteID = @QuoteID)
Begin
		Update Inventory
		Set Proj_ID_ID = Q.Proj_ID_ID, 
		    pri_num = Q.pri_num,
		    LotDesc = Q.LotDesc,
	     CommunityDesc = Q.CommunityDesc,
		    CivicAddress = Q.CivicAddress,
		    BlockDesc = Q.BlockDesc,
		    CompanyID = Q.CompanyID,
		    HoldingDesc = Q.HoldingDesc,
		    ProjectDesc = Q.ProjectDesc,
	   	    ModelDesc = Q.ModelDesc,
		    ModelNameDesc = Q.ModelNameDesc,
		    PlanNo = Q.PlanNo,
		    SaleType = @Flavour
		From scQuote Q
		Where QuoteID = @QuoteID AND Q.ID = @QuoteID
End

Else
Begin
 if(@Flavour='Spec' or(@Status = 'S'))
 begin
  if(@Flavour='Spec' or (@SubStatus = 'Subjects Outstanding' and @Inventorize = 1 AND not Exists(Select QuoteID from Inventory Where QuoteID = @QuoteID)))
  begin
				if @Flavour<>'Inventory'	
    begin		
				  Insert Into Inventory (QuoteID,LinkID,LinkType,Modified, Proj_ID_ID, pri_num,LotDesc,CommunityDesc,CivicAddress,BlockDesc,CompanyID,HoldingDesc,ProjectDesc,ModelDesc,ModelNameDesc,PlanNo,SaleType,LotClass,LotSubClass)
					 Select ID,0,'', GetDate(), Proj_ID_ID, pri_num,LotDesc,CommunityDesc,CivicAddress,BlockDesc,CompanyID,HoldingDesc,ProjectDesc,ModelDesc,ModelNameDesc,PlanNo,@Flavour,(Select RTRIM(CLASS_DESC) from HB_LOT_CLASS Where Class_ID =(Select Class_ID from HB_Lots Where Lot_ID = LotID)), (Select RTRIM(SUB_CLASS_DESC) from HB_LOT_SUB_CLASS Where SUB_CLASS_ID = (Select Sub_Class_ID from HB_Lots Where Lot_ID = LotID)) from scQuote Where ID = @QuoteID
				
					 Select @InventoryID = @@Identity
				
				 	Insert Into scUDFStore(OwnerID,OwnerTableName)
				 	Values(@InventoryID,'Inventory')

					Insert Into working_FilteredInventory(InventoryID, UserId)
					Values(@InventoryID,@UserID)
    end

			
  end
 end

 	Update scQuote
 	Set InventoryID = @InventoryID
 	Where ID = @QuoteID	
  and @InventoryID is not null


 if @Flavour = 'Inventory'
 begin
 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#quotecopy'))
 drop table #quotecopy

  select q.*
  into #quotecopy
  from scQuote q
  join inventory i
  on i.QuoteID = q.id
  where i.id = @InventoryID

  update scQuote
  set HoldingID = q2.HoldingID, CommunityID = q2.CommunityID, ProjectID = q2.ProjectID, LotID = q2.LotID, 
  ModelID = q2.ModelID, ModelNameID = q2.ModelNameID, LotDesc = q2.LotDesc, CommunityDesc = q2.CommunityDesc, 
  CivicAddress = q2.CivicAddress, 
  BlockDesc = q2.BlockDesc, CompanyID = q2.CompanyID, HoldingDesc = q2.HoldingDesc, ProjectDesc = q2.ProjectDesc, 
  ModelDesc = q2.ModelDesc, ModelNameDesc = q2.ModelNameDesc, PlanNo = q2.PlanNo
  from scQuote q1
  join Inventory i
  on q1.InventoryID = i.id
  join #quotecopy q2
  on q2.id = i.QuoteID
  where q1.id = @QuoteID
  and (i.SaleType = 'Spec' or i.SaleType = 'ReSale')

  declare @SourceQuote int, @SaleType varchar(50)
  select @SourceQuote = id from #Quotecopy

  select @SaleType = SaleType from Inventory where ID = @InventoryID

/*
		Do both resale and spec... resale may occur before construction has even begun
	 copy Spec & ReSale specs: 
   scQuoteCustom,
   scQuoteOption,
   scQuoteStructural,
   scQuoteUpgrade,
   scAttributes
*/

if @SaleType = 'Spec' or @SaleType = 'ReSale'
begin
 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#quotecopyCustom'))
 drop table #quotecopyCustom
 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#quotecopyOptions'))
 drop table #quotecopyOptions
 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#quotecopyAttributes'))
 drop table #quotecopyAttributes

 select *
 into #quotecopyCustom
 from scQuoteCustom
 where QuoteID = @SourceQuote  
 

 select *
 into #quotecopyOptions
 from scQuoteOptions
 where QuoteID = @SourceQuote

 select *
 into #quotecopyAttributes
 from scAttributes
 where QuoteID = @SourceQuote

 update #quotecopyCustom set QuoteID = @QuoteID
 update #quotecopyOptions set QuoteID = @QuoteID
 update #quotecopyAttributes set QuoteID = @QuoteID

 insert scQuoteCustom(QuoteID, ShortDescription, Description, PriceIsKnownYN, Price)
 select QuoteID, ShortDescription, Description, PriceIsKnownYN, Price from #quotecopyCustom where QuoteID not in (select QuoteID from scQuoteCustom where QuoteID is not null)
 
 insert scQuoteOptions(QuoteID, Alternate, HB_Elv_Opt_Id, Option_ID, OriginalOption_ID, Major_ID, Sub_ID, UnitOfMeasure, IsStructural, UnitQty, UnitPrice, UnitTotal, AllowanceQty , AllowancePrice, AllowanceTotal, ReplaceId, PayableTotal, DepositPercent, DepositTotal, Removed)
 select QuoteID, Alternate, HB_Elv_Opt_Id, Option_ID, OriginalOption_ID, Major_ID, Sub_ID, UnitOfMeasure, IsStructural, UnitQty, UnitPrice, UnitTotal, AllowanceQty , AllowancePrice, AllowanceTotal, ReplaceId, PayableTotal, DepositPercent, DepositTotal, Removed from #quotecopyOptions where QuoteID not in (select QuoteID from scQuoteOptions)

 insert scAttributes(MODEL_ID, MAJOR_ID, SUB_ID, OPTION_ID, Attr_ID, QuoteID, DES, DEFAULT_YN, ATT_COL, ATT_LOCATION, OATYP_ID, OptionListType)
 select MODEL_ID, MAJOR_ID, SUB_ID, OPTION_ID, Attr_ID, QuoteID, DES, DEFAULT_YN, ATT_COL, ATT_LOCATION, OATYP_ID, OptionListType from #quotecopyAttributes  where QuoteID not in (select QuoteID from scAttributes)
end

  update scQuote set HoldingID = 0, CommunityID = 0, ProjectID = 0, LotID = 0, 
  ModelID = 0, ModelNameID = 0, LotDesc = i.LotDesc, CommunityDesc = i.CommunityDesc, 
  CivicAddress = i.CivicAddress, BlockDesc = i.BlockDesc, CompanyID = i.CompanyID, HoldingDesc = i.HoldingDesc, 
  ProjectDesc = i.ProjectDesc, ModelDesc = i.ModelDesc, ModelNameDesc = i.ModelNameDesc, PlanNo = i.PlanNo
  from scQuote q1
  join Inventory i
  on q1.InventoryID = i.id
  where q1.id = @QuoteID
  and i.SaleType = 'Manual'
 end  

End

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPNewProj]') and xtype = 'P ')  
 drop Procedure scSPNewProj
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





CREATE   proc scSPNewProj
  @ProjID   int,
  @PROJ_NAME   varchar(255),
  @UserID int
as

insert MSP_PROJECTS (PROJ_ID, PROJ_NAME, PROJ_INFO_START_DATE, PROJ_EXT_EDITED)
select @ProjID,@PROJ_NAME,getdate(), '1'


insert msp_dashboard_projects (Link_ID, SourceFlavour, PROJ_ID, PROJ_NAME,PROJ_CREATION_DATE,DBModule_ID )
select @UserID, 'nbgSalesCenter',@ProjID,@PROJ_NAME ,getdate(), 15




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPProcessMethodsByProcessID]') and xtype = 'P ')  
 drop Procedure scSPProcessMethodsByProcessID
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go








CREATE   PROCEDURE scSPProcessMethodsByProcessID (@ProcessID int)
AS


SELECT Distinct S.ID, 
S.ProcessID, 
S.MethodID, 
S.MethodType, 
T.Description, 
S.Offset, 
S.StepNumber, 
S.CreateAs 
FROM scStep S 
LEFT OUTER JOIN scMethodTask T on T.ID = MethodID 
WHERE ProcessID = @ProcessID AND MethodType = 'Task'

UNION

SELECT Distinct S.ID, 
S.ProcessID, 
S.MethodID, 
S.MethodType, 
T.Description, 
S.Offset, 
S.StepNumber, 
S.CreateAs 
FROM scStep S 
LEFT OUTER JOIN scMethodLetter T on T.ID = MethodID 
WHERE ProcessID = @ProcessID AND MethodType = 'Letter'

UNION

SELECT Distinct S.ID, 
S.ProcessID, 
S.MethodID, 
S.MethodType, 
T.Description, 
S.Offset, 
S.StepNumber, 
S.CreateAs 
FROM scStep S
LEFT OUTER JOIN scMethodEmail T on T.ID = MethodID 
WHERE ProcessID = @ProcessID AND MethodType = 'Email'
ORDER BY StepNumber







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPRegisterOutlookItem]') and xtype = 'P ')  
 drop Procedure scSPRegisterOutlookItem
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE PROCEDURE scSPRegisterOutlookItem 
	@SalesManID	int,
	@CreateAs	varchar(64),
	@LeadID		int,
	@StartDate	datetime,
--	@TaskName	varchar(128),  synchronization will take care of it?
	@EntryID	varchar(500)
AS
BEGIN
	DECLARE	@Proj_ID	int
	SELECT 	@Proj_ID = Proj_ID 
	FROM	USER_LOGIN
	WHERE	USER_LOGIN_ID	= @SalesManID
	exec sp_Dashboard_AddNewTask 	@Proj_ID,
					0,
					Null,
					@CreateAs,
					'nbgSalesCentre',
					@EntryID,
					@LeadID,
					@SalesManID,
					@StartDate, 
					Null,		-- end date
					1, 		-- always is in SC
					Null, 		-- ParentOutline, unused
					'T', 		-- code type, always T in SalesCentre
					'',		--@TaskName,
					0,
					@SalesManID,
					'T'
END




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPSetQuoteBasics]') and xtype = 'P ')  
 drop Procedure scSPSetQuoteBasics
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go








-- exec scSPSetQuoteBasics 'tr_reflex_demo1', 613, 18
-- exec scSPSetQuoteBasics 'TR_RealestateBeta2', 2038, 35

CREATE        proc scSPSetQuoteBasics
  @Company varchar(500), 
  @QuoteID varchar(20), 
  @Obsolete varchar(20)
as

declare @Companyid int

select @Companyid = AutoID
from companies
where TreasuryDBName = @Company

Set @Company = ' '

declare @HoldingID varchar(500), @CommunityID varchar(500), @ProjectID varchar(500), 
@ModelID varchar(500), @ElevationID varchar(500), @LotID varchar(500)

select @HoldingID = HoldingID, @CommunityID = CommunityID, @ProjectID = ProjectID,
@ElevationID = ModelID, @ModelID = ModelNameID, @LotID = LotID
from scQuote
where [id] = @QuoteID

declare
    @Holding varchar(500), @Community varchar(500),	
		  @Project varchar(500), @Model varchar(500),
    @Elevation varchar(500), @LotDesc varchar(500), 
    @CivicAddress varchar(500), @BlockDesc varchar(500), 
    @PlanNo varchar(500)
		
		  if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ResultTR'))
		  drop table #ResultTR
		  create table #ResultTR(result varchar(50) null)		  
                  declare @S varchar(8000)
                   
		  select @S='
		  insert #ResultTR
		  select RAW_LAND_DESC
		  from ' + @Company + '..hb_raw_land
		  where Raw_Land_CD = ' + isnull(@HoldingID,'0')
 		  exec(@s)
		  select @Holding = result
		  from #ResultTR
		  delete #ResultTR
		
		  select @S='
		  insert #ResultTR
		  select COMMUNITY_DESC
		  from ' + @Company + '..hb_communities
		  where COMMUNITY_CD = ' + isnull(@CommunityID,'0')
		  + ' and Raw_Land_CD = ' + isnull(@HoldingID,'0')
 		  exec(@s)
		  select @Community = result
		  from #ResultTR
		  delete #ResultTR
		
		  select @S='
		  insert #ResultTR
		  select PROJECT_DESC
		  from ' + @Company + '..hb_project
		  where PROJECT_CD = ' + isnull(@ProjectID,'0') 
		  + ' and Raw_Land_CD = ' + isnull(@HoldingID,'0')
		  + ' and COMMUNITY_CD = ' + isnull(@CommunityID,'0')
 		  exec(@s)
		  select @Project = result
		  from #ResultTR
		  delete #ResultTR		

select @S='
		  insert #ResultTR   
		  select MODEL_DESC
		  from ' + @Company + '..hb_model
		  where MODEL_ID = ' + isnull(@ElevationID,'0')
 		  exec(@s)
		  select @Elevation = result
		  from #ResultTR
		  delete #ResultTR		

select @S='
		  insert #ResultTR
		  select MODEL_NAME
		  from ' + @Company + '..hb_model_name
		  where MODEL_NAME_ID = ' + isnull(@ModelID,'0')
 		  exec(@s)
		  select @Model = result
		  from #ResultTR
		  delete #ResultTR		

select @S='
		  insert #ResultTR
		  select LOT
		  from ' + @Company + '..hb_lots
		  where LOT_ID = ' + isnull(@LotID,'0')
 		  exec(@s)
		  select @LotDesc = result
		  from #ResultTR
		  delete #ResultTR		

select @S='
		  insert #ResultTR
		  select BLOCK
		  from ' + @Company + '..hb_lots
		  where LOT_ID = ' + isnull(@LotID,'0')
 		  exec(@s)
		  select @BlockDesc = result
		  from #ResultTR
		  delete #ResultTR		

select @S='
		  insert #ResultTR
		  select PLAN_NO
		  from ' + @Company + '..hb_lots
		  where LOT_ID = ' + isnull(@LotID,'0')
 		  exec(@s)
		  select @PlanNo = result
		  from #ResultTR
		  delete #ResultTR		

select @S='
		  insert #ResultTR
		  select isNull(LIH_STR_NUM,'''') + '' '' + isNull(LIH_STR_NAME,'''')  
    + '' '' + isNull(LIH_STR_SUFF,'''') + '' '' + isNull(LIH_STR_SUFF_DIR,'''')
    + '' '' + isNull(ADDR_CITY,'''') + '' '' + isNull(ADDR_PROV,'''')
    + '' '' + isNull(ADDR_POSTAL_CODE,'''')
		  from ' + @Company + '..hb_lots
		  where LOT_ID = ' + isnull(@LotID,'0')
 		  exec(@s)
		  select @CivicAddress = result
		  from #ResultTR
		  delete #ResultTR		
   
update scQuote
set CommunityDesc = @Community, HoldingDesc = @Holding, ProjectDesc = @Project,
Companyid = @Companyid, ModelDesc = @Elevation, ModelNameDesc = @Model,
CivicAddress = @CivicAddress, BlockDesc = @BlockDesc, PlanNo = @PlanNo,
LotDesc = @LotDesc
where [id] = @QuoteID
















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPTopicalAreaDelete]') and xtype = 'P ')  
 drop Procedure scSPTopicalAreaDelete
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE PROCEDURE [dbo].[scSPTopicalAreaDelete]
(
	@Original_ID int,
	@Original_Name varchar(100),
	@Original_WordMergeDSN varchar(100)
)
AS
	SET NOCOUNT OFF;
DELETE FROM ContextItem WHERE (ID = @Original_ID) AND (Name = @Original_Name OR @Original_Name IS NULL AND Name IS NULL) AND (WordMergeDSN = @Original_WordMergeDSN OR @Original_WordMergeDSN IS NULL AND WordMergeDSN IS NULL);



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPTopicalAreaInsert]') and xtype = 'P ')  
 drop Procedure scSPTopicalAreaInsert
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE PROCEDURE [dbo].[scSPTopicalAreaInsert]
(
	@Name varchar(100),
	@WordMergeDSN varchar(100),
	@GroupID int
)
AS
	SET NOCOUNT OFF;
INSERT INTO ContextItem(Name, WordMergeDSN) VALUES (@Name, @WordMergeDSN);


DECLARE @ContextItemID int
SELECT @ContextItemID = @@Identity

INSERT INTO ContextUsage(ContextGroupID,ContextItemID) VALUES(@GroupID,@ContextItemID)



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPTopicalAreaSelect]') and xtype = 'P ')  
 drop Procedure scSPTopicalAreaSelect
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE PROCEDURE [dbo].[scSPTopicalAreaSelect]
(
	@GroupID int
)
AS
	SET NOCOUNT ON;
SELECT ContextItem.ID, ContextItem.Name, ContextItem.WordMergeDSN FROM ContextItem INNER JOIN ContextUsage ON ContextItem.ID = ContextUsage.id WHERE (ContextUsage.ContextGroupID = @GroupID);



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPTopicalAreaUpdate]') and xtype = 'P ')  
 drop Procedure scSPTopicalAreaUpdate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE PROCEDURE [dbo].[scSPTopicalAreaUpdate]
(
	@Name varchar(100),
	@WordMergeDSN varchar(100),
	@Original_ID int,
	@Original_Name varchar(100),
	@Original_WordMergeDSN varchar(100)
)
AS
	SET NOCOUNT OFF;
UPDATE ContextItem SET Name = @Name, WordMergeDSN = @WordMergeDSN WHERE (ID = @Original_ID) AND (Name = @Original_Name OR @Original_Name IS NULL AND Name IS NULL) AND (WordMergeDSN = @Original_WordMergeDSN OR @Original_WordMergeDSN IS NULL AND WordMergeDSN IS NULL);



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPTrafficStats]') and xtype = 'P ')  
 drop Procedure scSPTrafficStats
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE PROCEDURE dbo.scSPTrafficStats

@SalesManID int,
@DaysPast int

AS

BEGIN

DECLARE @Walkthroughs	int
DECLARE	@NewLeads		int
DECLARE	@Quotes			int

select @Walkthroughs = sum(WTEarly + 
WT08 + WT09 + WT10 + WT11 + WT12 + WT13 + WT14 + WT15 + WT16 + WT17 + WT18 + WT19 + WT20 + WT21 + WTLate)  
from scTraffic
WHERE SalesManID = @SalesManID
AND TrafficDate > GetDate()-@DaysPast

select @NewLeads = count(*) from scLead
WHERE SalesManID = @SalesManID
AND DateCreated > getdate()-@DaysPast

select @Quotes = count(*) from scQuote
where Created > getdate()-@DaysPast

SELECT @Walkthroughs as Walkthroughs,
@NewLeads as NewLeads,
@Quotes as Quotes

END





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPUpdateProcessStatus]') and xtype = 'P ')  
 drop Procedure scSPUpdateProcessStatus
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

Create Procedure scSPUpdateProcessStatus
AS

Update scProcessInstance 
Set scProcessInstance.ProcessStatus = 'Finished'
Where ID in (Select P.id FROM scPRocessInstance P 
			Where (Select Count(id) from scMethodInstance Where PI_ID = P.ID) = (Select Count(id) from scMethodInstance Where PI_ID = P.ID AND Status ='Complete') 
				AND ProcessStatus = 'Started')



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scSPUpdateTask]') and xtype = 'P ')  
 drop Procedure scSPUpdateTask
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go







CREATE  PROCEDURE dbo.scSPUpdateTask

	@Proj_ID	int,
	@Task_UID	int,
	@Task_Name	varchar(255),
	@StartDate	DateTime,
	@FinishDate	DateTime
	
AS

BEGIN

	exec MSP_BACKUP_TASK @Proj_ID, @Task_UID
	
	DECLARE @PrevCompState int
	
	if @FinishDate IS NOT NULL
	BEGIN
	
		SELECT	@PrevCompState	= TASK_PCT_COMP
		FROM	MSP_TASKS
		WHERE	PROJ_ID			= @Proj_ID
		AND		TASK_UID		= @Task_UID	
		
		UPDATE	MSP_TASKS
		SET		TASK_NAME			= @Task_Name,
				TASK_PCT_COMP		= 100,
				TASK_START_DATE		= @StartDate,
				TASK_FINISH_DATE	= @FinishDate,
				TASK_ACT_START		= @StartDate,
				TASK_ACT_FINISH		= @FinishDate
		WHERE	PROJ_ID				= @Proj_ID
		AND		TASK_UID			= @Task_UID	
		
		IF @PrevCompState = 0
		BEGIN
			exec scSPMarkTaskAsComplete @Proj_ID, @Task_UID, @FinishDate
		END
	END
	ELSE
	BEGIN
		UPDATE	MSP_TASKS
		SET		TASK_NAME			= @Task_Name,
				TASK_PCT_COMP		= 0,
				TASK_START_DATE		= @StartDate,
				TASK_FINISH_DATE	= Null,
				TASK_ACT_START		= @StartDate,
				TASK_ACT_FINISH		= Null
		WHERE	PROJ_ID				= @Proj_ID
		AND		TASK_UID			= @Task_UID	
	END
	
	
	
	UPDATE	MSP_PRojects
	SET		PROJ_EXT_EDITED = 1
	WHERE	PROJ_ID			= @Proj_ID


END








Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SelectUpdatesLog]') and xtype = 'P ')  
 drop Procedure SelectUpdatesLog
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create procedure SelectUpdatesLog 
	@LogID int
as
begin
	select VersionInfo, FileDateUpdated,Filename,FileSize,DownloadState,StartDownload,CompleteDownload,StartUATDeploy,
	CompleteUATDeploy, StartProductionDeploy, CompleteProductionDeploy, UATUpdating, ProductionUpdating, UATContactID, 
	ProductionContactID
	from Updates_Log 
	where LogID = @LogID


end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_AddCustomerContact]') and xtype = 'P ')  
 drop Procedure sp_AddCustomerContact
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure [dbo].[sp_AddCustomerContact] (@CustomerID int, @UserID int, @CompanyID int)
AS

--Declare @CustomerID int, @UserID int, @CompanyID int
--Select @CustomerID = 1, @UserID = 4, @CompanyID = 16

Declare @ContactID int
Select @ContactID = 1

Insert Into Contact ([Type], KnownAs, Owner_ID, PersonalEmailOnly) 
Values ('Customer', '', @UserID, 1)

Select @ContactID = @@Identity

Insert Into Relations(Target,TargetID,ItemType, ItemID, CompanyID)
Values('Customer', @CustomerID, 'Contact', @ContactID, @CompanyID)

Insert Into scUDFStore(OwnerID, OwnerTableName)
Values(@ContactID, 'Contact')

Select @ContactID [ID]

/* Test Addition of new contact
Select * from Contact Where ID = @ContactID
Select * from Relations Where ItemID = @ContactID and ITemType = 'Contact' and Target = 'Customer'
*/

/* Removal Of new contact test
Declare @ContactID int
Select @ContactID = 67
Delete from Contact Where ID = @ContactID
Delete from Relations Where ItemID = @ContactID and ITemType = 'Contact' and Target = 'Customer'
*/


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_alterdiagram]') and xtype = 'P ')  
 drop Procedure sp_alterdiagram
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

	CREATE PROCEDURE dbo.sp_alterdiagram
	(
		@diagramname 	sysname,
		@owner_id	int	= null,
		@version 	int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
	
		declare @theId 			int
		declare @retval 		int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
		declare @ShouldChangeUID	int
	
		if(@diagramname is null)
		begin
			RAISERROR ('Invalid ARG', 16, 1)
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();	 
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		revert;
	
		select @ShouldChangeUID = 0
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		
		if(@DiagId IS NULL or (@IsDbo = 0 and @theId <> @UIDFound))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);
			return -3
		end
	
		if(@IsDbo <> 0)
		begin
			if(@UIDFound is null or USER_NAME(@UIDFound) is null) -- invalid principal_id
			begin
				select @ShouldChangeUID = 1 ;
			end
		end

		-- update dds data			
		update dbo.sysdiagrams set definition = @definition where diagram_id = @DiagId ;

		-- change owner
		if(@ShouldChangeUID = 1)
			update dbo.sysdiagrams set principal_id = @theId where diagram_id = @DiagId ;

		-- update dds version
		if(@version is not null)
			update dbo.sysdiagrams set version = @version where diagram_id = @DiagId ;

		return 0
	END
	

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_AP_CHK_SELECT_BATCH_StatusUpdate]') and xtype = 'P ')  
 drop Procedure sp_AP_CHK_SELECT_BATCH_StatusUpdate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[sp_AP_CHK_SELECT_BATCH_StatusUpdate]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@modref varchar(100),
	@stat varchar(50)


	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @modref=module_reference_id, @stat=status from approvals_requested where id=@id

	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..AP_CHK_SELECT_BATCH set BATCH_STATUS=''R'' where BATCH_NO='+@modref
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..AP_CHK_SELECT_BATCH set BATCH_STATUS=''A'' where BATCH_NO='+@modref
		exec( @sql )
	end
	else if( @stat = 'in progress' )
	begin
		set @sql ='update '+@tr_db+'..AP_CHK_SELECT_BATCH set BATCH_STATUS=''P'' where BATCH_NO='+@modref
		exec( @sql )
	end
	else if( @stat = 'recalled' )
	begin
		set @sql ='update '+@tr_db+'..AP_CHK_SELECT_BATCH set BATCH_STATUS=''O'' where BATCH_NO='+@modref
		exec( @sql )
	end

end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_AP_CkSelDetails]') and xtype = 'P ')  
 drop Procedure sp_AP_CkSelDetails
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

CREATE proc [dbo].[sp_AP_CkSelDetails]
@ID int, 
@USERNAME varchar(50)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@modref varchar(100),
	@Active char(1)

	select @CompanyID=CompanyID, @modref=module_reference_id from approvals_requested where id = @ID

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	set @sql ='delete from working_Chk_Details where username='''+@USERNAME+'''
		insert into working_Chk_Details (username, supplier, name, inv_no, due_date, payment_amount, discount, discount_taken, 
		inv_date, invoice_balance, acct_year, acct_period, currency, buy_supplier, buy_supplier_name, ws_inv_id, reference, 
		ap_inv_header_id, po_id, po_status)
		select '''+@USERNAME+''', a.supplier, a.remit_supp_name, a.inv_no, a.due_date, a.payment_amount, a.discount, a.discount_taken, a.inv_date, invoice_balance, b.acct_year, 
		b.acct_period, c.description as currency,
		case when isnull(s.buy_group,''F'') = ''T'' then 
			isnull( s2.supplier, s.supplier ) else s.supplier end buy_supplier, 
			case when isnull(s.buy_group,''F'') = ''T'' then 
			isnull( s2.name, s.name ) else s.name end buy_supplier_name, ah.ws_inv_id, a.reference, 
			ah.ap_inv_header_id, isnull(ah.po_id,-1), isnull(p.status,'''')
		from '+@tr_db+'.dbo.ap_ck_select_batch_det a
		left outer join '+@tr_db+'.dbo.ap_inv_header ah on ah.ap_inv_header_id=a.ap_inv_header_id
		left outer join '+@tr_db+'.dbo.supplier_master s on s.supplier=a.supplier
		left outer join '+@tr_db+'.dbo.supplier_master s2 on s.buy_supplier=s2.supplier
		left outer join '+@tr_db+'.dbo.ap_chk_select_batch b on b.batch_no=a.batch_id
		left outer join '+@tr_db+'.dbo.currency c on c.currency_id=b.currency_id
		left outer join '+@tr_db+'.dbo.po_header p on p.po_id=ah.po_id
		where a.batch_id='+@modref
	exec( @sql )
		
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_AP_SupplierChange]') and xtype = 'P ')  
 drop Procedure sp_AP_SupplierChange
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_AP_SupplierChange]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@modref varchar(100),
	@stat varchar(50),
	@oID varchar(50),
	@Active char(1)



	select @CompanyID=CompanyID from approvals_requested where id = @id
	select @tr_db=treasurydbname from companies where autoid = @CompanyID
	select @modref=module_reference_id, @stat=status from approvals_requested where id=@id		
	select @oID=SUBSTRING(@modref, 1, CHARINDEX( '~', @modref )-1)
	select @Active=SUBSTRING(@modref, CHARINDEX( '~', @modref)+1, len(@modref))


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..supplier_master set ACTIVE_PENDING=''D'' where supplier_id='+@oID
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..supplier_master set ACTIVE_PENDING=''A'', Active='''+@Active+''' where supplier_id='+@oID+'
		update Contact set InActive = ''Y'' where ID in (
		select ItemID from Relations where Target = ''Supplier'' and TargetID = '+@oID+' and ItemType = ''Contact'' and CompanyID = '+cast(@CompanyID as varchar)+')'		
		exec( @sql )
	end

		if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#SupplierCode'))
	drop table #SupplierCode
	CREATE TABLE #SupplierCode(Result varchar(10))

	--sync suppliers across companies
	select @sql = ' insert #SupplierCode(result) select supplier from '+@tr_db+'..supplier_master where supplier_id='+@oID
	exec (@sql) 
	declare @Supplier varchar(10), @CompanyDB varchar(500)
	select @Supplier = Result from #SupplierCode
	
	if exists (select * from SUPPLIER_MASTER_SYNC sms where sms.Supplier = @Supplier and sms.AutoID = @CompanyID and sms.AllowSync = 1)
	begin	
		--propagate changes
		declare cur cursor for 
		select c.TreasuryDBName
		from SUPPLIER_MASTER_SYNC sms
		join Companies c on c.autoid = sms.Autoid
		where sms.Supplier = @Supplier and sms.AutoID != @CompanyID
		
		open cur
		fetch cur into @CompanyDB
		while @@fetch_status = 0
		begin					
			if( @stat = 'declined' )
			begin
				set @sql ='update '+@CompanyDB+'..supplier_master set ACTIVE_PENDING=''D'' where supplier_id='+@oID
				exec( @sql )
			end
			else if( @stat = 'approved' )
			begin
				set @sql ='update '+@CompanyDB+'..supplier_master set ACTIVE_PENDING=''A'', Active='''+@Active+''' where supplier_id='+@oID
				exec( @sql )
			end

			exec (@SQL)
			fetch cur into @CompanyDB
		end
		close cur
		deallocate cur    	
	end
	

end








Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_AP_SupplierCreate]') and xtype = 'P ')  
 drop Procedure sp_AP_SupplierCreate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_AP_SupplierCreate]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@modref varchar(100),
	@stat varchar(50)


	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @modref=module_reference_id, @stat=status from approvals_requested where id=@id

	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..supplier_master set PENDING=''D'' where supplier_id='+@modref
		exec( @sql )		
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..supplier_master set PENDING=''A'', Active=''T'' where supplier_id='+@modref
		exec( @sql )
	end

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#SupplierCode'))
	drop table #SupplierCode
	CREATE TABLE #SupplierCode(Result varchar(10))

	--sync suppliers across companies
	select @sql = ' insert #SupplierCode(result) select supplier from '+@tr_db+'..supplier_master where supplier_id='+@modref
	exec (@sql) 
	declare @Supplier varchar(10), @CompanyDB varchar(500)
	select @Supplier = Result from #SupplierCode
	
	if exists (select * from SUPPLIER_MASTER_SYNC sms where sms.Supplier = @Supplier and sms.AutoID = @CompanyID and sms.AllowSync = 1)
	begin	
		--propagate changes
		declare cur cursor for 
		select c.TreasuryDBName
		from SUPPLIER_MASTER_SYNC sms
		join Companies c on c.autoid = sms.Autoid
		where sms.Supplier = @Supplier and sms.AutoID != @CompanyID
		
		open cur
		fetch cur into @CompanyDB
		while @@fetch_status = 0
		begin
			if( @stat = 'declined' )
			begin
				set @sql ='update '+@CompanyDB+'..supplier_master set PENDING=''D'' where supplier_id='+@modref
				exec( @sql )		
			end
			else if( @stat = 'approved' )
			begin
				set @sql ='update '+@CompanyDB+'..supplier_master set PENDING=''A'', Active=''T'' where supplier_id='+@modref
				exec( @sql )
			end

			exec (@SQL)
			fetch cur into @CompanyDB
		end
		close cur
		deallocate cur    	
	end
end







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_AP_UnapprovedContractPOMatch]') and xtype = 'P ')  
 drop Procedure sp_AP_UnapprovedContractPOMatch
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_AP_UnapprovedContractPOMatch] 
@ID int,
@Status char(1)
as 
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@stat varchar(50),
	@AP_INV_HEADER_ID varchar(50)

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @AP_INV_HEADER_ID=module_reference_id, @stat=status from approvals_requested where id=@id


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..ap_inv_header set KC_CONTRACTPO_STATUS=''D'' where AP_INV_HEADER_ID='+@AP_INV_HEADER_ID+' 
		
		if exists( select * from '+@tr_db+'..ws_inv_header where ap_inv_header_id='+@AP_INV_HEADER_ID+' )
		begin
			declare @ws_inv_id int
			select @ws_inv_id=ws_inv_id from '+@tr_db+'..ws_inv_header where ap_inv_header_id='+@AP_INV_HEADER_ID+'
			insert into '+@tr_db+'..WS_EVENT_HISTORY (DETAIL_ID, EVENT_DATE, CONTACT_ID, EVENT, NOTES, ST_TYPE_ID) 
			select @ws_inv_id, GETDATE(), -1, ''Invoice declined for AP unapproved contract PO matching routing.'', '''', 1
		end'
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..ap_inv_header set KC_CONTRACTPO_STATUS=''A'' where AP_INV_HEADER_ID='+@AP_INV_HEADER_ID+'
		
		if exists( select * from '+@tr_db+'..ws_inv_header where ap_inv_header_id='+@AP_INV_HEADER_ID+' )
		begin
			declare @ws_inv_id int
			select @ws_inv_id=ws_inv_id from '+@tr_db+'..ws_inv_header where ap_inv_header_id='+@AP_INV_HEADER_ID+'
			insert into '+@tr_db+'..WS_EVENT_HISTORY (DETAIL_ID, EVENT_DATE, CONTACT_ID, EVENT, NOTES, ST_TYPE_ID) 
			select @ws_inv_id, GETDATE(), -1, ''Invoice approved for AP unapproved contract PO matching routing.'', '''', 1
		end'
		exec( @sql )
	end

end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Approval_remove_Docket_Request]') and xtype = 'P ')  
 drop Procedure sp_Approval_remove_Docket_Request
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_Approval_remove_Docket_Request](@docket varchar(100))

AS

--Declare @docket varchar(100)
--Select @docket = '423709'
--Begin Tran

delete approvals_sox_log where an_id in(
      select an.ID from approval_notification an where an.ar_id in (
            select ar.ID from approvals_requested ar where ar.module_reference_id = @docket and ar.at_id = 16 ) )

delete approval_notification  where ar_id in (
            select ar.id from approvals_requested ar where ar.module_reference_id = @docket and ar.at_id = 16 )


delete approvals_requested where module_reference_id = @docket and at_id = 16

--Rollback Tran

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Approval_Request_SalesCenter]') and xtype = 'P ')  
 drop Procedure sp_Approval_Request_SalesCenter
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_Approval_Request_SalesCenter]
@Contact_ID int
as


--exec sp_Approval_Request_SalesCenter 12

declare
@table table(
[AN_ID] int,
[Approved] bit,
[Declined] bit,
[Notes] varchar(8000),
[Status] varchar(50),
[Request Level] int,
[Current Level] int,
[Server Status] varchar(50),
[Request Notes] varchar(8000),
[Notification Type] varchar(20),
[Holding] varchar(128),
[Community] varchar(128),
[Phase] varchar(60),
[Model] varchar(60),
[Elevation] varchar(60),
[Elevation Plan] int,
[Lot] varchar(128),
[Block] varchar(128),
[Plan] varchar(20),
[Purchaser Name] varchar(50),
[Quote#] int,
[Quote Status] varchar(20),
[Quote Approval Status] varchar(50),
[Quote Date] DateTime,
[Option] varchar(50),
[Option Type]varchar(50),
[Qty] int,
[Adjustment] money,
[Allowance] money,
[Price] money,
[Total] money) 



-----Option Quote
insert into @table
select  /*server*/an.ID[AN_ID],case when ac.Notification_Type = 'A' then (case when an.Status = 'Approved' then 1 else 0 end) else null end [Approved],
			case when ac.Notification_Type = 'A' then (case when an.Status = 'Declined' then 1 else 0 end )else null end [Declined],an.Notes[Notes],an.Status[Status],
			al.Escalation_Level[Request Level],ar.Current_Escalation_Level[Current Level],ar.Status[Server Status],ar.Additional_Notes[Request Notes],case when ac.Notification_Type = 'A' then 'Approval Required' else 'Information Only'end[Notification Type],
		/*land*/sc.HoldingDesc[Holding],sc.CommunityDesc[Community],sc.ProjectDesc[Phase],
		/*home*/sc.ModelNameDesc[Model],isnull(sc.ModelDesc,' ')[Elevation],isnull(hm.Plan_Num,' ')[Elevation Plan],
		/*lot*/ isnull(sc.LotDesc,' ')[Lot],isnull(sc.BlockDesc,' ')[Block],isnull(sc.PlanNo,' ')[Plan],
		/*quote stuff*/isnull(ct.KnownAs,' ')[Purchaser Name],sc.ID[Quote#],
			case when sc.status = 'S' then 'Sold' else case when sc.status = 'C' then 'Construction' else 
			case when sc.status = 'X' then 'Cancelled' else 'Quote' end end  end[Quote Status],
		isnull(sc.QuoteApprovalStatus,' ')[Quote Approval Status],isnull(sc.Created,' ')[Quote Date],
		ho.Short_Desc[Option],'Quote Option'[Option Type],qo.UnitQty[Qty],qo.Adjustments[Adjustment],qo.AllowanceTotal[Allowance],qo.UnitPrice[Price],qo.PayableTotal[Total]

from Approval_Notification an
join Approvals_Requested ar on an.AR_ID = ar.ID
join Approval_Topic at on at.ID = ar.AT_ID
join Approval_Contacts ac on an.AC_ID = ac.ID
join Approval_Levels al on ac.AL_ID = al.ID
join scQuoteOptions qo on ar.Module_Reference_ID = Convert(varchar(100),qo.ID )
join scquote sc on sc.ID = qo.QuoteID
join HB_Model hm on hm.MODEL_ID = sc.ModelID and hm.MODEL_NAME_ID = sc.ModelNameID and hm.RAW_LAND_CD = sc.HoldingID
join scLead ld on ld.ID = sc.LeadID
join contact ct on ld.Contact_ID = ct.ID
join HB_Options ho on ho.Option_ID = qo.Option_ID
where ac.Contact_ID = @Contact_ID and at.Module = 'SalesCenter' and --ar.Action_Committed = 0 and 
at.ID in (1,2,3,4,5,6,7,8,9)
-----custom quote
insert into @table
select  /*server*/an.ID[AN_ID],case when ac.Notification_Type = 'A' then (case when an.Status = 'Approved' then 1 else 0 end) else null end [Approved],
			case when ac.Notification_Type = 'A' then (case when an.Status = 'Declined' then 1 else 0 end )else null end [Declined],an.Notes[Notes],an.Status[Status],
			al.Escalation_Level[Request Level],ar.Current_Escalation_Level[Current Level],ar.Status[Server Status],ar.Additional_Notes[Request Notes],case when ac.Notification_Type = 'A' then 'Approval Required' else 'Information Only'end[Notification Type],
		/*land*/sc.HoldingDesc[Holding],sc.CommunityDesc[Community],sc.ProjectDesc[Phase],
		/*home*/sc.ModelNameDesc[Model],isnull(sc.ModelDesc,' ')[Elevation],isnull(hm.Plan_Num,' ')[Elevation Plan],
		/*lot*/ isnull(sc.LotDesc,' ')[Lot],isnull(sc.BlockDesc,' ')[Block],isnull(sc.PlanNo,' ')[Plan],
		/*quote stuff*/isnull(ct.KnownAs,' ')[Purchaser Name],sc.ID[Quote#],
		case when sc.status = 'S' then 'Sold' else case when sc.status = 'C' then 'Construction' else 
			case when sc.status = 'X' then 'Cancelled' else 'Quote' end end  end[Quote Status],
		isnull(sc.QuoteApprovalStatus,' ')[Quote Approval Status],isnull(sc.Created,' ')[Quote Date],
		qc.ShortDescription[Option],'Quote Custom'[Option Type],1[Qty],null[Adjustment],null[Allowance],isnull(qc.Price,0)[Price],isnull(qc.Price,0)[Total]
from Approval_Notification an
join Approvals_Requested ar on an.AR_ID = ar.ID
join Approval_Topic at on at.ID = ar.AT_ID
join Approval_Contacts ac on an.AC_ID = ac.ID
join Approval_Levels al on ac.AL_ID = al.ID
join scQuoteCustom qc on ar.Module_Reference_ID = Convert(varchar(100),qc.ID )
join scquote sc on sc.ID = qc.QuoteID
join HB_Model hm on hm.MODEL_ID = sc.ModelID and hm.MODEL_NAME_ID = sc.ModelNameID and hm.RAW_LAND_CD = sc.HoldingID
join scLead ld on ld.ID = sc.LeadID
join contact ct on ld.Contact_ID = ct.ID
where ac.Contact_ID = @Contact_ID and at.Module = 'SalesCenter' and --ar.Action_Committed = 0 and 
at.ID in (10,11)
-----for sale or change
insert into @table
select  /*server*/an.ID[AN_ID],case when ac.Notification_Type = 'A' then (case when an.Status = 'Approved' then 1 else 0 end) else null end [Approved],
			case when ac.Notification_Type = 'A' then (case when an.Status = 'Declined' then 1 else 0 end )else null end [Declined],an.Notes[Notes],an.Status[Status],
			al.Escalation_Level[Request Level],ar.Current_Escalation_Level[Current Level],ar.Status[Server Status],ar.Additional_Notes[Request Notes],case when ac.Notification_Type = 'A' then 'Approval Required' else 'Information Only'end[Notification Type],
		/*land*/sc.HoldingDesc[Holding],sc.CommunityDesc[Community],sc.ProjectDesc[Phase],
		/*home*/sc.ModelNameDesc[Model],isnull(sc.ModelDesc,' ')[Elevation],isnull(hm.Plan_Num,' ')[Elevation Plan],
		/*lot*/ isnull(sc.LotDesc,' ')[Lot],isnull(sc.BlockDesc,' ')[Block],isnull(sc.PlanNo,' ')[Plan],
		/*quote stuff*/isnull(ct.KnownAs,' ')[Purchaser Name],sc.ID[Quote#],
		case when sc.status = 'S' then 'Sold' else case when sc.status = 'C' then 'Construction' else 
			case when sc.status = 'X' then 'Cancelled' else 'Quote' end end  end[Quote Status],
		isnull(sc.QuoteApprovalStatus,' ')[Quote Approval Status],isnull(sc.Created,' ')[Quote Date],
		null[Option],'Quote'[Option Type],null[Qty],null[Adjustment],null[Allowance],sc.FinalPrice[Price],sc.FinalPrice[Total]
from Approval_Notification an
join Approvals_Requested ar on an.AR_ID = ar.ID
join Approval_Topic at on at.ID = ar.AT_ID
join Approval_Contacts ac on an.AC_ID = ac.ID
join Approval_Levels al on ac.AL_ID = al.ID
join scquote sc on ar.Module_Reference_ID = Convert(varchar(100),sc.ID )
join HB_Model hm on hm.MODEL_ID = sc.ModelID and hm.MODEL_NAME_ID = sc.ModelNameID and hm.RAW_LAND_CD = sc.HoldingID
join scLead ld on ld.ID = sc.LeadID
join contact ct on ld.Contact_ID = ct.ID
where ac.Contact_ID = @Contact_ID and at.Module = 'SalesCenter' and --ar.Action_Committed = 0 and 
at.ID in (12,13)



select * from @table




























Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Approval_RevertStatus]') and xtype = 'P ')  
 drop Procedure sp_Approval_RevertStatus
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc [dbo].[sp_Approval_RevertStatus](@AR_ID int , @AN_ID int,@result varchar(500) output)
/*

declare 
@result varchar(500),
@AR_ID int , @AN_ID int

set @result = 'test'
set @AR_ID = 1
set @AN_ID = 2


exec sp_Approval_RevertStatus @AR_ID,@AN_ID, @result output

select @result

*/
as
begin


set @result = 'OK'

if exists (select Requestor_id from approvals_requested where id = @AR_ID and action_committed = 0)
begin
	if not exists(select  server_detected from approval_notification where serverProcessing = 1 and ar_id = @AR_ID)
	begin


		update Approvals_requested set status = 'In Progress',last_changed_by_id = @AN_ID,last_changed_by_notes = 'Request has been reverted to its origional state',
		current_Approval_count = 0,current_disapproval_count = 0, server_detected = 1,previous_level_status = status
		where id = @AR_ID

		insert into approvals_sox_log(AN_ID,DateTimeStamp,Status,Notes,Escalation_Level,Level_Description,Notification_Type,Contact_ID)
		select @AN_ID,getdate(),'Reverted',an.notes,al.Escalation_Level,al.Description,ac.Notification_Type,ac.Contact_ID
		from approval_notification an
		join approval_contacts ac on an.ac_id = ac.id
		join approval_levels al on al.id = ac.al_id
		where an.id = @AN_ID


		update approval_notification set Status = 'In Progress' ,Response_Date = null, server_detected = 1,serverProcessing = 0
		where ar_id = @AR_ID
	end
	else
	begin
		set @result = 'Server is currently processing requests please try again later.'
	end



end
else
begin
	set @result = 'An Action has been committed with this request and cannot be reverted.'
end

end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Sp_Approval_Topic_Factor]') and xtype = 'P ')  
 drop Procedure Sp_Approval_Topic_Factor
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec Sp_Approval_Topic_Factor 3792, 'P', 14, '8-9-2011'
CREATE procedure [dbo].[Sp_Approval_Topic_Factor] (@contactid int, @status varchar(1), @companyid varchar(30), @fromdate datetime)

as

--Declare @contactid int, @status varchar(1), @companyid varchar(30), @fromdate datetime
--Select @contactid = 3792, @status = 'S', @companyid = '16', @fromdate = '2/11/2008'

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#mainResults'))  
 drop table #mainResults



create table #mainResults(
[ApproveRequired] char(1),
[DeclineRequired] char(1),
[IDRequired] int,
[AR_IDRequired] int,
[NotesRequired] varchar(8000),
[Status] varchar(50),
[Notify Date] datetime,
[Response Date]datetime,
[Description]varchar(50),
[Request Status]varchar(50),
[Request Type]varchar(100),
[Company] varchar(100),
[CompanyAutoID] int,
[Module Reference ID] varchar(100),
[Who Approved] varchar(100)
)
--,
--[Docket Number] varchar(1000),
--[Deliver Due Date] datetime,
--[Dealer] varchar(10),
--[Dealer Name] varchar(40),
--[Order Writer] varchar(20),
--[Order Taker] varchar(20),
--[Docket $ Value] money,
--[ReRun Flag] bit,
--[Who Approved] varchar(100)
--)


	insert into #mainResults([ApproveRequired],[DeclineRequired],[IDRequired],[AR_IDRequired],
	[NotesRequired],[Status],[Notify Date],[Response Date],[Description],[Request Status],
	[Request Type],[Company],[CompanyAutoID],[Module Reference ID])
	exec sp_approvalViewerSelection 16, @contactid,@status, @companyid, @fromdate


	--ADAM COMMENT OUT START BECAUSE OF PERFORMANCE ISSUES	
	--declare updates cursor for 
	--select cast(autoid as varchar(100)),treasurydbname,docketdbname,sqlservername from companies where Convert(varchar,AutoID) like @companyid

	--declare @autoID varchar(100),@trDB varchar(100),@dctDB varchar(100),@svr varchar(100),@module_ID varchar(100)

	--open updates
	--fetch updates into @autoID,@trDB,@dctDB,@svr

	--while @@fetch_status = 0
	--begin 
	--	Declare @sql varchar(8000)
	--	select @sql = 'update #mainResults
	--						Set [Docket Number] = dh.oh_type+'' ''+(cast(dh.oh_num as varchar(100))),
	--							[Deliver Due Date] = dh.oh_ship_date,
	--							[Dealer] = cust.Customer_Code,
	--							[Dealer Name] = cust.Name,
	--							[Order Writer] = sls1.FirstName,
	--							[Order Taker] = sls2.FirstName,
	--							[Docket $ Value] = qg.QG_DktBillAmt,
	--							[ReRun Flag] = (Case When IsNull(ReRun_YN,''N'') = ''N'' Then 0 Else 1 End),
	--							[Who Approved] = (Select Top 1 c.KnownAs from approval_notification an
	--											  inner join approval_contacts ac on ac.ID = an.AC_ID
	--											  inner join Contact c on c.ID = ac.Contact_ID Where an.AR_ID = mr.[AR_IDRequired]
	--											  Order By an.Response_Date desc),
	--							[Response Date] = Case When IsNull([Response Date],Convert(DateTime,''1/1/1900'')) =  Convert(DateTime,''1/1/1900'') Then 
	--												(Select Top 1 an.Response_Date From Approval_Notification an Where an.ar_ID = [AR_IDRequired] Order By an.Response_Date desc) 
	--											  Else [Response Date] End
	--						from #mainResults mr
	--						Left Outer Join '+@svr+'.'+@dctDB+'.dbo.D_Head dh on dh.oh_id = mr.[Module Reference ID]
	--						Left Outer Join '+@svr+'.'+@dctDB+'.dbo.Q_Head qh on qh.q_id = dh.q_id
	--						Left Outer Join '+@svr+'.'+@dctDB+'.dbo.Q_Group qg on qg.QG_ID = dh.QG_ID
	--						Left Outer Join '+@svr+'.'+@trDB+'.dbo.CUSTOMERS cust on cust.Customer_ID = qh.Customer_ID
	--						Left Outer Join '+@svr+'.'+@trDB+'.dbo.SalesPersons sls1 on sls1.sls_id = dh.sls_ID_Inside
	--						Left Outer Join '+@svr+'.'+@trDB+'.dbo.SalesPersons sls2 on sls2.sls_id = qh.sls_ID							
	--						Where mr.[CompanyAutoID] = '+ @autoID
	--	--exec(@sql)		
	--fetch updates into @autoID,@trDB,@dctDB,@svr
	--end

	--close updates
	--deallocate updates
--ADAM COMMENT OUT END


	--alter table #mainResults
	--drop column CompanyAutoID
	--
	--alter table #mainResults
	--drop column [module reference id]
	--
	--if @status = 'P'
	--begin
	--	alter table #mainResults
	--	drop column [Who Approved]
	--end
	--else
	--begin
	--	alter table #mainResults
	--	drop column [Docket $ Value]
	--
	--	alter table #mainResults
	--	drop column [ReRun Flag]
	--end	

	if( @status = 'P' )
	begin
		select m.[ApproveRequired], m.[DeclineRequired], m.[IDRequired], m.[AR_IDRequired], m.[NotesRequired], m.[Status],
			m.[Notify Date], m.[Response Date], m.[Description], m.[Request Status], m.[Request Type], m.[Company], 
			d.[Docket Number], d.[Deliver Due Date], d.[Dealer], d.[Dealer Name], d.[Order Writer], d.[Order Taker],
			d.[Docket $ Value], d.[ReRun Flag]
		from #mainResults m
		left outer join Approvals_Requested_DK_Det d on d.ar_id=m.[AR_IDRequired]
	end
	else
	begin
		--updates any appoved dockets det on web that hasnt had its response date and who approved updated yet
		update mr
		set 
		mr.[Response Date] = Case When IsNull(mr.[Response Date],Convert(DateTime,'1/1/1900')) =  Convert(DateTime,'1/1/1900') Then 
			(Select Top 1 an.Response_Date From Approval_Notification an Where an.ar_ID = mr.[AR_ID] and an.Response_Date is not null
			Order By an.Response_Date desc) 
			Else [Response Date] End,
		mr.[Who Approved]=(Select Top 1 c.KnownAs from approval_notification an
			  inner join approval_contacts ac on ac.ID = an.AC_ID
			  inner join Contact c on c.ID = ac.Contact_ID Where an.AR_ID = mr.[AR_ID] and an.Response_Date is not null
			  Order By an.Response_Date desc)
		from Approvals_Requested_DK_Det mr
		where mr.[Response Date] is null


		select m.[ApproveRequired], m.[DeclineRequired], m.[IDRequired], m.[AR_IDRequired], m.[NotesRequired], m.[Status],
			m.[Notify Date], d.[Response Date], m.[Description], m.[Request Status], m.[Request Type], m.[Company], 
			d.[Docket Number], d.[Deliver Due Date], d.[Dealer], d.[Dealer Name], d.[Order Writer], d.[Order Taker],
			d.[Who Approved]
		from #mainResults m
		left outer join Approvals_Requested_DK_Det d on d.ar_id=m.[AR_IDRequired]
	end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_ApprovalHeader]') and xtype = 'P ')  
 drop Procedure sp_ApprovalHeader
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc sp_ApprovalHeader @Module_Reference_ID varchar(100), @AT_ID int, @CompanyID int as
--declare @Module_Reference_ID varchar(100), @AT_ID int, @CompanyID int select @CompanyID = 12, @Module_Reference_ID = 2604, @AT_ID = 44
select Module, Approval_Topic [Topic], ar.Description [Approval Request], ar.Additional_Notes [Requestor Notes], ar.Status [Request Status], 
ar.id [Approval Request ID]
from Approvals_Requested ar
join Approval_Topic at on ar.at_id = at.id
where CompanyID = @CompanyID and Module_Reference_ID = @Module_Reference_ID and ar.AT_ID = @AT_ID
and AR.ID in (Select max(ar2.id) from Approvals_Requested ar2 where ar2.CompanyID = @CompanyID and ar2.Module_Reference_ID = @Module_Reference_ID and ar2.AT_ID = @AT_ID)



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_ApprovalNotes]') and xtype = 'P ')  
 drop Procedure sp_ApprovalNotes
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_ApprovalNotes] @Module_Reference_ID varchar(100), @AT_ID int, @CompanyID int as
--declare @Module_Reference_ID varchar(100), @AT_ID int, @CompanyID int select @CompanyID = 12, @Module_Reference_ID = 2604, @AT_ID = 44
select an.Status [Response], an.Notify_Date [Responder Notified], an.Response_Date [Responded], an.Notes [Response Notes], 
case when isnull(c.FirstName,'') + ' ' + isnull(c.LastName,'') = ' ' then isnull(cc.FirstName,'') + ' ' + isnull(cc.LastName,'')
else isnull(c.FirstName,'') + ' ' + isnull(c.LastName,'') end [Responder], last_changed_by_id,
ar.id [Approval Request ID]
from Approvals_Requested ar
join Approval_Topic at on ar.at_id = at.id
left outer join Approval_Notification an on an.ar_id = ar.id
left outer join Approval_Contacts ac on ac.id = an.ac_id
left outer join contact c on c.id = ac.contact_id
left outer join Approvals_SOX_Log sl on sl.an_id = an.id
left outer join contact cc on cc.id = sl.contact_id
where CompanyID = @CompanyID and Module_Reference_ID = @Module_Reference_ID and ar.AT_ID = @AT_ID and an.Notify_Date is not null




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_ApprovalRequestCreate]') and xtype = 'P ')  
 drop Procedure sp_ApprovalRequestCreate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_ApprovalRequestCreate]
@AT_ID int,
@MR_ID varchar(100),
@Desc varchar(50),
@AdditionalNotes varchar(8000),
@Requester_ID int,
@CompanyID int,
@division varchar(6) = null
as

--declare 
--@AT_ID int,
--@MR_ID varchar(100),
--@Desc varchar(50),
--@AdditionalNotes varchar(8000),
--@Requester_ID int,
--@CompanyID int,
--@division varchar(6)

--set @AT_ID  =  50
--set @MR_ID  = 'test'
--set @Desc  = 'test'
--set @AdditionalNotes  = 'test'
--set @Requester_ID  = 1
--set @CompanyID  = 12
--set @division = '01'

--exec sp_ApprovalRequestCreate @AT_ID,@MR_ID,@Desc,@AdditionalNotes,@Requester_ID,@CompanyID,@division


Declare @AL_EscalationLevel int,
@divName varchar(8),
@divSegDescription varchar(25),
@divSegment int,
@AR_ID int

if(@CompanyID is null)
	set @CompanyID = -1;

select @AL_EscalationLevel =isnull(min(Escalation_Level),-1) from Approval_Levels where AT_ID = @AT_ID

if @AL_EscalationLevel = -1
	begin
		select -1[ID],'No Approval Levels Setup'[Result]
	end
else
	begin
		
		--check to see if divisional routing is enabled
		declare @sql nvarchar(4000)
		if(@CompanyID > -1)
		begin
			declare @USE_DIV_ROUTING varchar(1)

			set @USE_DIV_ROUTING = 'F'
			set @sql = 'select top 1 @USE_DIV_ROUTING = isnull(USE_DIV_ROUTING,''F'') from '+dbo.fn_tableprefix(@companyID,'TR')+'gl_setup' 
			exec sp_executesql @sql, N'@USE_DIV_ROUTING varchar(1) OUT', @USE_DIV_ROUTING OUT
			if(@USE_DIV_ROUTING = 'F')
				set @division = null
			else
			begin--use divisional routing is true get division and segments name
				if( @division is not null)
				begin
					set @sql = 'select top 1 @divSegment = clear_seg from '+dbo.fn_tableprefix(@companyID,'TR')+'gl_setup' 
					exec sp_executesql @sql, N'@divSegment int OUT', @divSegment OUT
					set @sql = 'select top 1 @divName = seg_'+cast(@divSegment as varchar(10))+'_desc from '+dbo.fn_tableprefix(@companyID,'TR')+'gl_setup'
					exec sp_executesql @sql, N'@divName varchar(8) OUT', @divName OUT
					set @sql = 'select @divSegDescription = SEGMENT_DESC from '+dbo.fn_tableprefix(@companyID,'TR')+'gl_segment_setup where segment_number = '+cast(@divSegment as varchar(10))+' and segment_value ='''+@division +''''
					exec sp_executesql @sql, N'@divSegDescription varchar(25) OUT', @divSegDescription OUT
				end
			end
		end
		else--divisional routing is not setup set division to null for normal processing
			set @division = null

		delete working_Approval_Esc_levels where contactID = @Requester_ID and companyID = @CompanyID

		if(@CompanyID > -1 and @division is not null)
		begin
		
			set @sql = '
insert into working_Approval_Esc_levels(contactID,companyid,esc_level) 
select distinct '+cast(@Requester_ID as varchar(10))+','+cast(@CompanyID  as varchar(10))+', al.escalation_level 
from approval_contacts ac 
join approval_levels al on al.id = ac.al_id and al.at_id = '+cast(@AT_ID as varchar(10))+
'inner join '+dbo.fn_tableprefix(@companyID,'TR')+'mluser m on m.contactID = ac.contact_id	
left outer join '+dbo.fn_tableprefix(@companyID,'TR')+ 'warehouse w on w.whse_id in 
	(select whse_id from '+dbo.fn_tableprefix(@companyID,'TR')+'warehouse_security ws where ws.mluser = m.name) 
	or  0 = (select count(whse_id) from '+dbo.fn_tableprefix(@companyID,'TR')+'warehouse_security ws where ws.mluser = m.name)	
where w.whse_div = '''+@division+''' and ac.active = 1 and ac.notification_type = ''A'' and ac.at_id = '+cast(@AT_ID as varchar(10)) +
' group by al.escalation_level,al.numapprovalreq 
having count(distinct ac.contact_ID) >= al.numapprovalreq'
			print 'test'
			exec ( @sql)
			print 'tesss'
		end
		else
		begin
			--set division to null incase division is set and company is not
			set @division = null
			insert into working_Approval_Esc_levels(contactID,companyid,esc_level)
			select distinct @Requester_ID,@CompanyID,escalation_level from approval_levels al join approval_contacts ac on ac.al_id = al.id where al.at_id = @at_id and ac.active = 1 and ac.notification_type = 'A'
			group by al.escalation_level,al.numapprovalreq
			having count(distinct ac.contact_ID) >= al.numapprovalreq
		end
		--*************** Removed by ROBG to allow informational only routing to occur (works like an alert for routables)

		--if exists (select al.escalation_level from approval_contacts ac 
		--				join approval_levels al on al.id = ac.al_id and al.at_id = @AT_ID 
		--				and al.escalation_level not in
		--				(select esc_level from working_Approval_Esc_levels where contactID = @Requester_ID and companyID = @CompanyID) )
		--begin
		--	declare @result varchar(8000)
		--	set @result = ''
		--	select distinct @result = @result + 'Escalation level ' + cast( ( al.escalation_level ) as varchar(10))+' ('+al.description+')' + ' has not been setup correctly ' + isnull(' for '+ isnull(@divName,'')+' '+isnull(@division,'')+' ('+isnull(@divSegDescription,'')+')     ','     ') from approval_contacts ac 
		--				join approval_levels al on al.id = ac.al_id and al.at_id = @AT_ID and  al.escalation_level not in(select esc_level from  working_Approval_Esc_levels where contactID = @Requester_ID and companyID = @CompanyID )
		--	select -1[ID],@result[Result] 
		--end
		--else
		--begin
			insert into Approvals_Requested (AT_ID, Module_Reference_ID, Description, Additional_Notes, Status, Previous_Level_Status, Last_Changed_By_ID, Current_Escalation_Level, Current_DateTime, Current_Approval_Count, Current_Disapproval_Count, Server_Detected, Action_Committed,Requestor_ID,CompanyID,DIV_ROUTING_DIV)
			values(@AT_ID,@MR_ID,@Desc,@AdditionalNotes,'In Progress',-1,-1,@AL_EscalationLevel,getDate(),0,0,0,0,@Requester_ID,@CompanyID,@division)
			select @AR_ID=@@Identity
			
			if( @AT_ID = 16 )
			begin
				select @sql = 
				'insert into Approvals_Requested_DK_Det ([AR_ID], [Docket Number], [Deliver Due Date], [Dealer], [Dealer Name], [Order Writer], 
					[Order Taker], [Docket $ Value], [ReRun Flag])				
				select mr.ID, dh.oh_type+'' ''+(cast(dh.oh_num as varchar(100))) [Docket Number],
					dh.oh_ship_date [Deliver Due Date], cust.Customer_Code [Dealer],
					cust.Name [Dealer Name], sls1.FirstName [Order Writer],
					sls2.FirstName [Order Taker], qg.QG_DktBillAmt [Docket $ Value],
					(Case When IsNull(ReRun_YN,''N'') = ''N'' Then 0 Else 1 End) [ReRun Flag]													 
				from Approvals_Requested mr
				Left Outer Join '+dbo.fn_tableprefix(@CompanyID,'DOCK')+'D_Head dh on dh.oh_id = mr.Module_Reference_ID
				Left Outer Join '+dbo.fn_tableprefix(@CompanyID,'DOCK')+'Q_Head qh on qh.q_id = dh.q_id
				Left Outer Join '+dbo.fn_tableprefix(@CompanyID,'DOCK')+'Q_Group qg on qg.QG_ID = dh.QG_ID
				Left Outer Join '+dbo.fn_tableprefix(@CompanyID,'TR')+'CUSTOMERS cust on cust.Customer_ID = qh.Customer_ID
				Left Outer Join '+dbo.fn_tableprefix(@CompanyID,'TR')+'SalesPersons sls1 on sls1.sls_id = dh.sls_ID_Inside
				Left Outer Join '+dbo.fn_tableprefix(@CompanyID,'TR')+'SalesPersons sls2 on sls2.sls_id = qh.sls_ID							
				Where mr.ID='+cast(@AR_ID as varchar)
				exec( @sql )
			end
			
			select @AR_ID [ID] ,'Completed Sucessfully' [Result]
		--end
	end

				




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_ApprovalRequestRecall]') and xtype = 'P ')  
 drop Procedure sp_ApprovalRequestRecall
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_ApprovalRequestRecall]
@AR_ID int,
@Contact_ID int,
@Notes varchar(8000)
as

declare @AC bit

select @AC = Action_Committed from Approvals_Requested where ID = @AR_ID

if @AC is null
begin
select -1 [ID],'Unable to locate request' [Result]
end
else if @AC = 1
begin
select -1 [ID],'Action Has Been Commited' [Result]
end
else
begin
 

--insert a new row into Approval_notification
insert into Approval_Notification(AR_ID, AC_ID, Status, Notify_Date, Response_Date, Notes, Server_Detected)
values(@AR_ID, -1,'Recalled',getDate(),getDate(),'Recall Notes:'+@Notes,1)
declare @AN_ID int
--get the id of hte new row added
set @AN_ID = @@IDENTITY

--update the request, set last changed by to the new notification and action committed to true
update Approvals_Requested set Status ='Recalled' ,Last_Changed_By_ID = @AN_ID,Server_Detected = 1,Action_Committed = 1
where ID = @AR_ID

--update each contact that has been notified
update Approval_Notification set Response_Date = getDate(),Status ='Recalled',Server_Detected = 1
where AR_ID = @AR_ID


--Write SOX Log
insert into Approvals_SOX_Log(AN_ID, DateTimeStamp, Status, Notes, Escalation_Level, Level_Description, Notification_Type, Contact_ID)
values(@AN_ID,getDate(),'Recalled',@Notes,-1,'Recalled','R',@Contact_ID)

select @AR_ID [ID],'Recall Complete' [Result]

end

	


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_ApprovalRequestRecallByCallerID]') and xtype = 'P ')  
 drop Procedure sp_ApprovalRequestRecallByCallerID
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_ApprovalRequestRecallByCallerID] @MR_ID varchar(500), @Contact_ID int, @Notes varchar(8000), @CompanyID int, @AT_ID int as 
--declare @MR_ID varchar(500), @Contact_ID int, @Notes varchar(8000), @CompanyID int select @MR_ID = '2604', @Contact_ID = 2, @Notes = '', @CompanyID = 12
--begin tran

declare @AC bit, @AR_ID int

select @AC = Action_Committed, @AR_ID = ID 
from Approvals_Requested 
where AT_ID = @AT_ID and Module_Reference_ID = @MR_ID and CompanyID = @CompanyID

if @AC is null
begin
	select -1 [ID],'Unable to locate request' [Result]
end
else if @AC = 1
begin
	select -1 [ID],'Action Has Been Commited' [Result]
end
else
begin 
	--insert a new row into Approval_notification
	insert into Approval_Notification(AR_ID, AC_ID, Status, Notify_Date, Response_Date, Notes, Server_Detected)
	values(@AR_ID, -1,'Recalled',getDate(),getDate(),'Recall Notes:'+@Notes,1)
	declare @AN_ID int
	--get the id of hte new row added
	set @AN_ID = @@IDENTITY

	--update the request, set last changed by to the new notification and action committed to true
	update Approvals_Requested set Status ='Recalled' ,Last_Changed_By_ID = @AN_ID,Server_Detected = 1,Action_Committed = 1
	where ID = @AR_ID

	--update each contact that has been notified
	update Approval_Notification set Response_Date = getDate(),Status ='Recalled',Server_Detected = 1
	where AR_ID = @AR_ID


	--Write SOX Log
	insert into Approvals_SOX_Log(AN_ID, DateTimeStamp, Status, Notes, Escalation_Level, Level_Description, Notification_Type, Contact_ID)
	values(@AN_ID,getDate(),'Recalled',@Notes,-1,'Recalled','R',@Contact_ID)

	select @AR_ID [ID],'Recall Complete' [Result]

end

	
--rollback tran


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_approvalViewerSelection]') and xtype = 'P ')  
 drop Procedure sp_approvalViewerSelection
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_approvalViewerSelection]
@topicID int,
@contactid int,
@status varchar(1),
@companyid varchar(30), 
@fromdate datetime
as

--Declare @topicID int, @contactid int, @status varchar(1), @companyid varchar(30), @fromdate datetime
--Select @topicID = 16, @contactid = 3792, @status = 'S', @companyid = '%', @fromdate = '1/1/2006'

if(@status = 'P')
begin
SELECT CASE WHEN an.Status = 'Approved' THEN 'T' ELSE 'F' END AS ApproveRequired,
 CASE WHEN an.Status = 'Declined' THEN 'T' ELSE 'F' END AS DeclineRequired,
 an.ID[IDRequired], an.AR_ID[AR_IDRequired],an.Notes[NotesRequired], an.Status, an.Notify_Date[Notify Date], an.Response_Date[Response Date],
 ar.Description, ar.Status AS [Request Status] ,at.personality[Request Type],isnull(c.company_name,'N/A')[Company],c.autoID[CompanyAutoID] 
 ,ar.Module_Reference_ID[Module Reference] FROM Approval_Notification an 
INNER JOIN Approvals_Requested ar 
ON an.AR_ID = ar.ID 
INNER JOIN Approval_Topic at 
ON at.ID = ar.AT_ID 
INNER JOIN Approval_Contacts ac 
ON an.AC_ID = ac.ID 
left outer join companies c 
on ar.companyID = c.autoid
WHERE (an.Status = 'In Progress') 
AND (ac.Contact_ID = @contactid) AND (at.id = @topicID) and convert(varchar,ar.companyid) like @companyid and an.Notify_Date >= @fromdate
end
else
begin

SELECT CASE WHEN an.Status = 'Approved' THEN 'T' ELSE 'F' END AS ApproveRequired,
 CASE WHEN an.Status = 'Declined' THEN 'T' ELSE 'F' END AS DeclineRequired,
an.ID[IDRequired], an.AR_ID[AR_IDRequired] , an.Notes[NotesRequired],
an.Status, an.Notify_Date[Notify Date], 
an.Response_Date[Response Date], ar.Description, ar.Status AS [Request Status],
at.personality[Request Type],isnull(c.company_name,'N/A')[Company],c.autoID[CompanyAutoID]
,ar.Module_Reference_ID[Module Reference]   FROM Approval_Notification an 
INNER JOIN Approvals_Requested ar ON an.AR_ID = ar.ID 
INNER JOIN Approval_Topic at ON at.ID = ar.AT_ID 
INNER JOIN Approval_Contacts ac ON an.AC_ID = ac.ID 
left outer join companies c on ar.companyID = c.autoid
WHERE (an.Status <> 'In Progress') AND (ac.Contact_ID = @contactid) AND (at.id = @topicID) and convert(varchar,ar.companyid) like @companyid and an.Notify_Date >= @fromdate
end





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_AR_CustomerChange]') and xtype = 'P ')  
 drop Procedure sp_AR_CustomerChange
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_AR_CustomerChange]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@modref varchar(100),
	@stat varchar(50),
	@oID varchar(50),
	@Active char(1)



	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @modref=module_reference_id, @stat=status from approvals_requested where id=@id
		
	select @oID=SUBSTRING(@modref, 1, CHARINDEX( '~', @modref )-1)
	select @Active=SUBSTRING(@modref, CHARINDEX( '~', @modref)+1, len(@modref))


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..customers set ACTIVE_PENDING=''D'' where customer_id='+@oID
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..customers set ACTIVE_PENDING=''A'', Active='''+@Active+''' where customer_id='+@oID
		exec( @sql )
		
		set @sql ='if( '''+@Active+''' = ''T'' )
		begin
			update '+@tr_db+'..customers set date_deactivated=null where customer_id='+@oID+'
		end		
		else
		begin
			update '+@tr_db+'..customers set date_deactivated=getdate() where customer_id='+@oID+'
			update Contact set InActive = ''Y'' where ID in (
			select ItemID from Relations where Target = ''Customer'' and TargetID = '+@oID+' and ItemType = ''Contact'' and CompanyID = '+cast(@CompanyID as varchar)+')
		end'		
		exec( @sql )
	end
end






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_AR_CustomerCreate]') and xtype = 'P ')  
 drop Procedure sp_AR_CustomerCreate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_AR_CustomerCreate]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@modref varchar(100),
	@stat varchar(50)


	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @modref=module_reference_id, @stat=status from approvals_requested where id=@id

	if( @stat = 'declined' )
	begin
		delete c
		from Relations r
		join contact c on c.ID=r.ItemID and r.ItemType='Contact'
		where r.CompanyID=@CompanyID and r.TargetID=@modref and r.Target = 'Customer'
		
		delete r
		from Relations r
		where r.CompanyID=@CompanyID and r.TargetID=@modref and r.Target = 'Customer'
		
		delete from communication_defaults where type='C' and company_id=@CompanyID and source_id=@modref
			
		set @sql ='update '+@tr_db+'..customers set PENDING=''D'' where customer_id='+@modref
		exec( @sql )		
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..customers set PENDING=''A'', Active=''T'' where customer_id='+@modref
		exec( @sql )
	end
end






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_AR_Discount]') and xtype = 'P ')  
 drop Procedure sp_AR_Discount
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc [dbo].[sp_AR_Discount]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@cash_journal_id varchar(100),
	@stat varchar(50)



	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @cash_journal_id=module_reference_id, @stat=status from approvals_requested where id=@id
		


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..ar_payment_headers set PENDING_PAYMENT=''D'' where cash_journal_id='+@cash_journal_id
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..ar_payment_headers set PENDING_PAYMENT=''A'' where cash_journal_id='+@cash_journal_id
		exec( @sql )
	end

	

end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_AR_INVADJ_Details]') and xtype = 'P ')  
 drop Procedure sp_AR_INVADJ_Details
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[sp_AR_INVADJ_Details]
@ID int, 
@USERNAME varchar(50),
@COLUMN int
as
begin
	declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@modref varchar(100),
	@Active char(1)

	select @CompanyID=CompanyID, @modref=module_reference_id from approvals_requested where id = @ID

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	set @sql = 'delete from WORKING_AR_INVADJ_DET where username='''+@USERNAME+'''	
	insert into WORKING_AR_INVADJ_DET (USERNAME, SO_LINE_ID, DESCRIPTION, QTY_SHIPPED, UNIT_OF_MEASURE, 
	UNIT_PRICE, TAX1, TAX2, TOTAL, GL_ACCOUNT_NUMBER) 
	SELECT '''+@USERNAME+''', SO_LINE_ID, DESCRIPTION, QTY_SHIPPED, UNIT_OF_MEASURE, UNIT_PRICE, TAX1, TAX2, TOTAL, GL_ACCOUNT_NUMBER
	FROM '+@tr_db+'..SO_TRN_DETAIL_BATCH 
	WHERE (SO_TRN_BATCH_ID = '+@modref+') 
	order by so_line_id

	declare 
	@CUSTOMER_CODE varchar(10),
	@CUSTOMER varchar(40),
	@ORG_INV int,
	@DIV varchar(50),
	@WAREHOUSE varchar(45),
	@TOTAL_INV money

	select @CUSTOMER_CODE=c.customer_code, @CUSTOMER=c.name, @ORG_INV=so.invoiceno, @DIV=s.so_div, @WAREHOUSE=w.description, @TOTAL_INV=s.balance 
	from '+@tr_db+'..so_trn_hdr_batch s
	join '+@tr_db+'..customers c on c.customer_id=s.customer_id
	join '+@tr_db+'..warehouse w on w.whse_id=s.whse_id
	left outer join '+@tr_db+'..so_trn_hdr so on so.invoice_id=s.ADJ_INV_ID
	where s.SO_TRN_BATCH_ID = '+@modref+'

	update WORKING_AR_INVADJ_DET set customer_code=@CUSTOMER_CODE, customer=@CUSTOMER, org_inv=@ORG_INV, div=@DIV, warehouse=@WAREHOUSE, total_inv=isnull(@TOTAL_INV,0)
	where username='''+@USERNAME+''' '	

	if( @COLUMN <> -1 )
	begin
		set @sql = @sql + '
		update w
		set w.div=(
			select distinct g.SEGMENT_DESC 
			from '+@tr_db+'..gl_accounts a 
			left outer join '+@tr_db+'..gl_segment_setup g on g.SEGMENT_VALUE = a.seg_'+cast(@COLUMN as varchar)+' and SEGMENT_NUMBER = '+cast(@COLUMN as varchar)+'
			where a.seg_'+cast(@COLUMN as varchar)+'=w.div
		)
		from WORKING_AR_INVADJ_DET w
		where w.username='''+@USERNAME+'''	'
	end

	--print @sql
	exec( @sql )
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_AR_ManInvCreditLimit]') and xtype = 'P ')  
 drop Procedure sp_AR_ManInvCreditLimit
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc sp_AR_ManInvCreditLimit 
@ID int,
@Status char(1)
as 
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@stat varchar(50),
	@SO_TRN_BATCH_ID varchar(50)

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @SO_TRN_BATCH_ID=module_reference_id, @stat=status from approvals_requested where id=@id


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..SO_TRN_HDR_BATCH set PENDING_CREDIT=''D'' where SO_TRN_BATCH_ID='+@SO_TRN_BATCH_ID
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..SO_TRN_HDR_BATCH set PENDING_CREDIT=''A'' where SO_TRN_BATCH_ID='+@SO_TRN_BATCH_ID
		exec( @sql )
	end

end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_AR_ManInvLimit]') and xtype = 'P ')  
 drop Procedure sp_AR_ManInvLimit
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc [dbo].[sp_AR_ManInvLimit]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@stat varchar(50),
	@SO_TRN_BATCH_ID varchar(50)

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @SO_TRN_BATCH_ID=module_reference_id, @stat=status from approvals_requested where id=@id


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..SO_TRN_HDR_BATCH set PENDING=''D'' where SO_TRN_BATCH_ID='+@SO_TRN_BATCH_ID
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..SO_TRN_HDR_BATCH set PENDING=''A'' where SO_TRN_BATCH_ID='+@SO_TRN_BATCH_ID
		exec( @sql )
	end
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_AR_NSFLimit]') and xtype = 'P ')  
 drop Procedure sp_AR_NSFLimit
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc [dbo].[sp_AR_NSFLimit]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@modref varchar(100),
	@stat varchar(50),
	@CSH_JRNL_ID varchar(50),
	@CSH_JRNL_LINE varchar(50)

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @modref=module_reference_id, @stat=status from approvals_requested where id=@id
		
	select @CSH_JRNL_ID=SUBSTRING(@modref, 1, CHARINDEX( '~', @modref )-1)
	select @CSH_JRNL_LINE=SUBSTRING(@modref, CHARINDEX( '~', @modref)+1, len(@modref))


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..ar_payment_headers set PENDING=''D'' where CASH_JOURNAL_ID='+@CSH_JRNL_ID+' and CASH_JOURNAL_LINE='+@CSH_JRNL_LINE
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..ar_payment_headers set PENDING=''A'' where CASH_JOURNAL_ID='+@CSH_JRNL_ID+' and CASH_JOURNAL_LINE='+@CSH_JRNL_LINE
		exec( @sql )
	end

	

end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_AR_Writeoff]') and xtype = 'P ')  
 drop Procedure sp_AR_Writeoff
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_AR_Writeoff]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@SO_TRN_ID varchar(100),
	@stat varchar(50)



	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @SO_TRN_ID=module_reference_id, @stat=status from approvals_requested where id=@id
		


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..so_trn_hdr set PENDING=''D'', pending_amt=null where so_trn_id='+@SO_TRN_ID
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..so_trn_hdr set PENDING=''A'' where so_trn_id='+@SO_TRN_ID
		exec( @sql )
	end

	

end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_BM_MiscTransApproval]') and xtype = 'P ')  
 drop Procedure sp_BM_MiscTransApproval
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_BM_MiscTransApproval]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@stat varchar(50),
	@BANK_MISC_TMP_ID varchar(50)

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @BANK_MISC_TMP_ID=module_reference_id, @stat=status from approvals_requested where id=@id


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..bank_misc_tmp set STATUS=''D'' where id='+@BANK_MISC_TMP_ID
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin

		set @sql ='
			declare @StatApproval varchar(1)
			select @StatApproval=STATUS from '+@tr_db+'..bank_misc_tmp where ID='+@BANK_MISC_TMP_ID+'

			if( @StatApproval = ''P'' )
			begin
				declare 
				@USERNAME varchar(50), @BANK_ID int, @TRANS_TYPE varchar(20), @TRANS_DATE datetime, @ACCT_YEAR int, @ACCT_PERIOD int,
				@AMOUNT money, @TRANS_BANK_ID int, @GL_ACCOUNT varchar(21), @TRANS_GL_ACCOUNT varchar(21), @COMMENT varchar(50),
				@RECON varchar(1), @RECON_YEAR int, @RECON_PERIOD int, @LAND_PROJ_CD int, @LAND_RLH_CD int, @LAND_JOB_COST_CD int,
				@LAND_INV_ID int, @LAND_AGREE_NUM int, @COM_PROF_CNTR varchar(8), @COM_LEASE_NUM varchar(20), @COM_PROP_CD varchar(8),
				@COM_FLOOR varchar(8), @COM_SPACE varchar(8), @RES_PROF_CNTR varchar(8), @RES_LEASE_NUM varchar(20), @RES_PROP_CD varchar(8),
				@RES_FLOOR int, @RES_UNIT varchar(8), @PROJ_PRI_NUM int, @PROJ_PHS_CODE varchar(5), @PROJ_SUBP_CODE varchar(5),
				@PROJ_PRP_COMPONENT varchar(5), @PROJ_UNIT_INV_ID int, @PROJ_TIME_TICKET varchar(15), @PROJ_AFE_NO varchar(15),
				@PROJ_COST_CODE varchar(15), @REFERENCE varchar(100), @GL_ACCOUNT_NUMBER varchar(21), @IS_TRANSFER varchar(1), @RESULT varchar(8000)

				select @USERNAME=USERNAME, @BANK_ID=BANK_ID, @TRANS_TYPE=TRANS_TYPE, @TRANS_DATE=TRANS_DATE, @ACCT_YEAR=ACCT_YEAR, @ACCT_PERIOD=ACCT_PERIOD, @AMOUNT=AMOUNT, 
				@TRANS_BANK_ID=TRANS_BANK_ID, @GL_ACCOUNT=GL_ACCOUNT, @TRANS_GL_ACCOUNT=TRANS_GL_ACCOUNT, @COMMENT=COMMENT, @RECON=RECON, 
				@RECON_YEAR=RECON_YEAR, @RECON_PERIOD=RECON_PERIOD, @LAND_PROJ_CD=LAND_PROJ_CD, @LAND_RLH_CD=LAND_RLH_CD, @LAND_JOB_COST_CD=LAND_JOB_COST_CD, 
				@LAND_INV_ID=LAND_INV_ID, @LAND_AGREE_NUM=LAND_AGREE_NUM, @COM_PROF_CNTR=COM_PROF_CNTR, @COM_LEASE_NUM=COM_LEASE_NUM, 
				@COM_PROP_CD=COM_PROP_CD, @COM_FLOOR=COM_FLOOR, @COM_SPACE=COM_SPACE, @RES_PROF_CNTR=RES_PROF_CNTR, @RES_LEASE_NUM=RES_LEASE_NUM, 
				@RES_PROP_CD=RES_PROP_CD, @RES_FLOOR=RES_FLOOR, @RES_UNIT=RES_UNIT, @PROJ_PRI_NUM=PROJ_PRI_NUM, @PROJ_PHS_CODE=PROJ_PHS_CODE, 
				@PROJ_SUBP_CODE=PROJ_SUBP_CODE, @PROJ_PRP_COMPONENT=PROJ_PRP_COMPONENT, @PROJ_UNIT_INV_ID=PROJ_UNIT_INV_ID, @PROJ_TIME_TICKET=PROJ_TIME_TICKET, 
				@PROJ_AFE_NO=PROJ_AFE_NO, @PROJ_COST_CODE=PROJ_COST_CODE, @REFERENCE=REFERENCE, @IS_TRANSFER=IS_TRANSFER
				from '+@tr_db+'..BANK_MISC_TMP where ID='+@BANK_MISC_TMP_ID+'

				BEGIN TRANSACTION
				select @GL_ACCOUNT_NUMBER=gl_account from '+@tr_db+'..bank_master where bank_id=@BANK_ID

				declare @next_bank_misc_id int, @next_bank_misc_gl_id int, @next_subledger_number int 
				--get next_bank_misc_id
				select @next_bank_misc_id=id from '+@tr_db+'..system_ids where id_name = ''NEXT_BANK_MISC_ID''
				update '+@tr_db+'..system_ids set id=(@next_bank_misc_id+1) where id_name = ''NEXT_BANK_MISC_ID''
				
				--insert into bank_misc
				insert into '+@tr_db+'..bank_misc (BANK_MISC_ID, BANK_ID, ACCTG_PERIOD, ACCTG_YEAR, TRANS_DATE, TYPE, AMOUNT, TRANS_BANK_ID, COMMENT, GL_ACCOUNT, RECON, 
				RECON_PERIOD, RECON_YEAR, OPERATOR_SAVED, DATE_SAVED ) values 
				( @next_bank_misc_id, @BANK_ID, @ACCT_PERIOD, @ACCT_YEAR, @TRANS_DATE, @TRANS_TYPE, @AMOUNT, @TRANS_BANK_ID, @COMMENT, 
				@GL_ACCOUNT, @RECON, @RECON_PERIOD, @RECON_YEAR, @USERNAME, getdate() ) 
				
				--get next_bank_misc_gl_id
				select @next_bank_misc_gl_id=id from '+@tr_db+'..system_ids where id_name = ''NEXT_BANK_MISC_GL_ID'' 
				update '+@tr_db+'..system_ids set id=(@next_bank_misc_gl_id+1) where id_name = ''NEXT_BANK_MISC_GL_ID''
				
				--get next_subledger_number
				select @next_subledger_number=id from '+@tr_db+'..system_ids where id_name = ''NEXT_BANK_MISC_SUBLEDGER_NUMBER'' 
				update '+@tr_db+'..system_ids set id=(@next_subledger_number+1) where id_name = ''NEXT_BANK_MISC_SUBLEDGER_NUMBER''
				
				--insert into BANK_MISC_GL
				insert into '+@tr_db+'..bank_misc_gl (BANK_MISC_GL_ID, BANK_MISC_ID, JOURNAL_NUMBER, MODULE, ACCT_YEAR, ACCT_PERIOD, TRANSACTION_DATE, GL_ACCOUNT_NUMBER, 
				AMOUNT, REFERENCE, TRANS_TYPE ) values 
				( @next_bank_misc_gl_id, @next_bank_misc_id, @next_subledger_number, ''BK'', @ACCT_YEAR, @ACCT_PERIOD, getdate(), @GL_ACCOUNT_NUMBER, @AMOUNT, @COMMENT, @TRANS_TYPE ) 
				
				--get next_bank_misc_gl_id
				select @next_bank_misc_gl_id=id from '+@tr_db+'..system_ids where id_name = ''NEXT_BANK_MISC_GL_ID''
				update '+@tr_db+'..system_ids set id=(@next_bank_misc_gl_id+1) where id_name = ''NEXT_BANK_MISC_GL_ID''
				
				--insert into BANK_MISC_GL
				insert into '+@tr_db+'..bank_misc_gl (BANK_MISC_GL_ID, BANK_MISC_ID, JOURNAL_NUMBER, MODULE, ACCT_YEAR, ACCT_PERIOD, TRANSACTION_DATE, GL_ACCOUNT_NUMBER, 
				AMOUNT, REFERENCE, TRANS_TYPE, LAND_PROJ_CD, LAND_RLH_CD, LAND_JOB_COST_CD, LAND_INV_ID, LAND_AGREE_NUM, COM_PROF_CNTR, COM_LEASE_NUM, COM_PROP_CD, COM_FLOOR, 
				COM_SPACE, RES_PROF_CNTR, RES_LEASE_NUM, RES_PROP_CD, RES_FLOOR, RES_UNIT, PROJ_PRI_NUM, PROJ_PHS_CODE, PROJ_SUBP_CODE, PROJ_PRP_COMPONENT, PROJ_UNIT_INV_ID, 
				PROJ_TIME_TICKET, PROJ_AFE_NO, PROJ_COST_CODE, REF ) values 
				( @next_bank_misc_gl_id, @next_bank_misc_id, @next_subledger_number, ''BK'', @ACCT_YEAR, @ACCT_PERIOD, getdate(), @GL_ACCOUNT, (@AMOUNT*-1), @COMMENT, 
				@TRANS_TYPE, @LAND_PROJ_CD, @LAND_RLH_CD, @LAND_JOB_COST_CD, @LAND_INV_ID, @LAND_AGREE_NUM, @COM_PROF_CNTR, @COM_LEASE_NUM, @COM_PROP_CD,
				@COM_FLOOR, @COM_SPACE, @RES_PROF_CNTR, @RES_LEASE_NUM, @RES_PROP_CD, @RES_FLOOR, @RES_UNIT, @PROJ_PRI_NUM, @PROJ_PHS_CODE, @PROJ_SUBP_CODE,
				@PROJ_PRP_COMPONENT, @PROJ_UNIT_INV_ID, @PROJ_TIME_TICKET, @PROJ_AFE_NO, @PROJ_COST_CODE, @REFERENCE ) 
				
				if( @IS_TRANSFER = ''T'' )
				begin
					--get next_bank_misc_id
					select @next_bank_misc_id=id from '+@tr_db+'..system_ids where id_name = ''NEXT_BANK_MISC_ID'' 
					update '+@tr_db+'..system_ids set id=(@next_bank_misc_id+1) where id_name = ''NEXT_BANK_MISC_ID'' 
					
					--insert into bank_misc
					insert into '+@tr_db+'..bank_misc (BANK_MISC_ID, BANK_ID, ACCTG_PERIOD, ACCTG_YEAR, TRANS_DATE, TYPE, AMOUNT, TRANS_BANK_ID, COMMENT, GL_ACCOUNT, RECON, 
					RECON_PERIOD, RECON_YEAR, OPERATOR_SAVED, DATE_SAVED ) values 
					( @next_bank_misc_id, @TRANS_BANK_ID, @ACCT_PERIOD, @ACCT_YEAR, @TRANS_DATE, @TRANS_TYPE, (@AMOUNT*-1), @BANK_ID, @COMMENT, 
					@TRANS_GL_ACCOUNT, @RECON, @RECON_PERIOD, @RECON_YEAR, @USERNAME, getdate() ) 
				end

				--run proc sp_CreateSubledgerEntry
				if exists (select * from tempdb..sysobjects where id = object_id(N''tempdb..#table'')) 
				drop table #table create table #table(result varchar(8000),number int) insert into #table 
				exec '+@tr_db+'..sp_CreateSubledgerEntry ''BK'', ''BANK_MISC_GL'', @ACCT_YEAR, @ACCT_PERIOD, @next_subledger_number, @USERNAME, @COMMENT
				
				--check if result == Ok then commit
				select @RESULT=isnull(result, ''failed'') from #table 
				if( @RESULT = ''OK'' )
				begin
					--updates the task status to approved
					update '+@tr_db+'..bank_misc_tmp set STATUS=''A'' where ID='+@BANK_MISC_TMP_ID+'
					COMMIT TRANSACTION
				end
				else
				begin
					ROLLBACK TRAN
				end	
			end		
			'
		exec( @sql )
	end
end
	
		
		






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Campaign_FillMailMergeList]') and xtype = 'P ')  
 drop Procedure sp_Campaign_FillMailMergeList
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

Create Procedure [dbo].[sp_Campaign_FillMailMergeList] (@UserID int, @ContactID int, @CampainID int)
AS

Delete working_MailMergeList
Where UserID = @UserID
	
	if(ISNULL(@ContactID, 0) <> 0)
	Begin
		Insert Into working_MailMergeList (ContactID, UserID)
		Values(@ContactID,@UserID)
	End
	
	Else if (ISNULL(@CampainID, 0) <> 0)
	Begin
		Insert Into working_MailMergeList(ContactID, UserID)
		Select ContactID, @UserID from scCampaignees where CampaignID = @CampainID
	
	End




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CDA_LoadAvailableCompanies]') and xtype = 'P ')  
 drop Procedure sp_CDA_LoadAvailableCompanies
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE Procedure [dbo].[sp_CDA_LoadAvailableCompanies] (@UserName varchar(30))

AS

--Declare @UserName varchar(30)
--Set @UserName = 'ken'

Declare @Company_Name varchar(50), @CompanyServerName varchar(500), @TreasuryDBName varchar(500)

Delete working_UsersCompanies Where UserName = @UserName

Declare aCompanies Cursor For

Select Company_Name, CompanyServerName, TreasuryDBName From Companies

Open aCompanies 
Fetch aCompanies into @Company_Name, @CompanyServerName, @TreasuryDBName

While @@Fetch_Status = 0
Begin

    if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Result'))      drop table #Result
	Create Table #Result
	(
	  Result bit null
	)

	Declare @str varchar(8000)
	Set @str = 'Select Case When Count(Name) >= 1 then 1 else 0 end From ['+ @CompanyServerName+ '].' + @TreasuryDBName + '.dbo.MLUser m
				Inner join [' + @CompanyServerName+ '].' + @TreasuryDBName + '.dbo.Security s on s.Department = m.Department and s.Function_ID = 9926
				Where Name = ''' + @UserName + ''''

	Insert Into #Result
    Exec (@str)

	If Exists(Select Result from #Result where Result = 1)
		Begin

			Insert Into working_UsersCompanies(Company_Name,CompanyServerName,TreasuryDBName,UserName)
			Values(@Company_Name,@CompanyServerName,@TreasuryDBName,@UserName)

		End
	
	Delete #Result

	Fetch aCompanies into @Company_Name, @CompanyServerName, @TreasuryDBName

End

Close aCompanies
DeAllocate aCompanies





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CertificateForQuote]') and xtype = 'P ')  
 drop Procedure sp_CertificateForQuote
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE  Procedure sp_CertificateForQuote (@QuoteID int, @SOURCE varchar(3))

AS

If (@QuoteID = 0 OR @QuoteID = null OR @SOURCE = '' OR @SOURCE = null)
	Begin
		If(@QuoteID = 0 OR @QuoteID = null)
			Begin
				RAISERROR('QuoteID must not be null or 0', 16, 1)
			End
		Else if (@SOURCE = '' OR @SOURCE = null)
			Begin
				RAISERROR('Source must not be null or empty', 16, 1)
			End
	End
Else
	Begin
		
		If (@SOURCE = 'COI')
			Begin
				SELECT A.ID AS AreaID, A.Description AS Area, II.ID AS ItemID, II.Description AS Item, ISNULL(I.ID,0) AS IncidentID, ISNULL(CAST(I.ID AS Bit), 0) AS IncidentRecorded, I.Status, I.WorkDescription, HC.Description AS StatusDesc FROM svInspectionItem II LEFT OUTER JOIN scCodes A ON II.AreaID = A.ID LEFT OUTER JOIN svIncident I ON I.ItemID = II.ID AND I.QuoteID = @QuoteID AND I.Source = @SOURCE AND I.Status <> 'DEL' LEFT OUTER JOIN svHardCodes HC ON HC.Code = I.Status WHERE II.COIYN = 1
				If(@@ERROR <> 0)
					Begin
						RAISERROR('There was a problem loading the Certificate of Inspection Form', 16, 1)
					End
			End
		Else If (@SOURCE = 'COP')
			Begin
				SELECT A.ID AS AreaID, A.Description AS Area, II.ID AS ItemID, II.Description AS Item, ISNULL(I.ID,0) AS IncidentID, ISNULL(CAST(I.ID AS Bit), 0) AS IncidentRecorded, I.Status, I.WorkDescription, HC.Description AS StatusDesc FROM svInspectionItem II LEFT OUTER JOIN scCodes A ON II.AreaID = A.ID LEFT OUTER JOIN svIncident I ON I.ItemID = II.ID AND I.QuoteID = @QuoteID AND I.Source = @SOURCE AND I.Status <> 'DEL' LEFT OUTER JOIN svHardCodes HC ON HC.Code = I.Status WHERE II.COPYN = 1
				If(@@ERROR <> 0)
					Begin
						RAISERROR('There was a problem loading the Certificate of Inspection Form', 16, 1)
					End
			End
		Else
			Begin
				RAISERROR('Please supply a vaid Source code', 16, 1)
			End
End






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_ClosingMaintenanceQuery]') and xtype = 'P ')  
 drop Procedure sp_ClosingMaintenanceQuery
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE  proc [dbo].[sp_ClosingMaintenanceQuery]
 @UserID int
as

select q.ID [Quote #], Created, FinalPrice [Price], 

case when p.Description is null then 'None Selected' else p.Description end[Payment Template], 
ss.SubDescription [Sub Status], con.id [Contact ID], con.knownas [Buyer], CommissionDescription [Commission Structure], 
SaleType, ContractDate1, ContractDate2, ContractDate3, 

case when ConvertFlag = 'T' then 'Project Active' else 'Project Not Started' end [Construction Status],
ProjManagerName [Project Manager],

LotDesc [Lot], BlockDesc [Block], PlanNo [Plan], CivicAddress [Civic Address], 
HoldingDesc [Holding], CommunityDesc [Community], ProjectDesc [Phase], 
ModelNameDesc [Model], ModelDesc [Elevation], 


COPDate [Certificate Of Inspection], SaleDate [Sale Date], Company_Name [Company],
q.ClosingDate, q.EstimatedClosingDate
from working_sc_items w
join scQuote q
on q.LeadID = item_id
and item_type = 'L'
left outer join companies c
on autoid = q.CompanyID 
left outer join scPaymentTemplate p
on p.id = PaymentTemplateID
left outer join scQuoteSubStatus ss
on ss.id = QuoteSubStatusID
left outer join scLead l
on l.id = q.LeadID
left outer join Contact con
on con.id = l.Contact_id
left outer join scCommissionTemplate ct
on ct.id = CommissionStructureID
where status = 'S'
and w.original_contact_id = @UserID





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CM_ContactMailMerge]') and xtype = 'P ')  
 drop Procedure sp_CM_ContactMailMerge
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure [dbo].[sp_CM_ContactMailMerge](@ContactHistoryID int, @CompanyID int, @UserContactID int)

AS

--Declare @ContactHistoryID int, @CompanyID int, @UserContactID int
--Select @ContactHistoryID = 53, @CompanyID = 12, @UserContactID = -1

Declare @TRDB Varchar(500), @TRServer varchar(500), @ContactType varchar(25), @CompanyCode varchar(10), @CompanyName varchar(40), @nSql nvarchar(4000),
		@UserName varchar(30), @RelationID int, @UserEmail varchar(128)

Select @TRDB = TreasuryDBName, @TRServer = CompanyServerName From dbo.COMPANIES Where AutoID = @CompanyID

Select @ContactType = c.Type, @RelationID = r.TargetID
From ContactHistory ch
Inner Join Contact c on ch.ContactID = c.ID
Inner Join dbo.Relations r on r.ItemID = c.ID and r.ItemType = 'Contact' and r.Target = c.Type
Where ch.ID = @ContactHistoryID and r.CompanyID = @CompanyID

Select @UserEmail = IsNull(c.Email1Address,'')
From Contact c Where c.ID = @UserContactID

Select @nSql = N'Select @UserName = Full_Name From ' + @TRDB + '.dbo.MLUSER Where ContactID = ' + CONVERT(varchar,@UserContactID) + ' '
exec sp_executesql @nSql, N'@UserName varchar(30) output', @UserName output

if @ContactType = 'Customer'
begin
	Select @nSql = N'Select @CompanyCode = CUSTOMER_CODE, @CompanyName = NAME From ' + @TRDB + '.dbo.CUSTOMERS Where Customer_ID = ' + CONVERT(varchar,@RelationID) + ' '
	exec sp_executesql @nSql, N'@CompanyCode varchar(10) output, @CompanyName varchar(40) output', @CompanyCode output, @CompanyName output
end
else if @ContactType = 'Prospect'
begin
	Select @nSql = N'Select @CompanyCode = PROSPECT_CODE, @CompanyName = NAME From ' + @TRDB + '.dbo.PROSPECTS Where PROSPECT_ID = ' + CONVERT(varchar,@RelationID) + ' '
	exec sp_executesql @nSql, N'@CompanyCode varchar(10) output, @CompanyName varchar(40) output', @CompanyCode output, @CompanyName output
end
else if @ContactType = 'Supplier'
begin
	Select @nSql = N'Select @CompanyCode = SUPPLIER, @CompanyName From ' + @TRDB + '.dbo.SUPPLIER_MASTER Where SUPPLIER_ID = ' + CONVERT(varchar,@RelationID) + ' '
	exec sp_executesql @nSql, N'@CompanyCode varchar(10) output, @CompanyName varchar(40) output', @CompanyCode output, @CompanyName output
end



Select c.KnownAs [Name], c.FirstName, c.LastName,
Case When IsNull(BusinessStreet,'') <> '' Then BusinessStreet
	 When IsNull(HomeStreet,'') <> '' Then HomeStreet
	 When IsNull(OtherStreet,'') <> '' Then OtherStreet
	 Else BusinessStreet End [Street],
Case When IsNull(BusinessStreet,'') <> '' Then BusinessCity
	 When IsNull(HomeStreet,'') <> '' Then HomeCity
	 When IsNull(OtherStreet,'') <> '' Then OtherCity
	 Else BusinessStreet End [City],
Case When IsNull(BusinessStreet,'') <> '' Then BusinessState
	 When IsNull(HomeStreet,'') <> '' Then HomeState
	 When IsNull(OtherStreet,'') <> '' Then OtherState
	 Else BusinessStreet End [StateProv],
Case When IsNull(BusinessStreet,'') <> '' Then BusinessPostalCode
	 When IsNull(HomeStreet,'') <> '' Then HomePostalCode
	 When IsNull(OtherStreet,'') <> '' Then OtherPostalCode
	 Else BusinessStreet End [ZipPostal],
IsNull(PrimaryTelephoneNumber, IsNull(BusinessTelephoneNumber, IsNull(HomeTelephoneNumber,'') ) ) [Phone],
IsNull(BusinessFaxNumber, IsNull(HomeFaxNumber, IsNull(OtherFaxNumber,'') ) ) [Fax],
IsNull(Email1Address,IsNull(Email2Address,IsNull(Email3Address,''))) [Email],
@CompanyCode [CompanyCode], @CompanyName [CompanyName], @UserName [From], @UserEmail [FromEmail]
From ContactHistory ch
Inner Join Contact c on ch.ContactID = c.ID
Where ch.ID = @ContactHistoryID

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CMS_CreateMSPFromHB]') and xtype = 'P ')  
 drop Procedure sp_CMS_CreateMSPFromHB
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE                                  proc sp_CMS_CreateMSPFromHB
 @Project int, 
 @Template int,
 @HR_DB   varchar(20),
 @Flavour  varchar(20),
 @QuoteID    int,
 @UserID     int,
 @DepartmentFormat char(1), -- H=Hiearchial, F=Field, N=None
 @MajorCodeFormat char(1) -- H=Hiearchial, F=Field, N=None
as

-- declare   
--  @Project int, 
--  @Template int,
--  @HR_DB   varchar(20),
--  @Flavour  varchar(20),
--  @QuoteID    int
-- 
--  
--   select @Project = 160, @Template = 10
--   select @HR_DB = 'HR_test',@Flavour = 'nbgHomeBuilder', @QuoteID  = 345

/*
 notes

 CodeType = 
 'C' = category level
 'P' = task at project level
 'M' = major code level
 'T' = task at code level

*/


declare @ProjectDescription varchar(100), @StartDate Datetime, 
    @EndDate datetime, @PriNum varchar(20), @str varchar(500) , 
     @Project_str varchar(20), @TR_DB varchar(200), @CompanyName varchar(200),
    @DepartmentFieldID int, @MajorCodeFieldID int, @AssId int


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#proj_id'))
drop table #proj_id

create table #proj_id
( pri_name varchar(50)null,
  pri_start_date datetime  null ,
  pri_est_completion_date datetime null,
  pri_num varchar(20) null,
  CompanyIS varchar(200) null
  )

set @Project_str = convert(varchar(20),@Project)

set @str = 'insert #proj_id select rtrim(pri_name),pri_start_date,
           pri_est_completion_date,pri_num, tr_db from ' + @HR_DB + 
           '..proj_ID join  ' + @HR_DB + 
           '..database_setup on 1=1
           where Proj_ID_ID =  ' + @Project_str 

exec(@str)

select @ProjectDescription = rtrim(pri_name), @StartDate = pri_start_date,
 @EndDate = pri_est_completion_date, @PriNum = pri_num, @TR_DB = CompanyIS
from #proj_ID

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#companyIS'))
drop table #companyIS
create table #companyIS(companyIS varchar(200) null)

set @str = 'insert #companyIS select COMPANYNAME from ' + @TR_DB + '..company'
exec(@str)

select @CompanyName = companyIS
from #companyIS

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_calendar_data'))
drop table #msp_calendar_data

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_calendars'))
drop table #msp_calendars

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_outline_codes'))
drop table #msp_outline_codes

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_projects'))
drop table #msp_projects

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_resources'))
drop table #msp_resources

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_tasks'))
drop table #msp_tasks

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_assignments'))
drop table #msp_assignments

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_dashboard_tasks'))
drop table #msp_dashboard_tasks



--seven of these by default
select * 
into #msp_calendar_data
from msp_calendar_data_template 
/*
 note - this is the default calendar from dashboard at this time 
 at some point it'll probably come from a set up file 
*/

update #msp_calendar_data
set CD_FROM_TIME1 =  dateadd(hour, 8,
                      dateadd(day, datepart(day, @StartDate)-1,
                       dateadd(year, datepart(year, @StartDate)-1900, 
                        dateadd(month, datepart(month, @StartDate)-1,'1/1/1900')))),
CD_TO_TIME1 =  dateadd(hour, 12,
                      dateadd(day, datepart(day, @StartDate)-1,
                       dateadd(year, datepart(year, @StartDate)-1900, 
                        dateadd(month, datepart(month, @StartDate)-1,'1/1/1900')))),
CD_FROM_TIME2 =  dateadd(hour, 13,
                      dateadd(day, datepart(day, @StartDate)-1,
                       dateadd(year, datepart(year, @StartDate)-1900, 
                        dateadd(month, datepart(month, @StartDate)-1,'1/1/1900')))),
CD_TO_TIME2 =  dateadd(hour, 17,
                      dateadd(day, datepart(day, @StartDate)-1,
                       dateadd(year, datepart(year, @StartDate)-1900, 
                        dateadd(month, datepart(month, @StartDate)-1,'1/1/1900'))))


--six of these by default
select * 
into #msp_calendars
from msp_calendars_template 

-- four by default
select * 
into #msp_outline_codes
from msp_outline_codes_template 

--obviously one
select * 
into #msp_projects
from msp_projects_template 

/*
 Resources and tasks:

 the first three are required for some reason... 
 the fourth is the default of one only...
 in case there are no others (the first one) 
*/

select * 
into #msp_resources
from msp_resources_template

select * 
into #msp_tasks
from msp_tasks_template


select top 0 *
into #msp_dashboard_tasks
from msp_dashboard_tasks

-- now need to update the project 
declare @ProjID int, @CreationDate datetime
select @CreationDate = getdate()

select @ProjID = max(PROJ_ID)
from msp_projects

select @ProjID = isNull(@ProjID,0) + 1

update #msp_projects
set PROJ_ID = @ProjID,
Proj_Name = @ProjectDescription + '(' + @CompanyName + '-' + @PriNum + ')',
PROJ_PROP_TITLE = @ProjectDescription,
PROJ_INFO_CURRENT_DATE = @StartDate,
PROJ_OPT_DEF_FINISH_TIME = @EndDate,
PROJ_OPT_DEF_START_TIME = @StartDate,
PROJ_INFO_FINISH_DATE = @StartDate, 
PROJ_LAST_SAVED = @CreationDate,
PROJ_CREATION_DATE = @CreationDate,
PROJ_INFO_START_DATE = @StartDate,
PROJ_MACHINE_ID = null,
PROJ_READ_ONLY = 0,
PROJ_READ_WRITE = 0,
proj_ext_edited = 1, 
proj_ext_edited_text = 1

update #msp_calendar_data
set PROJ_ID = @ProjID
--CD_FROM_TIME1 = @StartDate,
--CD_TO_TIME1 = @EndDate,
--CD_FROM_TIME2 = null,
--CD_TO_TIME2 = null 

update #msp_calendars
set PROJ_ID = @ProjID

update #msp_outline_codes
set PROJ_ID = @ProjID

update #msp_resources
set PROJ_ID = @ProjID

update #msp_tasks
set PROJ_ID = @ProjID

-- add functional areas first 
declare @GroupID int, @GroupDescription varchar(100)

-------------
-- create temtable for proj_phase
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#proj_phase'))
drop table #proj_phase
create table #proj_phase
(  
   phs_code  varchar(5) null,
   phs_desc   varchar(30) null,
   Proj_Phase_ID int null
)

declare  @sql    varchar(2000)

-- declare @prinum  varchar(20), @HR_DB varchar(30)
-- select @prinum = 3, @hr_Db = 'hr_alco_0429'

set @sql = 'insert #proj_phase select distinct phs_code, phs_desc, Proj_Phase_ID from ' +
           @HR_DB + '..proj_phase '
 	   + ' where prp_comp=''_'' and pri_num =' + @PriNum + ' and isnull(phs_code,''_'') <> ''_'''
           + ' and isnull(subp_code,''_'') = ''_'''
           + ' order by phs_code ' 

exec( @sql)

update #msp_projects
set RESERVED_BINARY_DATA = null

insert msp_projects
select *
from #msp_projects

if @DepartmentFormat = 'F'
begin
 select @DepartmentFieldID = CONV_VALUE
 from msp_conversions
 where CONV_STRING = 'Task Text1'

 insert msp_attribute_strings(proj_id, as_ID, as_Value)
 select @ProjID, isnull(max(as_ID),0) + 1, 'Department'
 from msp_attribute_strings
 where proj_id = @ProjID

 insert msp_field_attributes(proj_id, attrib_field_id,
 attrib_id, attrib_value, as_id, attrib_ext_edited)
 select @ProjID, @DepartmentFieldID, 206, -1, isnull(max(as_ID),0), 1
 from  msp_attribute_strings
 where proj_id = @ProjID

end

if @MajorCodeFormat = 'F'
begin
 if @DepartmentFormat = 'F'
 begin
  select @MajorCodeFieldID = CONV_VALUE
  from msp_conversions
  where CONV_STRING = 'Task Text2'

  insert msp_attribute_strings(proj_id, as_ID, as_Value)
  select @ProjID, isnull(max(as_ID),0) + 1, 'Major Codes'
  from msp_attribute_strings
  where proj_id = @ProjID

  insert msp_field_attributes(proj_id, attrib_field_id,
  attrib_id, attrib_value, as_id, attrib_ext_edited)
  select @ProjID, @MajorCodeFieldID, 206, -1, isnull(max(as_ID),0), 1
  from  msp_attribute_strings
  where proj_id = @ProjID
 end
 else
 begin
  select @MajorCodeFieldID = CONV_VALUE
  from msp_conversions
  where CONV_STRING = 'Task Text1'

  insert msp_attribute_strings(proj_id, as_ID, as_Value)
  select @ProjID, isnull(max(as_ID),0) + 1, 'Major Codes'
  from msp_attribute_strings
  where proj_id = @ProjID

  insert msp_field_attributes(proj_id, attrib_field_id,
  attrib_id, attrib_value, as_id, attrib_ext_edited)
  select @ProjID, @MajorCodeFieldID, 206, -1, isnull(max(as_ID),0), 1
  from  msp_attribute_strings
  where proj_id = @ProjID

 end 
end


-- insert into dashboard items
insert MSP_Dashboard_Projects(SourceFlavour, PROJ_ID, 
PROJ_NAME, PROJ_CREATION_DATE, Link_ID, Company_ID, DBModule_ID)
select @Flavour, @ProjID, 
@ProjectDescription + '(' + @CompanyName + '-' + @PriNum + ')', @CreationDate,@QuoteID, -- @Project,
@TR_DB, 2

insert msp_calendar_data
select *
from #msp_calendar_data

insert msp_calendars
select *
from #msp_calendars

insert msp_outline_codes
select *
from #msp_outline_codes

insert msp_resources
select *
from #msp_resources

--insert the top 4 blank tasks
insert MSP_Tasks
select *
from #MSP_Tasks


--------
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#dept'))
drop table #dept
create table #dept
(DashBoard_TaskGroupID  int null,
 GroupDescription            varchar(50) null
)


declare @s   varchar(5000) 
-- declare @HR_DB  varchar (40),@PriNum varchar (40), @Template int
-- 
-- select @HR_DB = 'hr_adam',@PriNum = 51, @Template = 1

select @s = 'select ts.DashBoard_TaskGroupID, GroupDescription 
   from ' + @HR_DB + '..ProjConv_Codes pm join ' + @HR_DB +
   '..ProjConv_header  h on  pm.ProjConv_Header_id = h. ProjConv_Header_id 
    join Dashboard_TemplateMajorCodeTemplate    dm 
    on pm.Dashboard_MajorCodeTemplateID = dm.Dashboard_MajorCodeTemplateID 
    join DashBoard_ProjTasksSetup   ts 
    on pm.Dashboard_MajorCodeTemplateID = ts.Dashboard_MajorCodeTemplateID 
   join DashBoard_ProjTaskGroup g 
    on ts.DashBoard_TaskGroupID = g.DashBoard_TaskGroupID 
    where h.pri_num = '  + @PriNum
  + ' and dm.Dashboard_TemplateID = ' 
  + ''+convert(varchar(20), @Template) + ''



insert #dept (DashBoard_TaskGroupID, GroupDescription)
exec (@s)

insert #dept (DashBoard_TaskGroupID, GroupDescription)
select distinct ts.DashBoard_TaskGroupID, GroupDescription
from DashBoard_ProjTasksSetup  ts
join DashBoard_ProjTaskGroup g
 on ts.DashBoard_TaskGroupID = g.DashBoard_TaskGroupID
where Dashboard_TemplateID = @Template

----------


declare @DepartmentOutline varchar(50), @CodeOutline varchar(50), 
@TaskID int, @Duration float, @TaskDescription varchar(255)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#OutlineIS'))
drop table #OutlineIS
create table #OutlineIS(OutlineIs varchar(50) null)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#CodeSpec'))
drop table #CodeSpec
create table #CodeSpec(
 DMC_ID int null, 
 Dashboard_TasksSetupID int null, 
 Duration int null, 
 TaskDescription varchar(255) null,
 Dashboard_TaskGroupID int null)

  -- now do the tasks
declare OutlineCursor cursor
read_only
for  
   select distinct DashBoard_TaskGroupID, GroupDescription
   from #dept

  open OutlineCursor
  fetch next from OutlineCursor into @GroupID, @GroupDescription 
  while (@@fetch_status <> -1)
  begin
   if (@@fetch_status <> -2)
   begin
     --insert as a group header
     delete #OutlineIS

     if @DepartmentFormat = 'H'
     begin
      insert #OutlineIS
      exec sp_Dashboard_AddNewTask @ProjID, null, @GroupID, 'MSPTASK', @Flavour,
       null, null, null, null, null,@UserID, '0', null, 'C', @GroupDescription, null, null,'F'
      select @DepartmentOutline = OutlineIS
      from #OutlineIS
     end

      --first do attachment mode at project level
      declare OutlineProjectItemsCursor cursor
      read_only
      for  
      select distinct DashBoard_TasksSetupID, TaskDescription, Duration
      from DashBoard_ProjTasksSetup
      where  Dashboard_TemplateID = @Template
       and DashBoard_TaskGroupID = @GroupID
       and AttachmentMode = 'Project'
  
        open OutlineProjectItemsCursor
        fetch next from OutlineProjectItemsCursor into @TaskID, @TaskDescription, @Duration
        while (@@fetch_status <> -1)
        begin
         if (@@fetch_status <> -2)
         begin
          delete #OutlineIS
          
          if @DepartmentFormat = 'H'
          begin--insert as a task of department level
           insert #OutlineIS
           exec sp_Dashboard_AddNewTask @ProjID, null, @GroupID, 'MSPTASK', @Flavour,
       	   null, null, null, null, null,@UserID,null, @DepartmentOutline, 'P', @TaskDescription, @Duration, null,'F'
          end
          else
          begin--insert as a task at top level
           insert #OutlineIS
           exec sp_Dashboard_AddNewTask @ProjID, null, @GroupID, 'MSPTASK', @Flavour,
       	   null, null, null, null, null,@UserID, 0, null, 'P', @TaskDescription, @Duration, null,'F'
 
           --add department level field
           if @DepartmentFormat = 'F'
           begin
            select @AssID = Task_UID
            from msp_tasks
            where proj_id = @ProjID
            and TASK_OUTLINE_NUM = (select OutlineIs from #OutlineIS)

											 insert msp_text_fields
            select @ProjID, 0, @AssID, @DepartmentFieldID, @TaskDescription
           end
          end

 							  update msp_dashboard_tasks
          set Dashboard_TasksSetupID = @TaskID
          where mdt_id in (select mdt_id 
          from msp_dashboard_tasks dt
          join msp_tasks t
          on t.Proj_id = dt.Proj_id
          and t.Task_UID = dt.Task_UID
          where dt.proj_id = @ProjID and Task_Outline_Num in 
           (select OutlineIS
            from #OutlineIS))
         end
         fetch next from OutlineProjectItemsCursor into @TaskID, @TaskDescription, @Duration
        end

        close OutlineProjectItemsCursor
        deallocate OutlineProjectItemsCursor


        --now do attachment mode at code level
        declare @PhaseCode varchar(50), @PhaseDesc varchar(200), @Proj_Phase_ID int, @DMC_ID int

        declare OutlinePhaseCursor cursor
        read_only
        for  -- change later
        select distinct ltrim(rtrim(phs_code)), phs_desc, c.Proj_Phase_ID, DMC_ID
        from #proj_phase p
       	join Dashboard_MajorCodes c
       	on p.Proj_Phase_ID = c.Proj_Phase_ID 
       	and c.Proj_ID_ID = @Project
        order by ltrim(rtrim(phs_code))
	
        open OutlinePhaseCursor 
        fetch next from OutlinePhaseCursor  into @PhaseCode, @PhaseDesc, @Proj_Phase_ID, @DMC_ID
        while (@@fetch_status <> -1)
        begin
         if (@@fetch_status <> -2)
         begin  
 
          declare @ProcDesc varchar(500)
          select @ProcDesc = @PhaseCode + ' - ' + @PhaseDesc
          delete #OutlineIS

         if @MajorCodeFormat = 'H'
         begin 
          if @DepartmentFormat = 'H'
          begin
           insert #OutlineIS
            exec sp_Dashboard_AddNewTask @ProjID, @Proj_Phase_ID, @GroupID, 'MSPTASK', @Flavour,
      	    null, null, null, null, null, @UserID, null,@DepartmentOutline, 'M', @ProcDesc, null, @DMC_ID,'F'
          end
          else
          begin --Only major code is heirarchial
           insert #OutlineIS
            exec sp_Dashboard_AddNewTask @ProjID, @Proj_Phase_ID, @GroupID, 'MSPTASK', @Flavour,
       	    null, null, null, null, null, @UserID, 0, null, 'M', @ProcDesc, null, @DMC_ID,'F'

            --add department level field
            if @DepartmentFormat = 'F'
            begin
             select @AssID = Task_UID
             from msp_tasks
             where proj_id = @ProjID
             and TASK_OUTLINE_NUM = (select OutlineIs from #OutlineIS)

 											 insert msp_text_fields
             select @ProjID, 0, @AssID, @DepartmentFieldID, @TaskDescription
            end
           
          end
         end
         -- do not insert a record unless heirarchial       
	         select @CodeOutline = OutlineIS
          from #OutlineIS         


          -- check to see if a major code template exists for this one
										declare @csDMC_ID int,  @csDashboard_TasksSetupID int, 
          @csDuration int, @csTaskDescription varchar(255), @csDashboard_TaskGroupID int

          delete #CodeSpec
          exec sp_Dashboard_CreateSpecificCodes @ProjID, @Project, @HR_DB, @PhaseCode 

          declare CodeSpecCursor cursor
          read_only
          for  -- change later
          select distinct DMC_ID, Dashboard_TasksSetupID, Duration, TaskDescription, Dashboard_TaskGroupID
          from #CodeSpec
          where Dashboard_TaskGroupID = @GroupID
	
          open CodeSpecCursor
          fetch next from CodeSpecCursor into @csDMC_ID, @csDashboard_TasksSetupID, @csDuration, @csTaskDescription, @csDashboard_TaskGroupID
          while (@@fetch_status <> -1)
          begin
           if (@@fetch_status <> -2)
           begin  

            delete #OutlineIS

            if @MajorCodeFormat = 'H'
            begin
             insert #OutlineIS
             exec sp_Dashboard_AddNewTask @ProjID, @Proj_Phase_ID, @GroupID, 'MSPTASK', @Flavour,
   	         null, null, null, null, null,@UserID, null, @CodeOutline, 'T', @csTaskDescription, @csDuration, @csDMC_ID,'F'
            end
            else if @DepartmentFormat = 'H' 
            begin
             insert #OutlineIS
             exec sp_Dashboard_AddNewTask @ProjID, @Proj_Phase_ID, @GroupID, 'MSPTASK', @Flavour,
   	         null, null, null, null, null,@UserID, null, @DepartmentOutline, 'T', @csTaskDescription, @csDuration, @csDMC_ID,'F'
            end
            else --no parents at all
            begin
             insert #OutlineIS
             exec sp_Dashboard_AddNewTask @ProjID, @Proj_Phase_ID, @GroupID, 'MSPTASK', @Flavour,
   	         null, null, null, null, null,@UserID, 0, null, 'T', @csTaskDescription, @csDuration, @csDMC_ID,'F'
            end

            --add department level field
            if @DepartmentFormat = 'F'
            begin
             select @AssID = Task_UID
             from msp_tasks
             where proj_id = @ProjID
             and TASK_OUTLINE_NUM = (select OutlineIs from #OutlineIS)
 
	 										 insert msp_text_fields
             select @ProjID, 0, @AssID, @DepartmentFieldID, @GroupDescription
            end

            --add major code level field
            if @MajorCodeFormat = 'F'
            begin
             select @AssID = Task_UID
             from msp_tasks
             where proj_id = @ProjID
             and TASK_OUTLINE_NUM = (select OutlineIs from #OutlineIS)
 
	 										 insert msp_text_fields
             select @ProjID, 0, @AssID, @MajorCodeFieldID, @PhaseCode
            end


            update msp_dashboard_tasks
            set Dashboard_TasksSetupID = @csDashboard_TasksSetupID
            where mdt_id in (select mdt_id 
            from msp_dashboard_tasks dt
            join msp_tasks t
            on t.Proj_id = dt.Proj_id
            and t.Task_UID = dt.Task_UID
            where dt.proj_id = @ProjID and Task_Outline_Num in 
             (select OutlineIS
              from #OutlineIS))


           end
           fetch next from CodeSpecCursor into @csDMC_ID, @csDashboard_TasksSetupID, @csDuration, @csTaskDescription, @csDashboard_TaskGroupID
  end

          close CodeSpecCursor
          deallocate CodeSpecCursor        

	
          declare OutlineCodeItemsCursor cursor
          read_only
          for  
	         select distinct DashBoard_TasksSetupID, TaskDescription, Duration
          from DashBoard_ProjTasksSetup
          where Dashboard_TemplateID = @Template
          and DashBoard_TaskGroupID = @GroupID
          and AttachmentMode = 'Code'
	  
          open OutlineCodeItemsCursor
          fetch next from OutlineCodeItemsCursor into @TaskID, @TaskDescription, @Duration
          while (@@fetch_status <> -1)
          begin
           if (@@fetch_status <> -2)
           begin

            delete #OutlineIS

            if @MajorCodeFormat = 'H'
            begin
             insert #OutlineIS
             exec sp_Dashboard_AddNewTask @ProjID, @Proj_Phase_ID, @GroupID, 'MSPTASK', @Flavour,
   	         null, null, null, null, null,@UserID, null, @CodeOutline, 'T', @TaskDescription, @Duration, @DMC_ID,'F'
            end
            else if @DepartmentFormat = 'H' 
            begin
             insert #OutlineIS
             exec sp_Dashboard_AddNewTask @ProjID, @Proj_Phase_ID, @GroupID, 'MSPTASK', @Flavour,
   	         null, null, null, null, null,@UserID, null, @DepartmentOutline, 'T', @TaskDescription, @Duration, @DMC_ID,'F'
            end
            else --no parents at all
            begin
             insert #OutlineIS
             exec sp_Dashboard_AddNewTask @ProjID, @Proj_Phase_ID, @GroupID, 'MSPTASK', @Flavour,
   	         null, null, null, null, null,@UserID, 0, null, 'T', @TaskDescription, @Duration, @DMC_ID,'F'
            end


            --add department level field
            if @DepartmentFormat = 'F'
            begin
             select @AssID = Task_UID
             from msp_tasks
             where proj_id = @ProjID
             and TASK_OUTLINE_NUM = (select OutlineIs from #OutlineIS)
 
	 										 insert msp_text_fields
             select @ProjID, 0, @AssID, @DepartmentFieldID, @GroupDescription
            end

            --add major code level field
            if @MajorCodeFormat = 'F'
            begin
             select @AssID = Task_UID
             from msp_tasks
             where proj_id = @ProjID
             and TASK_OUTLINE_NUM = (select OutlineIs from #OutlineIS)
 
	 										 insert msp_text_fields
             select @ProjID, 0, @AssID, @MajorCodeFieldID, @PhaseCode
            end


       	    update msp_dashboard_tasks
            set Dashboard_TasksSetupID = @TaskID
            where mdt_id in (select mdt_id 
            from msp_dashboard_tasks dt
            join msp_tasks t
            on t.Proj_id = dt.Proj_id
            and t.Task_UID = dt.Task_UID
            where dt.proj_id = @ProjID and Task_Outline_Num in 
             (select OutlineIS
              from #OutlineIS))

           end
           fetch next from OutlineCodeItemsCursor into @TaskID, @TaskDescription, @Duration
          end

          close OutlineCodeItemsCursor
          deallocate OutlineCodeItemsCursor
	

         end
         fetch next from OutlinePhaseCursor into @PhaseCode, @PhaseDesc, @Proj_Phase_ID, @DMC_ID
        end
        close OutlinePhaseCursor
        deallocate OutlinePhaseCursor
     end
     fetch next from OutlineCursor into @GroupID, @GroupDescription 
  end
  close OutlineCursor
  deallocate OutlineCursor
-- exec sp_Dashboard_CreateSpecificCodes @ProjID, @Project, @HR_DB   

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_links'))
drop table #msp_links
create table #msp_links(
	[RESERVED_DATA] [char] (1) NULL ,
	[PROJ_ID] [int] NULL ,
	[EXT_EDIT_REF_DATA] [text] ,
	[LINK_UID] [int] not NULL identity(1,1),
	[LINK_IS_CROSS_PROJ] [bit] NULL DEFAULT (0),
	[LINK_PRED_UID] [int] NULL ,
	[LINK_SUCC_UID] [int] NULL ,
	[LINK_TYPE] [smallint] NULL ,
	[LINK_LAG_FMT] [smallint] NULL ,
	[LINK_LAG] [int] NULL 
) 

--do predecessors now for project level
insert #msp_links(RESERVED_DATA, PROJ_ID, EXT_EDIT_REF_DATA, LINK_IS_CROSS_PROJ, LINK_PRED_UID, 
LINK_SUCC_UID, LINK_TYPE, LINK_LAG_FMT, LINK_LAG)
select 0, @ProjID, null, 0, dt2.TASK_UID predecessor, t.TASK_UID, 1, 7, 0
from msp_dashboard_tasks dt
join msp_tasks t
on t.task_uid = dt.task_uid
and t.proj_id = dt.proj_id
join Dashboard_ProjTasksPredecessors dtp
on dtp.Dashboard_TaskSetUpID = dt.Dashboard_TasksSetupID
join dashboard_projTasksSetup ts
on ts.Dashboard_TasksSetupID = dtp.Dashboard_TaskSetupID
join dashboard_projTasksSetup ts2
on ts2.ReferenceID = dtp.ReferenceID
join msp_dashboard_tasks dt2
on dt2.Dashboard_TasksSetupID = ts2.Dashboard_TasksSetupID
and dt2.DMC_ID = dt.DMC_ID
and dt2.proj_id = dt.proj_id
where ts.Dashboard_MajorCodeTemplateID is null
and dt.Proj_id = @ProjID

--PREDECESSORS FOR code spcific tasks (can span all codes)
insert #msp_links(RESERVED_DATA, PROJ_ID, EXT_EDIT_REF_DATA, LINK_IS_CROSS_PROJ, LINK_PRED_UID, 
LINK_SUCC_UID, LINK_TYPE, LINK_LAG_FMT, LINK_LAG)
select 0, @ProjID, null, 0, dt2.TASK_UID predecessor, t.TASK_UID, 1, 7, 0
from msp_dashboard_tasks dt
join msp_tasks t
on t.task_uid = dt.task_uid
and t.proj_id = dt.proj_id
join Dashboard_ProjTasksPredecessors dtp
on dtp.Dashboard_TaskSetUpID = dt.Dashboard_TasksSetupID
join dashboard_projTasksSetup ts
on ts.Dashboard_TasksSetupID = dtp.Dashboard_TaskSetupID
join dashboard_projTasksSetup ts2
on ts2.ReferenceID = dtp.ReferenceID
join msp_dashboard_tasks dt2
on dt2.Dashboard_TasksSetupID = ts2.Dashboard_TasksSetupID
and dt2.proj_id = dt.proj_id
where ts.Dashboard_MajorCodeTemplateID is NOT null
and dt.Proj_id = @ProjID


declare @MaxLUid int
select @MaxLUid = max(Link_UID)
from msp_links
where PROJ_ID = @PROJID

insert msp_links(RESERVED_DATA, PROJ_ID, EXT_EDIT_REF_DATA, LINK_UID, LINK_IS_CROSS_PROJ, LINK_PRED_UID, 
LINK_SUCC_UID, LINK_TYPE, LINK_LAG_FMT, LINK_LAG)
select RESERVED_DATA, PROJ_ID, EXT_EDIT_REF_DATA, LINK_UID + isNull(@MaxLUid,0), LINK_IS_CROSS_PROJ, LINK_PRED_UID, 
LINK_SUCC_UID, LINK_TYPE, LINK_LAG_FMT, LINK_LAG
from #msp_links



---------service center starts--------------
declare @ProjID_SC  int

select @ProjID_SC  = max(PROJ_ID) + 1
from msp_projects


insert MSP_PROJECTS (PROJ_ID, PROJ_NAME, PROJ_INFO_START_DATE, PROJ_EXT_EDITED)
select @ProjID_SC,'Service center: '+ PROJ_NAME,PROJ_INFO_START_DATE, '1'
from MSP_PROJECTS
where PROJ_ID = @ProjID

insert msp_dashboard_projects (Link_ID, SourceFlavour , PROJ_ID, PROJ_NAME,PROJ_CREATION_DATE,
 Company_id ,DBModule_ID )
select @QuoteID , 'nbgServiceCenter',@ProjID_SC, 'Service center: '+ PROJ_NAME,PROJ_CREATION_DATE,
 Company_id ,DBModule_ID
from  msp_dashboard_projects
where PROJ_ID = @ProjID


---------service center ends--------------

select 'Done' 'Result'







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CMS_DefaultMajorcodeTemplate]') and xtype = 'P ')  
 drop Procedure sp_CMS_DefaultMajorcodeTemplate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go










CREATE   proc sp_CMS_DefaultMajorcodeTemplate


 @ProjConv_Header_id varchar(50),
 @Dashboard_TemplateID varchar(50), 
  @Human varchar(500)

as

-- declare @ProjConv_Header_id varchar(50), @Dashboard_TemplateID varchar(50), @Human varchar(500)
-- select @ProjConv_Header_id = :ProjConv_Header_id, @Dashboard_TemplateID = :Dashboard_TemplateID, @Human = :Human

exec ('update ' + @Human + '..projConv_Codes
set Dashboard_MajorCodeTemplateID = null
where ProjConv_Header_id = ' + @ProjConv_Header_id + '')


exec('
update ' + @Human + '..projConv_Codes
set Dashboard_MajorCodeTemplateID = dpt.Dashboard_MajorCodeTemplateID
from ' + @Human + '..projConv_Codes pc
join Dashboard_projMajorCodeTemplates dpt
on dpt.MajorCode = pc.dstCode
join Dashboard_TemplateMajorCodeTemplate dtpt
on dtpt.Dashboard_MajorCodeTemplateID = dpt.Dashboard_MajorCodeTemplateID
where ProjConv_Header_id = ' + @ProjConv_Header_id + '
and dtpt.Dashboard_TemplateID = ''' + @Dashboard_TemplateID + '''')

select 'Done' result











Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CMS_Get_Orphan_Schedule_Points]') and xtype = 'P ')  
 drop Procedure sp_CMS_Get_Orphan_Schedule_Points
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_CMS_Get_Orphan_Schedule_Points]
--declare 
@quotemodelid int,
@username varchar(100),
@Type char --Q or M
as
begin

declare @count int,
@modelid int,
@raw_land_cd int

--	set @quotemodelid = 1120
--	set @username = 'Adam'

	delete from working_orphan_schedule_points where username=@username

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Orphans'))
		drop table #Orphans 

	select top 1 ID, Description, Username 
	into #Orphans
	from working_orphan_schedule_points

	delete from #Orphans

if @Type = 'Q'
begin
	select @count=count(MSP_Proj_ID) from scquote where id=@quotemodelid
	if( @count > 0 )
	begin
		insert #Orphans
		select sp.id, sp.description, '' as username
		from scQuoteOptions s
		left outer join hb_schedulemap sm on s.quoteid = sm.quoteid and s.HB_OrderPoint_ID= sm.schedulepoint_id
		left outer join hb_schedulepoints sp on sp.id = s.HB_OrderPoint_ID
		where sm.msp_task_uid is null and sp.id is not null and s.quoteid=@quotemodelid

		insert #Orphans
		select sp.id, sp.description, '' as username
		from scQuoteOptions s
		left outer join hb_schedulemap sm on s.quoteid = sm.quoteid and s.HB_ConfirmationPoint_ID= sm.schedulepoint_id
		left outer join hb_schedulepoints sp on sp.id = s.HB_ConfirmationPoint_ID
		where sm.msp_task_uid is null and sp.id is not null and s.quoteid=@quotemodelid

		insert #Orphans
		select sp.id, sp.description, '' as username
		from scQuoteOptions s
		left outer join hb_schedulemap sm on s.quoteid = sm.quoteid and s.HB_ScheduleDeliveryPoint_ID= sm.schedulepoint_id
		left outer join hb_schedulepoints sp on sp.id = s.HB_ScheduleDeliveryPoint_ID
		where sm.msp_task_uid is null and sp.id is not null and s.quoteid=@quotemodelid

	end
end
else -- "M" - Model
begin
	select @count=count(MSP_Template_ID) from hb_model where id=@quotemodelid
	if( @count > 0 )
	begin
		select @modelid=model_id, @raw_land_cd=RAW_LAND_CD from hb_model where id=@quotemodelid

--HB_EST_TRD
		insert #Orphans
		select sp.id, sp.description, '' as username
		from hb_est_trd et
		join hb_model m on m.model_id = et.model_id and m.raw_land_cd = et.raw_land_cd
		left outer join hb_schedulemap sm on sm.model_uid = m.id
		join hb_schedulepoints sp on sp.id = et.hb_orderpoint_id 
			or sp.id = et.hb_confirmationpoint_id 
			or sp.id = et.hb_scheduledeliverypoint_id
		where sp.id is not null and et.option_id=-1 and m.id=@quotemodelid and sp.id not in (
		select schedulepoint_id from hb_schedulemap where model_uid=@quotemodelid and msp_task_uid is not null )


--HB_EST_MAT
		insert #Orphans
		select sp.id, sp.description, '' as username
		from hb_est_mat em
		join hb_model m on m.model_id = em.model_id and m.raw_land_cd = em.raw_land_cd
		left outer join hb_schedulemap sm on sm.model_uid = m.id
		join hb_schedulepoints sp on sp.id = em.hb_orderpoint_id 
			or sp.id = em.hb_confirmationpoint_id 
			or sp.id = em.hb_scheduledeliverypoint_id
		where sp.id is not null and em.option_id=-1 and m.id=@quotemodelid and sp.id not in (
		select schedulepoint_id from hb_schedulemap where model_uid=@quotemodelid and msp_task_uid is not null )


-- HB_ELV_OPT	
		insert #Orphans
		select sp.id, sp.description, '' as username
		from hb_elv_opt eo
		join hb_model m on m.model_id = eo.model_id and m.raw_land_cd = eo.raw_land_cd
		left outer join hb_schedulemap sm on sm.model_uid = m.id
		join hb_schedulepoints sp on sp.id = eo.hb_orderpoint_id 
			or sp.id = eo.hb_confirmationpoint_id 
			or sp.id = eo.hb_scheduledeliverypoint_id
		where sp.id is not null and attached_yn='Y' and m.id=@quotemodelid and sp.id not in (
		select schedulepoint_id from hb_schedulemap where model_uid=@quotemodelid and msp_task_uid is not null )
				
	end
end
	insert working_orphan_schedule_points
	select distinct * from #Orphans

	update working_orphan_schedule_points set Username=@username where Username = ''
--	select * from working_orphan_schedule_points where username=@username


end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CMS_GetContractInfo]') and xtype = 'P ')  
 drop Procedure sp_CMS_GetContractInfo
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





















CREATE               proc [dbo].[sp_CMS_GetContractInfo]   
 
 @WebDB   varchar(50),
 @TRDB   varchar(50)
 as
  
--  declare @WebDB   varchar(50),@TRDB   varchar(50)
--  select @WebDB = 'Web_Reflex', @TRDb = 'TR_RoyalOak'

declare       @str  varchar(1000)



if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#result '))  
drop table #result
create table #result
( 
   Type      varchar(10)   null,  -- 'Model', 'Option', 'Material'
   QuoteID       int null,
   LeadID         int null,
   RAW_LAND_CD    int null,
   COMMUNITY_CD    int null,
   PROJECT_CD    int null,
   MODEL_NAME_ID  int   null,
   MODEL_NAME  varchar (50)  null,
   MODEL_ID   int null,
   MODEL_SDESC  varchar(50) null,
   MODEL_DESC   varchar(50) null,
   RFQC_ID   int null,
   MAJ_GROUP_ID   int null,  
   GROUP_DESC  varchar(50)  null,
   SUB_GROUP_ID   int null,
   SUB_GROUP_DESC   varchar(50),
   OPTION_ID  int null,
   SHORT_DESC     varchar (50) null,
   phs_code    varchar(10)  null,
   subp_code    varchar(10)  null,
   selected    varchar(1)   null,
   MATGROUP_ID   int null,
   MAT_GROUP     varchar(10) null, 
   MAT_GROUP_DESC  varchar(50) null,
   MATERIAL_ID  int null,
   MAT_CODE   varchar(30) null,
   MAT_SHORT_DESC  varchar(50)  null ,
   BADC  varchar(1) null,
   INTERNAL_EST    money null,
   EXP_DESC   text  null,
   Quanity money null,
   Trade_ID int null,
   HB_ConfirmationPoint_ID int null,
   HB_ScheduleDeliveryPoint_ID int null,
   HB_OrderPoint_ID int null,
   ConfirmationDeadlineDays int null
)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#quote '))  
drop table #quote
create table #quote   --select * from #quote
  (
   QuoteID       int null,
   LeadID         int null,
   RAW_LAND_CD    int null,
   COMMUNITY_CD    int null,
   PROJECT_CD    int null,
   MODEL_NAME_ID  int   null,
   MODEL_ID   int null
 )




insert #quote (QuoteID,LeadID,RAW_LAND_CD,COMMUNITY_CD,PROJECT_CD,MODEL_NAME_ID,MODEL_ID )
               select ID ,LeadID,HoldingID, CommunityID,ProjectID,ModelNameID,ModelID 
               from   scQuote q join companies c on q.companyID = c.AutoID  
               where  TreasuryDBName =  @TRDB
                and Status = 'S' and ID not in ( select quoteID from  
                     CMS_Contract_Management )



--- type = model(elevation) ---------

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Elevation '))  
drop table #Elevation
create table #Elevation 
  (
   Type      varchar(10)   null,  -- 'Model', 'Option', 'Material'
   RAW_LAND_CD    int null,
   MODEL_NAME_ID  int   null,
   MODEL_NAME  varchar (50)  null,
   MODEL_ID   int null,
   MODEL_SDESC  varchar(50) null,
   MODEL_DESC   varchar(50) null,
   RFQC_ID   int null,
   SHORT_DESC     varchar (50) null,
   phs_code    varchar(10)  null,
   subp_code    varchar(10)  null,
   BADC  varchar(1) null,
   INTERNAL_EST    money null,
   Trade_ID int null,
   Quanity money null,
   HB_ConfirmationPoint_ID int null,
   HB_ScheduleDeliveryPoint_ID int null,
   HB_OrderPoint_ID int null,
   ConfirmationDeadlineDays int null
   )


insert  #Elevation(RAW_LAND_CD, MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC, 
        MODEL_DESC,phs_code,subp_code, BADC,INTERNAL_EST, TRADE_ID, Quanity, HB_ConfirmationPoint_ID,
	    HB_ScheduleDeliveryPoint_ID, HB_OrderPoint_ID, ConfirmationDeadlineDays )

select   m.RAW_LAND_CD, m.MODEL_NAME_ID, n.MODEL_NAME, m.MODEL_ID,
        m.MODEL_SDESC, m.MODEL_DESC, p.phs_code, p.subp_code,BADC,IsNull(p.EST_COST,0), TRADE_ID, IsNull(EST_HOURS,1),
		HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, HB_OrderPoint_ID, ConfirmationDeadlineDays
from HB_EST_TRD   p
left outer join HB_MODEL m
on m.MODEL_ID = p.MODEL_ID and p.Raw_Land_CD = m.Raw_Land_CD
left outer join HB_MODEL_NAME  n
on n.MODEL_NAME_ID = m.MODEL_NAME_ID
where BASE_MODEL = 'Y' and p.Raw_Land_CD in (Select Raw_Land_CD from #quote) and p.Option_ID = -1 and p.EstimateLevel = 'E'

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#BaseElevation '))  
drop table #BaseElevation
create table #BaseElevation(
   type      varchar(10)   null, 
    RAW_LAND_CD    int null, 
   MODEL_NAME_ID  int   null,
   MODEL_NAME  varchar (50)  null,
   MODEL_ID   int null,
   MODEL_SDESC  varchar(50) null,
   MODEL_DESC   varchar(50) null,
   phs_code    varchar(10)  null,
   subp_code    varchar(10)  null,
   RFQC_ID   int null,
   BADC  varchar(1) null,
   INTERNAL_EST    money null,
   Trade_ID int null,
   Quanity money null,
   HB_ConfirmationPoint_ID int null,
   HB_ScheduleDeliveryPoint_ID int null,
   HB_OrderPoint_ID int null,
   ConfirmationDeadlineDays int null
)

insert #BaseElevation(RAW_LAND_CD, MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC,
       MODEL_DESC,phs_code,subp_code, BADC,INTERNAL_EST, TRADE_ID, Quanity,
	   HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, HB_OrderPoint_ID, ConfirmationDeadlineDays )

select  RAW_LAND_CD, MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC,
       MODEL_DESC,phs_code,subp_code,BADC,INTERNAL_EST, TRADE_ID, IsNull(Quanity,1),
       HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, HB_OrderPoint_ID, ConfirmationDeadlineDays
 from #Elevation

insert #Elevation(RAW_LAND_CD, MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC,MODEL_DESC,
        phs_code,subp_code, BADC,INTERNAL_EST, TRADE_ID, Quanity, HB_ConfirmationPoint_ID, 
		HB_ScheduleDeliveryPoint_ID, HB_OrderPoint_ID, ConfirmationDeadlineDays)
select m.RAW_LAND_CD, m.MODEL_NAME_ID, n.MODEL_NAME, m.MODEL_ID,m.MODEL_SDESC,
        m.MODEL_DESC, b.phs_code,b.subp_code, BADC,b.INTERNAL_EST, TRADE_ID, Quanity, 
		HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, HB_OrderPoint_ID, ConfirmationDeadlineDays
from HB_MODEL_NAME  n
left outer join HB_MODEL m
on n.MODEL_NAME_ID = m.MODEL_NAME_ID
left outer join #BaseElevation b
on m.MODEL_NAME_ID = b.MODEL_NAME_ID and b.Raw_Land_CD = m.Raw_Land_CD
where BASE_MODEL = 'N' and m.Raw_Land_CD in (Select Raw_Land_CD from #quote)
order by m.MODEL_ID

--Updates the changes for elevation changes. Possibly have to change the BADC to C.
Update #Elevation
Set INTERNAL_EST = et.EST_COST, Quanity = et.EST_HOURS
--Select *
From #Elevation e Left outer join
	 HB_EST_TRD et on et.Model_ID = e.Model_ID and et.Raw_Land_CD = e.Raw_Land_CD and
					  et.phs_code = e.phs_code and et.subp_code = e.subp_code and et.Trade_ID = e.Trade_ID Left Outer Join
	 HB_MODEL m on m.Model_ID = e.Model_ID and m.Model_Name_ID = e.Model_Name_ID and m.Raw_Land_CD = e.Raw_Land_CD
Where m.BASE_MODEL = 'N' and et.BADC = 'B' and et.EST_COST is not null and et.EST_HOURS is not null and et.EstimateLevel = 'E'

--Addes Addtional Items added to the other elevations

insert  #Elevation(RAW_LAND_CD, MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC, 
        MODEL_DESC,phs_code,subp_code, BADC,INTERNAL_EST, TRADE_ID, Quanity, 
		HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, HB_OrderPoint_ID, ConfirmationDeadlineDays    )

select   m.RAW_LAND_CD, m.MODEL_NAME_ID, n.MODEL_NAME, m.MODEL_ID,
        m.MODEL_SDESC, m.MODEL_DESC, p.phs_code, p.subp_code,BADC,IsNull(EST_COST,0), TRADE_ID, IsNull(EST_HOURS,1),
		HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, HB_OrderPoint_ID, ConfirmationDeadlineDays
from HB_EST_TRD   p
left outer join HB_MODEL m
on m.MODEL_ID = p.MODEL_ID and p.Raw_Land_CD = m.Raw_Land_CD
left outer join HB_MODEL_NAME  n
on n.MODEL_NAME_ID = m.MODEL_NAME_ID
where BASE_MODEL = 'N' and p.BADC = 'A' and p.Raw_Land_CD in (Select Raw_Land_CD from #quote) and p.Option_ID = -1
		and p.EstimateLevel = 'E'

--Remove Elevation specific delets from base model
 Delete #Elevation
 --Select *
 From #Elevation e
 Inner join HB_EST_TRD et on et.Raw_Land_CD = e.Raw_Land_CD and et.Model_ID = e.Model_ID and et.Trade_ID = e.Trade_ID
							 and et.phs_code = e.phs_code and et.subp_code = e.subp_code
 join HB_Model hm on hm.Model_Name_ID = e.Model_Name_ID and hm.Model_ID = e.Model_ID
 Where hm.BASE_MODEL = 'N' and et.BADC = 'D' and hm.Raw_Land_CD <> -1 and et.EstimateLevel = 'E'
 
-- update #Elevation
-- --select * 
-- set BADC = 'C',INTERNAL_EST = he.EST_COST
-- from #Elevation    e
-- left outer join HB_EST_TRD  he
-- on e.MODEL_ID = he.MODEL_ID and he.Raw_Land_CD = e.Raw_Land_CD
-- and e.phs_code  =  he.phs_code and he.trade_ID = e.Trade_ID
-- where he.BADC = 'C'

insert #result (type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC ,MODEL_DESC,phs_code,subp_code,BADC,INTERNAL_EST,Quanity,Trade_ID,
	   HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, HB_OrderPoint_ID, ConfirmationDeadlineDays)
select 'E',q.QuoteID,q.LeadID,q.COMMUNITY_CD,q.RAW_LAND_CD,q.PROJECT_CD,q.MODEL_NAME_ID,
       q.MODEL_ID, e.MODEL_NAME,e.MODEL_SDESC ,e.MODEL_DESC,e.phs_code,e.subp_code,
       e.BADC,e.INTERNAL_EST,e.Quanity,Trade_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, 
	   HB_OrderPoint_ID, ConfirmationDeadlineDays
--select *
 from #quote  q
Left outer  join #Elevation e
on  q.MODEL_NAME_ID = e.MODEL_NAME_ID and
 q. MODEL_ID = e. MODEL_ID and q.Raw_Land_CD = e.Raw_Land_CD
order by q.LeadID, q.COMMUNITY_CD,q.RAW_LAND_CD,q.PROJECT_CD,q.MODEL_NAME_ID,q.MODEL_ID,
         e.phs_code, e.subp_code

--select * from #result


----------------------- Material  (may needed in the future--------
 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#mat '))  
 drop table #mat
 create table #mat
   (
 
    RAW_LAND_CD    int null,
    MODEL_NAME_ID  int   null,
    MODEL_NAME  varchar (50)  null,
    MODEL_ID   int null,
    MODEL_SDESC  varchar(50) null,
    MODEL_DESC   varchar(50) null,
    phs_code    varchar(10)  null,
    subp_code    varchar(10)  null,
    MATGROUP_ID   int null,
    MAT_GROUP     varchar(10) null, 
    MAT_GROUP_DESC  varchar(50) null,
    MATERIAL_ID  int null,
    MAT_CODE   varchar(30) null,
    MAT_SHORT_DESC  varchar(50)  null,
	Quantity money null,
	Internal_Est money null,
    HB_ConfirmationPoint_ID int null,
    HB_ScheduleDeliveryPoint_ID int null,
    HB_OrderPoint_ID int null,
    ConfirmationDeadlineDays int null
  )
 
 
 insert  #mat(RAW_LAND_CD, MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC, 
         MODEL_DESC,phs_code,subp_code,
          MATGROUP_ID, MAT_GROUP, MAT_GROUP_DESC,
         MATERIAL_ID,MAT_CODE, MAT_SHORT_DESC, Quantity, Internal_Est,
		HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, HB_OrderPoint_ID, ConfirmationDeadlineDays   )
 
 select  m.RAW_LAND_CD,m.MODEL_NAME_ID, n.MODEL_NAME, m.MODEL_ID,
         m.MODEL_SDESC, m.MODEL_DESC, p.phs_code,  p.subp_code, 
         mat.MATGROUP_ID, mg.MAT_GROUP,  mg.GROUP_DESC,
         p.MATERIAL_ID,mat.MAT_CODE,  mat.MAT_SHORT_DESC, p.qty,
		 p.qty * p.EST_COST, p.HB_ConfirmationPoint_ID, p.HB_ScheduleDeliveryPoint_ID, p.HB_OrderPoint_ID, 
		 p.ConfirmationDeadlineDays  
 --select *
 from HB_MAT_GROUP mg
 join HB_MATERIAL    mat
 on mg.MATGROUP_ID = mat.MATGROUP_ID
 left outer join  HB_EST_MAT   p
 on mat.MATERIAL_ID  = p.MATERIAL_ID 
 join HB_MODEL m
 on m.MODEL_ID = p.MODEL_ID and m.Raw_Land_CD = p.Raw_Land_CD
 join HB_MODEL_NAME  n
 on n.MODEL_NAME_ID = m.MODEL_NAME_ID
 where m.BASE_MODEL = 'Y' and p.Model_ID <> -1 and m.Raw_Land_CD in (Select Raw_Land_CD from #quote) and p.EstimateLevel = 'E'
 
  if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Basemat '))  
 drop table #Basemat
 create table #Basemat
   (
 
    RAW_LAND_CD    int null,
    MODEL_NAME_ID  int   null,
    MODEL_NAME  varchar (50)  null,
    MODEL_ID   int null,
    MODEL_SDESC  varchar(50) null,
    MODEL_DESC   varchar(50) null,
    phs_code    varchar(10)  null,
    subp_code    varchar(10)  null,
    MATGROUP_ID   int null,
    MAT_GROUP     varchar(10) null, 
    MAT_GROUP_DESC  varchar(50) null,
    MATERIAL_ID  int null,
    MAT_CODE   varchar(30) null,
    MAT_SHORT_DESC  varchar(50)  null,
	Quantity money null,
	Internal_Est money null,
    HB_ConfirmationPoint_ID int null,
    HB_ScheduleDeliveryPoint_ID int null,
    HB_OrderPoint_ID int null,
    ConfirmationDeadlineDays int null
  )

  insert  #Basemat(RAW_LAND_CD, MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC, 
         MODEL_DESC,phs_code,subp_code,
          MATGROUP_ID, MAT_GROUP, MAT_GROUP_DESC,
         MATERIAL_ID,MAT_CODE, MAT_SHORT_DESC, Quantity, Internal_Est,
		HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, HB_OrderPoint_ID, ConfirmationDeadlineDays   )
  Select  RAW_LAND_CD, MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC, 
         MODEL_DESC,phs_code,subp_code,
          MATGROUP_ID, MAT_GROUP, MAT_GROUP_DESC,
         MATERIAL_ID,MAT_CODE, MAT_SHORT_DESC, Quantity, Internal_Est,
		HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, HB_OrderPoint_ID, ConfirmationDeadlineDays
  from #mat

--Inserts base items for elevations
	insert  #mat(RAW_LAND_CD, MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC, 
         MODEL_DESC,phs_code,subp_code,
          MATGROUP_ID, MAT_GROUP, MAT_GROUP_DESC,
         MATERIAL_ID,MAT_CODE, MAT_SHORT_DESC, Quantity, Internal_Est,
		HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, HB_OrderPoint_ID, ConfirmationDeadlineDays   )
	select  m.RAW_LAND_CD,m.MODEL_NAME_ID, n.MODEL_NAME, m.MODEL_ID,
         m.MODEL_SDESC, m.MODEL_DESC, b.phs_code,  b.subp_code, 
         b.MATGROUP_ID, b.MAT_GROUP,  b.MAT_GROUP_DESC,
         b.MATERIAL_ID,b.MAT_CODE,  b.MAT_SHORT_DESC, b.Quantity,
		 b.Internal_Est, b.HB_ConfirmationPoint_ID, b.HB_ScheduleDeliveryPoint_ID, b.HB_OrderPoint_ID, 
		 b.ConfirmationDeadlineDays  
	from HB_MODEL_NAME  n
	left outer join HB_MODEL m
	on n.MODEL_NAME_ID = m.MODEL_NAME_ID
	left outer join #Basemat b
	on m.MODEL_NAME_ID = b.MODEL_NAME_ID and b.Raw_Land_CD = m.Raw_Land_CD
	where BASE_MODEL = 'N' and m.Raw_Land_CD in (Select Raw_Land_CD from #quote)
	order by m.MODEL_ID

--Updates Elevations with elevation specific changes only

	Update #mat
	Set INTERNAL_EST = em.qty * em.EST_COST, Quantity = em.qty
	--Select *
	From #mat m Left outer join
		 HB_EST_MAT em on em.Model_ID = m.Model_ID and em.Raw_Land_CD = m.Raw_Land_CD and
						  em.phs_code = m.phs_code and em.subp_code = m.subp_code Left Outer Join
		 HB_MODEL hm on hm.Model_ID = m.Model_ID and hm.Model_Name_ID = hm.Model_Name_ID and hm.Raw_Land_CD = m.Raw_Land_CD
	Where hm.BASE_MODEL = 'N' and em.BADC = 'B' and em.EST_COST is not null and em.qty is not null and hm.Raw_Land_CD != -1
		  and em.EstimateLevel = 'E'

--Adds Elevaton addtions from base only

 insert  #mat(RAW_LAND_CD, MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC, 
         MODEL_DESC,phs_code,subp_code,
          MATGROUP_ID, MAT_GROUP, MAT_GROUP_DESC,
         MATERIAL_ID,MAT_CODE, MAT_SHORT_DESC, Quantity, Internal_Est,
		HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, HB_OrderPoint_ID, ConfirmationDeadlineDays   )
 
 select  m.RAW_LAND_CD,m.MODEL_NAME_ID, n.MODEL_NAME, m.MODEL_ID,
         m.MODEL_SDESC, m.MODEL_DESC, p.phs_code,  p.subp_code, 
         mat.MATGROUP_ID, mg.MAT_GROUP,  mg.GROUP_DESC,
         p.MATERIAL_ID,mat.MAT_CODE,  mat.MAT_SHORT_DESC, p.qty,
		 p.qty * p.EST_COST, p.HB_ConfirmationPoint_ID, p.HB_ScheduleDeliveryPoint_ID, p.HB_OrderPoint_ID, 
		 p.ConfirmationDeadlineDays  
 --select *
 from HB_MAT_GROUP mg
 join HB_MATERIAL    mat
 on mg.MATGROUP_ID = mat.MATGROUP_ID
 left outer join  HB_EST_MAT   p
 on mat.MATERIAL_ID  = p.MATERIAL_ID 
 join HB_MODEL m
 on m.MODEL_ID = p.MODEL_ID and m.Raw_Land_CD = p.Raw_Land_CD
 join HB_MODEL_NAME  n
 on n.MODEL_NAME_ID = m.MODEL_NAME_ID
 where m.BASE_MODEL = 'N' and p.BADC = 'A' and p.Model_ID <> -1 and m.Raw_Land_CD in (Select Raw_Land_CD from #quote)
	   and p.EstimateLevel = 'E'

--Remove Elevation specific delets from base model
 Delete #mat
 --Select *
 From #mat m
 inner join HB_EST_MAT p on p.Raw_Land_CD = m.Raw_Land_CD and p.Model_ID = m.Model_ID and m.Material_ID = m.Material_ID
							and p.phs_code = m.phs_code and  p.subp_code = m.subp_code
 join HB_Model hm on hm.Model_Name_ID = m.Model_Name_ID and hm.Model_ID = m.Model_ID 
 Where hm.BASE_MODEL = 'N' and p.BADC = 'D' and hm.Raw_Land_CD <> -1


 insert #result (type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
        MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC, phs_code,subp_code,
      MATGROUP_ID, MAT_GROUP, MAT_GROUP_DESC, MATERIAL_ID,MAT_CODE, MAT_SHORT_DESC, Quanity, INTERNAL_EST,
	  HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, HB_OrderPoint_ID, ConfirmationDeadlineDays )
 select 'M',q.QuoteID,q.LeadID,q.COMMUNITY_CD,q.RAW_LAND_CD,q.PROJECT_CD,q.MODEL_NAME_ID,
        q.MODEL_ID, e.MODEL_NAME,e.MODEL_SDESC ,e.MODEL_DESC,e.phs_code,e.subp_code,
        e.MATGROUP_ID, e.MAT_GROUP, e.MAT_GROUP_DESC, e.MATERIAL_ID,e.MAT_CODE, e.MAT_SHORT_DESC,
		e.Quantity, e.Internal_Est, e.HB_ConfirmationPoint_ID, e.HB_ScheduleDeliveryPoint_ID, e.HB_OrderPoint_ID,
	    e.ConfirmationDeadlineDays
  from #quote  q
 join #mat e
 on  q.MODEL_NAME_ID = e.MODEL_NAME_ID and
  q. MODEL_ID = e. MODEL_ID and q.Raw_Land_CD = e.Raw_Land_CD
 order by q.LeadID, q.COMMUNITY_CD,q.RAW_LAND_CD,q.PROJECT_CD,q.MODEL_NAME_ID,q.MODEL_ID,
          e.phs_code, e.subp_code

----------------------------------Material-------





insert CMS_Contract_Management
              ( type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
               MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC,
               MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,
               MATGROUP_ID, MAT_GROUP, MAT_GROUP_DESC, MATERIAL_ID,MAT_CODE, MAT_SHORT_DESC,BADC,INTERNAL_EST,EXP_DESC,
			   Quanity, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID,Trade_ID)
               select type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
               MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC, 
               MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,
               MATGROUP_ID, MAT_GROUP, MAT_GROUP_DESC, MATERIAL_ID,MAT_CODE, MAT_SHORT_DESC,
               BADC,INTERNAL_EST,EXP_DESC,Quanity, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, Trade_ID
			   from #result 
	       Order By Raw_Land_CD, Model_ID, phs_Code, subp_code



------------- type = Option--------------------

-- declare @str  varchar(1000),@WebDB varchar(20), @TRDB   varchar(50)
-- select @WebDB = 'web_adam',@TRDB  = 'tr_reflex_demo1'
--select @str =' exec  ' + @WebDB  + '..sp_CMS_GetContractInfo_Option ' + ''''+@TRDB+''''   

--print @str
--exec (@str)

-------------------------------------------------


























Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CMS_GetContractInfo_Option]') and xtype = 'P ')  
 drop Procedure sp_CMS_GetContractInfo_Option
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go














CREATE       proc [dbo].[sp_CMS_GetContractInfo_Option]   

@TRDB   varchar(50)

as
 
-- declare @WebDB   varchar(50),@TRDB   varchar(50)
-- select @WebDB = 'web_Realestatebeta', @TRDb = 'TR_KIHOMEBUILDER'



if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#result '))  
drop table #result
create table #result
( 
   Type      varchar(10)   null,  -- 'Model', 'Option', 'Material'
   QuoteID       int null,
   LeadID         int null,
   RAW_LAND_CD    int null,
   COMMUNITY_CD    int null,
   PROJECT_CD    int null,
   MODEL_NAME_ID  int   null,
   MODEL_NAME  varchar (50)  null,
   MODEL_ID   int null,
   MODEL_SDESC  varchar(50) null,
   MODEL_DESC   varchar(50) null,
   RFQC_ID   int null,
   MAJ_GROUP_ID   int null,  
   GROUP_DESC  varchar(50)  null,
   SUB_GROUP_ID   int null,
   SUB_GROUP_DESC   varchar(50),
   OPTION_ID  int null,
   SHORT_DESC     varchar (50) null,
   phs_code    varchar(10)  null,
   subp_code    varchar(10)  null,
   selected    varchar(1)   null,
   MATGROUP_ID   int null,
   MAT_GROUP     varchar(10) null, 
   MAT_GROUP_DESC  varchar(50) null,
   MATERIAL_ID  int null,
   MAT_CODE   varchar(30) null,
   MAT_SHORT_DESC  varchar(50)  null ,
   BADC  varchar(1) null,
   INTERNAL_EST    money null,
   ATTACHED_YN    varchar(1)   null,
   OptionType     varchar(20) null,
   EXP_DESC   text  null,
   is_structural   varchar(5) null,
   CostType        varchar(5) null,
   ParentOptionName varchar(50) null
)
  

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#quote '))  
drop table #quote
create table #quote   --select * from #quote
  (
   QuoteID       int null,
   LeadID         int null,
   RAW_LAND_CD    int null,
   COMMUNITY_CD    int null,
   PROJECT_CD    int null,
   MODEL_NAME_ID  int   null,
   MODEL_ID   int null
 )

 insert #quote (QuoteID,LeadID,RAW_LAND_CD,COMMUNITY_CD,PROJECT_CD,MODEL_NAME_ID,MODEL_ID )
 select ID ,LeadID,HoldingID, CommunityID,ProjectID,ModelNameID,ModelID 
 from scQuote q join Companies c on q.companyID = c.AutoID   
 where  TreasuryDBName =  @TRDB
 and Status = 'S' 
 and ID  not in ( select quoteID from   CMS_Contract_Management where type ='O') 
 --and ID = 2501
--  select * from #quote







if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#resultO '))  
drop table #resultO
create table #resultO
( 
   Type      varchar(10)   null,  -- 'Model', 'Option', 'Material'
   QuoteID       int null,
   LeadID         int null,
   RAW_LAND_CD    int null,
   COMMUNITY_CD    int null,
   PROJECT_CD    int null,
   MODEL_NAME_ID  int   null,
   MODEL_NAME  varchar (50)  null,
   MODEL_ID   int null,
   MODEL_SDESC  varchar(50) null,
   MODEL_DESC   varchar(50) null,
   RFQC_ID   int null,
   MAJ_GROUP_ID   int null,  
   GROUP_DESC  varchar(50)  null,
   SUB_GROUP_ID   int null,
   SUB_GROUP_DESC   varchar(50),
   OPTION_ID  int null,
   SHORT_DESC     varchar (50) null,
   phs_code    varchar(10)  null,
   subp_code    varchar(10)  null,
   selected    varchar(1)   null,
   MATGROUP_ID   int null,
   MAT_GROUP     varchar(10) null, 
   MAT_GROUP_DESC  varchar(50) null,
   MATERIAL_ID  int null,
   MAT_CODE   varchar(30) null,
   MAT_SHORT_DESC  varchar(50)  null ,
   BADC  varchar(1) null,
   INTERNAL_EST    money null,
   ATTACHED_YN    varchar(1),
   OptionType     varchar(20) null,
   EXP_DESC   text  null, 
   is_structural   varchar(5) null,
   CostType   varchar(5) null
)





-- labor

insert #resultO (type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN ,EXP_DESC,   is_structural, CostType )

select  'O',q.QuoteID,q.LeadID,q.COMMUNITY_CD,q.RAW_LAND_CD,q.PROJECT_CD,q.MODEL_NAME_ID,
       q.MODEL_ID, n.MODEL_NAME,m.MODEL_SDESC,m.MODEL_DESC,e.OPTION_ID,SHORT_DESC,
       o.MAJ_GROUP_ID, GROUP_DESC,o.SUB_GROUP_ID, SUB_GROUP_DESC,e.phs_code,
 e.subp_code, e.BADC,e.INTERNAL_EST,ATTACHED_YN,  EXP_DESC , o.is_structural,'L'
 from HB_ELV_OPT   mo      
 left outer join HB_EST  e  
 on e.OPTION_ID = mo.OPTION_ID
  join HB_MODEL m 
 on m.MODEL_ID = mo.MODEL_ID 
  join HB_MODEL_NAME   n 
 on n.MODEL_NAME_ID = m.MODEL_NAME_ID 
  join HB_OPTIONS   o 
 on mo.OPTION_ID = o.OPTION_ID
  join  HB_OPT_SUB_GROUP   s 
 on s.MAJ_GROUP_ID  = o.MAJ_GROUP_ID    
 and s.SUB_GROUP_ID = o.SUB_GROUP_ID 
  join HB_OPT_MAJ_GROUP   mg 
 on mg.MAJ_GROUP_ID  = s.MAJ_GROUP_ID 
  join #quote q 
 on  m.MODEL_NAME_ID = q.MODEL_NAME_ID and 
 mo.MODEL_ID = q.MODEL_ID and /*e.Raw_Land_CD = q.Raw_Land_CD and*/ mo.Raw_Land_CD = q.Raw_Land_CD and m.Raw_Land_CD = q.Raw_Land_CD
 Where mo.ParentID = -1
 order by q.LeadID, q.COMMUNITY_CD,q.RAW_LAND_CD,q.PROJECT_CD,q.MODEL_NAME_ID,q.MODEL_ID, 
        e.phs_code, e.subp_code

--Select *
--from HB_EST  e  
-- left outer join   HB_ELV_OPT   mo      
-- on e.OPTION_ID = mo.OPTION_ID
-- join HB_MODEL m 
-- on m.MODEL_ID = mo.MODEL_ID 
-- join HB_MODEL_NAME   n 
-- on n.MODEL_NAME_ID = m.MODEL_NAME_ID 
-- join HB_OPTIONS   o 
-- on mo.OPTION_ID = o.OPTION_ID
-- join  HB_OPT_SUB_GROUP   s 
-- on s.MAJ_GROUP_ID  = o.MAJ_GROUP_ID    
-- and s.SUB_GROUP_ID = o.SUB_GROUP_ID 
-- join HB_OPT_MAJ_GROUP   mg 
-- on mg.MAJ_GROUP_ID  = s.MAJ_GROUP_ID 
-- join #quote q 
-- on  m.MODEL_NAME_ID = q.MODEL_NAME_ID and 
-- mo.MODEL_ID = q.MODEL_ID and e.Raw_Land_CD = q.Raw_Land_CD and mo.Raw_Land_CD = q.Raw_Land_CD and m.Raw_Land_CD = q.Raw_Land_CD
-- Where mo.ParentID = -1 and e.Option_ID <> -1 and e.Model_ID <> -1
-- order by o.Option_ID, q.LeadID, q.COMMUNITY_CD,q.RAW_LAND_CD,q.PROJECT_CD,q.MODEL_NAME_ID,q.MODEL_ID, 
--        e.phs_code, e.subp_code

-- material( starts)
-- select * from #quote  -- delete  #quote where quoteid = 1295

 
 insert #resultO (type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN ,EXP_DESC,   is_structural, CostType,
      MATERIAL_ID, MATGROUP_ID,MAT_GROUP_DESC,MAT_CODE,MAT_SHORT_DESC   )

    select  'O',q.QuoteID,q.LeadID,q.COMMUNITY_CD,q.RAW_LAND_CD,q.PROJECT_CD,q.MODEL_NAME_ID,
       q.MODEL_ID, n.MODEL_NAME,m.MODEL_SDESC,m.MODEL_DESC,e.OPTION_ID,SHORT_DESC,
       o.MAJ_GROUP_ID, mg.GROUP_DESC,o.SUB_GROUP_ID, SUB_GROUP_DESC,e.phs_code,
e.subp_code, e.BADC,e.EST_Cost,ATTACHED_YN, o.EXP_DESC , o.is_structural,'M', 
e.MATERIAL_ID,mag.MATGROUP_ID,mag.GROUP_DESC,mm.MAT_CODE,mm.MAT_SHORT_DESC
  from HB_ELV_OPT   mo      
 left outer join HB_EST_MAT  e       
 on e.OPTION_ID = mo.OPTION_ID
 join HB_MODEL m 
 on m.MODEL_ID = mo.MODEL_ID 
 join HB_MODEL_NAME   n 
 on n.MODEL_NAME_ID = m.MODEL_NAME_ID 
 join HB_OPTIONS   o 
 on mo.OPTION_ID = o.OPTION_ID
 join  HB_OPT_SUB_GROUP   s 
 on s.MAJ_GROUP_ID  = o.MAJ_GROUP_ID    
 and s.SUB_GROUP_ID = o.SUB_GROUP_ID 
 join HB_OPT_MAJ_GROUP   mg 
 on mg.MAJ_GROUP_ID  = s.MAJ_GROUP_ID 
 join #quote q 
 on  m.MODEL_NAME_ID = q.MODEL_NAME_ID and 
 mo.MODEL_ID = q.MODEL_ID and /*e.Raw_Land_CD = q.Raw_Land_CD and*/ mo.Raw_Land_CD = q.Raw_Land_CD and m.Raw_Land_CD = q.Raw_Land_CD
   join HB_MATERIAL mm
    on e.MATERIAL_ID = mm.MATERIAL_ID
join HB_MAT_GROUP   mag
on mm.MATGROUP_ID = mag.MATGROUP_ID 
 where mo.ParentID = -1
 order by q.LeadID, q.COMMUNITY_CD,q.RAW_LAND_CD,q.PROJECT_CD,q.MODEL_NAME_ID,q.MODEL_ID, 
        e.phs_code, e.subp_code 

--  select * from #resultO where costtype = 'm'

-- select * from #resultO
              


-- material(ends)

------------------------------------------------

-- select * from #resultO
-- select * from #result   -- delete #result

------------------------------------------------
--- 1.attached

-- Standard Option
insert #result (type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN ,OptionType,EXP_DESC,is_structural, CostType,ParentOptionName)

-- Labour
select type,ro.QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,ro.OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN , 'Attached',EXP_DESC,ro.is_structural,'L',
Case When qo.ParentID <> -1 Then (Select SHORT_DESC from HB_Options Where Option_ID = (Select Option_ID from HB_Elv_Opt Where ID = qo.ParentID) and ParentID = -1)
     Else 'Home Option' End
from #resultO   ro
inner join scQuoteOptions    qo  -- select * from  web_Realestatebeta..scQuoteOption where quoteid = 1227
on    ro.QuoteID = qo.QuoteID 
and   ro. MAJ_GROUP_ID =  qo.Major_ID 
and ro.SUB_GROUP_ID =qo.Sub_ID
and  ro. OPTION_ID = qo.OriginalOption_ID
and  ro. OPTION_ID = qo.Option_ID
where ro.ATTACHED_YN = 'Y' and qo.Alternate = 'No'
and isnull(ro.is_structural,'') = 'N'
and isnull(ro.CostType,'') = 'L'
order by  ro.QuoteID,GROUP_DESC ,SUB_GROUP_DESC,SHORT_DESC
select * from #resultO
-- Material
insert #result (type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN ,OptionType,EXP_DESC,is_structural, CostType, ParentOptionName)

select type,ro.QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,ro.OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN , 'Attached',EXP_DESC,ro.is_structural,'M',
Case When qo.ParentID <> -1 Then (Select SHORT_DESC from HB_Options Where Option_ID = (Select Option_ID from HB_Elv_Opt Where ID = qo.ParentID) and ParentID = -1)
     Else 'Home Option' End 
from #resultO   ro
join scQuoteOptions    qo  -- select * from  web_Realestatebeta..scQuoteOption where quoteid = 1227
on    ro.QuoteID = qo.QuoteID 
and   ro. MAJ_GROUP_ID =  qo.Major_ID 
and ro.SUB_GROUP_ID =qo.Sub_ID
and  ro. OPTION_ID = qo.OriginalOption_ID
and  ro. OPTION_ID = qo.Option_ID
where ATTACHED_YN = 'Y'
and isnull(ro.is_structural,'') = 'N'
and isnull(ro.CostType,'') = 'L'
order by  ro.QuoteID,GROUP_DESC ,SUB_GROUP_DESC,SHORT_DESC


--  Structural Option
insert #result (type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN ,OptionType,EXP_DESC,is_structural, CostType, ParentOptionName)

-- Labor
select type,ro.QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,ro.OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN , 'Attached',EXP_DESC,ro.is_structural,'L',
Case When qo.ParentID <> -1 Then (Select SHORT_DESC from HB_Options Where Option_ID = (Select Option_ID from HB_Elv_Opt Where ID = qo.ParentID) and ParentID = -1)
     Else 'Home Option' End  
from #resultO   ro
join scQuoteOptions    qo  -- select * from  web_Realestatebeta..scQuoteOption where quoteid = 1227
on    ro.QuoteID = qo.QuoteID 
and   ro. MAJ_GROUP_ID =  qo.Major_ID 
and ro.SUB_GROUP_ID =qo.Sub_ID
and  ro. OPTION_ID = qo.OriginalOption_ID
and  ro. OPTION_ID = qo.Option_ID
where ATTACHED_YN = 'Y'
and isnull(ro.is_structural,'') = 'Y'
and isnull(ro.CostType,'') = 'L'
order by  ro.QuoteID,GROUP_DESC ,SUB_GROUP_DESC,SHORT_DESC


-- Material

insert #result (type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN ,OptionType,EXP_DESC,is_structural, CostType,
       MATERIAL_ID, MATGROUP_ID,MAT_GROUP_DESC,MAT_CODE,MAT_SHORT_DESC, ParentOptionName)


select type,ro.QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,ro.OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN , 'Attached',EXP_DESC,ro.is_structural,'M' ,
     MATERIAL_ID, MATGROUP_ID,MAT_GROUP_DESC,MAT_CODE,MAT_SHORT_DESC,
Case When qo.ParentID <> -1 Then (Select SHORT_DESC from HB_Options Where Option_ID = (Select Option_ID from HB_Elv_Opt Where ID = qo.ParentID) and ParentID = -1)
     Else 'Home Option' End  
from #resultO   ro
join scQuoteOptions    qo  -- select * from  web_Realestatebeta..scQuoteOption where quoteid = 1227
on    ro.QuoteID = qo.QuoteID 
and   ro. MAJ_GROUP_ID =  qo.Major_ID 
and ro.SUB_GROUP_ID =qo.Sub_ID
and  ro. OPTION_ID = qo.OriginalOption_ID
and  ro. OPTION_ID = qo.Option_ID
where ATTACHED_YN = 'Y'
and isnull(ro.is_structural,'') = 'Y'
and isnull(ro.CostType,'') = 'M'
order by  ro.QuoteID,GROUP_DESC ,SUB_GROUP_DESC,SHORT_DESC



-- 2.Alternates
-- Standard Option
-- Labor
insert #result (type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN ,OptionType,EXP_DESC,is_structural, CostType, ParentOptionName)
select type,ro.QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,ro.OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN , 'Alternates',EXP_DESC,ro.is_structural, 'L',
Case When qo.ParentID <> -1 Then (Select SHORT_DESC from HB_Options Where Option_ID = (Select Option_ID from HB_Elv_Opt Where ID = qo.ParentID) and ParentID = -1)
     Else 'Home Option' End 
from #resultO   ro
join scQuoteOptions    qo  -- select * from  scQuoteOption where quoteid = 1227 and option_id = 76
on    ro.QuoteID = qo.QuoteID 
and   ro. MAJ_GROUP_ID =  qo.Major_ID 
and ro.SUB_GROUP_ID =qo.Sub_ID
and  ro. OPTION_ID = qo.Option_ID
where qo.OriginalOption_ID <> qo.Option_ID and qo.Option_ID <> -1 and qo.Alternate = 'Yes'
and isnull(ro.is_structural,'') = 'N'
and isnull(ro.CostType,'') = 'L'
order by  GROUP_DESC ,SUB_GROUP_DESC,SHORT_DESC

-- Material
insert #result (type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN ,OptionType,EXP_DESC,is_structural, CostType, ParentOptionName)
select type,ro.QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,ro.OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN , 'Alternates',EXP_DESC,ro.is_structural, 'M',
Case When qo.ParentID <> -1 Then (Select SHORT_DESC from HB_Options Where Option_ID = (Select Option_ID from HB_Elv_Opt Where ID = qo.ParentID) and ParentID = -1)
     Else 'Home Option' End 
from #resultO   ro
join scQuoteOptions    qo  -- select * from  scQuoteOption where quoteid = 1227 and option_id = 76
on    ro.QuoteID = qo.QuoteID 
and   ro. MAJ_GROUP_ID =  qo.Major_ID 
and ro.SUB_GROUP_ID =qo.Sub_ID
and  ro. OPTION_ID = qo.Option_ID
where qo.OriginalOption_ID <> qo.Option_ID and qo.Option_ID <> -1 and qo.Alternate = 'Yes'
and isnull(ro.is_structural,'') = 'N'
and isnull(ro.CostType,'') = 'L'
order by  GROUP_DESC ,SUB_GROUP_DESC,SHORT_DESC


-- Stuctural Option
-- Labor
insert #result (type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN ,OptionType,EXP_DESC,is_structural, CostType, ParentOptionName)
select type,ro.QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,ro.OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN , 'Alternates',EXP_DESC,ro.is_structural, 'L',
Case When qo.ParentID <> -1 Then (Select SHORT_DESC from HB_Options Where Option_ID = (Select Option_ID from HB_Elv_Opt Where ID = qo.ParentID) and ParentID = -1)
     Else 'Home Option' End 
from #resultO   ro
join scQuoteOptions    qo  -- select * from  scQuoteOption where quoteid = 1227 and option_id = 76
on    ro.QuoteID = qo.QuoteID 
and   ro. MAJ_GROUP_ID =  qo.Major_ID 
and ro.SUB_GROUP_ID =qo.Sub_ID
and  ro. OPTION_ID = qo.Option_ID
where qo.OriginalOption_ID <> qo.Option_ID and qo.Option_ID <> -1 and qo.Alternate = 'Yes'
and isnull(ro.is_structural,'') = 'Y'
and isnull(ro.CostType,'') = 'L'
order by  GROUP_DESC ,SUB_GROUP_DESC,SHORT_DESC

-- material 
insert #result (type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN ,OptionType,EXP_DESC,is_structural, CostType,
      MATERIAL_ID, MATGROUP_ID,MAT_GROUP_DESC,MAT_CODE,MAT_SHORT_DESC, ParentOptionName)
select type,ro.QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,ro.OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN , 'Alternates',EXP_DESC,ro.is_structural, 'M',
     MATERIAL_ID, MATGROUP_ID,MAT_GROUP_DESC,MAT_CODE,MAT_SHORT_DESC,
Case When qo.ParentID <> -1 Then (Select SHORT_DESC from HB_Options Where Option_ID = (Select Option_ID from HB_Elv_Opt Where ID = qo.ParentID) and ParentID = -1)
     Else 'Home Option' End 
from #resultO   ro
join scQuoteOptions    qo  -- select * from  scQuoteOption where quoteid = 1227 and option_id = 76
on    ro.QuoteID = qo.QuoteID 
and   ro. MAJ_GROUP_ID =  qo.Major_ID 
and ro.SUB_GROUP_ID =qo.Sub_ID
and  ro. OPTION_ID = qo.Option_ID
where qo.OriginalOption_ID <> qo.Option_ID and qo.Option_ID <> -1 and qo.Alternate = 'Yes'
and isnull(ro.is_structural,'') = 'Y'
and isnull(ro.CostType,'') = 'M'
order by  GROUP_DESC ,SUB_GROUP_DESC,SHORT_DESC

-- 3.upgrade (only standard option)

--Labor
insert #result (type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN ,OptionType,EXP_DESC,is_structural, CostType, ParentOptionName)
select type,r.QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,r.OPTION_ID,r.SHORT_DESC,
     r.MAJ_GROUP_ID, GROUP_DESC,r.SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN ,'Upgrades',r.EXP_DESC,r.is_structural,'L',
Case When u.ParentID <> -1 Then (Select SHORT_DESC from HB_Options Where Option_ID = (Select Option_ID from HB_Elv_Opt Where ID = u.ParentID) and ParentID = -1)
     Else 'Home Option' End 
-- select distinct OPTION_ID
from #resultO r  
 join scQuoteOptions u     --  select * from  scQuoteUpgrade where quoteid = 1295
on r.QuoteID  = u.QuoteID and  r.OPTION_ID  = u.Option_ID 
where isnull(r.CostType,'') = 'L' and u.OriginalOption_ID <> u.Option_ID and u.Option_ID <> -1 and u.Alternate = 'No'
order by r.QuoteID ,GROUP_DESC, SUB_GROUP_DESC, r.SHORT_DESC 

--Material 

insert #result (type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN ,OptionType,EXP_DESC,is_structural, CostType, ParentOptionName)
select type,r.QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,r.OPTION_ID,r.SHORT_DESC,
     r.MAJ_GROUP_ID, GROUP_DESC,r.SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN ,'Upgrades',r.EXP_DESC,r.is_structural,'M',
Case When u.ParentID <> -1 Then (Select SHORT_DESC from HB_Options Where Option_ID = (Select Option_ID from HB_Elv_Opt Where ID = u.ParentID) and ParentID = -1)
     Else 'Home Option' End 
from #resultO r  
 join scQuoteOptions u     --  select * from  scQuoteUpgrade where quoteid = 1227
on r.QuoteID  = u.QuoteID 
and  r.OPTION_ID  = u.Option_ID 
where isnull(r.CostType,'') = 'L' and u.OriginalOption_ID <> u.Option_ID and u.Option_ID <> -1 and u.Alternate = 'No'
order by r.QuoteID ,GROUP_DESC, SUB_GROUP_DESC, r.SHORT_DESC 


-- 4.structural ( only Structural option)

-- Labor 
insert #result (type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN ,OptionType,EXP_DESC,is_structural,CostType, ParentOptionName)
select type,ro.QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,ro.OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN , 'Upgrades',EXP_DESC,ro.is_structural, 'L',
Case When s.ParentID <> -1 Then (Select SHORT_DESC from HB_Options Where Option_ID = (Select Option_ID from HB_Elv_Opt Where ID = s.ParentID) and ParentID = -1)
     Else 'Home Option' End 
from #resultO   ro
join scQuoteOptions  s  -- select * from scQuoteStructural where quoteid = 1295
on  ro.QuoteID =s.QuoteID   
 and  ro.OPTION_ID =s.Option_ID
 and  ro.MAJ_GROUP_ID = s.Major_ID 
 and   ro. SUB_GROUP_ID= s.Sub_ID 
where isnull(ro.CostType,'') = 'L' and s.OriginalOption_ID <> s.Option_ID and s.Option_ID <> -1 and s.Alternate = 'No'
and isStructural = 'Y'


-- material 

insert #result (type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN ,OptionType,EXP_DESC,is_structural,CostType,
     MATERIAL_ID, MATGROUP_ID,MAT_GROUP_DESC,MAT_CODE,MAT_SHORT_DESC, ParentOptionName )
select type,ro.QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,ro.OPTION_ID,SHORT_DESC,
     MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,BADC,INTERNAL_EST,
    ATTACHED_YN , 'Upgrades',EXP_DESC,ro.is_structural, 'M',
      MATERIAL_ID, MATGROUP_ID,MAT_GROUP_DESC,MAT_CODE,MAT_SHORT_DESC,
Case When s.ParentID <> -1 Then (Select SHORT_DESC from HB_Options Where Option_ID = (Select Option_ID from HB_Elv_Opt Where ID = s.ParentID) and ParentID = -1)
     Else 'Home Option' End  
from #resultO   ro
join scQuoteOptions  s  -- select * from scQuoteStructural where quoteid = 1295
on  ro.QuoteID =s.QuoteID   
 and  ro.OPTION_ID =s.Option_ID
 and  ro.MAJ_GROUP_ID = s.Major_ID 
 and   ro. SUB_GROUP_ID= s.Sub_ID 
where isnull(ro.CostType,'') = 'M' and s.OriginalOption_ID <> s.Option_ID and s.Option_ID <> -1 and s.Alternate = 'No'
and isStructural = 'Y'




-- select * from scQuoteUpgrade where quoteid = 1227

--select is_structural,costtype,optiontype,type,short_desc,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
--               MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC, 
--               MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,
--               MATGROUP_ID, MAT_GROUP, MAT_GROUP_DESC, MATERIAL_ID,MAT_CODE, MAT_SHORT_DESC,
--               BADC,INTERNAL_EST,ATTACHED_YN,OptionType,EXP_DESC , is_structural, costtype, ParentOptionName
--from #result
--
--order by is_structural,optiontype,costtype,QuoteID,GROUP_DESC,SUB_GROUP_DESC,phs_code


-- attribites
--1.attached (attribites)
             

insert CMS_Contract_Management_Attr   -- select * from CMS_Contract_Management_Attr where quoteid = 1227
 (MODEL_ID, MAJOR_ID,SUB_ID, OPTION_ID, Attr_ID, QuoteID, Des, OATYP_ID, OATYP_DESC   )
    

 select qa.MODEL_ID, qa.MAJOR_ID,qa.SUB_ID, qa.OPTION_ID, qa.Attr_ID, 
   qa.QuoteID,qa.Des, qa.OATYP_ID, OATYP_DESC
  from scAttributes   qa  
join scQuoteOptions    qo  
on    qa.QuoteID = qo.QuoteID 
and   qa. MAJOR_ID =  qo.Major_ID 
and qa.SUB_ID =qo.Sub_ID
and  qa.OPTION_ID = qo.ID
join #quote  q
on qa.quoteid = q.quoteid
and qa.model_id = q.model_id   
left outer join  HB_OPT_ATTR_OVALUES  ao
on   qa.Attr_ID =  ao.OATVAL_ID
and   qa. OPTION_ID= ao.OPTION_ID
left outer join HB_OPT_ATTR_TYPE   att
on   ao.OATYP_ID = att.OATYP_ID
Where qo.Option_ID = qo.OriginalOption_ID and qo.isStructural = 'N'
order by  q.quoteid 


-- 2. Alternates(attribites)
            
insert CMS_Contract_Management_Attr 
 (MODEL_ID, MAJOR_ID,SUB_ID, OPTION_ID, Attr_ID, QuoteID, Des, OATYP_ID, OATYP_DESC   )


select qa.MODEL_ID, qa.MAJOR_ID,qa.SUB_ID, qa.OPTION_ID, qa.Attr_ID, 
   qa.QuoteID,qa.Des, qa.OATYP_ID, OATYP_DESC
 from scAttributes   qa  
join scQuoteOptions    qo  
on    qa.QuoteID = qo.QuoteID 
and   qa. MAJOR_ID =  qo.Major_ID 
and qa.SUB_ID =qo.Sub_ID
and  qa.OPTION_ID = qo.ID
join #quote  q
on qa.quoteid = q.quoteid
and qa.model_id = q.model_id   
left outer join HB_OPT_ATTR_OVALUES  ao
on   qa.Attr_ID =  ao.OATVAL_ID
and   qa. OPTION_ID= ao.OPTION_ID
left outer join HB_OPT_ATTR_TYPE   att
on   ao.OATYP_ID = att.OATYP_ID
where qo.OriginalOption_ID <> qo.Option_ID and qo.Alternate = 'Yes' and qo.isStructural = 'N'

--select * from CMS_Contract_Management_Attr  where quoteid = 891 and option_id = 78

-- 3.upgrades (attribites)

      

insert CMS_Contract_Management_Attr 
 (MODEL_ID, MAJOR_ID,SUB_ID, OPTION_ID, Attr_ID, QuoteID, Des, OATYP_ID, OATYP_DESC   )

 select qa.MODEL_ID, qa.MAJOR_ID,qa.SUB_ID, qa.OPTION_ID, qa.Attr_ID, 
   qa.QuoteID,qa.Des, qa.OATYP_ID, OATYP_DESC
 from scAttributes   qa  
join #quote  q
on qa.quoteid = q.quoteid
and qa.model_id = q.model_id   
 join scQuoteOptions u   
on qa.QuoteID  = u.QuoteID 
and  qa.OPTION_ID  = u.ID 
left outer join HB_OPT_ATTR_OVALUES  ao
on   qa.Attr_ID =  ao.OATVAL_ID
and   qa. OPTION_ID= ao.OPTION_ID
left outer join HB_OPT_ATTR_TYPE   att
on   ao.OATYP_ID = att.OATYP_ID 
where u.OriginalOption_ID <> u.Option_ID and u.Alternate = 'No' and u.isStructural = 'N'
                                                                                                                        


-- 4. Structural (attribites)


insert CMS_Contract_Management_Attr 
 (MODEL_ID, MAJOR_ID,SUB_ID, OPTION_ID, Attr_ID, QuoteID, Des, OATYP_ID, OATYP_DESC   )


select  q.model_id,s.Major_ID,s.Sub_ID,s.Option_ID,Attr_ID,s.QuoteID,qa.Des, qa.OATYP_ID, OATYP_DESC from scAttributes   qa  
join #quote  q
on qa.quoteid = q.quoteid
and qa.model_id = q.model_id   
 join scQuoteOptions  s 
on qa.QuoteID = s.QuoteID
and qa.MAJOR_ID = s.Major_ID
and qa. SUB_ID = s.Sub_ID
and qa.OPTION_ID = s.Option_ID 
left outer join HB_OPT_ATTR_OVALUES  ao
on   qa.Attr_ID =  ao.OATVAL_ID
and   qa. OPTION_ID= ao.OPTION_ID
left outer join HB_OPT_ATTR_TYPE   att
on   ao.OATYP_ID = att.OATYP_ID
where s.isStructural = 'Y'
order by q.quoteid 





              insert CMS_Contract_Management 
              ( type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
               MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC,
               MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,
               MATGROUP_ID, MAT_GROUP, MAT_GROUP_DESC, MATERIAL_ID,MAT_CODE, MAT_SHORT_DESC,BADC,INTERNAL_EST,ATTACHED_YN,
              OptionType ,EXP_DESC, is_structural, CostType,ParentOptionName)
               select type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
               MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC, 
               MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,
               MATGROUP_ID, MAT_GROUP, MAT_GROUP_DESC, MATERIAL_ID,MAT_CODE, MAT_SHORT_DESC,
               BADC,INTERNAL_EST,ATTACHED_YN,OptionType,EXP_DESC,is_structural, CostType,ParentOptionName
                from #result 



-- select * from CMS_Contract_Management
-- delete from CMS_Contract_Management 
-- where cms_ID >=16690 and quoteid = 1227 and type = 'O'


--------------update attributes description------------------------------

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#quoteO '))  
drop table #quoteO
create table #quoteO   --select * from #quoteO
  (
   CMS_ID        int null,
   QuoteID       int null,
   MODEL_ID        int null,
   MAJ_GROUP_ID    int null,
   SUB_GROUP_ID   int null,
   OPTION_ID    int null,
   des           varchar(300) null
 )

insert #quoteO (CMS_ID, QuoteID,MODEL_ID,MAJ_GROUP_ID,SUB_GROUP_ID, OPTION_ID, des)
select  CMS_ID,q.QuoteID,m.MODEL_ID,MAJ_GROUP_ID,SUB_GROUP_ID, OPTION_ID, des
-- select *
from CMS_Contract_Management   m
join #Quote  q
on m.QuoteID = q.QuoteID
where type ='O' 


declare @QuoteID int,@MODEL_ID int,@MAJ_GROUP_ID int, @SUB_GROUP_ID int, @OPTION_ID int,
        @OATYP_ID int,   @des    varchar(300),@desTemp    varchar(300)


declare aQuoteCursor cursor for 

  
 select  QuoteID,MODEL_ID,MAJ_GROUP_ID , SUB_GROUP_ID, OPTION_ID
-- select *
  from #quoteO

open aQuoteCursor
fetch next from aQuoteCursor into @QuoteID,@MODEL_ID,@MAJ_GROUP_ID, @SUB_GROUP_ID, @OPTION_ID
  
while @@FETCH_STATUS = 0
begin
       
        select     @des = ''
        declare aTypeCursor cursor for 

        select QuoteID,MODEL_ID,MAJOR_ID,SUB_ID,OPTION_ID, OATYP_ID
         -- select *
        from CMS_Contract_Management_attr
        where QuoteID  = @QuoteID
        and MODEL_ID = @MODEL_ID
        and MAJOR_ID = @MAJ_GROUP_ID
        and  SUB_ID  = @SUB_GROUP_ID
        and OPTION_ID = @OPTION_ID
      

	
	open aTypeCursor
	fetch next from aTypeCursor into @QuoteID,@MODEL_ID,@MAJ_GROUP_ID, @SUB_GROUP_ID, @OPTION_ID,@OATYP_ID
	  
	while @@FETCH_STATUS = 0
	begin
	       
	
	     select @desTemp = isnull(OATYP_DESC,'') + ':' + isnull(DES,'')
	     --select OATYP_DESC,DES
	     from CMS_Contract_Management_attr
	     where QuoteID  = @QuoteID 
	     and MODEL_ID = @MODEL_ID
	     and MAJOR_ID = @MAJ_GROUP_ID
	     and  SUB_ID  = @SUB_GROUP_ID
	     and OPTION_ID = @OPTION_ID
             and  OATYP_ID =@OATYP_ID
	    
	     if @desTemp <> ''  
	      select @des = @des + ' ' + @desTemp
	  
	    
	     
	      fetch next from aTypeCursor into @QuoteID,@MODEL_ID,@MAJ_GROUP_ID, @SUB_GROUP_ID, @OPTION_ID,@OATYP_ID
	end
	
	close aTypeCursor
	deallocate aTypeCursor       
        
         -- update des here
       
      
        if isnull(@des,'') <> ''
        begin
          --  select  @QuoteID '@QuoteID',@MODEL_ID '@MODEL_ID',@MAJ_GROUP_ID '@MAJ_GROUP_ID',
	  --    @SUB_GROUP_ID ' @SUB_GROUP_ID', @OPTION_ID '@OPTION_ID '
             select @des   'description'
            update CMS_Contract_Management
            set des = @des
            where type = 'O'
             and QuoteID  = @QuoteID
            and MODEL_ID = @MODEL_ID
            and MAJ_GROUP_ID  = @MAJ_GROUP_ID
            and SUB_GROUP_ID = @SUB_GROUP_ID
             and OPTION_ID = @OPTION_ID
        end
        ---------------------
        

      fetch next from aQuoteCursor into @QuoteID,@MODEL_ID,@MAJ_GROUP_ID, @SUB_GROUP_ID, @OPTION_ID
end

close aQuoteCursor
deallocate aQuoteCursor



















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CMS_GetSysID]') and xtype = 'P ')  
 drop Procedure sp_CMS_GetSysID
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go






















CREATE         proc sp_CMS_GetSysID    
--declare
@TR_DB   varchar(20),
@IDName   varchar(50),
@SysID int  output


as

--set @IDName = 'NEXT_PROJECT_ID'
--set @TR_DB = 'Tr_Alco'

declare 
        @NextID   int,
        @count     int,
        @str      varchar(500)
        
 
 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#tbl'))  
          drop table #tbl
          create table #tbl
              ( 
                iCount   int  ,
                iID      int
              )

 
set @str =  ' select count(*) from ' + @TR_DB + '.. SYSTEM_IDS' +
         ' where ID_NAME = ' + ''''+@IDName+''''  

delete #tbl 
insert #tbl (iCount)
exec (@str)

select @count= isnull(icount,0) from #tbl

if  @count = 0
begin
    set @str = ''
    set @str = 'insert ' + @TR_DB + '..SYSTEM_IDS (ID_NAME,ID )' +
               'select' + ''''+@IDName+'''' + ', 1 '

    exec (@str)
end

set @str = ''
set @str = ' select  ID from ' + @TR_DB + '.. SYSTEM_IDS' +
           ' where ID_NAME = ' + ''''+@IDName+''''

delete #tbl
insert #tbl (iID)
exec (@str)

select @nextID = iID from #tbl

set @str = ''                
set @str = ' update ' + @TR_DB + '.. SYSTEM_IDS' +
           ' set ID = ' + convert(varchar(20), @nextID ) + '+ 1 ' +
           ' where ID_NAME = ' + ''''+@IDName+''''



exec(@str)


select @SysID = iID from #tbl



-- select  ID from Tr_Alco..SYSTEM_IDS where ID_NAME = 'NEXT_PROJECT_ID'

  























Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CMS_GetTempCustomer]') and xtype = 'P ')  
 drop Procedure sp_CMS_GetTempCustomer
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go











CREATE      proc sp_CMS_GetTempCustomer

        @LeadID   varchar(20)  ,
        @username  varchar(40),
        @trDB     varchar(40)

as

-- declare
-- @LeadID   varchar(20)  ,
--         @username  varchar(40),
--         @trDB     varchar(40)
-- 
-- select @leadID   = 1015,@username = 'ying', @trDB = 'TR_adam'



delete CMS_TEMP_CUSTOMERS
where username = @username

declare @customerID  int
declare @s   varchar(800)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#cust'))  
    drop table #cust 
    create table #cust
      ( customer_id  int  null )   

select @s = 'select customer_id from ' + @trDB + '..customers where leadid = ' +  @leadID


insert  #cust (customer_id)
exec (@s)

select  @customerID = isnull(customer_id,0)
from #cust 

select @customerid = isnull(@customerid,0)


if @customerid = 0
begin

    select @s= ' insert CMS_TEMP_CUSTOMERS (CUSTOMER_ID,CUSTOMER_CODE,NAME,username, exist)
            select CUSTOMER_ID, CUSTOMER_CODE, NAME, ' + ''''+@username+''''+ ',' + '''T''' +
           ' from  ' + @trDB + '..customers
              union
             select l.ID[CUSTOMER_ID], ''not set''[CUSTOMER_CODE],' + 'convert (varchar(40),KnownAs)' + ', ' +
            ''''+@username+''''  + ',' + '''F''' + ' from scLead l ' + 
            ' join contact c on l.Contact_ID = c.ID  ' +
            ' where l.ID  = ' + @leadid

     exec(@s)
end
else
begin
    print 'exist'
    select @s= ' insert CMS_TEMP_CUSTOMERS (CUSTOMER_ID,CUSTOMER_CODE,NAME,username,exist)
            select CUSTOMER_ID, CUSTOMER_CODE, NAME, ' + ''''+@username+''''+ ',' + '''T''' +
           ' from  ' + @trDB + '..customers'
             

     exec(@s)
   
end



select * from CMS_TEMP_CUSTOMERS
















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CMS_InsertToNotification]') and xtype = 'P ')  
 drop Procedure sp_CMS_InsertToNotification
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE                          proc [dbo].[sp_CMS_InsertToNotification]

@QuoterID    int,
@username   varchar(50),
@TRDb         varchar(30) ,
@type   varchar(10)   -- 'N'-- Notification; 'PO' -- Creating PO



as

----=================
if @type = 'PO' -- creating PO' not PO notification
begin
   --print 'for creating PO'
    	insert CMS_Notification (Type,CMS_ID,CMSS_ID,QuoteID, LeadID, HoldingID,CommunityID,ProjectID,LotID,
	       ModelID, ModelNameID, MAJ_GROUP_ID, GROUP_DESC, SUB_GROUP_ID, SUB_GROUP_DESC,
	 OPTION_ID, SHORT_DESC,phs_code, subp_code, SUPPLIER, StartDate,username,
         RFQ_EST,RFQC_ID,pri_num, des, SendPO, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID)
	
	SELECT m.Type,m.CMS_ID, s.CMSS_ID,q.ID, q.LeadID, q.HoldingID, q.CommunityID, q.ProjectID, q.LotID, q.ModelID,
	 q.ModelNameID, m.MAJ_GROUP_ID, m.GROUP_DESC, m.SUB_GROUP_ID,m.SUB_GROUP_DESC,
	 m.OPTION_ID,m.SHORT_DESC, m.phs_code,m.subp_code,s.SUPPLIER, s.Start_Date, @username,
         s.RFQ_EST,s.RFQC_ID,q.pri_num, isnull(convert(varchar(300), EXP_DESC),'') + 
  case when  isnull(Des,'') <> '' then '-' + Des else isnull(des,'') end, 0,
  m.HB_OrderPoint_ID, m.HB_ConfirmationPoint_ID, m.HB_ScheduleDeliveryPoint_ID
	 FROM CMS_Contract_Management m 
	LEFT OUTER JOIN CMS_Contract_Management_Supp s 
	ON m.CMS_ID = s.CMS_ID LEFT OUTER JOIN scQuote q ON m.QuoteID = q.ID
	WHERE m.QuoteID  = @QuoterID
	and isnull(Supplier,'') <> ''
	and isnull(PO,'') = ''
        and isnull(deselected,'') = 'F'
end
else
begin
--  Initial Contact

     insert CMS_Notification (Type,CMS_ID,CMSS_ID,QuoteID, LeadID, HoldingID,CommunityID,ProjectID,LotID,
       ModelID, ModelNameID, MAJ_GROUP_ID, GROUP_DESC, SUB_GROUP_ID, SUB_GROUP_DESC,
     OPTION_ID, SHORT_DESC,phs_code, subp_code, SUPPLIER, StartDate,username, 
     NotifyingType,Notification_Notes,RFQ_Method )

     SELECT m.Type,m.CMS_ID, s.CMSS_ID,q.ID, q.LeadID, q.HoldingID, q.CommunityID, q.ProjectID, q.LotID, q.ModelID,
     q.ModelNameID, m.MAJ_GROUP_ID, m.GROUP_DESC, m.SUB_GROUP_ID,m.SUB_GROUP_DESC,
     m.OPTION_ID,m.SHORT_DESC, m.phs_code,m.subp_code,s.SUPPLIER, s.Start_Date, @username, 
     'I',Notification_Notes,RFQ_Method
    
     FROM CMS_Contract_Management m 
     LEFT OUTER JOIN CMS_Contract_Management_Supp s 
     ON m.CMS_ID = s.CMS_ID LEFT OUTER JOIN scQuote q ON m.QuoteID = q.ID
     WHERE m.QuoteID  =  @QuoterID
     and isnull(Supplier,'') <> ''
     and isnull(initialContact,'') = 'F'
     and isnull(notified,'') = 'F'
     and isnull(deselected,'') = 'F'
     and isnull(PO_ID,0) = 0
-- Deselection

     insert CMS_Notification (Type,CMS_ID,CMSS_ID,QuoteID, LeadID, HoldingID,CommunityID,ProjectID,LotID,
       ModelID, ModelNameID, MAJ_GROUP_ID, GROUP_DESC, SUB_GROUP_ID, SUB_GROUP_DESC,
     OPTION_ID, SHORT_DESC,phs_code, subp_code, SUPPLIER,  StartDate,username, 
     NotifyingType,Notification_Notes,RFQ_Method )

     SELECT m.Type,m.CMS_ID, s.CMSS_ID,q.ID, q.LeadID, q.HoldingID, q.CommunityID, q.ProjectID, q.LotID, q.ModelID,
     q.ModelNameID, m.MAJ_GROUP_ID, m.GROUP_DESC, m.SUB_GROUP_ID,m.SUB_GROUP_DESC,
     m.OPTION_ID,m.SHORT_DESC, m.phs_code,m.subp_code,s.SUPPLIER,  s.Start_Date, @username, 
     'D',Notification_Notes,RFQ_Method
    
     FROM CMS_Contract_Management m 
     LEFT OUTER JOIN CMS_Contract_Management_Supp s 
     ON m.CMS_ID = s.CMS_ID LEFT OUTER JOIN scQuote q ON m.QuoteID = q.ID
     WHERE m.QuoteID  =  @QuoterID
     and isnull(Supplier,'') <> ''
     and isnull(initialContact,'') = 'T'
     and isnull(notified,'') = 'F'
     and isnull(deselected,'') = 'T'
     and isnull(PO_ID,0) = 0

-- Schedule change

     insert CMS_Notification (Type,CMS_ID,CMSS_ID,QuoteID, LeadID, HoldingID,CommunityID,ProjectID,LotID,
       ModelID, ModelNameID, MAJ_GROUP_ID, GROUP_DESC, SUB_GROUP_ID, SUB_GROUP_DESC,
     OPTION_ID, SHORT_DESC,phs_code, subp_code, SUPPLIER,  StartDate,username, 
     NotifyingType,Notification_Notes,RFQ_Method )

     SELECT m.Type,m.CMS_ID, s.CMSS_ID,q.ID, q.LeadID, q.HoldingID, q.CommunityID, q.ProjectID, q.LotID, q.ModelID,
     q.ModelNameID, m.MAJ_GROUP_ID, m.GROUP_DESC, m.SUB_GROUP_ID,m.SUB_GROUP_DESC,
     m.OPTION_ID,m.SHORT_DESC, m.phs_code,m.subp_code,s.SUPPLIER,  s.Start_Date, @username, 
     'S',Notification_Notes,RFQ_Method
    
     FROM CMS_Contract_Management m 
     LEFT OUTER JOIN CMS_Contract_Management_Supp s 
     ON m.CMS_ID = s.CMS_ID LEFT OUTER JOIN scQuote q ON m.QuoteID = q.ID
     WHERE m.QuoteID  =  @QuoterID
     and isnull(Supplier,'') <> ''
     and isnull(initialContact,'') = 'T'
     and isnull(notified,'') = 'F'
     and isnull(deselected,'') = 'F'
     and isnull(PO_ID,0) = 0

-- PO notification
    insert CMS_Notification (Type,CMS_ID,CMSS_ID,QuoteID, LeadID, HoldingID,CommunityID,ProjectID,LotID,
       ModelID, ModelNameID, MAJ_GROUP_ID, GROUP_DESC, SUB_GROUP_ID, SUB_GROUP_DESC,
     OPTION_ID, SHORT_DESC,phs_code, subp_code, SUPPLIER,  StartDate,username, 
     NotifyingType,PONotes,RFQ_Method )

     SELECT m.Type,m.CMS_ID, s.CMSS_ID,q.ID, q.LeadID, q.HoldingID, q.CommunityID, q.ProjectID, q.LotID, q.ModelID,
     q.ModelNameID, m.MAJ_GROUP_ID, m.GROUP_DESC, m.SUB_GROUP_ID,m.SUB_GROUP_DESC,
     m.OPTION_ID,m.SHORT_DESC, m.phs_code,m.subp_code,s.SUPPLIER,  m.Start_Date, @username, 
     'P',PONotes,RFQ_Method
    
     FROM CMS_Contract_Management m 
     LEFT OUTER JOIN CMS_Contract_Management_Supp s 
     ON m.CMS_ID = s.CMS_ID LEFT OUTER JOIN scQuote q ON m.QuoteID = q.ID
     WHERE m.QuoteID  =  @QuoterID
     and isnull(Supplier,'') <> ''
     and isnull(POed,'') <> 'T'
     and isnull(PO,'') <> ''
     
    

     

---=====================






declare  @s   varchar(500)

-- declare @TRDb         varchar(30) , @username  varchar(30)
-- select  @trdb = 'tr_adam', @username = 'hm'

select @s = ' update CMS_Notification ' +
            ' set RFQ_Method =  m.RFQ_Method ' +
' from CMS_Notification   n ' +
' join ' + @TrDb + '..SUPPLIER_MASTER  m  ' +
' on n.SUPPLIER = m.SUPPLIER ' +
' where username = '''+ @username+'''' + ' and NotifyingType= ''I'''


exec (@s)

end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CMS_MSP_Copy]') and xtype = 'P ')  
 drop Procedure sp_CMS_MSP_Copy
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--declare @Project_TO_Copy int, @New_Project_Name varchar(255)
--select @Project_TO_Copy = 1, @New_Project_Name = 'Hello World' 
-- exec [sp_CMS_MSP_Copy] 2, 'Robz Final Testzxa', '10/9/08'
CREATE proc [dbo].[sp_CMS_MSP_Copy]
@Project_TO_Copy int,
@New_Project_Name varchar(255),
@StartDate datetime
as
begin
	declare @Max_Proj_ID int 

	select @Max_Proj_ID = max(proj_id)
	from msp_projects 

	select @Max_Proj_ID = isnull(@Max_Proj_ID,0) +1
    print cast(@Max_Proj_ID as varchar(50))

	----------------------------------------------------------------------------------
	----------------------------------------------------------------------------------
	---------------------------------****RESOURCES****--------------------------------
	----------------------------------------------------------------------------------
	----------------------------------------------------------------------------------

	-----------------------------------MSP_PROJECTS-----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_projects'))
	drop table #msp_projects 

	select *
	into #msp_projects
	from msp_projects
	where proj_id = @Project_TO_Copy 

	update #msp_projects
	set proj_id = @Max_Proj_ID, PROJ_INFO_START_DATE = @StartDate, PROJ_EXT_EDITED = 1,
	Proj_name = @New_Project_Name + ' - ' + cast(@Max_Proj_ID as varchar(500)) 

	insert Msp_projects
	select * 
	from #msp_projects

	-----------------------------------MSP_TASKS-----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_tasks'))
	drop table #msp_tasks 

	select *
	into #msp_tasks
	from msp_tasks
	where proj_id = @Project_TO_Copy 

    update #msp_tasks
    set Task_Start_Date = @StartDate
    where Task_uid = 0

	update #msp_tasks
	set proj_id = @Max_Proj_ID 

	insert msp_tasks
	select * 
	from #msp_tasks

	---
	declare 
	@loop_count int,
	@task_count int,
	@current_task_id int,
	@project_name varchar(255),
	@new_proj_name varchar(255),
	@proj_id int

	set @current_task_id = -1
	set @loop_count = 0

	--select task_name, task_uid,* from msp_tasks
	select @task_count=count(*) from #msp_tasks where task_is_subproj = 1
	if @task_count > 0 
	begin
		while @loop_count < @task_count
		begin
			set @loop_count = @loop_count + 1

			select @current_task_id=task_uid from #msp_tasks where task_is_subproj = 1 and task_uid > @current_task_id order by task_uid
			select @project_name=task_name from #msp_tasks where task_uid = @current_task_id

			select @proj_id=proj_id from msp_projects where proj_name=@project_name

			set @new_proj_name = @New_Project_Name+' - '+@project_name            
			exec sp_CMS_MSP_Copy @proj_id, @new_proj_name, @StartDate

			update msp_tasks set task_name=@new_proj_name where task_uid=@current_task_id and Proj_ID = @Max_Proj_ID
		end
	end
	-----------------------------------MSP_LINKS-----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_links'))
	drop table #msp_links 

	select *
	into #msp_links
	from msp_links
	where proj_id = @Project_TO_Copy 

	update #msp_links
	set proj_id = @Max_Proj_ID 

	insert msp_links
	select * 
	from #msp_links

	-----------------------------------MSP_RESOURCES-----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_resources'))
	drop table #msp_resources 

	select *
	into #msp_resources
	from msp_resources
	where proj_id = @Project_TO_Copy 

	update #msp_resources
	set proj_id = @Max_Proj_ID 

	insert msp_resources
	select * 
	from #msp_resources

	-----------------------------------MSP_RESOURCE_RATES-----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_resource_rates'))
	drop table #msp_resource_rates 

	select *
	into #msp_resource_rates
	from msp_resource_rates
	where proj_id = @Project_TO_Copy 

	update #msp_resource_rates
	set proj_id = @Max_Proj_ID 

	insert msp_resource_rates
	select * 
	from #msp_resource_rates

	-----------------------------------MSP_RES_GLOBAL_BINARY-----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_res_global_binary'))
	drop table #msp_res_global_binary 

	select *
	into #msp_res_global_binary
	from msp_res_global_binary
	where proj_id = @Project_TO_Copy 

	update #msp_res_global_binary
	set proj_id = @Max_Proj_ID 

	insert msp_res_global_binary
	select * 
	from #msp_res_global_binary

	-----------------------------------MSP_ASSIGNMENTS-----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_assignments'))
	drop table #msp_assignments 

	select *
	into #msp_assignments
	from msp_assignments
	where proj_id = @Project_TO_Copy 

	update #msp_assignments
	set proj_id = @Max_Proj_ID 

	insert msp_assignments
	select * 
	from #msp_assignments

	-----------------------------------MSP_ASSN_ENTERPRISE-----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_assn_enterprise'))
	drop table #msp_assn_enterprise 

	select *
	into #msp_assn_enterprise
	from msp_assn_enterprise
	where proj_id = @Project_TO_Copy 

	update #msp_assn_enterprise
	set proj_id = @Max_Proj_ID 

	insert msp_assn_enterprise
	select * 
	from #msp_assn_enterprise

	-----------------------------------MSP_CALENDARS----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_calendars'))
	drop table #msp_calendars 

	select *
	into #msp_calendars
	from msp_calendars
	where proj_id = @Project_TO_Copy 

	update #msp_calendars
	set proj_id = @Max_Proj_ID 

	insert msp_calendars
	select * 
	from #msp_calendars

	-----------------------------------MSP_CALENDAR_DATA----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_calendar_data'))
	drop table #msp_calendar_data 

	select *
	into #msp_calendar_data
	from msp_calendar_data
	where proj_id = @Project_TO_Copy 

	update #msp_calendar_data
	set proj_id = @Max_Proj_ID 

	insert msp_calendar_data
	select * 
	from #msp_calendar_data


	----------------------------------------------------------------------------------
	----------------------------------------------------------------------------------
	--------------------------****USER-DEFINIED FIELDS****----------------------------
	----------------------------------------------------------------------------------
	----------------------------------------------------------------------------------

	-----------------------------------MSP_TEXT_FIELDS----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_text_fields'))
	drop table #msp_text_fields 

	select *
	into #msp_text_fields
	from msp_text_fields
	where proj_id = @Project_TO_Copy 

	update #msp_text_fields
	set proj_id = @Max_Proj_ID 

	insert msp_text_fields
	select * 
	from #msp_text_fields

	-----------------------------------MSP_NUMBER_FIELDS----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_number_fields'))
	drop table #msp_number_fields 

	select *
	into #msp_number_fields
	from msp_number_fields
	where proj_id = @Project_TO_Copy 

	update #msp_number_fields
	set proj_id = @Max_Proj_ID 

	insert msp_number_fields
	select * 
	from #msp_number_fields

	-----------------------------------MSP_FLAG_FIELDS----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_flag_fields'))
	drop table #msp_flag_fields 

	select *
	into #msp_flag_fields
	from msp_flag_fields
	where proj_id = @Project_TO_Copy 

	update #msp_flag_fields
	set proj_id = @Max_Proj_ID 

	insert msp_flag_fields
	select * 
	from #msp_flag_fields

	-----------------------------------MSP_DATE_FIELDS----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_date_fields'))
	drop table #msp_date_fields 

	select *
	into #msp_date_fields
	from msp_date_fields
	where proj_id = @Project_TO_Copy 

	update #msp_date_fields
	set proj_id = @Max_Proj_ID 

	insert msp_date_fields
	select * 
	from #msp_date_fields

	-----------------------------------MSP_DURATION_FIELDS----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_duration_fields'))
	drop table #msp_duration_fields 

	select *
	into #msp_duration_fields
	from msp_duration_fields
	where proj_id = @Project_TO_Copy 

	update #msp_duration_fields
	set proj_id = @Max_Proj_ID 

	insert msp_duration_fields
	select * 
	from #msp_duration_fields

	-----------------------------------MSP_MV_FIELDS----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_mv_fields'))
	drop table #msp_mv_fields 

	select *
	into #msp_mv_fields
	from msp_mv_fields
	where proj_id = @Project_TO_Copy 

	update #msp_mv_fields
	set proj_id = @Max_Proj_ID 

	insert msp_mv_fields
	select * 
	from #msp_mv_fields

	-----------------------------------MSP_FIELD_ATTRIBUTES----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_field_attributes'))
	drop table #msp_field_attributes 

	select *
	into #msp_field_attributes
	from msp_field_attributes
	where proj_id = @Project_TO_Copy 

	update #msp_field_attributes
	set proj_id = @Max_Proj_ID 

	insert msp_field_attributes
	select * 
	from #msp_field_attributes

	-----------------------------------MSP_ATTRIBUTE_STRINGS----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_attribute_strings'))
	drop table #msp_attribute_strings 

	select *
	into #msp_attribute_strings
	from msp_attribute_strings
	where proj_id = @Project_TO_Copy 

	update #msp_attribute_strings
	set proj_id = @Max_Proj_ID 

	insert msp_attribute_strings
	select * 
	from #msp_attribute_strings

	-----------------------------------MSP_CODE_FIELDS----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_code_fields'))
	drop table #msp_code_fields 

	select *
	into #msp_code_fields
	from msp_code_fields
	where proj_id = @Project_TO_Copy 

	update #msp_code_fields
	set proj_id = @Max_Proj_ID 

	insert msp_code_fields
	select * 
	from #msp_code_fields

	-----------------------------------MSP_OUTLINE_CODES----------------------------------------------

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_outline_codes'))
	drop table #msp_outline_codes 

	select *
	into #msp_outline_codes
	from msp_outline_codes
	where proj_id = @Project_TO_Copy 

	update #msp_outline_codes
	set proj_id = @Max_Proj_ID 

	insert msp_outline_codes
	select * 
	from #msp_outline_codes

end

select @Max_Proj_ID Proj_id


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CMS_Notification]') and xtype = 'P ')  
 drop Procedure sp_CMS_Notification
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
















CREATE          proc  sp_CMS_Notification

@username   varchar(50),
@TR_DB      varchar(50),
@type  varchar(10)

as

-- declare @TR_DB      varchar(50),@username   varchar(50), @type  varchar(10)
-- select @TR_DB = 'TR_Adam', @username = 'hmm',@type = 'PO'  

if @type = 'PO'
begin
	declare @supplier  varchar(20) ,
	        @NotifyID   int,
	        @PO_ID    int
	 
-- 	declare poCursor cursor for 
-- 	
-- 	 select NotifyID from CMS_Notification
-- 	 where username = @username
-- 	
-- 	open poCursor
-- 	fetch next from poCursor into @NotifyID 
-- 	  
-- 	while @@FETCH_STATUS = 0
-- 	begin
-- 	        
-- 	    
-- 	     exec sp_CMS_GetSysID  @TR_DB , 'NEXT_PO_ID',  @SysID = @PO_ID output
-- 	     	    
-- 	     update CMS_Notification
-- 	     set PO_ID = @PO_ID
-- 	     where NotifyID = @NotifyID
-- 	     and username = @username
-- 	
-- 	     fetch next from poCursor into @NotifyID
-- 	end
-- 	
-- 	close poCursor
-- 	deallocate poCursor



-- 
--    insert CMS_Notify (CMSS_ID, Notified_Date, Notified_By) -- select * from CMS_Notify
--    select  CMSS_ID,getdate(), @username
--    from CMS_Notification cmss
--   


	update CMS_Contract_Management_Supp   -- select * from CMS_Contract_Management_Supp 
	 set  Start_Date = n.StartDate,
	     PONotes = n.PONotes
	     
	 -- select n.notified,n.PO_ID, n.POStartDate, n.PONotes,cmss.PO_ID, cmss.POStartDate, cmss.PONotes
	from CMS_Contract_Management_Supp cmss
	join CMS_Contract_Management  cms
	on  cms.CMS_ID = cmss.CMS_ID 
	join CMS_Notification  n
	on cmss.CMSS_ID  = n.CMSS_ID 
	where username =  @username
	
	
	

end

else
begin
       
        update CMS_Contract_Management_Supp  
	set  notified = n.notified,
             initialContact = case n.NotifyingType when 'I' then n.notified 
                              else 'F' end,
             POed = case n.NotifyingType when 'P' then n.notified 
                              else 'F' end,
             NotifyingType = n.NotifyingType,RFQ_Method= n.RFQ_Method,
	     Notification_Notes = n.Notification_Notes,Start_Date = n.StartDate,
             PONotes = n.PONotes
        from CMS_Contract_Management_Supp cmss
	join CMS_Contract_Management  cms
	on  cms.CMS_ID = cmss.CMS_ID 
	join CMS_Notification  n
	on cmss.CMSS_ID  = n.CMSS_ID 
	where isnull(n.RFQ_METHOD,'') = 'PH'
	and  username =  @username
	
	
	
	update CMS_Contract_Management_Supp  
	set  notified = 'T', initialContact = case n.NotifyingType when 'I' then 'T' else 'F' end,
             POed = case n.NotifyingType when 'P' then 'T' 
                              else 'F' end,
             NotifyingType = n.NotifyingType,RFQ_Method= n.RFQ_Method,
	     Notification_Notes = n.Notification_Notes,Start_Date = n.StartDate,
             PONotes = n.PONotes
        from CMS_Contract_Management_Supp cmss
	join CMS_Contract_Management  cms
	on  cms.CMS_ID = cmss.CMS_ID 
	join CMS_Notification  n
	on cmss.CMSS_ID  = n.CMSS_ID 
	where isnull(n.RFQ_METHOD,'') <> 'PH'
	 and username =  @username


end





















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CMS_UpdateRFQEST]') and xtype = 'P ')  
 drop Procedure sp_CMS_UpdateRFQEST
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go











CREATE      proc sp_CMS_UpdateRFQEST

  @QuoteId   int
as  

     ------ update RFQ_EST in CMS_Contract_Management table
--       select *  
--       from CMS_Contract_Management
--       where QuoteID = 9  and type = 'E'
--       --QuoteID = @ID and type = 'E'

      -- Type : Elevtion (Model)
      select QuoteId ,phs_code,subp_code,sum(isnull(cmss.RFQ_EST,0))[RFQ_EST]
      into #tot   -- drop table #tot
      -- select *   
      from CMS_Contract_Management   cms
      left outer join CMS_Contract_Management_supp  cmss
      on  cms.CMS_ID = cmss.CMS_ID
      where QuoteId = @QuoteId and type = 'E'
      group by QuoteId ,phs_code,subp_code
     
       update  CMS_Contract_Management
       set RFQ_EST = t.RFQ_EST
       from CMS_Contract_Management cms
       join #tot  t
       on  cms.QuoteId = t.QuoteId
       and cms.phs_code = t.phs_code
      and cms.subp_code = t.subp_code
       where  cms.QuoteId = @QuoteId and  type = 'E'

   -- Type : Option
     
   
      select QuoteId , Maj_GROUP_ID,SUB_GROUP_ID,OPTION_ID, phs_code ,subp_code,sum(isnull(cmss.RFQ_EST,0))[RFQ_EST]   
      into #totO   -- drop table #totO  select * from #totO
      from CMS_Contract_Management   cms
      left outer join CMS_Contract_Management_supp  cmss
      on  cms.CMS_ID = cmss.CMS_ID
      where QuoteId = @QuoteId and type = 'O'
      group by QuoteId ,Maj_GROUP_ID,SUB_GROUP_ID,OPTION_ID,phs_code,subp_code 

       update  CMS_Contract_Management
       set RFQ_EST = t.RFQ_EST
       -- select * 
       from CMS_Contract_Management cms
        join #totO  t
       on  cms.QuoteId = t.QuoteId
       and cms.phs_code = t.phs_code
       and cms.subp_code = t.subp_code 
       and cms.Maj_GROUP_ID  = t.Maj_GROUP_ID
       and cms.SUB_GROUP_ID  = t.SUB_GROUP_ID
      and  cms.OPTION_ID  = t.OPTION_ID
       where  cms.QuoteId = @QuoteId and  type = 'O'
 


    
     













Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CMS_UpdateStartDate]') and xtype = 'P ')  
 drop Procedure sp_CMS_UpdateStartDate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go










CREATE    proc sp_CMS_UpdateStartDate

@Proj_ID_ID   int,
@quoteID      int
as

select MajorCode, min(TASK_START_DATE) [TASK_START_DATE]
into #startdate
--select  p.Link_ID,MajorCode, CodeType,TASK_START_DATE,TASK_NAME -- MIN(TASK_START_DATE)
from msp_dashboard_projects p
join msp_dashboard_tasks t
on p.PROJ_ID = t.PROJ_ID
join msp_tasks mt
on mt.proj_id = t.proj_id  
and mt.TASK_UID = t.TASK_UID
join dashboard_majorcodes  m
on p.Link_ID =  m.Proj_ID_ID
and t.Link_ID =  m.Proj_Phase_ID
where isNUll( m.Proj_ID_ID,'') = @Proj_ID_ID
GROUP BY p.Link_ID,MajorCode
order by MajorCode

update CMS_Contract_Management_Supp
set start_date = s.TASK_START_DATE
--select m.start_date, phs_code
from CMS_Contract_Management_Supp   ms
join CMS_Contract_Management  m
on ms.CMS_ID = m.CMS_ID
join #startdate   s
on m.phs_code = MajorCode
where quoteID = @quoteID












Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CommandSessionExec]') and xtype = 'P ')  
 drop Procedure sp_CommandSessionExec
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc sp_CommandSessionExec
@username varchar(500)
as
begin
--exec sp_CommandSessionExec '10016'
declare @x int, @xRun int, @RunSQL varchar(8000), @ExecSql varchar(8000)
select @x = datalength(command)/8000 FROM Reflex_Command_Session where username = @username
if(@x = 0)
	set @x = 1
select @xRun = 1
select @ExecSql = 'exec('
while @xRun <= @x
begin
 select @RunSQL = isnull(@RunSQL,'') + '
declare @s' + cast(@xRun as varchar(300))+ ' varchar(8000)
select @s' + cast(@xRun as varchar(300)) + ' = cast(substring(command, ' + cast(((@xRun-1) * 8000) + 1 as varchar(300)) + ', 8000)as varchar(8000)) from Reflex_Command_Session where username = '+@username +'
'
 select @ExecSql = isnull(@ExecSql,'') + ' @s' + cast(@xRun as varchar(300)) + ' + '
 select @xRun = @xRun + 1
end
select @ExecSql = substring(@ExecSql,1, len(@ExecSql)-2) + ')'

if(@RunSQL + @ExecSql != 'exec(')
exec (@RunSQL + @ExecSql)




end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Contact_CreateDefaultCustomerContact]') and xtype = 'P ')  
 drop Procedure sp_Contact_CreateDefaultCustomerContact
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
CREATE Procedure [dbo].[sp_Contact_CreateDefaultCustomerContact] (@CustomerID int, @AutoID int)
as
begin
	Declare @TreasuryDBName varchar(500), @CompanyServerName varchar(500), @str varchar(8000), @ContactID int
	Select @TreasuryDBName = TreasuryDBName, @CompanyServerName = CompanyServerName from Companies Where AutoID = @AutoID

	Set @str = 'Select Count(Customer_ID) From ' + @TreasuryDBName + '.dbo.Customers Where Customer_ID = ' + Convert(varchar(20),@CustomerID) +' AND IsNull(ContactID,-1) <> -1'

	If Exists (Select * From tempdb..sysobjects Where id = object_id(N'tempdb..#Result '))  
		Drop Table #Result

	Create Table #Result
	( ResultValueInt int)


	Insert Into #Result
	Exec(@str)

	if (Select Top 1 ResultValueInt From #Result) = 0
	begin
		set @str = '
		declare @sync_address_type varchar(5), @sync_type varchar(1)	
		select @sync_address_type=isnull((select isnull(sync_address_type, ''B1'') from ['+ @CompanyServerName +'].' + @TreasuryDBName + '.dbo.ar_setup), ''B1'')			
		select @sync_type = SUBSTRING(@sync_address_type, 1, 1)
		
		if( @sync_type = ''B'' )
		begin
			Insert Into Contact([Type], FirstName, LastName, KnownAs, BusinessStreet, BusinessCity, BusinessPostalCode, BusinessState, BusinessCountry,
				OtherStreet, OtherCity, OtherPostalCode, OtherState, OtherCountry, BusinessTelephoneNumber, BusinessFaxNumber, Email1Address, CorporateWebSite,
				PersonalEmailOnly, BusinessCompany, SyncCompanyName, SyncBusinessPhone, SyncBusinessFax, SyncBusinessAddress)
			Select ''Customer'',c.[Name],c.[Name],c.[Name],
				case isnull(@sync_address_type, ''B1'') when ''B1'' then isnull(c.Bill_Address_1,'''') when ''B2'' then isnull(c.Bill_Address_2,'''') 
				when ''B3'' then isnull(c.Bill_Address_3,'''') else isnull(c.Bill_Address_1,'''') end,
				c.Bill_City, c.Bill_Zip, c.Bill_State,IsNull((Select IsNull([Description],'''') from ['+ @CompanyServerName +'].' + @TreasuryDBName + '.dbo.Countries Where Country_ID = c.Bill_Country_ID),''''),
				IsNull(c.Ship_Address_1,'''') + '' '' + IsNull(c.Ship_Address_2,'''') + '' '' + IsNull(c.Ship_Address_3,''''), 
				c.Ship_City, c.Ship_Zip, c.Ship_State, IsNull((Select IsNull([Description],'''') from ['+ @CompanyServerName +'].' + @TreasuryDBName + '.dbo.Countries Where Country_ID = c.Ship_Country_ID),''''),
				c.Telephone, c.Fax, c.Email, c.WebSite, 0, c.[Name], isnull(a.sync_company, 0), isnull(a.sync_phone, 0), isnull(a.sync_fax, 0), 
				isnull(a.sync_address, 0)
			From ['+ @CompanyServerName +'].' + @TreasuryDBName + '.dbo.Customers c
			left outer join ['+ @CompanyServerName +'].' + @TreasuryDBName + '.dbo.ar_setup a on 1=1
			Where Customer_ID =' + convert(varchar(50),@CustomerID)+'
		end
		else
		begin
			Insert Into Contact([Type], FirstName, LastName, KnownAs, BusinessStreet, BusinessCity, BusinessPostalCode, BusinessState, BusinessCountry,
				OtherStreet, OtherCity, OtherPostalCode, OtherState, OtherCountry, BusinessTelephoneNumber, BusinessFaxNumber, Email1Address, CorporateWebSite,
				PersonalEmailOnly, BusinessCompany, SyncCompanyName, SyncBusinessPhone, SyncBusinessFax, SyncBusinessAddress)
			Select ''Customer'',c.[Name],c.[Name],c.[Name],
				case isnull(@sync_address_type, ''S1'') when ''S1'' then isnull(c.Ship_Address_1,'''') when ''S2'' then isnull(c.Ship_Address_2,'''')
				when ''S3'' then isnull(c.Ship_Address_3,'''') else isnull(c.Ship_Address_1,'''') end,
				c.Ship_City, c.Ship_Zip, c.Ship_State, IsNull((Select IsNull([Description],'''') from ['+ @CompanyServerName +'].' + @TreasuryDBName + '.dbo.Countries Where Country_ID = c.Ship_Country_ID),''''),
				IsNull(c.Ship_Address_1,'''') + '' '' + IsNull(c.Ship_Address_2,'''') + '' '' + IsNull(c.Ship_Address_3,''''), 
				c.Ship_City, c.Ship_Zip, c.Ship_State, IsNull((Select IsNull([Description],'''') from ['+ @CompanyServerName +'].' + @TreasuryDBName + '.dbo.Countries Where Country_ID = c.Ship_Country_ID),''''),
				c.Telephone, c.Fax, c.Email, c.WebSite, 0, c.[Name], isnull(a.sync_company, 0), isnull(a.sync_phone, 0), isnull(a.sync_fax, 0), 
				isnull(a.sync_address, 0)
			From ['+ @CompanyServerName +'].' + @TreasuryDBName + '.dbo.Customers c
			left outer join ['+ @CompanyServerName +'].' + @TreasuryDBName + '.dbo.ar_setup a on 1=1
			Where Customer_ID =' + convert(varchar(50),@CustomerID)+'
		end '

		Exec (@str)

		Select @ContactID =  IDENT_CURRENT('Contact') 

		Insert Into Relations(Target,TargetID,ItemType,ItemID,CompanyID)
		Values ('Customer',@CustomerID,'Contact',@ContactID,@AutoID)

		Set @str = 'Update [' + @CompanyServerName + '].' + @TreasuryDBName + '.dbo.Customers Set ContactID = ' + Convert(varchar(50),@ContactID) + 
				   'Where Customer_ID = ' + Convert(varchar(50),@CustomerID)
		Exec(@str)


		select @ContactID
	end
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Contact_CreateDefaultProspectContact]') and xtype = 'P ')  
 drop Procedure sp_Contact_CreateDefaultProspectContact
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE Procedure [dbo].[sp_Contact_CreateDefaultProspectContact] (@ProspectID int, @AutoID int)

AS

--Declare @ProspectID int, @AutoID int
--Select @ProspectID = 10, @AutoID = 12

Declare @TreasuryDBName varchar(500), @CompanyServerName varchar(500), @str varchar(8000), @ContactID int
Select @TreasuryDBName = TreasuryDBName, @CompanyServerName = CompanyServerName from Companies Where AutoID = @AutoID

Set @str = 'Select Count(Prospect_ID) From ' + @TreasuryDBName + '.dbo.Prospects Where Prospect_ID = ' + Convert(varchar(20),@ProspectID) +' AND IsNull(DEFAULT_ContactID,-1) <> -1'

If Exists (Select * From tempdb..sysobjects Where id = object_id(N'tempdb..#Result '))  
	Drop Table #Result

Create Table #Result
( ResultValueInt int)


Insert Into #Result
Exec(@str)

If (Select Top 1 ResultValueInt From #Result) = 0
	Begin
		set @str = 'Insert Into Contact([Type],FirstName,LastName,KnownAs,BusinessStreet,BusinessCity,BusinessPostalCode,BusinessState,BusinessCountry,
					BusinessTelephoneNumber,BusinessFaxNumber,CorporateWebSite,
					BusinessCompany)
					Select ''Prospect'',[Name],[Name],[Name],IsNull(p.Address_1,'''') + '' '' + IsNull(p.Address_2,'''') + '' '' + IsNull(p.Address_3,''''),
					p.City,p.Zip,p.State,IsNull((Select IsNull(c.[Description],'''') from ['+ @CompanyServerName +'].' + @TreasuryDBName + '.dbo.Countries c Where c.Country_ID = p.Country_ID),''''),
					p.Telephone,p.Fax,p.WebSite,[Name]
					From ['+ @CompanyServerName +'].' + @TreasuryDBName + '.dbo.Prospects p Where p.Prospect_ID =' + convert(varchar(50),@ProspectID)

		print @str
		Exec (@str)
		
		Select @ContactID = IDENT_CURRENT('Contact') 

		Insert Into Relations(Target,TargetID,ItemType,ItemID,CompanyID)
		Values ('Prospect',@ProspectID,'Contact',@ContactID,@AutoID)

		Set @str = 'Update [' + @CompanyServerName + '].' + @TreasuryDBName + '.dbo.Prospects Set DEFAULT_ContactID = ' + Convert(varchar(50),@ContactID) + 
				   'Where prospect_ID = ' + Convert(varchar(50),@ProspectID)
		Exec(@str)

		Select @ContactID
	End








Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Contact_CreateDefaultSupplierContact]') and xtype = 'P ')  
 drop Procedure sp_Contact_CreateDefaultSupplierContact
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE Procedure [dbo].[sp_Contact_CreateDefaultSupplierContact] (@SupplierID int, @AutoID int)

AS

--Declare @CustomerID int, @AutoID int
--Select @CustomerID = 10, @AutoID = 12

Declare @TreasuryDBName varchar(500), @CompanyServerName varchar(500), @str varchar(8000), @ContactID int
Select @TreasuryDBName = TreasuryDBName, @CompanyServerName = CompanyServerName from Companies Where AutoID = @AutoID

Set @str = 'Select Count(Supplier_ID) From ' + @TreasuryDBName + '.dbo.supplier_master Where Supplier_ID = ' + Convert(varchar(20),@SupplierID) +' AND IsNull(ContactID,-1) <> -1'

If Exists (Select * From tempdb..sysobjects Where id = object_id(N'tempdb..#Result '))  
	Drop Table #Result

Create Table #Result
( ResultValueInt int)


Insert Into #Result
Exec(@str)

If (Select Top 1 ResultValueInt From #Result) = 0
	Begin
		set @str = 'Insert Into Contact([Type],FirstName,LastName,KnownAs,BusinessStreet,BusinessCity,BusinessPostalCode,BusinessState,BusinessCountry,
					OtherStreet,OtherCity,OtherPostalCode,OtherState, OtherCountry,BusinessTelephoneNumber,BusinessFaxNumber,Email1Address,CorporateWebSite,
					PersonalEmailOnly,BusinessCompany)
					Select ''Supplier'',[Name],[Name],[Name],IsNull(PO_ADD1,'''') + '' '' + IsNull(PO_ADD2,'''') + '' '' + IsNull(PO_ADD3,''''),
					PO_CITY,PO_ZIP,PO_STATE,IsNull((Select IsNull([Description],'''') from ['+ @CompanyServerName +'].' + @TreasuryDBName + '.dbo.Countries Where Country_ID = PO_COUNTRY_ID),''''),
					IsNull(REMIT_ADD1,'''') + '' '' + IsNull(REMIT_ADD2,'''') + '' '' + IsNull(REMIT_ADD3,''''), 
					REMIT_CITY,REMIT_ZIP,REMIT_STATE,IsNull((Select IsNull([Description],'''') from ['+ @CompanyServerName +'].' + @TreasuryDBName + '.dbo.Countries Where Country_ID = REMIT_COUNTRY_ID),''''),
					TEL,FAX,EMAIL,WEBSITE,0,[Name]
					From ['+ @CompanyServerName +'].' + @TreasuryDBName + '.dbo.supplier_master Where Supplier_ID =' + convert(varchar(50),@SupplierID)

		Exec (@str)

		Select @ContactID =  IDENT_CURRENT('Contact') 

		Insert Into Relations(Target,TargetID,ItemType,ItemID,CompanyID)
		Values ('Supplier',@SupplierID,'Contact',@ContactID,@AutoID)

		Set @str = 'Update [' + @CompanyServerName + '].' + @TreasuryDBName + '.dbo.supplier_master Set ContactID = ' + Convert(varchar(50),@ContactID) + 
				   'Where Supplier_ID = ' + Convert(varchar(50),@SupplierID)
		Exec(@str)


		Select @ContactID

	End






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Contact_DeleteNewTasks]') and xtype = 'P ')  
 drop Procedure sp_Contact_DeleteNewTasks
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc sp_Contact_DeleteNewTasks(
@contactID int)
as 
begin

delete contact_AptsTasks where contacthistoryid in (select id from contacthistory where isNewContactID = @contactID )
delete contacthistory where isNewContactID = @contactID

delete relations where ItemType = 'Note' and ItemID in (select ID from notes where isNewContactID = @contactID)
delete notes where isNewContactID = @contactID
 

end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Contact_GetContacts]') and xtype = 'P ')  
 drop Procedure sp_Contact_GetContacts
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE  proc [dbo].[sp_Contact_GetContacts]
@LeaderID int, 
@LeaderCompanyID int, 
@InstanceType varchar(100)
as

--select @LeaderID = 2, @LeaderCompanyID = 1, @InstanceType = 'Supplier'
--sp_DashboardGetContacts 212,null,'Project'

if @InstanceType = 'Lease_Contacts'
begin
 select -1 [ID], '***All Contacts***' [Known As], '***All Contacts***'[First Name], '***All Contacts***'[Last Name], '***N/A***' [Job Title], '***N/A***' ExternalReference,0[isCompany],'***N/A***'[AssignedTo],'***N/A***'[InActive],'***N/A***'[Type]
 union
 select c.ID, c.KnownAs [Known As], c.Firstname [First Name], c.Lastname [Last Name], c.JobTitle [Job Title], c.ExternalReference,0[isCompany],at.KnownAs[AssignedTo],c.InActive[InActive],c.Type
 from relations r
 join Contact c
 left outer join contact at on c.Owner_ID = at.ID
 on c.id = r.ItemID
 and ItemType in( 'Lease Occupant','Lease Contact' )
 where Target = 'Lease'
 and TargetID = @LeaderID
 and isnull(@LeaderCompanyID,'') = isNull(CompanyID,'')
 
end
else if @InstanceType = 'Contact'
begin
 select Distinct c.ID, c.KnownAs [Known As], c.Firstname [First Name], c.Lastname [Last Name], c.JobTitle [Job Title], c.ExternalReference,0[isCompany],at.KnownAs[AssignedTo],c.InActive[InActive],c.Type
 from Contact c
 left outer join contact at on c.Owner_ID = at.ID
 where c.id = @LeaderID

end
else 
begin
 select -1 [ID], '***All Contacts***' [Known As], '***All Contacts***'[First Name], '***All Contacts***'[Last Name], '***N/A***' [Job Title], '***N/A***' ExternalReference,0[isCompany],'***N/A***'[AssignedTo],'***N/A***'[InActive],'***N/A***'[Type]
 union
 select c.ID, c.KnownAs [Known As], c.Firstname [First Name], c.Lastname [Last Name], c.JobTitle [Job Title], c.ExternalReference,0[isCompany],at.KnownAs[AssignedTo],c.InActive[InActive],c.Type
 from relations r
 join Contact c
 left outer join contact at on c.Owner_ID = at.ID
 on c.id = r.ItemID
 and ItemType = 'Contact'
 where Target = @InstanceType
 and TargetID = @LeaderID
 and isnull(@LeaderCompanyID,'') = isNull(CompanyID,'')
end










Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Contact_GetNavigation]') and xtype = 'P ')  
 drop Procedure sp_Contact_GetNavigation
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


-- exec sp_Contact_GetNavigation 4446, 2, 5171, 'Customer', 'F'
CREATE proc [dbo].[sp_Contact_GetNavigation] (@ContactID varchar(20), @InstanceID int, @CallerID int, @InstanceType varchar(500), @OriginWeb varchar(1)='F', @InstanceCompanyID int = -1)

as

/*


select * from relations where target = 'Customer'

*/
--Select * From Contact where Type = 'User'
--Select * From Relations where Target = 'Prospect' and TargetID = 2
--Select * From Contact where ID in (Select ItemID From Relations where Target = 'Prospect' and TargetID = 2 and ItemType = 'Contact')
--Select * From TR_LENMAK_MB.dbo.PROSPECTS
--Select * From TR_LENMAK_MB.dbo.CUSTOMERS
--Select * From Relations where Target = 'Customer' and TargetID = 1
--Select * From Contact where ID in (Select ItemID From Relations where Target = 'Customer' and TargetID = 1 and ItemType = 'Contact')
--Select * From working_ContactDetails

--Declare @ContactID varchar(20), @InstanceID int, @CallerID int, @InstanceType varchar(500), @OriginWeb varchar(1)='F'
--Select @ContactID = 6446, @InstanceID = 2, @CallerID = 3, @InstanceType = 'Contact'
--Select @ContactID = 6446, @InstanceID = 2, @CallerID = 4, @InstanceType = 'Prospect'
--Select @ContactID = 73, @InstanceID = 42, @CallerID = 3, @InstanceType = 'Customer'
--Select * From Relations
--Select * From Contact Where Type = 'User'


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ch_links'))
    drop table #ch_links
create table #ch_links(
CH_ID int,
CHR_TYPE varchar(1),
CompanyID int
)



declare @sql varchar(max), @tr_db varchar(500), @CompanyID int,@FilterUsed bit

select @tr_db = TreasuryDBName from COMPANIES where AutoID = @InstanceCompanyID

-- delete any new records that were created
exec sp_Contact_DeleteNewTasks @CallerID

--Clear Working Tables
delete working_ContactDetails
where UserName = @CallerID and isnull(OriginWeb,'F')=@OriginWeb

delete working_DashboardContacts
where UserName = @CallerID

If @InstanceType='Contact' -- a single prospect is chosen
Begin
	Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb)
	Select @CallerID, DateCreated [Date], KnownAs [Owner], ContactTypeGroup [Group], ContactType [Type], GlyphID, [Subject], Direction, Succeeded [Status], 
	ch.ID [ID], c.ID,ch.ContextItemID, IsNull(ch.isPrivate,0), ci.Name, @OriginWeb
	From ContactHistory ch
	Inner Join Contact c on c.id = ch.ContactOwnerID
	Inner Join ContactType ct on ch.ContactType_ID = ct.id
	Inner Join ContactTypeGroup ctg on ct.ContactGroupID = ctg.id  /**/
	left outer join ContextItem ci on ci.ID=ch.ContextItemId
	Where ContactID = @ContactID and ct.GlyphID not in(16/*Quote*/,18/*Estimate*/,19/*Project*/,20/*RentQuote*/,21/*RentBooking*/,22/*RentContract*/)
	and (IsNull(ch.isPrivate,0) = 0 or (ISNULL(ch.isPrivate,0) = 1 and ch.ContactOwnerID = @CallerID))
	
	Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb)
	Select @CallerID,  DateCreated [Date], KnownAs [Owner], 'Note' [Group], 'Note' [Type],
	8 GlyphID, cast(Content as varchar(256)), 'Outgoing', 1 [Status], n.[ID] [ID], c.ID, n.ContextItemID, Case When n.[Public] = 1 Then 0 Else 1 End, ci.Name, @OriginWeb
	From Notes n
	join Contact c on c.id = n.Owner_ID
	join Relations r on ItemID = n.id and ItemType = 'Notes'
	left outer join ContextItem ci on ci.ID=n.ContextItemID
	where TargetID = @ContactID and isnull([Public],1) = isnull(case when [Public] = 0 then (case when @CallerID = n.Owner_ID then 0 else 1 end) else [Public] end,1)

	--Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID)
	--Select @CallerID,  DateCreated [Date], KnownAs [Owner], 'Note' [Group], case when [Public] = 1 then 'Public' else 'Private' end [Type],
	--case when [Public] = 1 then 8 else 7 end GlyphID, cast(Content as varchar(256)), 'Outgoing', 1 [Status], n.[ID] [ID], c.ID, n.ContextItemID
	--From Notes n
	--join Contact c on c.id = n.Owner_ID
	--join Relations r on ItemID = n.id and ItemType = 'Notes'
	--where TargetID = @ContactID and isnull([Public],1) = isnull(case when [Public] = 0 then (case when @CallerID = n.Owner_ID then 0 else 1 end) else [Public] end,1)

End  --End Contact Only

Else If @InstanceType='Prospect'
Begin

	

	If @ContactID = -1 
	Begin
		Insert working_DashboardContacts
		Select itemID, @CallerID
		From relations 
		Where Target = 'Prospect' and TargetID = @InstanceID and ItemType = 'Contact ' 
		and IsNull(CompanyID,-1) = Case When IsNull(@InstanceCompanyID,-1) = -1 Then IsNull(CompanyID,-1) Else @InstanceCompanyID End
	End
	Else
	Begin 
		Insert working_DashboardContacts
		Select @ContactID, @CallerID
	End


	if( @OriginWeb = 'T' )
	begin
		Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb)
		Select @CallerID, DateCreated [Date], KnownAs [Owner], ContactTypeGroup [Group], ContactType [Type], GlyphID, Subject, Direction, Succeeded [Status], 
		ch.ID [ID], ContactID,ch.ContextItemID, IsNull(ch.isPrivate,0), ci.Name, @OriginWeb
		From ContactHistory ch
		Inner Join Contact c on c.id = ch.ContactOwnerID
		Inner Join ContactType ct on ch.ContactType_ID = ct.id
		Inner Join ContactTypeGroup ctg on ct.ContactGroupID = ctg.id
		left outer join ContextItem ci on ci.ID=ch.ContextItemId
		Where ContactID in (Select ContactID From working_DashboardContacts Where Username = @CallerID)
		and ct.GlyphID not in(16/*Quote*/,18/*Estimate*/,19/*Project*/,20/*RentQuote*/,21/*RentBooking*/,22/*RentContract*/)
		and (IsNull(ch.isPrivate,0) = 0 or (ISNULL(ch.isPrivate,0) = 1 and ch.ContactOwnerID = @CallerID))

		Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb)
		Select @CallerID,  DateCreated [Date], KnownAs [Owner], 'Note' [Group], 'Note' [Type],
		8 GlyphID, cast(Content as varchar(256)), 'Outgoing', 1 [Status], n.[ID] [ID], TargetID,n.ContextItemID, Case When n.[Public] = 1 Then 0 Else 1 End, ci.Name, @OriginWeb
		From notes n 
		Inner Join Contact c on c.id = n.Owner_ID
		Inner Join Relations r on ItemID = n.id and ItemType = 'Notes'
		left outer join ContextItem ci on ci.ID=n.ContextItemId
		Where TargetID in (Select ContactID From working_DashboardContacts Where Username = @CallerID)
		and isnull([Public],1) = isnull(case when [Public] = 0 then (case when @CallerID = n.Owner_ID then 0 else 1 end) else [Public] end,1)
	end
	else
	begin
		Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb)
		Select @CallerID, DateCreated [Date], KnownAs [Owner], ContactTypeGroup [Group], ContactType [Type], GlyphID, Subject, Direction, Succeeded [Status], 
		ch.ID [ID], ContactID,ch.ContextItemID, IsNull(ch.isPrivate,0), ci.Name, @OriginWeb
		From ContactHistory ch
		Inner Join Contact c on c.id = ch.ContactOwnerID
		Inner Join ContactType ct on ch.ContactType_ID = ct.id
		Inner Join ContactTypeGroup ctg on ct.ContactGroupID = ctg.id
		left outer join ContextItem ci on ci.ID=ch.ContextItemId
		Where ContactID in (Select ContactID From working_DashboardContacts Where Username = @CallerID)
		and ct.GlyphID not in(16/*Quote*/,18/*Estimate*/,19/*Project*/,20/*RentQuote*/,21/*RentBooking*/,22/*RentContract*/)
		and (IsNull(ch.isPrivate,0) = 0 or (ISNULL(ch.isPrivate,0) = 1 and ch.ContactOwnerID = @CallerID))
		and ch.CompanyID is null

		Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb)
		Select @CallerID,  DateCreated [Date], KnownAs [Owner], 'Note' [Group], 'Note' [Type],
		8 GlyphID, cast(Content as varchar(256)), 'Outgoing', 1 [Status], n.[ID] [ID], TargetID,n.ContextItemID, Case When n.[Public] = 1 Then 0 Else 1 End, ci.Name, @OriginWeb
		From notes n 
		Inner Join Contact c on c.id = n.Owner_ID
		Inner Join Relations r on ItemID = n.id and ItemType = 'Notes'
		left outer join ContextItem ci on ci.ID=n.ContextItemId
		Where TargetID in (Select ContactID From working_DashboardContacts Where Username = @CallerID)
		and isnull([Public],1) = isnull(case when [Public] = 0 then (case when @CallerID = n.Owner_ID then 0 else 1 end) else [Public] end,1)
		and n.CompanyID is null
		
		
		declare co_cur cursor for	
		select AutoID, TreasuryDBName from companies Where IsNull(Active,0) = 1
		
	
		open co_cur 
		fetch co_cur into @CompanyID, @tr_db
		while @@fetch_status=0
		begin
			select @sql = '
			Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb, ReferenceType, Reference)
			Select '''+cast(@CallerID as varchar)+''', DateCreated [Date], KnownAs [Owner], ContactTypeGroup [Group], ContactType [Type], GlyphID, Subject, Direction, Succeeded [Status], 
			ch.ID [ID], ContactID,ch.ContextItemID, IsNull(ch.isPrivate,0), ci.Name, '''+@OriginWeb+''',
			case when ch.ReferenceType = ''SOQ'' then ''Sales Order/Quote #'' when ch.ReferenceType = ''ProjWO'' then ''Project/Work Order #'' when ch.ReferenceType = ''OPP'' then ''Opportunity #'' else '''' end [ReferenceType],
			isnull(isnull(proj.pri_code,smh.so_no), opp.opportuntity_num) [Reference]
			From ContactHistory ch
			Inner Join Contact c on c.id = ch.ContactOwnerID
			Inner Join ContactType ct on ch.ContactType_ID = ct.id
			Inner Join ContactTypeGroup ctg on ct.ContactGroupID = ctg.id
			left outer join ContextItem ci on ci.ID=ch.ContextItemId
			left outer join ' + @tr_db + '.dbo.proj_header proj on proj.pri_id=ch.referenceID and ch.ReferenceType = ''ProjWO''
			left outer join ' + @tr_db + '.dbo.so_master_hdr smh on smh.so_id=ch.referenceID and ch.ReferenceType = ''SOQ''
			left outer join ' + @tr_db + '.dbo.rm_opportunity opp on opp.rm_opportunity_id=ch.referenceID and ch.ReferenceType = ''OPP''
			Where ContactID in (Select ContactID From working_DashboardContacts Where Username = '''+cast(@CallerID as varchar)+''')
			and ct.GlyphID not in(16/*Quote*/,18/*Estimate*/,19/*Project*/,20/*RentQuote*/,21/*RentBooking*/,22/*RentContract*/)
			and (IsNull(ch.isPrivate,0) = 0 or (ISNULL(ch.isPrivate,0) = 1 and ch.ContactOwnerID = '''+cast(@CallerID as varchar)+'''))
			and ch.CompanyID = '+cast(@CompanyID as varchar)+'

			Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb, ReferenceType, Reference)
			Select '''+cast(@CallerID as varchar)+''',  DateCreated [Date], KnownAs [Owner], ''Note'' [Group], ''Note'' [Type],
			8 GlyphID, cast(Content as varchar(256)), ''Outgoing'', 1 [Status], n.[ID] [ID], TargetID,n.ContextItemID, Case When n.[Public] = 1 Then 0 Else 1 End, ci.Name, '''+@OriginWeb+''',
			case when n.ReferenceType = ''SOQ'' then ''Sales Order/Quote #'' when n.ReferenceType = ''ProjWO'' then ''Project/Work Order #'' when n.ReferenceType = ''OPP'' then ''Opportunity #'' else '''' end [ReferenceType],
			isnull(isnull(proj.pri_code,smh.so_no), opp.opportuntity_num) [Reference]
			From notes n 
			Inner Join Contact c on c.id = n.Owner_ID
			Inner Join Relations r on ItemID = n.id and ItemType = ''Notes''
			left outer join ContextItem ci on ci.ID=n.ContextItemId
			left outer join ' + @tr_db + '.dbo.proj_header proj on proj.pri_id=n.referenceID and n.ReferenceType = ''ProjWO''
			left outer join ' + @tr_db + '.dbo.so_master_hdr smh on smh.so_id=n.referenceID and n.ReferenceType = ''SOQ''
			left outer join ' + @tr_db + '.dbo.rm_opportunity opp on opp.rm_opportunity_id=n.referenceID and n.ReferenceType = ''OPP''
			Where TargetID in (Select ContactID From working_DashboardContacts Where Username = '''+cast(@CallerID as varchar)+''')
			and isnull([Public],1) = isnull(case when [Public] = 0 then (case when '''+cast(@CallerID as varchar)+''' = n.Owner_ID then 0 else 1 end) else [Public] end,1)
			and n.CompanyID ='+cast(@CompanyID as varchar)
			exec(@sql)
			
			fetch co_cur into @CompanyID, @tr_db
		end			
		close co_cur
		deallocate co_cur
			
	end

End --End Prospect

Else If @InstanceType='Customer'
Begin

	insert into #ch_links(CH_ID,CHR_TYPE)--defaults incase filter chriteria is not used
	select -99,'C'--contact history
	union all
	select -99,'N'--note
	
	
	set @FilterUsed = 0
	if exists(select * from working_Contact_Navigation_Filter where username = cast(@CallerID as varchar(max)))
		if( (select top 1 (RTRIM(LTRIM(pri_code+pri_name+lot_num+block_num))) from working_Contact_Navigation_Filter where username = cast(@CallerID as varchar(max)))) != ''
		begin
			set @FilterUsed = 1
			set @sql = 'select r.ContactHistory_ID,r.CHR_Type_CN,r.company_id from ContactHistoryRelation r
join ContactHistoryFieldLink l  on l.CH_FieldLink_ID=r.CHR_FieldLink_ID
join '+@tr_db+'.dbo.PROJ_LOT pl on pl.proj_lot_id = r.CHR_IDValue
join '+@tr_db+'.dbo.PROJ_HEADER ph on ph.pri_id = pl.pri_id
join working_Contact_Navigation_Filter f on f.username = '''+cast(@CallerID as varchar(max))+''' and
ph.pri_name like f.pri_name+''%'' and ph.pri_code like cast(f.pri_code as varchar(max))+''%'' and pl.lot_num like f.lot_num+''%'' and pl.block_num like f.block_num+ ''%''
where r.company_id = '+cast(@InstanceCompanyID as varchar(max))+' and l.CH_TableDotField = ''PROJ_LOT.PROJ_LOT_ID''			
			'
			insert into #ch_links(CH_ID,CHR_TYPE,CompanyID)
			exec(@sql)
		
			
		end
	
	

	If @ContactID = -1 
	Begin
		Insert working_DashboardContacts
		Select itemID, @CallerID
		From relations 
		Where Target = 'Customer' and TargetID = @InstanceID and ItemType = 'Contact '
		and IsNull(CompanyID,-1) = Case When IsNull(@InstanceCompanyID,-1) = -1 Then IsNull(CompanyID,-1) Else @InstanceCompanyID End
	End
	Else
	Begin 
		Insert working_DashboardContacts
		Select @ContactID, @CallerID
	End

	if( @OriginWeb = 'T' )
	begin
		Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb)
		Select @CallerID, DateCreated [Date], KnownAs [Owner], ContactTypeGroup [Group], ContactType [Type], GlyphID, [Subject], Direction, Succeeded [Status], 
		ch.ID [ID], ContactID,ch.ContextItemID, ISNULL(ch.isPrivate,0), ci.Name, @OriginWeb
		From ContactHistory ch
		Left Outer Join Contact c on c.id = ch.ContactOwnerID
		Inner Join ContactType ct on ch.ContactType_ID = ct.id
		Inner Join ContactTypeGroup ctg on ct.ContactGroupID = ctg.id
		left outer join ContextItem ci on ci.ID=ch.ContextItemId
		Where ContactID in (Select ContactID From working_DashboardContacts Where Username = @CallerID)
		and ct.GlyphID not in(16/*Quote*/,18/*Estimate*/,19/*Project*/,20/*RentQuote*/,21/*RentBooking*/,22/*RentContract*/)
		and (IsNull(ch.isPrivate,0) = 0 or (ISNULL(ch.isPrivate,0) = 1 and ch.ContactOwnerID = @CallerID))
		and case when @FilterUsed = 0 then -99 else ch.ID end in (select l.CH_ID from #ch_links l where l.CHR_TYPE = 'C')
		
		
		Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb)
		Select @CallerID,  DateCreated [Date], KnownAs [Owner], 'Note' [Group], 'Note' [Type],
		8 GlyphID, cast(Content as varchar(256)), 'Outgoing', 1 [Status], n.[ID] [ID], TargetID,n.ContextItemID, Case When n.[Public] = 1 Then 0 Else 1 End, ci.Name, @OriginWeb
		From Notes n
		Inner Join Contact c on c.id = n.Owner_ID
		Inner Join Relations r on ItemID = n.id and ItemType = 'Notes'
		left outer join ContextItem ci on ci.ID=n.ContextItemId
		Where TargetID in (Select ContactID From working_DashboardContacts Where Username = @CallerID)
		and isnull([Public],1) = isnull(case when [Public] = 0 then (case when @CallerID = n.Owner_ID then 0 else 1 end) else [Public] end,1)
		and case when @FilterUsed = 0 then -99 else n.ID end in (select l.CH_ID from #ch_links l where l.CHR_TYPE = 'N')
	end
	else
	begin
		Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb)
		Select @CallerID, DateCreated [Date], KnownAs [Owner], ContactTypeGroup [Group], ContactType [Type], GlyphID, [Subject], Direction, Succeeded [Status], 
		ch.ID [ID], ContactID,ch.ContextItemID, ISNULL(ch.isPrivate,0), ci.Name, @OriginWeb
		From ContactHistory ch
		Left Outer Join Contact c on c.id = ch.ContactOwnerID
		Inner Join ContactType ct on ch.ContactType_ID = ct.id
		Inner Join ContactTypeGroup ctg on ct.ContactGroupID = ctg.id
		left outer join ContextItem ci on ci.ID=ch.ContextItemId
		Where ContactID in (Select ContactID From working_DashboardContacts Where Username = @CallerID)
		and ct.GlyphID not in(16/*Quote*/,18/*Estimate*/,19/*Project*/,20/*RentQuote*/,21/*RentBooking*/,22/*RentContract*/)
		and (IsNull(ch.isPrivate,0) = 0 or (ISNULL(ch.isPrivate,0) = 1 and ch.ContactOwnerID = @CallerID))
		and ch.CompanyID is null
		and case when @FilterUsed = 0 then -99 else ch.ID end in (select l.CH_ID from #ch_links l where l.CHR_TYPE = 'C')

		Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb)
		Select @CallerID,  DateCreated [Date], KnownAs [Owner], 'Note' [Group], 'Note' [Type],
		8 GlyphID, cast(Content as varchar(256)), 'Outgoing', 1 [Status], n.[ID] [ID], TargetID,n.ContextItemID, Case When n.[Public] = 1 Then 0 Else 1 End, ci.Name, @OriginWeb
		From Notes n
		Inner Join Contact c on c.id = n.Owner_ID
		Inner Join Relations r on ItemID = n.id and ItemType = 'Notes'
		left outer join ContextItem ci on ci.ID=n.ContextItemId
		Where TargetID in (Select ContactID From working_DashboardContacts Where Username = @CallerID)
		and isnull([Public],1) = isnull(case when [Public] = 0 then (case when @CallerID = n.Owner_ID then 0 else 1 end) else [Public] end,1)
		and n.CompanyID is null
		and case when @FilterUsed = 0 then -99 else n.ID end in (select l.CH_ID from #ch_links l where l.CHR_TYPE = 'N')
		
		declare co_cur cursor for	
		select AutoID, TreasuryDBName from companies Where IsNull(Active,0) = 1
	
		open co_cur 
		fetch co_cur into @CompanyID, @tr_db
		while @@fetch_status=0
		begin
			truncate table #ch_links
			insert into #ch_links(CH_ID,CHR_TYPE,CompanyID)--defaults incase filter chriteria is not used
				select -99,'C',@CompanyID--contact history
				union all
				select -99,'N',@CompanyID--note
	
	
			set @FilterUsed = 0
			if exists(select * from working_Contact_Navigation_Filter where username = cast(@CallerID as varchar(max)))
				if( (select top 1 (RTRIM(LTRIM(pri_code+pri_name+lot_num+block_num))) from working_Contact_Navigation_Filter where username = cast(@CallerID as varchar(max)))) != ''
				begin
					set @FilterUsed = 1
					set @sql = 'select r.ContactHistory_ID,r.CHR_Type_CN,r.company_id from ContactHistoryRelation r
		join ContactHistoryFieldLink l  on l.CH_FieldLink_ID=r.CHR_FieldLink_ID
		join '+@tr_db+'.dbo.PROJ_LOT pl on pl.proj_lot_id = r.CHR_IDValue
		join '+@tr_db+'.dbo.PROJ_HEADER ph on ph.pri_id = pl.pri_id
		join working_Contact_Navigation_Filter f on f.username = '''+cast(@CallerID as varchar(max))+''' and
		ph.pri_name like f.pri_name+''%'' and ph.pri_code like cast(f.pri_code as varchar(max))+''%'' and pl.lot_num like f.lot_num+''%'' and pl.block_num like f.block_num+ ''%''
		where r.company_id = '+cast(@CompanyID as varchar(max))+' and l.CH_TableDotField = ''PROJ_LOT.PROJ_LOT_ID''			
					'
					insert into #ch_links(CH_ID,CHR_TYPE,CompanyID)
					exec(@sql)
			end
		
		
		
		
			select @sql = '
			Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb, ReferenceType, Reference)
			Select '''+cast(@CallerID as varchar)+''', DateCreated [Date], KnownAs [Owner], ContactTypeGroup [Group], ContactType [Type], GlyphID, [Subject], Direction, Succeeded [Status], 
			ch.ID [ID], ContactID,ch.ContextItemID, ISNULL(ch.isPrivate,0), ci.Name, '''+@OriginWeb+''',
			case when ch.ReferenceType = ''SOQ'' then ''Sales Order/Quote #'' when ch.ReferenceType = ''ProjWO'' then ''Project/Work Order #'' when ch.ReferenceType = ''OPP'' then ''Opportunity #'' else '''' end [ReferenceType],
			isnull(isnull(proj.pri_code,smh.so_no), opp.opportuntity_num) [Reference]
			From ContactHistory ch
			Left Outer Join Contact c on c.id = ch.ContactOwnerID
			Inner Join ContactType ct on ch.ContactType_ID = ct.id
			Inner Join ContactTypeGroup ctg on ct.ContactGroupID = ctg.id
			left outer join ContextItem ci on ci.ID=ch.ContextItemId
			left outer join ' + @tr_db + '.dbo.proj_header proj on proj.pri_id=ch.referenceID and ch.ReferenceType = ''ProjWO''
			left outer join ' + @tr_db + '.dbo.so_master_hdr smh on smh.so_id=ch.referenceID and ch.ReferenceType = ''SOQ''
			left outer join ' + @tr_db + '.dbo.rm_opportunity opp on opp.rm_opportunity_id=ch.referenceID and ch.ReferenceType = ''OPP''
			Where ContactID in (Select ContactID From working_DashboardContacts Where Username = '''+cast(@CallerID as varchar)+''')
			and ct.GlyphID not in(16/*Quote*/,18/*Estimate*/,19/*Project*/,20/*RentQuote*/,21/*RentBooking*/,22/*RentContract*/)
			and (IsNull(ch.isPrivate,0) = 0 or (ISNULL(ch.isPrivate,0) = 1 and ch.ContactOwnerID = '''+cast(@CallerID as varchar)+'''))
			and ch.CompanyID = '+cast(@CompanyID as varchar)+'
			and case when '+cast(@FilterUsed as varchar(max))+' = 0 then -99 else ch.ID end in (select l.CH_ID from #ch_links l where l.CHR_TYPE = ''C'' and l.companyID = '+cast(@CompanyID as varchar)+')

			Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb, ReferenceType, Reference)
			Select '''+cast(@CallerID as varchar)+''',  DateCreated [Date], KnownAs [Owner], ''Note'' [Group], ''Note'' [Type],
			8 GlyphID, cast(Content as varchar(256)), ''Outgoing'', 1 [Status], n.[ID] [ID], TargetID,n.ContextItemID, Case When n.[Public] = 1 Then 0 Else 1 End, ci.Name, '''+@OriginWeb+''',
			case when n.ReferenceType = ''SOQ'' then ''Sales Order/Quote #'' when n.ReferenceType = ''ProjWO'' then ''Project/Work Order #'' when n.ReferenceType = ''OPP'' then ''Opportunity #'' else '''' end [ReferenceType],
			isnull(isnull(proj.pri_code,smh.so_no), opp.opportuntity_num) [Reference]
			From Notes n
			Inner Join Contact c on c.id = n.Owner_ID
			Inner Join Relations r on ItemID = n.id and ItemType = ''Notes''
			left outer join ContextItem ci on ci.ID=n.ContextItemId
			left outer join ' + @tr_db + '.dbo.proj_header proj on proj.pri_id=n.referenceID and n.ReferenceType = ''ProjWO''
			left outer join ' + @tr_db + '.dbo.so_master_hdr smh on smh.so_id=n.referenceID and n.ReferenceType = ''SOQ''
			left outer join ' + @tr_db + '.dbo.rm_opportunity opp on opp.rm_opportunity_id=n.referenceID and n.ReferenceType = ''OPP''
			Where TargetID in (Select ContactID From working_DashboardContacts Where Username = '''+cast(@CallerID as varchar)+''')
			and isnull([Public],1) = isnull(case when [Public] = 0 then (case when '''+cast(@CallerID as varchar)+''' = n.Owner_ID then 0 else 1 end) else [Public] end,1)
			and n.CompanyID ='+cast(@CompanyID as varchar)+'
			and case when '+cast(@FilterUsed as varchar(max))+' = 0 then -99 else n.ID end in (select l.CH_ID from #ch_links l where l.CHR_TYPE = ''N'' and l.companyID = '+cast(@CompanyID as varchar)+')'		
			exec(@sql)
			
			fetch co_cur into @CompanyID, @tr_db
		end			
		close co_cur
		deallocate co_cur
	end
	
	delete working_Contact_Navigation_Filter where username = cast(@CallerID as varchar(max))

End --End Customer

Else If @InstanceType='Supplier'
Begin

	If @ContactID = -1 
	Begin
		Insert working_DashboardContacts
		Select itemID, @CallerID
		From relations Where Target = 'Supplier' and TargetID = @InstanceID and ItemType = 'Contact '
		and IsNull(CompanyID,-1) = Case When IsNull(@InstanceCompanyID,-1) = -1 Then IsNull(CompanyID,-1) Else @InstanceCompanyID End
	End
	Else
	Begin 
		Insert working_DashboardContacts
		Select @ContactID, @CallerID
	End
	Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb)
	Select @CallerID, DateCreated [Date], KnownAs [Owner], ContactTypeGroup [Group], ContactType [Type], GlyphID, [Subject], Direction, Succeeded [Status], 
	ch.ID [ID], ContactID,ch.ContextItemID, isNull(ch.isPrivate,0), ci.Name, @OriginWeb
	from ContactHistory ch
	Inner Join Contact c on c.id = ch.ContactOwnerID
	Inner Join ContactType ct on ch.ContactType_ID = ct.id
	Inner Join ContactTypeGroup ctg on ct.ContactGroupID = ctg.id
	left outer join ContextItem ci on ci.ID=ch.ContextItemId
	Where ContactID in (Select ContactID From working_DashboardContacts Where Username = @CallerID)
	and ct.GlyphID not in(16/*Quote*/,18/*Estimate*/,19/*Project*/,20/*RentQuote*/,21/*RentBooking*/,22/*RentContract*/)
	and (IsNull(ch.isPrivate,0) = 0 or (ISNULL(ch.isPrivate,0) = 1 and ch.ContactOwnerID = @CallerID))


	Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb)
	Select @CallerID,  DateCreated [Date], KnownAs [Owner], 'Note' [Group], 'Note' [Type],
	8 GlyphID, cast(Content as varchar(256)), 'Outgoing', 1 [Status], n.[ID] [ID], TargetID,n.ContextItemID, Case When n.[Public] = 1 Then 0 Else 1 End, ci.Name, @OriginWeb
	From Notes n
	Inner Join Contact c on c.id = n.Owner_ID
	Inner Join Relations r on ItemID = n.id and ItemType = 'Notes'
	left outer join ContextItem ci on ci.ID=n.ContextItemId
	Where TargetID in (Select ContactID From working_DashboardContacts Where Username = @CallerID)
	and isnull([Public],1) = isnull(case when [Public] = 0 then (case when @CallerID = n.Owner_ID then 0 else 1 end) else [Public] end,1)

End

Else If @InstanceType='Tenant'
Begin

	If @ContactID = -1 
	Begin
		Insert working_DashboardContacts
		Select itemID, @CallerID
		From relations Where Target = 'Tenant' and TargetID = @InstanceID and ItemType = 'Contact '
		and IsNull(CompanyID,-1) = Case When IsNull(@InstanceCompanyID,-1) = -1 Then IsNull(CompanyID,-1) Else @InstanceCompanyID End
	End
	Else
	Begin 
		Insert working_DashboardContacts
		Select @ContactID, @CallerID
	End
	Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb)
	Select @CallerID, DateCreated [Date], KnownAs [Owner], ContactTypeGroup [Group], ContactType [Type], GlyphID, [Subject], Direction, Succeeded [Status], 
	ch.ID [ID], ContactID,ch.ContextItemID, IsNull(ch.IsPrivate,0), ci.Name, @OriginWeb
	from ContactHistory ch
	Inner Join Contact c on c.id = ch.ContactOwnerID
	Inner Join ContactType ct on ch.ContactType_ID = ct.id
	Inner Join ContactTypeGroup ctg on ct.ContactGroupID = ctg.id
	left outer join ContextItem ci on ci.ID=ch.ContextItemId
	Where ContactID in (Select ContactID From working_DashboardContacts Where Username = @CallerID)
	and ct.GlyphID not in(16/*Quote*/,18/*Estimate*/,19/*Project*/,20/*RentQuote*/,21/*RentBooking*/,22/*RentContract*/)
	and (IsNull(ch.isPrivate,0) = 0 or (ISNULL(ch.isPrivate,0) = 1 and ch.ContactOwnerID = @CallerID))

	Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb)
	Select @CallerID,  DateCreated [Date], KnownAs [Owner], 'Note' [Group], 'Note' [Type],
	8 GlyphID, cast(Content as varchar(256)), 'Outgoing', 1 [Status], n.[ID] [ID], TargetID,n.ContextItemID, Case When n.[Public] = 1 Then 0 Else 1 End, ci.Name, @OriginWeb
	From Notes n
	Inner Join Contact c on c.id = n.Owner_ID
	Inner Join Relations r on ItemID = n.id and ItemType = 'Notes'
	left outer join ContextItem ci on ci.ID=n.ContextItemId
	Where TargetID in (Select ContactID From working_DashboardContacts Where Username = @CallerID)
	and isnull([Public],1) = isnull(case when [Public] = 0 then (case when @CallerID = n.Owner_ID then 0 else 1 end) else [Public] end,1)

End

Else If @InstanceType='Lease_Contacts'
Begin

	If @ContactID = -1 
	Begin
		Insert working_DashboardContacts
		Select itemID, @CallerID
		From relations Where Target = 'Lease' and TargetID = @InstanceID and ItemType in ('Lease Contact', 'Lease Occupant')
		and IsNull(CompanyID,-1) = Case When IsNull(@InstanceCompanyID,-1) = -1 Then IsNull(CompanyID,-1) Else @InstanceCompanyID End
	End
	Else
	Begin 
		Insert working_DashboardContacts
		Select @ContactID, @CallerID
	End
	Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb)
	Select @CallerID, DateCreated [Date], KnownAs [Owner], ContactTypeGroup [Group], ContactType [Type], GlyphID, [Subject], Direction, Succeeded [Status], 
	ch.ID [ID], ContactID,ch.ContextItemID, IsNull(ch.IsPrivate,0), ci.Name, @OriginWeb
	from ContactHistory ch
	Inner Join Contact c on c.id = ch.ContactOwnerID
	Inner Join ContactType ct on ch.ContactType_ID = ct.id
	Inner Join ContactTypeGroup ctg on ct.ContactGroupID = ctg.id
	left outer join ContextItem ci on ci.ID=ch.ContextItemId
	Where ContactID in (Select ContactID From working_DashboardContacts Where Username = @CallerID)
	and ct.GlyphID not in(16/*Quote*/,18/*Estimate*/,19/*Project*/,20/*RentQuote*/,21/*RentBooking*/,22/*RentContract*/)
	and (IsNull(ch.isPrivate,0) = 0 or (ISNULL(ch.isPrivate,0) = 1 and ch.ContactOwnerID = @CallerID))

	Insert working_ContactDetails(UserName, [Date], [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID,ContextItemID, IsPrivate, TopicalArea, OriginWeb)
	Select @CallerID,  DateCreated [Date], KnownAs [Owner], 'Note' [Group], 'Note' [Type],
	8 GlyphID, cast(Content as varchar(256)), 'Outgoing', 1 [Status], n.[ID] [ID], TargetID,n.ContextItemID, Case When n.[Public] = 1 Then 0 Else 1 End, ci.Name, @OriginWeb
	From Notes n
	Inner Join Contact c on c.id = n.Owner_ID
	Inner Join Relations r on ItemID = n.id and ItemType = 'Notes'
	left outer join ContextItem ci on ci.ID=n.ContextItemId
	Where TargetID in (Select ContactID From working_DashboardContacts Where Username = @CallerID)
	and isnull([Public],1) = isnull(case when [Public] = 0 then (case when @CallerID = n.Owner_ID then 0 else 1 end) else [Public] end,1)

End


--Updates Contact ID's with proper names
Update working_ContactDetails
Set Contact = (Select IsNull(KnownAs,'') from Contact Where ID = ContactID)
where OriginWeb=@OriginWeb

Update working_ContactDetails
Set IsPrivate = ISNull(IsPrivate,0)
Where UserName = @CallerID and OriginWeb=@OriginWeb

if( @OriginWeb = 'T' )
begin
	delete w
	from working_ContactDetails w 
	join ContactHistory ch on ch.ID=w.ID
	Join ContactType ct on ch.ContactType_ID = ct.id
	where UserName = @CallerID and OriginWeb=@OriginWeb and ct.id not in (1,2,3,4,7,8,18,19,20,21)
end

if( @OriginWeb = 'T' )
begin
	select UniqID, UserName, Date, [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID, Contact, ContextItemID, IsPrivate, TopicalArea
	from working_ContactDetails where UserName = @CallerID and OriginWeb=@OriginWeb order by date desc
end
else
begin
	select UniqID, UserName, Date, [Owner], [Group], [Type], GlyphID, [Subject], Direction, [Status], ID, ContactID, Contact, ContextItemID, IsPrivate, TopicalArea, ReferenceType, Reference
	from working_ContactDetails where UserName = @CallerID and OriginWeb=@OriginWeb order by date desc
end







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_ContactPostOfficeEmails]') and xtype = 'P ')  
 drop Procedure sp_ContactPostOfficeEmails
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure [dbo].[sp_ContactPostOfficeEmails] (@UserId int)

AS

--Declare @UserID int
--Set @UserID = 4

SELECT     ch.ID, c.ID [ContactID], Type, KnownAs, Email1Address AS Email
FROM         Contact c LEFT OUTER JOIN
                      ContactHistory ch ON ch.EmailAddress = c.Email1Address
WHERE     IsNull(Email1Address,'') <> '' AND IsNull(KnownAs,'') <> '' AND ch.ContactType_ID = 1 AND ch.ContactOwnerID = @UserID
		  And IsNull(Confirmed,0) = 0
UNION
SELECT     ch.ID, c.ID [ContactID], Type, KnownAs, Email2Address AS Email
FROM         Contact c LEFT OUTER JOIN
                      ContactHistory ch ON ch.EmailAddress = c.Email2Address
WHERE     IsNull(Email2Address,'') <> '' AND IsNull(KnownAs,'') <> '' AND ch.ContactType_ID = 1 AND ch.ContactOwnerID = @UserID
		  And IsNull(Confirmed,0) = 0
UNION
SELECT     ch.ID, c.ID [ContactID], Type, KnownAs, Email3Address AS Email
FROM         Contact c JOIN
                      ContactHistory ch ON ch.EmailAddress = c.Email3Address
WHERE     IsNull(Email3Address,'') <> '' AND IsNull(KnownAs,'') <> '' AND ch.ContactType_ID = 1 AND ch.ContactOwnerID = @UserID
		  And IsNull(Confirmed,0) = 0
ORDER BY ch.ID

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Create_HB_PO]') and xtype = 'P ')  
 drop Procedure sp_Create_HB_PO
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE Procedure sp_Create_HB_PO 
(@PO varchar(20), @QuoteID int, @RFQC_ID int, @UserName varchar(30))
AS
------------------DEBUGING EXECUTE STATMENTS------------------
--  
--  exec sp_Create_HB_PO 'HB165-4', 2119, 454, 'hmtermsrvr.himinc.com'
--  
----------------------DEBUGING VAREIABLES---------------------
--  Declare @PO varchar(20), @QuoteID int, @RFQC_ID int, @UserName varchar(30)
--
--  Select @PO = 'HB165-4', @QuoteID = 2119, @RFQC_ID = 454, @UserName = 'hmtermsrvr.himinc.com'
--------------------------------------------------------------

	Declare @CompanyID int, @CMSS_ID int

	Select @CompanyID = CompanyID from scQuote Where ID = @QuoteID

	--Debugging
	--Select @CompanyID as CompanyID

	Select @CMSS_ID = CMSS_ID From CMS_Notification Where QuoteID = @QuoteID and UserName = @UserName and RFQC_ID = @RFQc_ID

	--Debugging
	--Select @CMSS_ID as CMSS_ID
	--Select 'Values ( ' + Convert(varchar(20),@CMSS_ID) + ', ''' + @PO + ''', ' + Convert(varchar(20),@CompanyID) + ')'
	Insert Into HB_POS (CMSS_ID,PO_Number,CompanyID)
	Values(@CMSS_ID,@PO,@CompanyID)



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Create_ServiceCenterContact]') and xtype = 'P ')  
 drop Procedure sp_Create_ServiceCenterContact
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE  Procedure sp_Create_ServiceCenterContact (@FirstName varchar(50), @WindowsLogon varchar(50), @Password varchar(20), @Tech bit, @User bit)

AS

If ((@FirstName = '' or @FirstName = Null) OR (@WindowsLogon = '' or @WindowsLogon = Null) OR (@Password = '' or @Password = null) OR (@Tech = null AND @User = null))
	Begin
		If ((@FirstName = '' or @FirstName = Null) AND (@WindowsLogon = '' or @WindowsLogon = Null) AND (@Password = '' or @Password = null))
			Begin
				RAISERROR('All Values are empty please enter in proper values', 16, 1)
			End
		Else If (@FirstName = '' or @FirstName = Null)
			Begin
				RAISERROR('First Name is empty', 16, 1)
			End
		Else If (@WindowsLogon = '' or @WindowsLogon = Null)
			Begin
				RAISERROR('Windows Logon is empty', 16, 1)
			End
		Else If (@Password = '' or @Password = null)
			Begin
				RAISERROR('Password is empty', 16, 1)
			End
		Else If (@Tech = null AND @User = null)
			Begin
				RAISERROR('Error Tech amd User are empyt at least one is require to have a value',16,1)
				ROLLBACK
			End
		Else
			Begin
				RAISERROR('Error validating parameters', 16, 1)
			End
	End
Else
	Begin
		Insert Contact (FirstName , KnownAs, Windows_Login, Password, Type) Values ( @FirstName, @FirstName, @WindowsLogon , @Password, 'User')
		
		If (@@Error <> 0)
			Begin
				RAISERROR('Error saving User', 16, 1)
				ROLLBACK
			End
		Else
			Begin
				Declare @ContactID int
				Select @ContactID = max(id) from Contact
				If (@User = 1)
					Begin
						Insert Access (ContactID, UserLevel) Values (@ContactID, 'V')

						If (@@Error <> 0)
							Begin
								RAISERROR('Error saving Access Level User', 16, 1)
								ROLLBACK
						End
					End
				If (@Tech = 1)
					Begin
						Insert Access (ContactID, UserLevel) Values (@ContactID, 'T')

						If (@@Error <> 0)
							Begin
								RAISERROR('Error saving Access Level User', 16, 1)
								ROLLBACK
						End
					End
				
				If (@@Error <> 0)
					Begin
						RAISERROR('Error saving Access Level', 16, 1)
						ROLLBACK
					End
				Else
					Begin
							Declare @Max int 
							Select @Max = max(Proj_id) from msp_projects
							Select @Max = isnull(@Max,0) + 1
							Insert msp_projects (PROJ_ID, PROJ_NAME)
							Select @Max, 'Service Center: '+ cast((select max(id) from Contact) as varchar(50))
								If (@@Error <> 0)
									Begin
										RAISERROR('Error saving Project in MSP_Projects', 16, 1)
										ROLLBACK
									End
								Else
									Begin
										Insert msp_dashboard_projects(Link_ID, SourceFlavour,PROJ_ID, PROJ_NAME, PROJ_CREATION_DATE, DBModule_ID)
										Select (Select max(id) from Contact), 'nbgServiceCenter', @Max, 'Service Center: '+ cast((select max(id) from Contact) as varchar(50)), getdate(), -1
										If (@@Error <> 0)
											Begin	
												RAISERROR('Error saving Project in MSP_Dashboard_Projects', 16, 1)
												ROLLBACK
											End
									End

					End
			End

	End




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_creatediagram]') and xtype = 'P ')  
 drop Procedure sp_creatediagram
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

	CREATE PROCEDURE dbo.sp_creatediagram
	(
		@diagramname 	sysname,
		@owner_id		int	= null, 	
		@version 		int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
	
		declare @theId int
		declare @retval int
		declare @IsDbo	int
		declare @userName sysname
		if(@version is null or @diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID(); 
		select @IsDbo = IS_MEMBER(N'db_owner');
		revert; 
		
		if @owner_id is null
		begin
			select @owner_id = @theId;
		end
		else
		begin
			if @theId <> @owner_id
			begin
				if @IsDbo = 0
				begin
					RAISERROR (N'E_INVALIDARG', 16, 1);
					return -1
				end
				select @theId = @owner_id
			end
		end
		-- next 2 line only for test, will be removed after define name unique
		if EXISTS(select diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @diagramname)
		begin
			RAISERROR ('The name is already used.', 16, 1);
			return -2
		end
	
		insert into dbo.sysdiagrams(name, principal_id , version, definition)
				VALUES(@diagramname, @theId, @version, @definition) ;
		
		select @retval = @@IDENTITY 
		return @retval
	END
	

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Customer_CreateUDFStore]') and xtype = 'P ')  
 drop Procedure sp_Customer_CreateUDFStore
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
Create Procedure sp_Customer_CreateUDFStore(@CustomerID int, @CompanyID int)
AS

--Declare @CustomerID int, @CompanyID int
--Select @CustomerID = 1, @CompanyID = 16

if (Select Count(*) from scUDFStore where OwnerID = @CustomerID and OwnerTableName = 'Customer' and CompanyID = @CompanyID) = 0
begin
	Insert Into scUDFStore(OwnerID, OwnerTableName, CompanyID)
	Values(@CustomerID, 'Customer', @CompanyID)
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CustomerContactWordMerge]') and xtype = 'P ')  
 drop Procedure sp_CustomerContactWordMerge
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
Create Procedure [dbo].[sp_CustomerContactWordMerge](@ContactID int, @CompanyID int)
AS

--Declare @ContactID int, @CompanyID int
--Select @ContactID = 68, @CompanyID = 16

Declare @str varchar(8000), @TRDB varchar(500)

Select @TRDB = TreasuryDBName from Companies Where AutoID = @CompanyID

Select @str = 
'Select IsNull(c.FirstName,'''') [FirstName], IsNull(c.LastName,'''') [LastName], IsNull(c.KnownAs,'''') [Name], 
IsNull(c.Greeting,'''') [Greeting], IsNull(c.Title,'''') [Salutation], IsNull(c.JobTitle,'''') [JobTitle], 
IsNull(c.BusinessStreet,'''') [BusinessStreet], IsNull(c.BusinessCity,'''') [BusinessCity], 
IsNull(c.BusinessState,'''') [BusinessStateProv], IsNull(c.BusinessPostalCode,'''') [BusinessZipPostalCode], 
IsNull(c.BusinessCountry,'''') [BusinessCountry], IsNull(c.BusinessTelephoneNumber,'''') [BusinessPhoneNumber], 
IsNull(c.BusinessFaxNumber,'''') [BusinessFaxNumber], IsNull(c.Email1Address,'''') [EmailAddress],
IsNull(Convert(varchar(12),c.Birthday),'''') [Birthday], IsNull(c.BusinessCompany,'''') [CompanyName],
IsNull(cc.Customer_Code,'''') [Customer_Code]
from Contact c
Inner Join Relations r on r.Target = ''Customer'' and r.ItemType = ''Contact'' and r.ItemID = c.ID and r.CompanyID = ' + Convert(varchar(30),@CompanyID) + '
Inner Join ' + @TRDB + '..Customers cc on cc.Customer_ID = r.TargetID
where c.ID = ' + Convert(varchar(30),@ContactID)

exec(@str)

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CustomerNavigator_GetCustomersAndContacts]') and xtype = 'P ')  
 drop Procedure sp_CustomerNavigator_GetCustomersAndContacts
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
Create Procedure sp_CustomerNavigator_GetCustomersAndContacts (@CompanyID int, @UserID int, @Flavour varchar(15))

AS

--Declare @CompanyID int, @UserID int, @Flavour varchar(15)
--Select @CompanyID = 16, @UserID = 4, @Flavour = 'CUSTOMER'

Declare @TRDB varchar(500), @str varchar(8000)
Select @TRDB = TreasuryDBName From Companies Where AutoID = @CompanyID


--Create Table working_CustomerContacts 
--(
-- ID int identity(1,1) not null primary key,
-- UserID int not null,
-- [Type] varchar(2) null,
-- CustomerID int null,
-- ContactID  int null,
-- ParentID int null,
-- FirstName varchar(50) null,
-- LastName varchar(50) null,
-- [Name] varchar(50) null,
-- Phone varchar(125) null,
-- InActive bit null
--)

Delete working_CustomerContacts where UserID = @UserID

Select @str = 'Select ' + Convert(varchar(20),@UserID) + ', ''Cu'', Customer_ID, null, Name, Case When Active = ''T'' Then 1 Else 0 End from ' + @TRDB + '..Customers ' +
			  'Where Customer_ID in (Select CustomerID from working_FilteredCustomersContacts where UserID = ' + Convert(varchar(20),@UserID) + ' and Flavour = ''CUSTOMERFILTER'')'

Insert Into working_CustomerContacts (UserID, [Type], CustomerID, ParentID, [Name], InActive)
exec(@str)

Insert Into working_CustomerContacts(UserID, [Type],ContactID, ParentID, FirstName, LastName, [Name], Phone, InActive, CustomerID)
Select @UserID, 'Co', c.ID, (Select ID from working_CustomerContacts Where CustomerID = r.TargetID and UserID = @UserID), 
IsNull(c.FirstName,''), IsNull(c.LastName,''), 
ISNULL(c.KnownAs, ISNULL(c.Title, '') + ISNULL(c.LastName, '') + CASE WHEN C.Lastname IS NULL THEN '' ELSE ', 
		' END + ISNULL(c.FirstName, '')), 
CASE WHEN PrimaryTelephoneNumber IS NOT NULL THEN 'Primary - ' + PrimaryTelephoneNumber 
     WHEN BusinessTelephoneNumber IS NOT NULL THEN 'Bus. - ' + BusinessTelephoneNumber 
     WHEN HomeTelephoneNumber IS NOT NULL THEN 'Home - ' + HomeTelephoneNumber 
     WHEN MobileTelephoneNumber IS NOT NULL THEN 'Cell - ' + MobileTelephoneNumber 
     WHEN OtherTelephoneNumber IS NOT NULL THEN 'Other - ' + OtherTelephoneNumber END,
Case When c.InActive = 'Y' Then 1 Else 0 End, r.TargetID
from Contact c 
Inner Join Relations r on  r.ItemID = c.ID
Where r.Target = 'Customer' and r.CompanyID = @CompanyID
and c.ID in (Select ContactID from working_FilteredCustomersContacts where UserID = @UserID and Flavour = 'CUSTOMERFILTER')


Select ID, [Type], CustomerID, ContactID, ParentID, FirstName, LastName, [Name], Phone, InActive
from working_CustomerContacts



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CustomerWordMerge]') and xtype = 'P ')  
 drop Procedure sp_CustomerWordMerge
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
Create Procedure [dbo].[sp_CustomerWordMerge](@CustomerID int, @CompanyID int)
AS

--Declare @CustomerID int, @CompanyID int
--Select @CustomerID = 2, @CompanyID = 16

Declare @str varchar(8000), @TRDB varchar(500)

Select @TRDB = TreasuryDBName from Companies Where AutoID = @CompanyID

Select @str = '
Select IsNull(Customer_Code, '''') [Customer_Code], IsNull(Name,'''') [Name],  
IsNull(Bill_Address_1,'''') [Address1], IsNull(Bill_Address_2,'''') [Address2], IsNull(Bill_Address_3,'''') [Address3],
IsNull(Bill_City,'''') [City], IsNull(Bill_State,'''') [StateProvince], IsNull(Bill_Zip,'''') [ZipPostalCode], 
IsNull((Select Description from ' + @TRDB +'..Countries Where Country_ID = Bill_Country_ID),'''') [Country]
from ' + @TRDB + '..Customers Where Customer_ID =' + Convert(varchar(30),@CustomerID)

exec (@str)

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DashBoard_AddCodeMSP]') and xtype = 'P ')  
 drop Procedure sp_DashBoard_AddCodeMSP
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go






CREATE  proc sp_DashBoard_AddCodeMSP

--declare 

 @Project int, 
 @Code varchar(20),
 @HR_DB   varchar(20)

 
--   select @Project = 50
--   select @HR_DB = 'HR_Alco_0429'
--   select @Code = 'SB'

as
--------------------
declare
@Proj_id int,
@Link_id int,  
@TaskType varchar(50),
@SourceFlavour varchar(20),
@ExternalReference varchar(200),
@LeadID int,
@SalesmanID int,
@StartDate datetime,
@EndDate datetime,
@SiblingOutline varchar(500),
@CodeType char(1),
@TaskName varchar(500) ,
@Template int

select @TaskType = 'MSPTASK',
@SourceFlavour = 'nbgProjectsCosting',
@ExternalReference = null,
@LeadID = null,
@SalesmanID = null,
@SiblingOutline = null



declare @PriNum varchar(20),
        @Project_str varchar(20),
        @str varchar(500)

select  @Proj_id = PROJ_ID  from msp_dashboard_projects
where Link_ID =   @Project

-----------get @PriNum ---------------------

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#proj_id'))
drop table #proj_id

create table #proj_id
( pri_name varchar(50)null,
  pri_start_date datetime  null ,
  pri_completion_date datetime null,
  pri_num varchar(20) null
 
  )

set @Project_str = convert(varchar(20),@Project)

set @str = 'insert #proj_id select rtrim(pri_name),pri_start_date,
           pri_completion_date,pri_num from ' + @HR_DB + 
           '..proj_ID  where Proj_ID_ID =  ' + @Project_str 

exec(@str)

select  @PriNum = pri_num, @StartDate = pri_start_date ,
       @EndDate = pri_completion_date
from #proj_ID


-----------get @PriNum end here---------------------

----------------get link_id -------------
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#proj_phase'))
drop table #proj_phase
create table #proj_phase  
(  
   phs_code  varchar(5) null,
   phs_desc   varchar(30) null,
   Proj_Phase_ID int null
 )

declare  @sql    varchar(200)
declare @phaseCodeDesc  varchar(100)

set @sql = 'insert #proj_phase select distinct phs_code, phs_desc, Proj_Phase_ID from ' +
           @HR_DB + '..proj_phase '
 	   + ' where prp_comp=''_'' and pri_num =' + @PriNum + ' and isnull(phs_code,''_'') <> ''_'''
           + ' and  phs_code =  '  + ''''+ @Code + ''''

exec( @sql)

select @Link_id = Proj_Phase_ID , @phaseCodeDesc = isnull(phs_desc,''),
       @TaskName = isnull(@Code,'') + '   - ' + isnull(phs_desc,'') 
from #proj_phase

--- get link_id end here-----------------------

insert Dashboard_MajorCodes (MajorCode,CodeDescription, Proj_ID_ID, Proj_Phase_ID, Proj_ID )
select @Code, @phaseCodeDesc, @project, @Link_id,@Proj_id

-- get templateid-----------

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#template'))
drop table #template
create table #template 
(  
   templateID  int null
 )

declare @sqlStr   varchar(200)

-- declare @PriNum  varchar(20) ,@template int, @HR_DB  varchar(20)
-- set @PriNum = 183 
-- set @HR_DB = 'HR_Alco_0429'

set @sqlStr = ' insert #template  select  Dashboard_TemplateID  from '+
               @HR_DB +  '..projConv_header  where pri_num = ' + @PriNum

exec (@sqlstr)

select @template=  templateID from #template 


-- get templateid end here -----------


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#OutlineIs'))
drop table #OutlineIs
create table #OutlineIs(Outline varchar(500))


declare @Dashboard_taskGroupId int,@ParentOutline varchar(500),  @TaskID int

--------loop through the departments ------------
          declare OutlineCursor cursor
	          read_only
	          for  
					      
          select Dashboard_TaskGroupID,task_outline_num
          -- select Dashboard_TaskGroupID,convert(varchar(50),TASK_NAME ),convert(varchar(20),task_outline_num),*
          from msp_tasks   m
          join  msp_dashboard_tasks   d
          on m.PROJ_ID = d.PROJ_ID
          and m.TASK_UID  = d.TASK_UID
        and   m.PROJ_ID = @Proj_id
          and d.Codetype = 'C'
	  
	  open OutlineCursor
	  fetch next from OutlineCursor into @Dashboard_taskGroupId,@ParentOutline 
	  while (@@fetch_status <> -1)
	  begin
	   if (@@fetch_status <> -2)
	   begin
	    
	       delete #OutlineIs 
	       insert #OutlineIs
               exec sp_Dashboard_AddNewTask @Proj_id,@Link_id,@Dashboard_taskGroupId,@TaskType,@SourceFlavour,
                      @ExternalReference,@LeadID,@SalesmanID , @StartDate,@EndDate,@SiblingOutline,
                      @ParentOutline,'M',@TaskName

               declare @TaskOL varchar(500)               
               select @TaskOL = Outline from  #OutlineIs 
               select @TaskOL, 'test'

               ------------loop through the tasks----------------------
               declare @TaskDescription varchar(255)
               declare OutlineTaskCursor cursor
	          read_only
	          for  
	          select distinct DashBoard_TasksSetupID, TaskDescription
	          from DashBoard_ProjTasksSetup
	          where Dashboard_TemplateID = @Template
	          and DashBoard_TaskGroupID = @Dashboard_taskGroupId
	          and AttachmentMode = 'Code'			
	   
	          open OutlineTaskCursor
	          fetch next from OutlineTaskCursor into @TaskID, @TaskDescription
	          while (@@fetch_status <> -1)
	          begin
	               if (@@fetch_status <> -2)
	               begin


	                       delete #OutlineIs 
		               insert #OutlineIs
	                       exec sp_Dashboard_AddNewTask @Proj_id,@Link_id,@Dashboard_taskGroupId,@TaskType,@SourceFlavour,
	                             @ExternalReference,@LeadID,@SalesmanID , @StartDate,@EndDate,@SiblingOutline,
	                             @TaskOL,'T',@TaskDescription
	
	                        select * from  #OutlineIs 
                   

                       end
                       fetch next from OutlineTaskCursor into @TaskID, @TaskDescription
	          end
	
	          close OutlineTaskCursor
	          deallocate OutlineTaskCursor


               -------------loop through the tasks end here-------------- 
       
	   end
	   fetch next from OutlineCursor into @Dashboard_taskGroupId,@ParentOutline
	  end
	
	  close OutlineCursor
	  deallocate OutlineCursor
-------------loop through the departments end here ------------

select 'Done' Result
	








Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Dashboard_AddNewTask]') and xtype = 'P ')  
 drop Procedure sp_Dashboard_AddNewTask
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go






-- 
-- select *
-- from msp_dashboard_tasks




/*

exec sp_Dashboard_AddNewTask '41','571','11','OUTLOOK:TASK','SalesCenter',null,
'4/27/06', '4/29/06', 559, 571, 570, 1, null, 'T', 'Call Alister 2', 2, null, 'F'

*/
CREATE                     proc sp_Dashboard_AddNewTask
@Proj_id varchar(50), --msp proj_id
@Link_id varchar(50), --id_id

@Dashboard_taskGroupId varchar(50), --department
@TaskType varchar(50), -- 'MSPTASK', 'OUTLOOK:TASK'
@SourceFlavour varchar(20), -- nbgProjectsCosting
@ExternalReference varchar(200), -- null
@StartDate varchar(50),
@EndDate varchar(50),
@ContactID int,
@AssignedToId int,
@AssignedById int,
--choose one of the following two (set the other to null)
@SiblingOutline varchar(500), -- null or TASK_OUTLINE_NUM
@ParentOutline varchar(500),  -- null or TASK_OUTLINE_NUM

@CodeType char(1),-- m / t
@TaskName varchar(500),
@Duration float,
@DMC_ID int ,
@reorder   varchar(10)
as
print 'InNewTask ' + @SiblingOutline + ' ' + @ParentOutline
-- declare
-- @Proj_id int,
-- @Link_id int,
-- @Dashboard_taskGroupId int,
-- @TaskType varchar(50),
-- @SourceFlavour varchar(20),
-- @ExternalReference varchar(200),
-- @ContactID int,
-- @AssignedToId int,
-- @AssignedById int,

-- @StartDate datetime,
-- @EndDate datetime,
-- @SiblingOutline varchar(50),
-- @CodeType char(1),
-- @ParentOutline varchar(500),  -- null or TASK_OUTLINE_NUM
-- @TaskName varchar(500),
-- @Duration float,
-- @DMC_ID int
-- 
-- select @Proj_id = 1, 
-- @Link_id = null,
-- @Dashboard_taskGroupId = 1,
-- @TaskType = 'MSPTASK',
-- @SourceFlavour = 'nbgProjectsCosting',
-- @ExternalReference = null,

-- @ContactID int,
-- @AssignedToId int,
-- @AssignedById int,

-- @StartDate = '1/1/05',
-- @EndDate = '1/2/05',
-- @SiblingOutline = '0',
-- @ParentOutline = null,
-- @CodeType = 'C',
-- @Duration = 1.5,
-- @DMC_ID = null

 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#newWorking_NavBarSimpleTask'))
 drop table #newWorking_NavBarSimpleTask

 select *
 into #newWorking_NavBarSimpleTask 
 from msp_tasks_template_simple 


 /*
  need to find the parent of this task @SiblingOutline, 
  if @SiblingOutline = '' then wee need to add at the highest level as an independant
 */ 
 declare @x int
 if isNull(@SiblingOutline,'') <> '' 
 begin -- try to find the parent
  --get the parent indent
  select @x = len(@SiblingOutline)
  while @x > 0
  begin
   if substring(@SiblingOutline, @x, 1) = '.'
   begin
    select @ParentOutline = substring(@SiblingOutline, 1, @x - 1), @x = 0
   end  
   select @x = @x - 1
  end  
 end

 declare @NextOutline varchar(500), @ThisOutlineLevel int

 if isNull(@ParentOutline,'') <> '' 
 begin 
  declare @MaxOutline varchar(200)

  --criminey... max doesn't work on an indented number
  select @ThisOutlineLevel = TASK_OUTLINE_LEVEL + 1
  from msp_tasks
  where TASK_OUTLINE_NUM = @ParentOutline
  and Proj_ID = @Proj_ID

  if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#newWorking_MaxOL'))
  drop table #newWorking_MaxOL
  create table #newWorking_MaxOL(OriginalOutline varchar(500), WorkingOutline int)

  insert #newWorking_MaxOL 
  select TASK_OUTLINE_NUM, null
  from msp_tasks
  where TASK_OUTLINE_NUM like @ParentOutline + '.%'
  and Proj_ID = @Proj_ID

-- cursor
 declare @CurrentOL varchar(500), @WorkingOL int
 declare NewTaskCursor1 cursor
 read_only
 for  
 select OriginalOutline
 From #newWorking_MaxOL
 
 open NewTaskCursor1
 fetch next from NewTaskCursor1 into @CurrentOL
 while (@@fetch_status <> -1)
 begin
  if (@@fetch_status <> -2)
  begin
    select @CurrentOL = substring(@CurrentOL, len(@ParentOutline) + 2, len(@CurrentOL))

    select @x = 0
    while @x < len(@CurrentOL)
    begin  
     if substring(@CurrentOL, @x, 1) = '.'
     begin
      select @WorkingOL = cast(substring(@CurrentOL, 0, @x) as int)
      select @x = len(@CurrentOL)      
     end
     select @x = @x + 1
    end
    if @WorkingOL is null 
     select @WorkingOL = cast(@CurrentOL as int)

    update #newWorking_MaxOL
    set WorkingOutline = @WorkingOL
    where OriginalOutline = @ParentOutline + '.' + @CurrentOL 
  
    select @WorkingOL = null
  end
 fetch next from NewTaskCursor1 into @CurrentOL
 end
	
 close NewTaskCursor1
 deallocate NewTaskCursor1

 declare @MaxIntIs int

 select @MaxIntIs = max(WorkingOutline)
 from #newWorking_MaxOL
 
 select @MaxOutline = OriginalOutline
 from #newWorking_MaxOL
 where WorkingOutline = @MaxIntIs

 select @MaxOutline = isNull(@MaxOutline,@ParentOutline + '.1')

  --now figure out what the next Outline should be
  declare @ModifiedMax varchar(500)
  select @ModifiedMax = subString(@MaxOutline, len(@ParentOutline) + 2, len(@MaxOutline))

  --the next segment beolngs to this step
  select @x = 0
  while @x < len(@ModifiedMax)
  begin
   if substring(@ModifiedMax, @x, 1) = '.'
   begin
    select @NextOutline = substring(@ModifiedMax, 0, @x)
    select @x = len(@ModifiedMax)
   end  
   select @x = @x + 1
  end  
  if isnull(@NextOutline,'') = ''
   select @NextOutline = cast(@ModifiedMax as int) + 1
  else 
   select @NextOutline = cast(@NextOutline as int) + 1

  select @NextOutline = @ParentOutline + '.' + @NextOutline
  

  end
 else
 begin
  --no parent exists for this task... need to create a new one
  select @MaxOutline = TASK_OUTLINE_NUM
  from msp_tasks
  where Proj_ID = @Proj_ID

  --now figure out what the next Outline should be
  select @x = 0
  while @x < len(@MaxOutline)
  begin
   if substring(@MaxOutline, @x, 1) = '.'
   begin
    select @NextOutline = substring(@MaxOutline, 0, @x), 
    @x = len(@MaxOutline)
   end  
   select @x = @x + 1
  end  
  select @ThisOutlineLevel = TASK_OUTLINE_LEVEL
  from msp_tasks
  where TASK_OUTLINE_NUM = @NextOutline
  and Proj_ID = @Proj_ID

  select @NextOutline = cast(cast(isNull(@NextOutline,0) as int) + 1 as varchar(500))


 end

 declare @MAXUID int 

 select @MAXUID = isNull(max(Task_UID),0) + 1
 from msp_tasks
 where Proj_ID = @Proj_ID

 select @ThisOutlineLevel = isnull(@ThisOutlineLevel, 1)

 --make sure parent becomes summary
 update msp_tasks
 set TASK_IS_SUMMARY = 1
 where TASK_OUTLINE_NUM = @ParentOutline
 and proj_id = @Proj_ID



/*
 duration is in fraction of days, need to get the various msp durations
 msp time is tracked as : 600 = 60 mins at the task level
			: 60,000 = 60 mins at the assignment level 
*/
 Declare @DurInMins int
 select @DurInMins = isNull(Proj_Opt_Minutes_Per_Day, 480) * @Duration * 10
 from msp_projects
 where proj_id = @proj_id


 if @StartDate is null 
 begin
  select @StartDate = Proj_Opt_Def_Start_Time
  from msp_projects
  where proj_id = @proj_id

  if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#EndDate'))
  drop table #EndDate
  create table #EndDate(EndDate datetime null)

  /*
   Date Crawl Uses up blocks of time based on the schedule
  */
  exec sp_Dashboard_DateCrawl @StartDate, @DurInMins, @Proj_id, @MAXUID, null

  select @EndDate = EndDate
  from #EndDate  
 end



 update #newWorking_NavBarSimpleTask 
 set TASK_OUTLINE_NUM = @NextOutline,
 TASK_OUTLINE_LEVEL = @ThisOutlineLevel,
 Task_UID = @MAXUID,
 Task_Id = @MAXUID,
 Proj_ID = @Proj_id,
 TASK_IS_SUMMARY = 0,
 Task_Dur = @DurInMins,
 Task_Act_Dur = 0,
 Task_Base_Dur = 0, 
 Task_name = @TaskName,
 TASK_START_DATE = @StartDate,
 TASK_FINISH_DATE = @EndDate,
 TASK_LATE_START = @StartDate,
 TASK_EARLY_FINISH = @EndDate,
 TASK_ACT_START = null,
 TASK_ACT_FINISH = null,
 TASK_BASE_START = @StartDate,
 TASK_BASE_FINISH = @EndDate,
 TASK_PRELEVELED_START = @StartDate,
 TASK_PRELEVELED_FINISH = @EndDate,
 TASK_EARLY_START = @StartDate,
 TASK_LATE_FINISH = @EndDate,
 TASK_CREATION_DATE = getdate(),
 Ext_Edit_Ref_Data = '1'

 --insert this record into msp_tasks table
 insert msp_tasks
 select *
 from #newWorking_NavBarSimpleTask

/*
 Code to apply default assignments here 
*/
 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#newAssignment'))
 drop table #newAssignment

 select * 
 into #newAssignment
 from msp_assignments_simple

 declare @ASSN_UID int
 select @ASSN_UID = max(ASSN_UID)
 from msp_assignments
 where Proj_ID = @Proj_ID

 update #newAssignment
 set PROJ_ID = @Proj_id, ASSN_UID = isNull(@ASSN_UID,0) + 1,
 TASK_UID = @MAXUID, ASSN_START_DATE = @StartDate,
 ASSN_FINISH_DATE = @EndDate, ASSN_WORK = @DurInMins * 100,
 ASSN_REG_WORK = @DurInMins * 100, ASSN_REM_WORK = @DurInMins * 100,
 ASSN_CREATION_DATE = getdate(), Ext_Edit_Ref_Data = '1'
 
 insert msp_assignments
 select *
 from #newAssignment

 --check to see if the trigger already got it
 declare @Count int
 select @Count = count(*)
 from msp_dashboard_tasks
 where Proj_ID = @Proj_ID
 and TASK_UID = @MAXUID


 if isNull(@Count,0) = 0 
 begin
print 'assigning'
  INSERT msp_dashboard_tasks(PROJ_ID, Link_ID, Dashboard_TaskGroupID, TASK_UID, TaskType,
  SourceFlavour, ExternalReference, CodeType, ContactID, AssignedToId, AssignedById)

  SELECT @Proj_ID, @Link_ID, @Dashboard_TaskGroupID, @MAXUID, @TaskType, @SourceFlavour,
  @ExternalReference, @CodeType, @ContactID, @AssignedToId, @AssignedById
 end
 update msp_dashboard_tasks
 set DMC_ID = @DMC_ID,
 ContactID = @ContactID,
 AssignedToId = @AssignedToId,
 AssignedById = @AssignedById,
 TaskType = @TaskType,
 SourceFlavour = @SourceFlavour,
 Link_id = @Link_id
 where PROJ_ID = @PROJ_ID
 and Task_uid = @MAXUID
 

if @reorder = 'T'
begin
 declare @CursorTASK_OUTLINE_NUM varchar(500), @Inc int
 select @Inc = 0

 declare NewTaskCursor2 cursor
 read_only
 for  
 select TASK_OUTLINE_NUM
 From msp_tasks
 where proj_id = @Proj_ID 
 and TASK_OUTLINE_NUM is not null
 order by TASK_OUTLINE_NUM
 
 open NewTaskCursor2
 fetch next from NewTaskCursor2 into @CursorTASK_OUTLINE_NUM
 while (@@fetch_status <> -1)
 begin
  if (@@fetch_status <> -2)
  begin
   update msp_tasks
   set Task_ID = @Inc
   where proj_id = @Proj_ID 
   and TASK_OUTLINE_NUM = @CursorTASK_OUTLINE_NUM
  
   select @inc = @inc + 1
  end
 fetch next from NewTaskCursor2 into @CursorTASK_OUTLINE_NUM
 end

 close NewTaskCursor2
 deallocate NewTaskCursor2 

end

 select @NextOutline IsMyNewOutlineNumber

 update msp_projects
 set PROJ_EXT_EDITED = 1
 where proj_id = @Proj_id

print 'OutNewTask ' + @SiblingOutline + ' ' + @ParentOutline























Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Dashboard_CalcDates]') and xtype = 'P ')  
 drop Procedure sp_Dashboard_CalcDates
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





CREATE proc sp_Dashboard_CalcDates --recursive proc
 @Proj_ID int,
 @IsFirst bit
as
if 1=2
begin
 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TasksToDo'))
 drop table #TasksToDo
 create table #TasksToDo(
 Proj_ID int,
 Task_Uid int,
 Duration float,
 Done bit default 0)
end

-- declare  @Proj_ID int, @IsFirst bit
-- select @Proj_ID = 1, @IsFirst = 1
-- if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TasksToDo'))
-- drop table #TasksToDo
-- create table #TasksToDo(
--  Proj_ID int,
--  Task_Uid int,
--  Duration int,
--  Done bit default 0)
-- 
-- insert #TasksToDo
-- select tt.Proj_ID, tt.Task_Uid, tt.task_dur / 10 / 1440, 0
-- from MSP_Tasks tt
-- join msp_dashboard_tasks dt
-- on dt.proj_id = tt.Proj_id
-- and dt.task_uid = tt.task_uid
-- where 
--  tt.proj_id = @Proj_ID
--  and (codeType = 'T' or codeType = 'P')
--  and tt.task_uid > 0
--  and RESERVED_DATA <> 'X'


declare @ToDoCount int
select @ToDoCount = count(*) --used to make sure we don't endlessly call ourself
from #TasksToDo
where Done = 0

print 'In Calc Dates, : @ToDoCount=' + cast(@ToDoCount as varchar(500))

-- proc start

declare @Task_UID int, @Date datetime, @Duration int

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#EndDate'))
drop table #EndDate
create table #EndDate(EndDate datetime null)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TaskSelection'))
drop table #TaskSelection
create table #TaskSelection(Task_UID int, Duration int)


if @IsFirst = 1
begin
 insert #TaskSelection
 select tt.TASK_UID, tt.Duration 
 from #TasksToDo tt
 join msp_dashboard_tasks dt
 on dt.proj_id = tt.Proj_id
 and dt.task_uid = tt.task_uid
 where 
 tt.proj_id = @Proj_ID
 and (codeType = 'T' or codeType = 'P')
 and tt.task_uid > 0
 and tt.Done = 0
 and tt.task_uid not in
  (select task_uid
  from msp_tasks t
  join msp_links l
  on LINK_SUCC_UID = task_uid
  and t.PROJ_ID = l.PROJ_ID
  where t.Proj_id = @Proj_ID
  and t.Task_UID <> isNull(LINK_PRED_UID,-1))

end
else
begin
 insert #TaskSelection
 select ttd.TASK_UID, ttd.Duration 
 from #TasksToDo ttd
 where ttd.Task_Uid in
 (select LINK_SUCC_UID
  from #TasksToDo ttd2
  join msp_links l
  on ttd2.proj_id = l.Proj_id
  and ttd2.task_uid = LINK_PRED_UID
  where Done = 1)
 and Done = 0
end

declare DateMakerCursor	 cursor
read_only
for  -- change later
select TASK_UID, Duration 
from #TaskSelection 
	
open DateMakerCursor
fetch next from DateMakerCursor into @Task_UID, @Duration
while (@@fetch_status <> -1)
begin
 if (@@fetch_status <> -2)
 begin  
  
  select @Date = max(TASK_FINISH_DATE)
  from msp_links l
  join msp_tasks t
  on l.proj_id = t.proj_id
  and l.LINK_PRED_UID = t.task_uid  
  where LINK_SUCC_UID = @Task_UID  
  and l.Proj_ID = @Proj_ID

  if @Date is null 
   select @Date  = PROJ_OPT_DEF_START_TIME 
   from msp_projects where proj_id = @Proj_ID

  update msp_tasks
  set TASK_Start_DATE = @Date
  where proj_id = @Proj_id
  and Task_Uid = @Task_Uid  

     
  delete #EndDate
  exec sp_Dashboard_DateCrawl @Date, @Duration, @Proj_id, @Task_UID, null

  declare @EndDate datetime
  select @EndDate = endDate
  from #EndDate

  
  update msp_tasks
  set TASK_FINISH_DATE = @EndDate
  where proj_id = @Proj_id
  and Task_Uid = @Task_Uid  

  update #TasksToDo
  set Done = 1
  where Task_UID = @Task_UID
    
  print 'Taskis : ' + isnull(cast(@Task_UID as varchar(10)),'')
  print '' + isnull(cast(@Date as varchar(50)),'')
  print '' + isnull(cast(@EndDate as varchar(50)),'')

  select @Date = null --resets it

 end
 fetch next from DateMakerCursor into @Task_UID, @Duration
end

close DateMakerCursor
deallocate DateMakerCursor

declare @ToDoCountAfter int
select @ToDoCountAfter = count(*) --used to make sure we don't endlessly call ourself
from #TasksToDo
where Done = 0


print 'Out Calc Dates, : @ToDoCountAfter=' + cast(@ToDoCountAfter as varchar(500))

if isNull(@ToDoCountAfter,0) <> 0
begin
 if isNull(@ToDoCountAfter,0) <> isNull(@ToDoCount,0)
 begin
  print 'exec'
  exec sp_Dashboard_CalcDates @Proj_ID, 0 -- more to do
 end
end













Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DashBoard_CreateMSPFromEstimate]') and xtype = 'P ')  
 drop Procedure sp_DashBoard_CreateMSPFromEstimate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





















CREATE                              proc sp_DashBoard_CreateMSPFromEstimate
 @Project int, 
 @Template int,
 @HR_DB   varchar(20),
 @DepartmentFormat char(1), -- H=Hiearchial, F=Field, N=None
 @MajorCodeFormat char(1) -- H=Hiearchial, F=Field, N=None
as

-- declare   
--  @Project int, 
--  @Template int,
--  @HR_DB   varchar(20)
--  
--   select @Project = 65, @Template = 1
--   select @HR_DB = 'HR_demo_57'
/*
 notes

 CodeType = 
 'C' = category level
 'P' = task at project level
 'M' = major code level
 'T' = task at code level

*/


declare @ProjectDescription varchar(100), @StartDate Datetime, 
    @EndDate datetime, @PriNum varchar(20), @str varchar(500) , 
     @Project_str varchar(20), @TR_DB varchar(200), @CompanyName varchar(200),
    @DepartmentFieldID int, @MajorCodeFieldID int, @AssId int



if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#proj_id'))
drop table #proj_id

create table #proj_id
( pri_name varchar(50)null,
  pri_start_date datetime  null ,
  pri_est_completion_date datetime null,
  pri_num varchar(20) null,
  CompanyIS varchar(200) null
  )

set @Project_str = convert(varchar(20),@Project)

set @str = 'insert #proj_id select rtrim(pri_name),pri_start_date,
           pri_est_completion_date,pri_num, tr_db from ' + @HR_DB + 
           '..proj_ID join  ' + @HR_DB + 
           '..database_setup on 1=1
           where Proj_ID_ID =  ' + @Project_str 

exec(@str)

select @ProjectDescription = rtrim(pri_name), @StartDate = pri_start_date,
 @EndDate = pri_est_completion_date, @PriNum = pri_num, @TR_DB = CompanyIS
from #proj_ID

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#companyIS'))
drop table #companyIS
create table #companyIS(companyIS varchar(200) null)

set @str = 'insert #companyIS select COMPANYNAME from ' + @TR_DB + '..company'
exec(@str)

select @CompanyName = companyIS
from #companyIS

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_calendar_data'))
drop table #msp_calendar_data

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_calendars'))
drop table #msp_calendars

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_outline_codes'))
drop table #msp_outline_codes

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_projects'))
drop table #msp_projects

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_resources'))
drop table #msp_resources

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_tasks'))
drop table #msp_tasks

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_assignments'))
drop table #msp_assignments

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_dashboard_tasks'))
drop table #msp_dashboard_tasks



--seven of these by default
select * 
into #msp_calendar_data
from msp_calendar_data_template 
/*
 note - this is the default calendar from dashboard at this time 
 at some point it'll probably come from a set up file 
*/

update #msp_calendar_data
set CD_FROM_TIME1 =  dateadd(hour, 8,
                      dateadd(day, datepart(day, @StartDate)-1,
                       dateadd(year, datepart(year, @StartDate)-1900, 
                        dateadd(month, datepart(month, @StartDate)-1,'1/1/1900')))),
CD_TO_TIME1 =  dateadd(hour, 12,
                      dateadd(day, datepart(day, @StartDate)-1,
                       dateadd(year, datepart(year, @StartDate)-1900, 
                        dateadd(month, datepart(month, @StartDate)-1,'1/1/1900')))),
CD_FROM_TIME2 =  dateadd(hour, 13,
                      dateadd(day, datepart(day, @StartDate)-1,
                       dateadd(year, datepart(year, @StartDate)-1900, 
                        dateadd(month, datepart(month, @StartDate)-1,'1/1/1900')))),
CD_TO_TIME2 =  dateadd(hour, 17,
                      dateadd(day, datepart(day, @StartDate)-1,
                       dateadd(year, datepart(year, @StartDate)-1900, 
                        dateadd(month, datepart(month, @StartDate)-1,'1/1/1900'))))


--six of these by default
select * 
into #msp_calendars
from msp_calendars_template 

-- four by default
select * 
into #msp_outline_codes
from msp_outline_codes_template 

--obviously one
select * 
into #msp_projects
from msp_projects_template 

/*
 Resources and tasks:

 the first three are required for some reason... 
 the fourth is the default of one only...
 in case there are no others (the first one) 
*/

select * 
into #msp_resources
from msp_resources_template

select * 
into #msp_tasks
from msp_tasks_template


select top 0 *
into #msp_dashboard_tasks
from msp_dashboard_tasks

-- now need to update the project 
declare @ProjID int, @CreationDate datetime
select @CreationDate = getdate()

select @ProjID = max(PROJ_ID)
from msp_projects

select @ProjID = isNull(@ProjID,0) + 1

update #msp_projects
set PROJ_ID = @ProjID,
Proj_Name = @ProjectDescription + '(' + @CompanyName + '-' + @PriNum + ')',
PROJ_PROP_TITLE = @ProjectDescription,
PROJ_INFO_CURRENT_DATE = @StartDate,
PROJ_OPT_DEF_FINISH_TIME = @EndDate,
PROJ_OPT_DEF_START_TIME = @StartDate,
PROJ_INFO_FINISH_DATE = @StartDate, 
PROJ_LAST_SAVED = @CreationDate,
PROJ_CREATION_DATE = @CreationDate,
PROJ_INFO_START_DATE = @StartDate,
PROJ_MACHINE_ID = null,
PROJ_READ_ONLY = 0,
PROJ_READ_WRITE = 0,
proj_ext_edited = 1, 
proj_ext_edited_text = 1

update #msp_calendar_data
set PROJ_ID = @ProjID
--CD_FROM_TIME1 = @StartDate,
--CD_TO_TIME1 = @EndDate,
--CD_FROM_TIME2 = null,
--CD_TO_TIME2 = null 

update #msp_calendars
set PROJ_ID = @ProjID

update #msp_outline_codes
set PROJ_ID = @ProjID

update #msp_resources
set PROJ_ID = @ProjID

update #msp_tasks
set PROJ_ID = @ProjID

-- add functional areas first 
declare @GroupID int, @GroupDescription varchar(100)

-------------
-- create temtable for proj_phase
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#proj_phase'))
drop table #proj_phase
create table #proj_phase
(  
   phs_code  varchar(5) null,
   phs_desc   varchar(30) null,
   Proj_Phase_ID int null
)

declare  @sql    varchar(200)

-- declare @prinum  varchar(20), @HR_DB varchar(30)
-- select @prinum = 3, @hr_Db = 'hr_alco_0429'

set @sql = 'insert #proj_phase select distinct phs_code, phs_desc, Proj_Phase_ID from ' +
           @HR_DB + '..proj_phase '
 	   + ' where prp_comp=''_'' and pri_num =' + @PriNum + ' and isnull(phs_code,''_'') <> ''_'''
           + ' order by phs_code ' 

exec( @sql)

update #msp_projects
set RESERVED_BINARY_DATA = null

insert msp_projects
select *
from #msp_projects


if @DepartmentFormat = 'F'
begin
 select @DepartmentFieldID = CONV_VALUE
 from msp_conversions
 where CONV_STRING = 'Task Text1'

 insert msp_attribute_strings(proj_id, as_ID, as_Value)
 select @ProjID, isnull(max(as_ID),0) + 1, 'Department'
 from msp_attribute_strings
 where proj_id = @ProjID

 insert msp_field_attributes(proj_id, attrib_field_id,
 attrib_id, attrib_value, as_id, attrib_ext_edited)
 select @ProjID, @DepartmentFieldID, 206, -1, isnull(max(as_ID),0), 1
 from  msp_attribute_strings
 where proj_id = @ProjID

end

if @MajorCodeFormat = 'F'
begin
 if @DepartmentFormat = 'F'
 begin
  select @MajorCodeFieldID = CONV_VALUE
  from msp_conversions
  where CONV_STRING = 'Task Text2'

  insert msp_attribute_strings(proj_id, as_ID, as_Value)
  select @ProjID, isnull(max(as_ID),0) + 1, 'Major Codes'
  from msp_attribute_strings
  where proj_id = @ProjID

  insert msp_field_attributes(proj_id, attrib_field_id,
  attrib_id, attrib_value, as_id, attrib_ext_edited)
  select @ProjID, @MajorCodeFieldID, 206, -1, isnull(max(as_ID),0), 1
  from  msp_attribute_strings
  where proj_id = @ProjID
 end
 else
 begin
  select @MajorCodeFieldID = CONV_VALUE
  from msp_conversions
  where CONV_STRING = 'Task Text1'

  insert msp_attribute_strings(proj_id, as_ID, as_Value)
  select @ProjID, isnull(max(as_ID),0) + 1, 'Major Codes'
  from msp_attribute_strings
  where proj_id = @ProjID

  insert msp_field_attributes(proj_id, attrib_field_id,
  attrib_id, attrib_value, as_id, attrib_ext_edited)
  select @ProjID, @MajorCodeFieldID, 206, -1, isnull(max(as_ID),0), 1
  from  msp_attribute_strings
  where proj_id = @ProjID

 end 
end



-- insert into dashboard items
insert MSP_Dashboard_Projects(SourceFlavour, PROJ_ID, 
PROJ_NAME, PROJ_CREATION_DATE, Link_ID, Company_ID, DBModule_ID)
select 'nbgProjectsCosting', @ProjID, 
@ProjectDescription + '(' + @CompanyName + '-' + @PriNum + ')', @CreationDate, @Project,
@TR_DB, 2

insert msp_calendar_data
select *
from #msp_calendar_data

insert msp_calendars
select *
from #msp_calendars

insert msp_outline_codes
select *
from #msp_outline_codes

insert msp_resources
select *
from #msp_resources

--insert the top 4 blank tasks
insert MSP_Tasks
select *
from #MSP_Tasks

declare @DepartmentOutline varchar(50), @CodeOutline varchar(50), 
@TaskID int, @Duration float, @TaskDescription varchar(255)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#OutlineIS'))
drop table #OutlineIS
create table #OutlineIS(OutlineIs varchar(50) null)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#CodeSpec'))
drop table #CodeSpec
create table #CodeSpec(
 DMC_ID int null, 
 Dashboard_TasksSetupID int null, 
 Duration int null, 
 TaskDescription varchar(255) null,
 Dashboard_TaskGroupID int null)


  -- now do the tasks
declare OutlineCursor cursor
read_only
for  
 select distinct t.DashBoard_TaskGroupID, GroupDescription
 from DashBoard_ProjTasksSetup t
 join DashBoard_ProjTaskGroup g
 on t.DashBoard_TaskGroupID = g.DashBoard_TaskGroupID
-- where Dashboard_TemplateID = @Template
  
  open OutlineCursor
  fetch next from OutlineCursor into @GroupID, @GroupDescription 
  while (@@fetch_status <> -1)
  begin
   if (@@fetch_status <> -2)
   begin
     --insert as a group header
    delete #OutlineIS

    if @DepartmentFormat = 'H'
    begin
     insert #OutlineIS
     exec sp_Dashboard_AddNewTask @ProjID, null, @GroupID, 'MSPTASK', 'nbgProjectsCosting',
      null, null, null, null, null, -1, '0', null, 'C', @GroupDescription, null, null,'F'
     select @DepartmentOutline = OutlineIS
     from #OutlineIS
    end

      --first do attachment mode at project level
      declare OutlineProjectItemsCursor cursor
      read_only
      for  
      select distinct DashBoard_TasksSetupID, TaskDescription, Duration
      from DashBoard_ProjTasksSetup
      where  Dashboard_TemplateID = @Template
       and DashBoard_TaskGroupID = @GroupID
       and AttachmentMode = 'Project'
  
        open OutlineProjectItemsCursor
        fetch next from OutlineProjectItemsCursor into @TaskID, @TaskDescription, @Duration
        while (@@fetch_status <> -1)
        begin
         if (@@fetch_status <> -2)
         begin

          delete #OutlineIS

          if @DepartmentFormat = 'H'
          begin--insert as a task of department level
           insert #OutlineIS
           exec sp_Dashboard_AddNewTask @ProjID, null, @GroupID, 'MSPTASK', 'nbgProjectsCosting',
       	   null, null, null, null, null,-1,null, @DepartmentOutline, 'P', @TaskDescription, @Duration, null,'F'
          end
          else
          begin--insert as a task at top level
           insert #OutlineIS
           exec sp_Dashboard_AddNewTask @ProjID, null, @GroupID, 'MSPTASK', 'nbgProjectsCosting',
       	   null, null, null, null, null,-1, 0, null, 'P', @TaskDescription, @Duration, null,'F'
 
 --add department level field
           if @DepartmentFormat = 'F'
           begin
            select @AssID = Task_UID
            from msp_tasks
            where proj_id = @ProjID
            and TASK_OUTLINE_NUM = (select OutlineIs from #OutlineIS)

											 insert msp_text_fields
            select @ProjID, 0, @AssID, @DepartmentFieldID, @TaskDescription
           end
          end

	         update msp_dashboard_tasks
          set Dashboard_TasksSetupID = @TaskID
          where mdt_id in (select mdt_id 
          from msp_dashboard_tasks dt
          join msp_tasks t
          on t.Proj_id = dt.Proj_id
          and t.Task_UID = dt.Task_UID
          where dt.proj_id = @ProjID and Task_Outline_Num in 
           (select OutlineIS
            from #OutlineIS))
         end
         fetch next from OutlineProjectItemsCursor into @TaskID, @TaskDescription, @Duration
        end

        close OutlineProjectItemsCursor
        deallocate OutlineProjectItemsCursor


        --now do attachment mode at code level
        declare @PhaseCode varchar(50), @PhaseDesc varchar(200), @Proj_Phase_ID int, @DMC_ID int

        declare OutlinePhaseCursor cursor
        read_only
        for  -- change later
        select distinct phs_code, phs_desc, c.Proj_Phase_ID, DMC_ID
        from #proj_phase p
       	join Dashboard_MajorCodes c
       	on p.Proj_Phase_ID = c.Proj_Phase_ID 
       	and c.Proj_ID_ID = @Project
        order by phs_code
	
        open OutlinePhaseCursor 
        fetch next from OutlinePhaseCursor  into @PhaseCode, @PhaseDesc, @Proj_Phase_ID, @DMC_ID
        while (@@fetch_status <> -1)
        begin
         if (@@fetch_status <> -2)
         begin  

          declare @ProcDesc varchar(500)
          select @ProcDesc = @PhaseCode + ' - ' + @PhaseDesc
          delete #OutlineIS

         if @MajorCodeFormat = 'H'
         begin 
          if @DepartmentFormat = 'H'
          begin
           insert #OutlineIS
            exec sp_Dashboard_AddNewTask @ProjID, @Proj_Phase_ID, @GroupID, 'MSPTASK', 'nbgProjectsCosting',
      	    null, null, null, null, null, -1, null,@DepartmentOutline, 'M', @ProcDesc, null, @DMC_ID,'F'
          end
          else
          begin --Only major code is heirarchial
           insert #OutlineIS
            exec sp_Dashboard_AddNewTask @ProjID, @Proj_Phase_ID, @GroupID, 'MSPTASK', 'nbgProjectsCosting',
       	    null, null, null, null, null, -1, 0, null, 'M', @ProcDesc, null, @DMC_ID,'F'

            --add department level field
            if @DepartmentFormat = 'F'
            begin
             select @AssID = Task_UID
             from msp_tasks
             where proj_id = @ProjID
             and TASK_OUTLINE_NUM = (select OutlineIs from #OutlineIS)

 											 insert msp_text_fields
             select @ProjID, 0, @AssID, @DepartmentFieldID, @TaskDescription
            end
           
          end
         end
         -- do not insert a record unless heirarchial       
         select @CodeOutline = OutlineIS
         from #OutlineIS         


          -- check to see if a major code template exists for this one
										declare @csDMC_ID int,  @csDashboard_TasksSetupID int, 
          @csDuration int, @csTaskDescription varchar(255), @csDashboard_TaskGroupID int

          delete #CodeSpec
          exec sp_Dashboard_CreateSpecificCodes @ProjID, @Project, @HR_DB, @PhaseCode 

          declare CodeSpecCursor cursor
          read_only
          for  -- change later
          select distinct DMC_ID, Dashboard_TasksSetupID, Duration, TaskDescription, Dashboard_TaskGroupID
          from #CodeSpec
          where Dashboard_TaskGroupID = @GroupID
          open CodeSpecCursor
          fetch next from CodeSpecCursor into @csDMC_ID, @csDashboard_TasksSetupID, @csDuration, @csTaskDescription, @csDashboard_TaskGroupID
          while (@@fetch_status <> -1)
  begin
  if (@@fetch_status <> -2)
           begin  

            delete #OutlineIS

            if @MajorCodeFormat = 'H'
            begin
             insert #OutlineIS
             exec sp_Dashboard_AddNewTask @ProjID, @Proj_Phase_ID, @GroupID, 'MSPTASK', 'nbgProjectsCosting',
   	         null, null, null, null, null,-1, null, @CodeOutline, 'T', @csTaskDescription, @csDuration, @csDMC_ID,'F'
            end
            else if @DepartmentFormat = 'H' 
            begin
             insert #OutlineIS
             exec sp_Dashboard_AddNewTask @ProjID, @Proj_Phase_ID, @GroupID, 'MSPTASK', 'nbgProjectsCosting',
   	         null, null, null, null, null,-1, null, @DepartmentOutline, 'T', @csTaskDescription, @csDuration, @csDMC_ID,'F'
            end
            else --no parents at all
            begin
             insert #OutlineIS
             exec sp_Dashboard_AddNewTask @ProjID, @Proj_Phase_ID, @GroupID, 'MSPTASK', 'nbgProjectsCosting',
   	         null, null, null, null, null,-1, 0, null, 'T', @csTaskDescription, @csDuration, @csDMC_ID,'F'
            end

            --add department level field
            if @DepartmentFormat = 'F'
            begin
             select @AssID = Task_UID
             from msp_tasks
             where proj_id = @ProjID
             and TASK_OUTLINE_NUM = (select OutlineIs from #OutlineIS)
 
	 										 insert msp_text_fields
             select @ProjID, 0, @AssID, @DepartmentFieldID, @GroupDescription
            end

            --add major code level field
            if @MajorCodeFormat = 'F'
            begin
             select @AssID = Task_UID
             from msp_tasks
             where proj_id = @ProjID
             and TASK_OUTLINE_NUM = (select OutlineIs from #OutlineIS)
 
	 										 insert msp_text_fields
             select @ProjID, 0, @AssID, @MajorCodeFieldID, @PhaseCode
            end


            update msp_dashboard_tasks
            set Dashboard_TasksSetupID = @csDashboard_TasksSetupID
            where mdt_id in (select mdt_id 
            from msp_dashboard_tasks dt
            join msp_tasks t
            on t.Proj_id = dt.Proj_id
            and t.Task_UID = dt.Task_UID
            where dt.proj_id = @ProjID and Task_Outline_Num in 
             (select OutlineIS
              from #OutlineIS))


           end
           fetch next from CodeSpecCursor into @csDMC_ID, @csDashboard_TasksSetupID, @csDuration, @csTaskDescription, @csDashboard_TaskGroupID
          end

          close CodeSpecCursor
          deallocate CodeSpecCursor        

	
          declare OutlineCodeItemsCursor cursor
          read_only
          for  
	         select distinct DashBoard_TasksSetupID, TaskDescription, Duration
          from DashBoard_ProjTasksSetup
          where Dashboard_TemplateID = @Template
          and DashBoard_TaskGroupID = @GroupID
          and AttachmentMode = 'Code'
	  
          open OutlineCodeItemsCursor
          fetch next from OutlineCodeItemsCursor into @TaskID, @TaskDescription, @Duration
          while (@@fetch_status <> -1)
          begin
           if (@@fetch_status <> -2)
           begin

            delete #OutlineIS

            if @MajorCodeFormat = 'H'
            begin
             insert #OutlineIS
             exec sp_Dashboard_AddNewTask @ProjID, @Proj_Phase_ID, @GroupID, 'MSPTASK', 'nbgProjectsCosting',
   	         null, null, null, null, null,-1, null, @CodeOutline, 'T', @TaskDescription, @Duration, @DMC_ID,'F'
            end
            else if @DepartmentFormat = 'H' 
            begin
             insert #OutlineIS
             exec sp_Dashboard_AddNewTask @ProjID, @Proj_Phase_ID, @GroupID, 'MSPTASK', 'nbgProjectsCosting',
   	         null, null, null, null, null,-1, null, @DepartmentOutline, 'T', @TaskDescription, @Duration, @DMC_ID,'F'
            end
            else --no parents at all
            begin
            insert #OutlineIS
             exec sp_Dashboard_AddNewTask @ProjID, @Proj_Phase_ID, @GroupID, 'MSPTASK', 'nbgProjectsCosting',
   	         null, null, null, null, null,-1, 0, null, 'T', @TaskDescription, @Duration, @DMC_ID,'F'
            end

            --add department level field
            if @DepartmentFormat = 'F'
            begin
             select @AssID = Task_UID
             from msp_tasks
             where proj_id = @ProjID
             and TASK_OUTLINE_NUM = (select OutlineIs from #OutlineIS)
 
	 										 insert msp_text_fields
             select @ProjID, 0, @AssID, @DepartmentFieldID, @GroupDescription
            end

            --add major code level field
            if @MajorCodeFormat = 'F'
            begin
             select @AssID = Task_UID
             from msp_tasks
             where proj_id = @ProjID
             and TASK_OUTLINE_NUM = (select OutlineIs from #OutlineIS)
 
	 										 insert msp_text_fields
             select @ProjID, 0, @AssID, @MajorCodeFieldID, @PhaseCode
            end


	           update msp_dashboard_tasks
            set Dashboard_TasksSetupID = @TaskID
            where mdt_id in (select mdt_id 
            from msp_dashboard_tasks dt
            join msp_tasks t
            on t.Proj_id = dt.Proj_id
            and t.Task_UID = dt.Task_UID
            where dt.proj_id = @ProjID and Task_Outline_Num in 
             (select OutlineIS
              from #OutlineIS))


           end
           fetch next from OutlineCodeItemsCursor into @TaskID, @TaskDescription, @Duration
          end

          close OutlineCodeItemsCursor
          deallocate OutlineCodeItemsCursor
	

         end
         fetch next from OutlinePhaseCursor into @PhaseCode, @PhaseDesc, @Proj_Phase_ID, @DMC_ID
        end
        close OutlinePhaseCursor
        deallocate OutlinePhaseCursor
     end
     fetch next from OutlineCursor into @GroupID, @GroupDescription 
  end
  close OutlineCursor
  deallocate OutlineCursor
-- exec sp_Dashboard_CreateSpecificCodes @ProjID, @Project, @HR_DB   

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_links'))
drop table #msp_links
create table #msp_links(
	[RESERVED_DATA] [char] (1) NULL ,
	[PROJ_ID] [int] NULL ,
	[EXT_EDIT_REF_DATA] [text] ,
	[LINK_UID] [int] not NULL identity(1,1),
	[LINK_IS_CROSS_PROJ] [bit] NULL DEFAULT (0),
	[LINK_PRED_UID] [int] NULL ,
	[LINK_SUCC_UID] [int] NULL ,
	[LINK_TYPE] [smallint] NULL ,
	[LINK_LAG_FMT] [smallint] NULL ,
	[LINK_LAG] [int] NULL 
) 

--do predecessors now for project level
insert #msp_links(RESERVED_DATA, PROJ_ID, EXT_EDIT_REF_DATA, LINK_IS_CROSS_PROJ, LINK_PRED_UID, 
LINK_SUCC_UID, LINK_TYPE, LINK_LAG_FMT, LINK_LAG)
select 0, @ProjID, null, 0, dt2.TASK_UID predecessor, t.TASK_UID, 1, 7, 0
from msp_dashboard_tasks dt
join msp_tasks t
on t.task_uid = dt.task_uid
and t.proj_id = dt.proj_id
join Dashboard_ProjTasksPredecessors dtp
on dtp.Dashboard_TaskSetUpID = dt.Dashboard_TasksSetupID
join dashboard_projTasksSetup ts
on ts.Dashboard_TasksSetupID = dtp.Dashboard_TaskSetupID
join dashboard_projTasksSetup ts2
on ts2.ReferenceID = dtp.ReferenceID
join msp_dashboard_tasks dt2
on dt2.Dashboard_TasksSetupID = ts2.Dashboard_TasksSetupID
and dt2.DMC_ID = dt.DMC_ID
and dt2.proj_id = dt.proj_id
where ts.Dashboard_MajorCodeTemplateID is null
and dt.Proj_id = @ProjID

--PREDECESSORS FOR code spcific tasks (can span all codes)
insert #msp_links(RESERVED_DATA, PROJ_ID, EXT_EDIT_REF_DATA, LINK_IS_CROSS_PROJ, LINK_PRED_UID, 
LINK_SUCC_UID, LINK_TYPE, LINK_LAG_FMT, LINK_LAG)
select 0, @ProjID, null, 0, dt2.TASK_UID predecessor, t.TASK_UID, 1, 7, 0
from msp_dashboard_tasks dt
join msp_tasks t
on t.task_uid = dt.task_uid
and t.proj_id = dt.proj_id
join Dashboard_ProjTasksPredecessors dtp
on dtp.Dashboard_TaskSetUpID = dt.Dashboard_TasksSetupID
join dashboard_projTasksSetup ts
on ts.Dashboard_TasksSetupID = dtp.Dashboard_TaskSetupID
join dashboard_projTasksSetup ts2
on ts2.ReferenceID = dtp.ReferenceID
join msp_dashboard_tasks dt2
on dt2.Dashboard_TasksSetupID = ts2.Dashboard_TasksSetupID
and dt2.proj_id = dt.proj_id
where ts.Dashboard_MajorCodeTemplateID is NOT null
and dt.Proj_id = @ProjID


declare @MaxLUid int
select @MaxLUid = max(Link_UID)
from msp_links
where PROJ_ID = @PROJID

insert msp_links(RESERVED_DATA, PROJ_ID, EXT_EDIT_REF_DATA, LINK_UID, LINK_IS_CROSS_PROJ, LINK_PRED_UID, 
LINK_SUCC_UID, LINK_TYPE, LINK_LAG_FMT, LINK_LAG)
select RESERVED_DATA, PROJ_ID, EXT_EDIT_REF_DATA, LINK_UID + isNull(@MaxLUid,0), LINK_IS_CROSS_PROJ, LINK_PRED_UID, 
LINK_SUCC_UID, LINK_TYPE, LINK_LAG_FMT, LINK_LAG
from #msp_links



select 'Done' 'Result'













Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Dashboard_CreateSpecificCodes]') and xtype = 'P ')  
 drop Procedure sp_Dashboard_CreateSpecificCodes
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go








CREATE   proc sp_Dashboard_CreateSpecificCodes 
@ProjID int, --msp projid
@Project varchar(100), --human project#
@HR_DB varchar(500),
@PhaseCode varchar(50)   
as


declare @ProjectDescription varchar(100), @StartDate Datetime, 
    @EndDate datetime, @PriNum varchar(20), @str varchar(8000) , 
     @Project_str varchar(20), @TR_DB varchar(200), @CompanyName varchar(200)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#proj_id2'))
drop table #proj_id2

create table #proj_id2
( pri_name varchar(50)null,
  pri_start_date datetime  null ,
  pri_est_completion_date datetime null,
  pri_num varchar(20) null,
  CompanyIS varchar(200) null
  )

set @Project_str = convert(varchar(20),@Project)
set @str = 'insert #proj_id2 select rtrim(pri_name),pri_start_date,
           pri_est_completion_date,pri_num, tr_db from ' + @HR_DB + 
           '..proj_ID join  ' + @HR_DB + 
           '..database_setup on 1=1
           where Proj_ID_ID =  ' + @Project 

print @str

exec(@str)

select @ProjectDescription = rtrim(pri_name), @StartDate = pri_start_date,
 @EndDate = pri_est_completion_date, @PriNum = pri_num, @TR_DB = CompanyIS
from #proj_ID2

if 1=2
 create table #CodeSpec(
 DMC_ID int null, 
 Dashboard_TasksSetupID int null, 
 Duration int null, 
 TaskDescription varchar(255) null,
 Dashboard_TaskGroupID int null)


select @str = 
'
insert #CodeSpec
select dmc.DMC_ID, ds.Dashboard_TasksSetupID, Duration, TaskDescription, dt.Dashboard_TaskGroupID
from ' + @HR_DB + '..projconv_header h
join ' + @HR_DB + '..projconv_codes c
on h.ProjConv_Header_id = c.ProjConv_Header_id
join Dashboard_ProjMajorCodeTemplates mct
on mct.Dashboard_MajorCodeTemplateID = c.Dashboard_MajorCodeTemplateID
join Dashboard_ProjTasksSetup ds
on ds.Dashboard_MajorCodeTemplateID = mct.Dashboard_MajorCodeTemplateID
join companies co
on ''' + @HR_DB + ''' = co.HumanDBName
and co.AutoID = mct.CompanyAutoID
and destType = substring(Flavour, 1 ,1)
join Dashboard_MajorCodes dmc
on dmc.MajorCode = c.dstCode
and h.pri_num = dmc.Proj_ID
join msp_dashboard_tasks dt
on dt.Dashboard_TaskGroupID = ds.Dashboard_TaskGroupID
and dt.DMC_ID = dmc.DMC_ID
join msp_tasks t
on t.TASK_UID = dt.TASK_UID
and t.Proj_ID = dt.Proj_ID
where rtrim(h.pri_num) = ' + @Prinum + '
and dt.CodeType = ''M''
and dstCode = ''' + @PhaseCode + ''''


print @str

exec(@str)

-- exec sp_Dashboard_CreateSpecificCodes 1, 86, 'hr_demo_57'









Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Dashboard_DateCrawl]') and xtype = 'P ')  
 drop Procedure sp_Dashboard_DateCrawl
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go










CREATE      proc sp_Dashboard_DateCrawl 
 @StartDate datetime, 
 @DurInMins float, 
 @Proj_id int,
 @Task_UID int,
 @Res_UID int
as
/*
 author : bert
 Note - this sp is not concerned with resource allocation (at this point).
 The purpose in passing the task and resource reference is for rev 2 
 when resource allocation becomes an issue.

 For now, the sp only looks at the calendar to determine timing.
 1-7 in the calendar_data refer to the normal work week.
 8-up refer to exception (holidays or planned working days).
*/

-- declare
-- @StartDate datetime, 
-- @DurInMins int, 
-- @Proj_id int,
-- @Task_UID int,
-- @Res_UID int
-- 
-- select
-- @StartDate = '9/14/05', @DurInMins = 96000, 
-- @Proj_id = 1, @Task_UID = null, @Res_UID = null
print 'InDateCrawl ' + cast(@Task_UID as varchar(50))

if 1=2
 create table #EndDate(EndDate datetime null)

declare @TimeRemaining float
select @TimeRemaining = @DurInMins / 10 -- use real mins (not the msp *10 crap)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#WeeklySchedule'))
drop table #WeeklySchedule
create table #WeeklySchedule(
 DayOfWeek int,
 Minutes int,
 Seq int,
 FromTime int,
 ToTime int,
 ExceptionStart datetime,
 ExceptionEnd datetime,
 Working int)

insert #WeeklySchedule
select CD_DAY_OR_EXCEPTION, DateDiff(Minute, CD_FROM_TIME1, CD_TO_TIME1), 1, datepart(hour, CD_FROM_TIME1) * 60, datepart(hour, CD_TO_TIME1) * 60, null, null, CD_WORKING
from msp_calendar_data
where proj_id = @Proj_id 
and CD_DAY_OR_EXCEPTION < 8 

insert #WeeklySchedule
select CD_DAY_OR_EXCEPTION, DateDiff(Minute, CD_FROM_TIME2, CD_TO_TIME2), 2, datepart(hour, CD_FROM_TIME2) * 60, datepart(hour, CD_TO_TIME2) * 60, null, null, CD_WORKING
from msp_calendar_data
where proj_id = @Proj_id 
and CD_DAY_OR_EXCEPTION < 8 
and CD_FROM_TIME2 is not null

insert #WeeklySchedule
select CD_DAY_OR_EXCEPTION, DateDiff(Minute, CD_FROM_TIME3, CD_TO_TIME3), 3, datepart(hour, CD_FROM_TIME3) * 60, datepart(hour, CD_TO_TIME3) * 60, null, null, CD_WORKING
from msp_calendar_data
where proj_id = @Proj_id 
and CD_DAY_OR_EXCEPTION < 8 
and CD_FROM_TIME3 is not null

insert #WeeklySchedule
select CD_DAY_OR_EXCEPTION, DateDiff(Minute, CD_FROM_TIME4, CD_TO_TIME4), 4, datepart(hour, CD_FROM_TIME4) * 60, datepart(hour, CD_TO_TIME4) * 60, null, null, CD_WORKING
from msp_calendar_data
where proj_id = @Proj_id 
and CD_DAY_OR_EXCEPTION < 8 
and CD_FROM_TIME4 is not null

insert #WeeklySchedule
select CD_DAY_OR_EXCEPTION, DateDiff(Minute, CD_FROM_TIME5, CD_TO_TIME5), 5, datepart(hour, CD_FROM_TIME5) * 60, datepart(hour, CD_TO_TIME5) * 60, null, null, CD_WORKING
from msp_calendar_data
where proj_id = @Proj_id 
and CD_DAY_OR_EXCEPTION < 8
and CD_FROM_TIME5 is not null

--now do exceptions
-- insert #WeeklySchedule
-- select CD_DAY_OR_EXCEPTION, DateDiff(Minute, CD_FROM_TIME1, CD_TO_TIME1), 1, datepart(hour, CD_FROM_TIME1) * 60, datepart(hour, CD_TO_TIME1) * 60, CD_FROM_DATE, CD_TO_DATE, CD_WORKING
-- from msp_calendar_data
-- where proj_id = @Proj_id 
-- and CD_DAY_OR_EXCEPTION = 0
-- 
-- insert #WeeklySchedule
-- select CD_DAY_OR_EXCEPTION, DateDiff(Minute, CD_FROM_TIME2, CD_TO_TIME2), 2, datepart(hour, CD_FROM_TIME2) * 60, datepart(hour, CD_TO_TIME2) * 60, CD_FROM_DATE, CD_TO_DATE, CD_WORKING
-- from msp_calendar_data
-- where proj_id = @Proj_id 
-- and CD_DAY_OR_EXCEPTION = 0
-- and CD_FROM_TIME2 is not null
-- 
-- insert #WeeklySchedule
-- select CD_DAY_OR_EXCEPTION, DateDiff(Minute, CD_FROM_TIME3, CD_TO_TIME3), 3, datepart(hour, CD_FROM_TIME3) * 60, datepart(hour, CD_TO_TIME3) * 60, CD_FROM_DATE, CD_TO_DATE, CD_WORKING
-- from msp_calendar_data
-- where proj_id = @Proj_id 
-- and CD_DAY_OR_EXCEPTION = 0
-- and CD_FROM_TIME3 is not null
-- 
-- insert #WeeklySchedule
-- select CD_DAY_OR_EXCEPTION, DateDiff(Minute, CD_FROM_TIME4, CD_TO_TIME4), 4, datepart(hour, CD_FROM_TIME4) * 60, datepart(hour, CD_TO_TIME4) * 60, CD_FROM_DATE, CD_TO_DATE, CD_WORKING
-- from msp_calendar_data
-- where proj_id = @Proj_id 
-- and CD_DAY_OR_EXCEPTION = 0
-- and CD_FROM_TIME4 is not null
-- 
-- insert #WeeklySchedule
-- select CD_DAY_OR_EXCEPTION, DateDiff(Minute, CD_FROM_TIME5, CD_TO_TIME5), 5, datepart(hour, CD_FROM_TIME5) * 60, datepart(hour, CD_TO_TIME5) * 60, CD_FROM_DATE, CD_TO_DATE, CD_WORKING
-- from msp_calendar_data
-- where proj_id = @Proj_id 
-- and CD_DAY_OR_EXCEPTION = 0
-- and CD_FROM_TIME5 is not null


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#BlockReturn'))
drop table #BlockReturn
create table #BlockReturn(
 CurrentSequence int,
 TimeRemaining float,
 RunningDate datetime,
 EndTime int)

declare @RunningDate datetime, @CurrentSequence int, @EndTime int


select @CurrentSequence = 1
select @RunningDate = @StartDate

print 'time remaining : ' + isnull(cast(@TimeRemaining as varchar(50)),'')

while @TimeRemaining > 0
begin
 delete #BlockReturn  
 exec sp_DashboardGetNextTimeBlock  @CurrentSequence, @TimeRemaining, @RunningDate
 select @CurrentSequence = CurrentSequence, @TimeRemaining = TimeRemaining,
 @RunningDate = RunningDate, @EndTime = EndTime
 from #BlockReturn
end


insert #EndDate
select DateAdd(minute, @EndTime, @RunningDate) EndDate


print 'OutDateCrawl Task' + cast(@Task_UID as varchar(50))
print 'OutDateCrawl EndTime' + cast(@EndTime as varchar(50))
print 'OutDateCrawl RunningDate' + cast(@RunningDate as varchar(50))










Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Dashboard_DeleteCodeMSP]') and xtype = 'P ')  
 drop Procedure sp_Dashboard_DeleteCodeMSP
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





CREATE  proc sp_Dashboard_DeleteCodeMSP
 @Project integer,
 @Code varchar(20),
 @Type  varchar(20)
as
  select 'Done' Result








Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Dashboard_DelProject]') and xtype = 'P ')  
 drop Procedure sp_Dashboard_DelProject
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go






CREATE    proc  sp_Dashboard_DelProject

--declare  
         @PROJ_ID   int,
         @Dashboard_TaskGroupID   int
As

--set   @PROJ_ID = 50
--set    @Dashboard_TaskGroupID  = 1


declare @countDept   int 
select  @countDept = count (distinct Dashboard_TaskGroupID )
from msp_dashboard_tasks
      where PROJ_ID = @PROJ_ID

if @countDept > 1 
begin
    print ('delete all the tasks for this department')
      delete   msp_tasks
      from   msp_tasks mt
      join msp_dashboard_tasks t
      on mt.task_uid = t.task_uid
      and mt.PROJ_ID = t.PROJ_ID
      where mt.PROJ_ID = @PROJ_ID  
      and Dashboard_TaskGroupID =  @Dashboard_TaskGroupID

      delete
      from msp_dashboard_tasks
      where PROJ_ID = @PROJ_ID  
       and Dashboard_TaskGroupID = @Dashboard_TaskGroupID
end
else if @countDept = 1 
begin
 print ('delete all tasks, project info  for this projec')
	  delete msp_calendar_data
	where  PROJ_ID  = @proj_id 
	
	--select * from msp_calendars
	delete msp_calendars
	where  PROJ_ID  = @proj_id 
	
	
	--select * from msp_outline_codes
	 delete msp_outline_codes
	where   PROJ_ID  = @proj_id 
	
	--select * from msp_resources
	 delete msp_resources
	where  PROJ_ID = @proj_id 
	
	--select * from msp_projects
	delete msp_projects
	where  PROJ_ID = @proj_id 
	
	
	delete msp_dashboard_tasks
	--select *  from msp_dashboard_tasks
	where PROJ_ID = @proj_id 
	
	
	delete msp_tasks
	--select *  from msp_tasks
	where PROJ_ID = @proj_id 
	
	
	--select PROJ_ID from  msp_dashboard_projects
	delete msp_dashboard_projects
	where PROJ_ID = @proj_id

end  
        

select 'Done'  'Result'








Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Dashboard_GetAccess]') and xtype = 'P ')  
 drop Procedure sp_Dashboard_GetAccess
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go







CREATE   proc sp_Dashboard_GetAccess
 @UserID int
as

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Modules'))
drop table #Modules
create table #Modules(DBModule_ID int, [Description] varchar(50), Caption varchar(50) )

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Access'))
drop table #Access
create table #Access( 
 DBModule_ID int, 
 ModuleName varchar(50),
 Company_ID varchar(50),
 CompanyName varchar(50),
 Dashboard_TaskGroupID int,
 GroupDescription varchar(50),
 Item_ID int,
 ItemDescription varchar(100)
)


insert #Modules
select distinct s.DBModule_ID, [Description], Caption
from Dashboard_Security s
join Dashboard_Modules m
on m.DBModule_ID = s.DBModule_ID
where UserID = @UserID

declare @ModuleDesc varchar(50), @DBModule_ID int, @ModuleCaption varchar(50)


-- each module will call a variation of the following
select @ModuleDesc = [Description], @DBModule_ID = DBModule_ID, @ModuleCaption = Caption
from #Modules
where [Description] = 'nbgProjectsCosting'
if isnull(@ModuleDesc,'') <> ''
begin
 exec sp_Dashboard_GetProjects @UserID
 insert #Access
 select distinct @DBModule_ID, @ModuleCaption, Company_ID, Company_Name, 
 Dashboard_TaskGroupID, GroupDescription, Item_ID, ItemDescription
 from Working_NavBarProjectAccess
 where PCID = @UserID
end
-- end module

delete Working_SecurityAccess
where PCID = @UserID

insert Working_SecurityAccess(DBModule_ID, ModuleName, Company_ID, CompanyName,
       Dashboard_TaskGroupID, GroupDescription, Item_ID,ItemDescription, PCID )
select *, @UserID
from #Access











Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Dashboard_GetAllModuleAccess]') and xtype = 'P ')  
 drop Procedure sp_Dashboard_GetAllModuleAccess
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 


CREATE          proc [dbo].[sp_Dashboard_GetAllModuleAccess]

  @userid    int, @whseID  int

as

-- drop table #access 

--declare @userid    int,@whseID  int
--
-- select @userid = -1,@whseID =0       
-- select @userid = 594,@whseID =0
--
--select @userid = -1,@whseID =1
-- select @userid = 594,@whseID =1



if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ModuleAccessTemp'))
 drop table #ModuleAccessTemp
create  TABLE [#ModuleAccessTemp] (
	[DBModule_ID] [int] NULL ,
	[ModuleName] [varchar] (50)  NULL ,
	[Company_Name] [varchar] (50)  NULL ,
	[Company_ID] [varchar] (50)  NULL ,
	[Security_ID] [int] NULL ,
	[UserID] [int] NULL ,
	[PCID] [varchar] (500)  NULL ,
	[Delegator] [bit] NULL , 
        [WHSE_ID]   [int] NULL
) 


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#company'))
 drop table #company
 create table #company(
     Company_Name varchar(50) null, 
     Company_ID varchar(50) null,
     Company_ID_ID varchar(50) null,
  )

insert #company(Company_Name,Company_id,Company_ID_ID)
select Company_Name,null,Company_ID
from companies

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#module'))
 drop table #module
 create table #module(
     ModuleName   varchar(50) null, 
     DBModule_ID varchar(50) null,
     DBModule_ID_ID int null,
  )
-- 
insert #module (ModuleName,DBModule_ID,DBModule_ID_ID)
select Caption , null,DBModule_ID
from Dashboard_Modules
where ModuleApplicable = 1 and WarehouseApplicable = 1 
if isnull(@whseID,0) <> 0
  insert #module (ModuleName,DBModule_ID,DBModule_ID_ID)
   select Caption , null,DBModule_ID
  from Dashboard_Modules
  where WarehouseApplicable = 1 
 

if isnull(@userid,0) <> -1 
begin


----- company is null, module is not


insert #ModuleAccessTemp(Company_Name, Company_ID,DBModule_ID, ModuleName, Security_ID,
   UserID,PCID,Delegator, WHSE_ID)                                                                                                                                                                                                                                                                                                                                                                                       
select c.Company_Name,c.Company_ID_ID,s.DBModule_ID,m.Caption,Security_ID,
    s.userid,@userid, s.Delegator, s.WHSE_ID
from #company c
 join Dashboard_security s
on isnull(c.Company_ID,'')   = isnull(s.Company_ID,'') 
join Dashboard_Modules  m
on s.DBModule_ID = m.DBModule_ID
where  s.userid =@userid
and isnull(s.company_id ,'')= ''
and isnull(s.DBModule_ID ,0)<> 0
-- company is null, module is null
 

insert #ModuleAccessTemp(Company_Name, Company_ID,DBModule_ID, ModuleName,Security_ID,
    UserID,PCID,Delegator, WHSE_ID)                                                 
select c.Company_Name, c.Company_ID_ID,m.DBModule_ID_ID,m.ModuleName,s.Security_ID,
    s.userid, @userid, s.Delegator, s.WHSE_ID
from #company c
join #module  m
on isnull(c.Company_ID,'') = isnull( m.DBModule_ID,'')
join Dashboard_security s
on isnull(c.Company_ID,'') = isnull(s.Company_ID,'')
and isnull( m.DBModule_ID,'') = isnull( s.DBModule_ID,'')
where  s.userid =@userid
and isnull(s.company_id ,'')= ''
and isnull(s.DBModule_ID ,0)= 0

order by c.Company_Name,m.ModuleName
---- company is not null, module is null

insert #ModuleAccessTemp(Company_Name, Company_ID,DBModule_ID, ModuleName, Security_ID,
   UserID,PCID,Delegator, WHSE_ID)                                                                                                                                                                                                                                                                                                                                                                                       
select c.Company_Name,c.Company_ID,m.DBModule_ID_ID,m.ModuleName,Security_ID,
    s.userid,@userid, s.Delegator, s.WHSE_ID
-- select *
from #module m 
 join Dashboard_security s
on isnull(m.DBModule_ID,0)   = isnull(s.DBModule_ID,0) 
join Companies  c
on c.company_id =s.company_id
where  s.userid = @userid
and isnull(s.company_id ,'') <> ''
and isnull(s.DBModule_ID ,0)= 0

---- company is not null, module is not null

insert #ModuleAccessTemp(Company_Name, Company_ID,DBModule_ID, ModuleName, Security_ID,
   UserID,PCID,Delegator, WHSE_ID)                                                                                                                                                                                                                                                                                                                                                                                       
select c.Company_Name,c.Company_ID,m.DBModule_ID,m.Caption,Security_ID,
    s.userid,@userid,s.Delegator, s.WHSE_ID
-- select *
from Dashboard_security s
join Companies  c
on c.company_id =s.company_id
join Dashboard_Modules   m
on s.DBModule_ID  = m.DBModule_ID
where  s.userid = @userid
and isnull(s.company_id ,'') <> ''
and isnull(s.DBModule_ID ,0)<> 0

END
else
begin
   print (' module and company both null')
        insert #ModuleAccessTemp(Company_Name, Company_ID,DBModule_ID, ModuleName,Security_ID,
         UserID,PCID,Delegator, WHSE_ID)                                                 
	select c.Company_Name, c.Company_ID_ID,m.DBModule_ID_ID,m.ModuleName,-1,
	     @userid, @userid, 1, @whseID
        -- select *
	from #company c
	join #module  m
	on isnull(c.Company_ID,'') = isnull( m.DBModule_ID,'')

     --  select * from #company
      --  select * from #module

end
-----------------------------------------
--select * from #ModuleAccessTemp

delete Working_ModuleAccess
where pcid =@userid

insert Working_ModuleAccess (Company_Name, Company_ID,DBModule_ID, ModuleName, Security_ID,
   UserID,PCID,Delegator, WHSE_ID) 
select  Company_Name, Company_ID,DBModule_ID, ModuleName, Security_ID,
   UserID,PCID,Delegator, WHSE_ID
from #ModuleAccessTemp    -- select * from  #ModuleAccessTemp where userid = 594
order by  Company_ID ,DBModule_ID

------------------------------------------------------
delete from Working_ModuleUserAccess
where PCID = @userid 


select  Security_ID,UserID,s.Company_ID, c.Company_Name,s.DBModule_ID,m.Caption,Delegator,ReadOnly, WHSE_ID
into #access   -- drop table #access  -- select * from #access
from Dashboard_Security  s
left outer join Dashboard_Modules   m
on m.DBModule_ID = s.DBModule_ID
left outer join Companies  c
on s.Company_ID = c.Company_ID



insert Working_ModuleUserAccess (Security_ID,USER_LOGIN_ID,USER_NAME, Company_ID,Company_Name,
         DBModule_ID, DBModule_Name, Delegator,ReadOnly,PCID,WHSE_ID,InActive,Suspended, EmailAddress)
select s.Security_ID,c.ID,Convert(varchar(50),KnownAs), Company_ID, s.Company_Name,
         DBModule_ID,s.Caption ,Delegator, ReadOnly,@userid,WHSE_ID,InActive,c.Suspended, c.Email1Address
from contact c
join access a
on c.id = a.ContactID
left outer join #access s
on s.UserID = c.id
where UserLevel = 'D'


-- SELECT DISTINCT DBModule_ID, ModuleName, Company_Name, Company_ID, UserID, PCID, Delegator
-- FROM         Working_ModuleAccess
-- WHERE     (PCID = @PCID) AND (UserID = @UserID) AND (ISNULL(WHSE_ID, 0) = 0) OR
--                       (PCID = @PCID) AND (UserID = @UserID) AND (WHSE_ID = @WHSE_ID)

-- SELECT     Security_ID, USER_LOGIN_ID, USER_NAME, DBModule_ID, DBModule_Name, Company_ID, Company_Name, Delegator, ReadOnly, PCID
-- FROM         Working_ModuleUserAccess
-- WHERE     (PCID = @pcid) AND (ISNULL(WHSE_ID, 0) = 0) OR
--                       (PCID = @pcid) AND (WHSE_ID = @WHSE_ID)











Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Dashboard_GetAllSecurityAccess]') and xtype = 'P ')  
 drop Procedure sp_Dashboard_GetAllSecurityAccess
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go























-- exec sp_Dashboard_GetAllSecurityAccess 41, 'nbgProjectsCosting'
CREATE                  proc sp_Dashboard_GetAllSecurityAccess
 @UserID int,
 @SourceFlavour  varchar(50)

as

--  declare @UserID int
--  select @UserID = 5

declare @DBModule_ID    int

select @DBModule_ID = DBModule_ID from Dashboard_Modules
where Description = @SourceFlavour

 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Projects'))
 drop table #Projects
  create table #Projects(
   DBModule_ID int, 
   ModuleName varchar(50),
   Company_Name varchar(50) null, 
   Company_ID varchar(50) null,
   Security_ID int,
   Item_ID int null,
   ItemDescription varchar(100) null,
   Proj_ID int null,
   Proj_ID_ID int null, --unique proj id in costing module (company level)   
   Proj_Phase_ID int null,
   Dashboard_TaskGroupID int null,
   TASK_NAME varchar(255) null,
   UserID int,
   Delegator bit NULL
   )

-- if module based access 
insert #Projects
select m.DBModule_ID, m.Description, c.Company_Name, c.Company_ID, Security_ID, mdp_id, mspdp.Proj_Name, mspdp.Proj_ID, 
mspdp.Link_ID, mspdt.Link_ID, mspdt.Dashboard_TaskGroupID, mspt.TASK_NAME, s.UserID, s.Delegator
from dashboard_security s
join dashboard_modules m
on s.DBModule_ID = m.DBModule_ID
join MSP_Dashboard_Projects mspdp
on mspdp.DBModule_ID = m.DBModule_ID
join Companies c
on mspdp.Company_ID = c.Company_id
join MSP_Projects msp
on msp.Proj_ID = mspdp.Proj_ID
join msp_tasks mspt
on msp.PROJ_ID = mspt.PROJ_ID
join msp_dashboard_tasks mspdt
on mspdt.PROJ_ID = mspt.PROJ_ID
and mspdt.Task_UID = mspt.Task_UID
and mspdt.Dashboard_TaskGroupID is not null
and mspdt.CodeType = 'M'
where s.UserID = @UserID
and isNull(s.Item_ID,'') = ''
and isNull(s.Dashboard_TaskGroupID,'') = ''
and isNull(s.Company_ID,'') = ''

 
-- if company based access 
insert #Projects
select m.DBModule_ID, m.Description,c.Company_Name, c.Company_ID, Security_ID, mdp_id, mspdp.Proj_Name, mspdp.Proj_ID, 
mspdp.Link_ID, mspdt.Link_ID, mspdt.Dashboard_TaskGroupID, mspt.TASK_NAME, s.UserID, s.Delegator
from dashboard_security s
join dashboard_modules m
on s.DBModule_ID = m.DBModule_ID
join MSP_Dashboard_Projects mspdp
on mspdp.DBModule_ID = m.DBModule_ID
join Companies c
on mspdp.Company_ID = c.Company_id
and s.Company_ID = c.Company_id
join MSP_Projects msp
on msp.Proj_ID = mspdp.Proj_ID
join msp_tasks mspt
on msp.PROJ_ID = mspt.PROJ_ID
join msp_dashboard_tasks mspdt
on mspdt.PROJ_ID = mspt.PROJ_ID
and mspdt.Task_UID = mspt.Task_UID
and mspdt.Dashboard_TaskGroupID is not null
and mspdt.CodeType = 'M'
where s.UserID = @UserID
and isNull(s.Item_ID,'') = ''
and isNull(s.Dashboard_TaskGroupID,'') = ''
and isNull(s.Company_ID,'') = mspdp.Company_ID
 
-- if category based access (company non specific)
insert #Projects
select m.DBModule_ID, m.Description,c.Company_Name, c.Company_ID, Security_ID, mdp_id, mspdp.Proj_Name, mspdp.Proj_ID, 
mspdp.Link_ID, mspdt.Link_ID, mspdt.Dashboard_TaskGroupID, mspt.TASK_NAME, s.UserID, s.Delegator
from dashboard_security s
join dashboard_modules m
on s.DBModule_ID = m.DBModule_ID
join MSP_Dashboard_Projects mspdp
on mspdp.DBModule_ID = m.DBModule_ID
join Companies c
on mspdp.Company_ID = c.Company_id
join MSP_Projects msp
on msp.Proj_ID = mspdp.Proj_ID
join msp_tasks mspt
on msp.PROJ_ID = mspt.PROJ_ID
join msp_dashboard_tasks mspdt
on mspdt.PROJ_ID = mspt.PROJ_ID
and mspdt.Task_UID = mspt.Task_UID
and mspdt.Dashboard_TaskGroupID  = s.Dashboard_TaskGroupID
and mspdt.CodeType = 'M'
where s.UserID = @UserID
and isNull(s.Item_ID,'') = ''
and isNull(s.Dashboard_TaskGroupID,'') <> ''
and isNull(s.Company_ID,'') = ''

-- if category based access (company specific)
insert #Projects
select m.DBModule_ID, m.Description,c.Company_Name, c.Company_ID, Security_ID, mdp_id, mspdp.Proj_Name, mspdp.Proj_ID, 
mspdp.Link_ID, mspdt.Link_ID, mspdt.Dashboard_TaskGroupID, mspt.TASK_NAME, s.UserID, s.Delegator
from dashboard_security s
join dashboard_modules m
on s.DBModule_ID = m.DBModule_ID
join MSP_Dashboard_Projects mspdp
on mspdp.DBModule_ID = m.DBModule_ID
join Companies c
on mspdp.Company_ID = c.Company_id
and s.Company_ID = c.Company_id
join MSP_Projects msp
on msp.Proj_ID = mspdp.Proj_ID
join msp_tasks mspt
on msp.PROJ_ID = mspt.PROJ_ID
join msp_dashboard_tasks mspdt
on mspdt.PROJ_ID = mspt.PROJ_ID
and mspdt.Task_UID = mspt.Task_UID
and mspdt.Dashboard_TaskGroupID  = s.Dashboard_TaskGroupID
and mspdt.CodeType = 'M'
where s.UserID = @UserID
and isNull(s.Item_ID,'') = ''
and isNull(s.Dashboard_TaskGroupID,'') <> ''
and isNull(s.Company_ID,'') <> ''

-- if item based access (category non specific)
insert #Projects
select m.DBModule_ID, m.Description,c.Company_Name, c.Company_ID, Security_ID, mdp_id, mspdp.Proj_Name, mspdp.Proj_ID, 
mspdp.Link_ID, mspdt.Link_ID, mspdt.Dashboard_TaskGroupID, mspt.TASK_NAME, s.UserID, s.Delegator
from dashboard_security s
join dashboard_modules m
on s.DBModule_ID = m.DBModule_ID
join MSP_Dashboard_Projects mspdp
on mspdp.DBModule_ID = m.DBModule_ID
join Companies c
on mspdp.Company_ID = c.Company_id
join MSP_Projects msp
on msp.Proj_ID = mspdp.Proj_ID
join msp_tasks mspt
on msp.PROJ_ID = mspt.PROJ_ID
join msp_dashboard_tasks mspdt
on mspdt.PROJ_ID = mspt.PROJ_ID
and mspdt.Task_UID = mspt.Task_UID
and mspdt.Dashboard_TaskGroupID is not null
and mspdt.CodeType = 'M'
where s.UserID = @UserID
and isNull(s.Item_ID,'') = mdp_id
and isNull(s.Dashboard_TaskGroupID,'') = ''
and isNull(s.Company_ID,'') <> ''

-- if item based access (category specific)
insert #Projects
select m.DBModule_ID, m.Description,c.Company_Name, c.Company_ID, Security_ID, mdp_id, mspdp.Proj_Name, mspdp.Proj_ID, 
mspdp.Link_ID, mspdt.Link_ID, mspdt.Dashboard_TaskGroupID, mspt.TASK_NAME, s.UserID, s.Delegator
from dashboard_security s
join dashboard_modules m
on s.DBModule_ID = m.DBModule_ID
join MSP_Dashboard_Projects mspdp
on mspdp.DBModule_ID = m.DBModule_ID
join Companies c
on mspdp.Company_ID = c.Company_id
join MSP_Projects msp
on msp.Proj_ID = mspdp.Proj_ID
join msp_tasks mspt
on msp.PROJ_ID = mspt.PROJ_ID
join msp_dashboard_tasks mspdt
on mspdt.PROJ_ID = mspt.PROJ_ID
and mspdt.Task_UID = mspt.Task_UID
and mspdt.Dashboard_TaskGroupID = s.Dashboard_TaskGroupID
and mspdt.CodeType = 'M'
where s.UserID = @UserID
and isNull(s.Item_ID,'') = mdp_id 
and isNull(s.Dashboard_TaskGroupID,'') <> ''
and isNull(s.Company_ID,'') <> ''

 delete Working_NavBarSecurityAccess    -- select * from Working_NavBarSecurityAccess  
 where PCID = @UserID
     and DBModule_ID = @DBModule_ID  
     
insert Working_NavBarSecurityAccess (DBModule_ID, ModuleName, Company_Name,Company_ID, Security_ID, Item_ID, ItemCode, ItemDescription, MSP_Proj_ID, Proj_ID_ID, 
 Proj_Phase_ID, p.Dashboard_TaskGroupID, TASK_NAME, GroupDescription, UserID ,PCID, Delegator)
select @DBModule_ID , ModuleName, Company_Name,	Company_ID, Security_ID, Item_ID, null, ItemDescription, Proj_ID, Proj_ID_ID, 
 Proj_Phase_ID, p.Dashboard_TaskGroupID, TASK_NAME, GroupDescription, u.USER_LOGIN_ID ,@UserID, p.Delegator
from USER_LOGIN u
left outer join #projects  p
on u.USER_LOGIN_ID = p.UserID
left outer join Dashboard_ProjTaskGroup tg
on p.Dashboard_TaskGroupID = tg.Dashboard_TaskGroupID
where u.USER_LEVEL = 'D'
-- 

















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Dashboard_GetAllSecurityAccess_Internal]') and xtype = 'P ')  
 drop Procedure sp_Dashboard_GetAllSecurityAccess_Internal
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


























-- exec sp_Dashboard_GetAllSecurityAccess_internal 52
 CREATE                     proc sp_Dashboard_GetAllSecurityAccess_Internal
@UserID int
as

declare @DBModule_ID    int

select @DBModule_ID = DBModule_ID from Dashboard_Modules
where Description = 'nbgInternal'

 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Projects'))
 drop table #Projects
  create table #Projects(
   DBModule_ID int, 
   ModuleName varchar(50),
   Company_Name varchar(50) null, 
   Company_ID varchar(50) null,
   Security_ID int,
   Item_ID int null,
   ItemDescription varchar(100) null,
   Proj_ID int null,
   Proj_ID_ID int null, --unique proj id in costing module (company level)   
   Proj_Phase_ID int null,
   Dashboard_TaskGroupID int null,
   TASK_NAME varchar(255) null,
   UserID int,
   Delegator bit NULL)

 insert #Projects

 select @DBModule_ID, m.Description, c.Company_Name, c.Company_ID, null, 
 mdp_id, p.Proj_Name, p.Proj_ID, p.Link_ID, t.Link_ID, t.Dashboard_TaskGroupID, 
 mt.TASK_NAME, @UserID, 1
 from msp_dashboard_tasks t 
 join msp_tasks mt
 on mt.proj_id = t.proj_id
 and mt.task_uid = t.task_uid  
 join msp_dashboard_projects p 
 on p.proj_id = t.proj_id 
 join dashboard_modules m
 on p.DBModule_ID = m.DBModule_ID
 join Companies c
 on p.Company_ID = c.Company_id 
 where CodeType = 'C' 
 and t.SourceFlavour = 'nbgInternal' 
 and 1 = case when @UserID = t.Link_ID then 1 else 2 end


 delete Working_NavBarSecurityAccess    -- select * from Working_NavBarSecurityAccess  
 where PCID = @UserID
     and DBModule_ID = @DBModule_ID  

     
 insert Working_NavBarSecurityAccess (DBModule_ID, ModuleName, Company_Name,Company_ID, Security_ID, Item_ID, ItemCode, ItemDescription, MSP_Proj_ID, Proj_ID_ID, 
  Proj_Phase_ID, p.Dashboard_TaskGroupID, TASK_NAME, GroupDescription, UserID ,PCID, Delegator)
select @DBModule_ID , ModuleName, Company_Name,	Company_ID, Security_ID, Item_ID, null, ItemDescription, Proj_ID, Proj_ID_ID, 
 Proj_Phase_ID, p.Dashboard_TaskGroupID, TASK_NAME, GroupDescription, u.USER_LOGIN_ID ,@UserID, p.Delegator
-- select *
from USER_LOGIN u
join #projects  p
on u.USER_LOGIN_ID = p.UserID
left outer join Dashboard_ProjTaskGroup tg
on p.Dashboard_TaskGroupID = tg.Dashboard_TaskGroupID
where u.USER_LEVEL = 'D'
-- 


-- 
-- 
-- 
-- select * from dashboard_security















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Dashboard_GetProjectNotes]') and xtype = 'P ')  
 drop Procedure sp_Dashboard_GetProjectNotes
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go












CREATE                     proc sp_Dashboard_GetProjectNotes
 @UserID int,
 @Project varchar(255),
 @TaskName varchar(255),
 @GroupDescription varchar(50)
as

 -- populates the notes driver table

--  declare @UserID int, @Project varchar(255), @TaskName varchar(255), @GroupDescription varchar(50)
--  select @Userid = 41, @Project = '6%', @TaskName = '%', @GroupDescription = '%'


--first need to get major code level
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#NotesAccess'))
drop table #NotesAccess

select t.*
into #NotesAccess
from Dashboard_Notes t
join MSP_Projects msp
on msp.Proj_ID = t.Proj_ID
join MSP_Dashboard_Projects mspdp
on mspdp.Proj_ID = msp.Proj_ID
left outer join Dashboard_ProjTaskGroup g
on g.Dashboard_TaskGroupID = t.Dashboard_TaskGroupID
join Working_NavBarProjectAccess a
on a.Proj_Phase_ID = isNull(t.Link_ID,-1)
and a.Dashboard_TaskGroupID = isNull(t.Dashboard_TaskGroupID, '')
and a.PCID = @UserID
where mspdp.PROJ_ID like @Project
and isNUll(t.Link_ID, '') like @TaskName
and isNull(t.Dashboard_TaskGroupID, '') like @GroupDescription

insert #NotesAccess
select t.*
from Dashboard_Notes t
join MSP_Projects msp
on msp.Proj_ID = t.Proj_ID
join MSP_Dashboard_Projects mspdp
on mspdp.Proj_ID = msp.Proj_ID
left outer join Dashboard_ProjTaskGroup g
on g.Dashboard_TaskGroupID = t.Dashboard_TaskGroupID
where isNull(t.Link_ID,-1) = -1
and mspdp.PROJ_ID like @Project
and isNUll(t.Link_ID, '') like @TaskName
and isNull(t.Dashboard_TaskGroupID, '') like @GroupDescription
delete Working_NotesDriver
where PCID = @UserID

insert Working_NotesDriver
select @UserID, Dashboard_NodesID 
from #NotesAccess
where Author = case when PrivateFlag = 1 then @UserID else Author end

















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Dashboard_GetProjects]') and xtype = 'P ')  
 drop Procedure sp_Dashboard_GetProjects
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go












-- exec sp_Dashboard_GetProjects 44
CREATE       proc sp_Dashboard_GetProjects
  @UserID int
as

-- declare @UserID int
-- select @UserID = 5

 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Projects'))
 drop table #Projects
  create table #Projects(
   Company_Name varchar(50) null,
			Company_ID varchar(50) null,
   Security_ID int,
   Item_ID int null,
   ItemDescription varchar(100) null,
   Proj_ID int null,
   Proj_ID_ID int null, --unique proj id in costing module (company level)   
   Proj_Phase_ID int null,
   Dashboard_TaskGroupID int null,
   TASK_NAME varchar(255) null
   )



-- if module based access 
insert #Projects
select c.Company_Name, c.Company_ID, Security_ID, mdp_id, mspdp.Proj_Name, mspdp.Proj_ID, 
mspdp.Link_ID, mspdt.Link_ID, mspdt.Dashboard_TaskGroupID, mspt.TASK_NAME
from dashboard_security s
join dashboard_modules m
on s.DBModule_ID = m.DBModule_ID
join MSP_Dashboard_Projects mspdp
on mspdp.DBModule_ID = m.DBModule_ID
join Companies c
on mspdp.Company_ID = c.Company_id
join MSP_Projects msp
on msp.Proj_ID = mspdp.Proj_ID
join msp_tasks mspt
on msp.PROJ_ID = mspt.PROJ_ID
join msp_dashboard_tasks mspdt
on mspdt.PROJ_ID = mspt.PROJ_ID
and mspdt.Task_UID = mspt.Task_UID
and mspdt.Dashboard_TaskGroupID is not null
and mspdt.CodeType = 'M'
where s.UserID = @UserID
and isNull(s.Item_ID,'') = ''
and isNull(s.Dashboard_TaskGroupID,'') = ''
and isNull(s.Company_ID,'') = ''
and mdp_id not in (select Item_ID from #Projects)

 
-- if company based access 
insert #Projects
select c.Company_Name, c.Company_ID, Security_ID, mdp_id, mspdp.Proj_Name, mspdp.Proj_ID, 
mspdp.Link_ID, mspdt.Link_ID, mspdt.Dashboard_TaskGroupID, mspt.TASK_NAME
from dashboard_security s
join dashboard_modules m
on s.DBModule_ID = m.DBModule_ID
join MSP_Dashboard_Projects mspdp
on mspdp.DBModule_ID = m.DBModule_ID
join Companies c
on mspdp.Company_ID = c.Company_id
and s.Company_ID = c.Company_id
join MSP_Projects msp
on msp.Proj_ID = mspdp.Proj_ID
join msp_tasks mspt
on msp.PROJ_ID = mspt.PROJ_ID
join msp_dashboard_tasks mspdt
on mspdt.PROJ_ID = mspt.PROJ_ID
and mspdt.Task_UID = mspt.Task_UID
and mspdt.Dashboard_TaskGroupID is not null
and mspdt.CodeType = 'M'
where s.UserID = @UserID
and isNull(s.Item_ID,'') = ''
and isNull(s.Dashboard_TaskGroupID,'') = ''
and isNull(s.Company_ID,'') = mspdp.Company_ID
and mdp_id not in (select Item_ID from #Projects)
 
-- if category based access (company non specific)
insert #Projects
select c.Company_Name, c.Company_ID, Security_ID, mdp_id, mspdp.Proj_Name, mspdp.Proj_ID, 
mspdp.Link_ID, mspdt.Link_ID, mspdt.Dashboard_TaskGroupID, mspt.TASK_NAME
from dashboard_security s
join dashboard_modules m
on s.DBModule_ID = m.DBModule_ID
join MSP_Dashboard_Projects mspdp
on mspdp.DBModule_ID = m.DBModule_ID
join Companies c
on mspdp.Company_ID = c.Company_id
join MSP_Projects msp
on msp.Proj_ID = mspdp.Proj_ID
join msp_tasks mspt
on msp.PROJ_ID = mspt.PROJ_ID
join msp_dashboard_tasks mspdt
on mspdt.PROJ_ID = mspt.PROJ_ID
and mspdt.Task_UID = mspt.Task_UID
and mspdt.Dashboard_TaskGroupID  = s.Dashboard_TaskGroupID
and mspdt.CodeType = 'M'
where s.UserID = @UserID
and isNull(s.Item_ID,'') = ''
and isNull(s.Dashboard_TaskGroupID,'') <> ''
and isNull(s.Company_ID,'') = ''
and mdp_id not in (select Item_ID from #Projects)

-- if category based access (company specific)
insert #Projects
select c.Company_Name, c.Company_ID, Security_ID, mdp_id, mspdp.Proj_Name, mspdp.Proj_ID, 
mspdp.Link_ID, mspdt.Link_ID, mspdt.Dashboard_TaskGroupID, mspt.TASK_NAME
from dashboard_security s
join dashboard_modules m
on s.DBModule_ID = m.DBModule_ID
join MSP_Dashboard_Projects mspdp
on mspdp.DBModule_ID = m.DBModule_ID
join Companies c
on mspdp.Company_ID = c.Company_id
and s.Company_ID = c.Company_id
join MSP_Projects msp
on msp.Proj_ID = mspdp.Proj_ID
join msp_tasks mspt
on msp.PROJ_ID = mspt.PROJ_ID
join msp_dashboard_tasks mspdt
on mspdt.PROJ_ID = mspt.PROJ_ID
and mspdt.Task_UID = mspt.Task_UID
and mspdt.Dashboard_TaskGroupID  = s.Dashboard_TaskGroupID
and mspdt.CodeType = 'M'
where s.UserID = @UserID
and isNull(s.Item_ID,'') = ''
and isNull(s.Dashboard_TaskGroupID,'') <> ''
and isNull(s.Company_ID,'') <> ''
and mdp_id not in (select Item_ID from #Projects)

-- if item based access (category non specific)
insert #Projects
select c.Company_Name, c.Company_ID, Security_ID, mdp_id, mspdp.Proj_Name, mspdp.Proj_ID, 
mspdp.Link_ID, mspdt.Link_ID, mspdt.Dashboard_TaskGroupID, mspt.TASK_NAME
from dashboard_security s
join dashboard_modules m
on s.DBModule_ID = m.DBModule_ID
join MSP_Dashboard_Projects mspdp
on mspdp.DBModule_ID = m.DBModule_ID
join Companies c
on mspdp.Company_ID = c.Company_id
join MSP_Projects msp
on msp.Proj_ID = mspdp.Proj_ID
join msp_tasks mspt
on msp.PROJ_ID = mspt.PROJ_ID
join msp_dashboard_tasks mspdt
on mspdt.PROJ_ID = mspt.PROJ_ID
and mspdt.Task_UID = mspt.Task_UID
and mspdt.Dashboard_TaskGroupID is not null
and mspdt.CodeType = 'M'
where s.UserID = @UserID
and isNull(s.Item_ID,'') = mdp_id
and isNull(s.Dashboard_TaskGroupID,'') = ''
and isNull(s.Company_ID,'') <> ''
and mdp_id not in (select Item_ID from #Projects)

-- if item based access (category specific)
insert #Projects
select c.Company_Name, c.Company_ID, Security_ID, mdp_id, mspdp.Proj_Name, mspdp.Proj_ID, 
mspdp.Link_ID, mspdt.Link_ID, mspdt.Dashboard_TaskGroupID, mspt.TASK_NAME
from dashboard_security s
join dashboard_modules m
on s.DBModule_ID = m.DBModule_ID
join MSP_Dashboard_Projects mspdp
on mspdp.DBModule_ID = m.DBModule_ID
join Companies c
on mspdp.Company_ID = c.Company_id
join MSP_Projects msp
on msp.Proj_ID = mspdp.Proj_ID
join msp_tasks mspt
on msp.PROJ_ID = mspt.PROJ_ID
join msp_dashboard_tasks mspdt
on mspdt.PROJ_ID = mspt.PROJ_ID
and mspdt.Task_UID = mspt.Task_UID
and mspdt.Dashboard_TaskGroupID = s.Dashboard_TaskGroupID
and mspdt.CodeType = 'M'
where s.UserID = @UserID
and isNull(s.Item_ID,'') = mdp_id 
and isNull(s.Dashboard_TaskGroupID,'') <> ''
and isNull(s.Company_ID,'') <> ''
and mdp_id not in (select Item_ID from #Projects)

 delete Working_NavBarProjectAccess
 where PCID = @UserID
 
insert Working_NavBarProjectAccess
select Company_Name,	Company_ID, Security_ID, item_id, null, ItemDescription, Proj_ID, Proj_ID_ID, 
 Proj_Phase_ID, p.Dashboard_TaskGroupID, TASK_NAME, GroupDescription, @UserID
from #Projects p
join Dashboard_ProjTaskGroup tg
on p.Dashboard_TaskGroupID = tg.Dashboard_TaskGroupID

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ProjectsResult'))
drop table #ProjectsResult
create table #ProjectsResult(
 Col varchar(50))


insert #ProjectsResult
select 'colCompany_Name' Col
from #Projects
group by Company_Name

insert #ProjectsResult
select 'colItemDescription' Col
from #Projects
group by ItemDescription

insert #ProjectsResult
select 'colTASK_NAME' Col
from #Projects
group by TASK_NAME

insert #ProjectsResult
select 'colGroupDescription' Col
from #Projects p
join Dashboard_ProjTaskGroup tg
on p.Dashboard_TaskGroupID = tg.Dashboard_TaskGroupID
group by GroupDescription

select Col, count(*) Number
from #ProjectsResult
group by Col

-- -- exec sp_Dashboard_GetProjects 6
-- 
-- /*
-- 1           Dave Higgens                                       NULL
-- 2           Gary Lukawesky                                     NULL
-- 3           Drafting                                           NULL
-- 4           Shop Production                                    NULL
-- 5           Project Manager 1                                  NULL
-- 6           Engineering                                        NULL
-- 7           Purchasing                                         NULL
-- 9           Project Manager 2                                  NULL
-- 10          Overseer Project Manager                           NULL
-- 11          Few Projects Specific                              NULL
-- 12          Company Specific Exec                              NULL
-- */
-- 
-- 
-- 
-- 
-- 










Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Dashboard_GetProjectTasks]') and xtype = 'P ')  
 drop Procedure sp_Dashboard_GetProjectTasks
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

















CREATE                  proc sp_Dashboard_GetProjectTasks
   @UserID int,
   @Project varchar(255),
   @TaskName varchar(255),
   @GroupDescription varchar(50)
as

-- exec sp_Dashboard_GetProjectTasks 51, '%',  '%',  '1%'
-- declare 
--    @UserID int,
--    @Project varchar(255),
--    @TaskName varchar(255),
--    @GroupDescription varchar(50)
-- select 
-- @Userid = 1, 
-- @Project = '%', 
-- @TaskName = '%', 
-- @GroupDescription = '%'


delete Working_NavBarProjectTaskAccess
where PCID = @UserID

delete Working_NavBarProjectTaskAccessDel
where PCID = @UserID

insert Working_NavBarProjectTaskAccess (PROJ_ID, TASK_UID, TASK_ID, TASK_IS_MILESTONE, TASK_IS_CRITICAL, TASK_IS_SUMMARY,
TASK_IS_RECURRING, TASK_HAS_NOTES, TASK_OUTLINE_LEVEL, TASK_START_DATE, TASK_FINISH_DATE, TASK_ACT_START,
TASK_ACT_FINISH, TASK_PRIORITY, TASK_PCT_COMP, TASK_DEADLINE, TASK_COST, TASK_FIXED_COST, TASK_ACT_COST,
TASK_NAME, TASK_RTF_NOTES, Proj_Phase_ID, Dashboard_TasksSetupID, Dashboard_TaskGroupID, 
ENTRY_ID, [CodeType], Project, Category, Code, PCID, TASK_OUTLINE_NUM, TASK_OUTLINE_NUM_PARENT, IsDone, DS_ID) 
select t.PROJ_ID, t.TASK_UID, t.TASK_ID, t.TASK_IS_MILESTONE, t.TASK_IS_CRITICAL, t.TASK_IS_SUMMARY,
t.TASK_IS_RECURRING, t.TASK_HAS_NOTES, t.TASK_OUTLINE_LEVEL, t.TASK_START_DATE, t.TASK_FINISH_DATE, t.TASK_ACT_START,
t.TASK_ACT_FINISH, t.TASK_PRIORITY, t.TASK_PCT_COMP, t.TASK_DEADLINE, t.TASK_COST, t.TASK_FIXED_COST, t.TASK_ACT_COST,
t.TASK_NAME, t.TASK_RTF_NOTES, 
mspdt.Link_ID, mspdt.Dashboard_TasksSetupID, mspdt.Dashboard_TaskGroupID, mspdt.ExternalReference,
mspdt.[CodeType], msp.PROJ_NAME, g.GroupDescription, a.TASK_NAME, @UserID,
t.TASK_OUTLINE_NUM, t.TASK_OUTLINE_NUM, 0, DS_ID
from msp_tasks t
join msp_dashboard_tasks mspdt
on mspdt.PROJ_ID = t.PROJ_ID
and mspdt.Task_UID = t.Task_UID
join MSP_Projects msp
on msp.Proj_ID = t.Proj_ID
join MSP_Dashboard_Projects mspdp
on mspdp.Proj_ID = msp.Proj_ID
left outer join Dashboard_ProjTaskGroup g
on  g.Dashboard_TaskGroupID = mspdt.Dashboard_TaskGroupID
 left outer join Working_NavBarProjectAccess a
 on a.Proj_Phase_ID = mspdt.Link_ID
 and a.PCID = @UserID
where mspdp.Link_ID like @Project
and isNUll(mspdt.Link_ID, '') like @TaskName
and isNull(mspdt.Dashboard_TaskGroupID, '') like @GroupDescription
and (mspdt.CodeType = 'P' or mspdt.CodeType = 'T')
and t.TASK_IS_SUMMARY = 0
 and a.Dashboard_TaskGroupID = isNull(mspdt.Dashboard_TaskGroupID, '')


 declare @Count int
 select @Count = count(*)
 from Working_NavBarProjectTaskAccess
 where IsDone = 0
 and PCID = @Userid

 while @Count > 0 
 begin 


  update Working_NavBarProjectTaskAccess
  set TASK_OUTLINE_NUM_PARENT = substring(TASK_OUTLINE_NUM_PARENT, 1, len(TASK_OUTLINE_NUM_PARENT) - 1)
  where IsDone = 0
 and PCID = @Userid

  update Working_NavBarProjectTaskAccess
  set IsDone = case 
  when substring(TASK_OUTLINE_NUM_PARENT, len(TASK_OUTLINE_NUM_PARENT), len(TASK_OUTLINE_NUM_PARENT)) = '.' then 1 else 0 end,
  TASK_OUTLINE_NUM_PARENT = case 
  when substring(TASK_OUTLINE_NUM_PARENT, len(TASK_OUTLINE_NUM_PARENT), len(TASK_OUTLINE_NUM_PARENT)) = '.' then 
  substring(TASK_OUTLINE_NUM_PARENT, 1, len(TASK_OUTLINE_NUM_PARENT)-1) else TASK_OUTLINE_NUM_PARENT end
  where IsDone = 0
 and PCID = @Userid

  update Working_NavBarProjectTaskAccess
  set IsDone = case 
  when len(TASK_OUTLINE_NUM_PARENT) = 0 then 1 else 0 end
  where IsDone = 0  
 and PCID = @Userid

  select @Count = count(*)
  from Working_NavBarProjectTaskAccess
  where IsDone = 0  
 and PCID = @Userid
 end


select count(*) Records
from Working_NavBarProjectTaskAccess
where PCID = @UserID




























Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Dashboard_GetPurchaseRequestNavigator]') and xtype = 'P ')  
 drop Procedure sp_Dashboard_GetPurchaseRequestNavigator
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





CREATE proc sp_Dashboard_GetPurchaseRequestNavigator
 @PCID varchar(500)
as
select distinct PROJ_ID, PROJ_NAME, Link_ID,
Company_Name, c.Company_ID, CompanyServerName, TreasuryDBName, 
HumanDBName, Module, dm.DBModule_ID, Caption [Description], 
(select count(*) from Dashboard_RequestBOM brb where brb.Proj_id_id = msp.Link_ID and isnull(requested,0) = 1) as CountRequested,
(select count(*) from Dashboard_RequestBOM brb where brb.Proj_id_id = msp.Link_ID) as TotalCount,
(select count(*) from Dashboard_RequestBOM brb where brb.Proj_id_id = msp.Link_ID and isnull(Critical,0) = 1) as CountCritical
from msp_dashboard_projects msp
join companies c
on c.Company_ID = msp.Company_ID
join dashboard_modules dm
on dm.[Description] = 'nbgProjectsCosting'
join dashboard_requestbom rbom
on rbom.BOMType = dm.[Description]
and msp.Link_ID = rbom.Proj_ID_ID
group by PROJ_ID, PROJ_NAME, Link_ID, Company_Name, c.Company_ID, CompanyServerName, TreasuryDBName, 
HumanDBName, Module, dm.DBModule_ID, Caption
union
select distinct PROJ_ID, PROJ_NAME, Link_ID,
Company_Name, c.Company_ID, CompanyServerName, TreasuryDBName, 
HumanDBName, Module, dm.DBModule_ID,  Caption [Description], 
(select count(*) from Dashboard_RequestBOM brb where brb.Proj_id_id = msp.Link_ID and isnull(requested,0) = 1) as CountRequested,
(select count(*) from Dashboard_RequestBOM brb where brb.Proj_id_id = msp.Link_ID) as TotalCount,
(select count(*) from Dashboard_RequestBOM brb where brb.Proj_id_id = msp.Link_ID and isnull(Critical,0) = 1) as CountCritical
from msp_dashboard_projects msp
join companies c
on c.Company_ID = msp.Company_ID
join dashboard_modules dm
on dm.[Description] = 'nbgInternal'
join dashboard_requestbom rbom
on rbom.BOMType = dm.[Description]
and msp.Link_ID = rbom.Proj_ID_ID
group by PROJ_ID, PROJ_NAME, Link_ID, Company_Name, c.Company_ID, CompanyServerName, TreasuryDBName, 
HumanDBName, Module, dm.DBModule_ID, Caption










Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DashBoard_InsertProject]') and xtype = 'P ')  
 drop Procedure sp_DashBoard_InsertProject
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go











CREATE                           proc sp_DashBoard_InsertProject
--declare  

@TR_DB varchar(200),
@ProjectDescription varchar(100),
@Link_ID   int,
@Proj      int,
@Dept  int,
@SourceFlavour varchar(30)

-- set @TR_DB = 'TR_Alco'
-- set @ProjectDescription = 'test0'
-- set @Link_ID   = 41
-- set @Proj    = 16
-- set @Dept   =4

as

if isNull(@SourceFlavour,'') = ''
 set @SourceFlavour = 'nbgInternal'

declare @IncTaskID    integer,  @OutLineNum  integer ,
                @GroupDescription   varchar(100)

select @GroupDescription  = GroupDescription
        from DashBoard_ProjTaskGroup
        where Dashboard_TaskGroupID = @dept

if @Proj  = 0   -- new proj and new department
begin
 print ('new project')
	declare   
	@CreationDate  datetime  
	

	select @CreationDate = getdate()
	declare @ProjID int, @DBModule_ID  int
	
	select @ProjID = max(PROJ_ID)
	from msp_projects
	
	select @ProjID = isNull(@ProjID,0) + 1
	
	
 select @DBModule_ID= DBModule_ID from dashboard_modules
 where Description = @SourceFlavour
	
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_calendar_data'))
	drop table #msp_calendar_data
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_calendars'))
	drop table #msp_calendars
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_outline_codes'))
	drop table #msp_outline_codes
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_projects'))
	drop table #msp_projects
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_resources'))
	drop table #msp_resources
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_tasks'))
 drop table #msp_tasks

 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_dashboard_tasks'))
 drop table #msp_dashboard_tasks
	
	--seven of these by default
	select * 
	into #msp_calendar_data
	from msp_calendar_data_template 

/*
 note - this is the default calendar from dashboard at this time 
 at some point it'll probably come from a set up file 
*/

 update #msp_calendar_data
 set CD_FROM_TIME1 =  dateadd(hour, 8,
                      dateadd(day, datepart(day, @CreationDate)-1,
                       dateadd(year, datepart(year, @CreationDate)-1900, 
                        dateadd(month, datepart(month, @CreationDate)-1,'1/1/1900')))),
 CD_TO_TIME1 =  dateadd(hour, 12,
                      dateadd(day, datepart(day, @CreationDate)-1,
                       dateadd(year, datepart(year, @CreationDate)-1900, 
                        dateadd(month, datepart(month, @CreationDate)-1,'1/1/1900')))),
 CD_FROM_TIME2 =  dateadd(hour, 13,
                      dateadd(day, datepart(day, @CreationDate)-1,
                       dateadd(year, datepart(year, @CreationDate)-1900, 
                        dateadd(month, datepart(month, @CreationDate)-1,'1/1/1900')))),
 CD_TO_TIME2 =  dateadd(hour, 17,
                      dateadd(day, datepart(day, @CreationDate)-1,
                       dateadd(year, datepart(year, @CreationDate)-1900, 
                        dateadd(month, datepart(month, @CreationDate)-1,'1/1/1900'))))


	
	--six of these by default
	select * 
	into #msp_calendars
	from msp_calendars_template 
	
	-- four by default
	select * 
	into #msp_outline_codes
	from msp_outline_codes_template 
	
	--obviously one
	select * 
	into #msp_projects
	from msp_projects_template 
	
	/*
	 Resources and tasks:
	
	 the first three are required for some reason... 
	 the fourth is the default of one only...
	 in case there are no others (the first one) 
	*/
	
	select * 
	into #msp_resources
	from msp_resources_template
	
	
	-- now need to update the project 
	
	
 update #msp_projects
 set PROJ_ID = @ProjID,
 Proj_Name = @ProjectDescription + '(MSP #:' + cast(@ProjID as varchar(20)) + ')',
 PROJ_PROP_TITLE = @ProjectDescription + '(MSP #:' + cast(@ProjID as varchar(20)) + ')',
 PROJ_INFO_CURRENT_DATE = @CreationDate,
 PROJ_OPT_DEF_START_TIME = @CreationDate,
 PROJ_INFO_FINISH_DATE = @CreationDate,
 PROJ_LAST_SAVED = @CreationDate,
 PROJ_CREATION_DATE = @CreationDate,
 PROJ_INFO_START_DATE = @CreationDate,
 PROJ_MACHINE_ID = null,
 PROJ_READ_ONLY = 0,
 PROJ_READ_WRITE = 0

	
	update #msp_calendar_data
	set PROJ_ID = @ProjID
	
	
	update #msp_calendars
	set PROJ_ID = @ProjID
	
	update #msp_outline_codes
	set PROJ_ID = @ProjID
	
	update #msp_resources
	set PROJ_ID = @ProjID
	
	insert msp_dashboard_projects (Link_ID,SourceFlavour,PROJ_ID,PROJ_NAME,PROJ_CREATION_DATE,Company_id, DBModule_ID)
	select @Link_ID,@SourceFlavour,@ProjID,@ProjectDescription + '(MSP #:' + cast(@ProjID as varchar(20)) + ')',getdate(),@TR_DB,@DBModule_ID
	
	insert msp_projects
	select *
	from #msp_projects
	
	insert msp_calendar_data
	select *
	from #msp_calendar_data
	
	insert msp_calendars
	select *
	from #msp_calendars
	
	insert msp_outline_codes
	select *
	from #msp_outline_codes
	
	insert msp_resources
	select *
	from #msp_resources

 -- add to msp_tasks table and msp_dashboard_tasks table (codetype = 'c')
        
    
 select @IncTaskID = 1 , @OutLineNum =1
        

 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#OutlineIS'))
 drop table #OutlineIS
 create table #OutlineIS(OutlineIs varchar(50) null)

 select * 
 into #msp_tasks
 from msp_tasks_template
 
 update #msp_tasks
 set PROJ_ID = @ProjID

 --insert the top 4 blank tasks
 insert MSP_Tasks
 select *
 from #MSP_Tasks

 declare @DepartmentOutline varchar(20) 
 
	if @SourceFlavour <> 'nbgSalesCentre'
	BEGIN

    delete #OutlineIS
    insert #OutlineIS
    exec sp_Dashboard_AddNewTask @ProjID, @Link_ID, @Dept, 'MSPTASK', @SourceFlavour,
     null, null, null, null, null, '0', null, 'C', @GroupDescription, null, null

    select @DepartmentOutline = OutlineIS
    from #OutlineIS
           
    exec sp_Dashboard_AddNewTask @ProjID,@Link_ID,@dept,'MSPTASK',@SourceFlavour,null,null,null,
     null, null, null,  @DepartmentOutline, 'T', 'enter task name here', 1, null   -- 1

	END  
end   
else  
begin
  if @dept = '0' 
  begin        
		 update msp_projects
		 set  PROJ_NAME = @ProjectDescription
		 where PROJ_ID = @Proj
		
		 update msp_dashboard_projects
		 set  PROJ_NAME = @ProjectDescription
		 where PROJ_ID  = @Proj
  end
  else
  begin     
   declare @count int
        
   select @count = count(*) 
   from msp_dashboard_projects   p
   join msp_dashboard_tasks  t
   on p.PROJ_ID = t.PROJ_ID
   and p.Link_ID = t.Link_ID  
   and p.PROJ_ID = @Proj
   and Dashboard_TaskGroupID = @dept
         
         
--   if @count = 0 
   begin
    print ('old project and new department')

    delete #OutlineIS
    insert #OutlineIS
    exec sp_Dashboard_AddNewTask @ProjID, @Link_ID, @Dept, 'MSPTASK', @SourceFlavour,
     null, null, null, null, null, '0', null, 'C', @GroupDescription, null, null

    select @DepartmentOutline = OutlineIS
    from #OutlineIS
           
    exec sp_Dashboard_AddNewTask @ProjID,@Link_ID,@dept,'MSPTASK',@SourceFlavour,null,null,null,
     null, null, null,  @DepartmentOutline, 'T', 'enter task name here', 1, null   -- 1



   end
 end   
end



select 'Done' 'Result'












Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DashBoard_InsertProjectbu]') and xtype = 'P ')  
 drop Procedure sp_DashBoard_InsertProjectbu
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go











create                           proc sp_DashBoard_InsertProjectbu
--declare  

@TR_DB varchar(200),
@ProjectDescription varchar(100),
@Link_ID   int,
@Proj      int,
@Dept  int,
@SourceFlavour varchar(30)

-- set @TR_DB = 'TR_Alco'
-- set @ProjectDescription = 'test0'
-- set @Link_ID   = 41
-- set @Proj    = 16
-- set @Dept   =4

as

if isNull(@SourceFlavour,'') = ''
 set @SourceFlavour = 'nbgInternal'

declare @IncTaskID    integer,  @OutLineNum  integer ,
                @GroupDescription   varchar(100)

select @GroupDescription  = GroupDescription
        from DashBoard_ProjTaskGroup
        where Dashboard_TaskGroupID = @dept

if @Proj  = 0   -- new proj and new department
begin
 print ('new project')
	declare   
	@CreationDate  datetime  
	

	select @CreationDate = getdate()
	declare @ProjID int, @DBModule_ID  int
	
	select @ProjID = max(PROJ_ID)
	from msp_projects
	
	select @ProjID = isNull(@ProjID,0) + 1
	
	
 select @DBModule_ID= DBModule_ID from dashboard_modules
 where Description = @SourceFlavour
	
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_calendar_data'))
	drop table #msp_calendar_data
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_calendars'))
	drop table #msp_calendars
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_outline_codes'))
	drop table #msp_outline_codes
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_projects'))
	drop table #msp_projects
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_resources'))
	drop table #msp_resources
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_tasks'))
 drop table #msp_tasks

 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#msp_dashboard_tasks'))
 drop table #msp_dashboard_tasks
	
	--seven of these by default
	select * 
	into #msp_calendar_data
	from msp_calendar_data_template 

/*
 note - this is the default calendar from dashboard at this time 
 at some point it'll probably come from a set up file 
*/

 update #msp_calendar_data
 set CD_FROM_TIME1 =  dateadd(hour, 8,
                      dateadd(day, datepart(day, @CreationDate)-1,
                       dateadd(year, datepart(year, @CreationDate)-1900, 
                        dateadd(month, datepart(month, @CreationDate)-1,'1/1/1900')))),
 CD_TO_TIME1 =  dateadd(hour, 12,
                      dateadd(day, datepart(day, @CreationDate)-1,
                       dateadd(year, datepart(year, @CreationDate)-1900, 
                        dateadd(month, datepart(month, @CreationDate)-1,'1/1/1900')))),
 CD_FROM_TIME2 =  dateadd(hour, 13,
                      dateadd(day, datepart(day, @CreationDate)-1,
                       dateadd(year, datepart(year, @CreationDate)-1900, 
                        dateadd(month, datepart(month, @CreationDate)-1,'1/1/1900')))),
 CD_TO_TIME2 =  dateadd(hour, 17,
                      dateadd(day, datepart(day, @CreationDate)-1,
                       dateadd(year, datepart(year, @CreationDate)-1900, 
                        dateadd(month, datepart(month, @CreationDate)-1,'1/1/1900'))))


	
	--six of these by default
	select * 
	into #msp_calendars
	from msp_calendars_template 
	
	-- four by default
	select * 
	into #msp_outline_codes
	from msp_outline_codes_template 
	
	--obviously one
	select * 
	into #msp_projects
	from msp_projects_template 
	
	/*
	 Resources and tasks:
	
	 the first three are required for some reason... 
	 the fourth is the default of one only...
	 in case there are no others (the first one) 
	*/
	
	select * 
	into #msp_resources
	from msp_resources_template
	
	
	-- now need to update the project 
	
	
 update #msp_projects
 set PROJ_ID = @ProjID,
 Proj_Name = @ProjectDescription + '(MSP #:' + cast(@ProjID as varchar(20)) + ')',
 PROJ_PROP_TITLE = @ProjectDescription + '(MSP #:' + cast(@ProjID as varchar(20)) + ')',
 PROJ_INFO_CURRENT_DATE = @CreationDate,
 PROJ_OPT_DEF_START_TIME = @CreationDate,
 PROJ_INFO_FINISH_DATE = @CreationDate,
 PROJ_LAST_SAVED = @CreationDate,
 PROJ_CREATION_DATE = @CreationDate,
 PROJ_INFO_START_DATE = @CreationDate,
 PROJ_MACHINE_ID = null,
 PROJ_READ_ONLY = 0,
 PROJ_READ_WRITE = 0

	
	update #msp_calendar_data
	set PROJ_ID = @ProjID
	
	
	update #msp_calendars
	set PROJ_ID = @ProjID
	
	update #msp_outline_codes
	set PROJ_ID = @ProjID
	
	update #msp_resources
	set PROJ_ID = @ProjID
	
	insert msp_dashboard_projects (Link_ID,SourceFlavour,PROJ_ID,PROJ_NAME,PROJ_CREATION_DATE,Company_id, DBModule_ID)
	select @Link_ID,@SourceFlavour,@ProjID,@ProjectDescription + '(MSP #:' + cast(@ProjID as varchar(20)) + ')',getdate(),@TR_DB,@DBModule_ID
	
	insert msp_projects
	select *
	from #msp_projects
	
	insert msp_calendar_data
	select *
	from #msp_calendar_data
	
	insert msp_calendars
	select *
	from #msp_calendars
	
	insert msp_outline_codes
	select *
	from #msp_outline_codes
	
	insert msp_resources
	select *
	from #msp_resources

 -- add to msp_tasks table and msp_dashboard_tasks table (codetype = 'c')
        
    
 select @IncTaskID = 1 , @OutLineNum =1
        

 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#OutlineIS'))
 drop table #OutlineIS
 create table #OutlineIS(OutlineIs varchar(50) null)

 select * 
 into #msp_tasks
 from msp_tasks_template
 
 update #msp_tasks
 set PROJ_ID = @ProjID

 --insert the top 4 blank tasks
 insert MSP_Tasks
 select *
 from #MSP_Tasks

 declare @DepartmentOutline varchar(20) 
 
	if @SourceFlavour <> 'nbgSalesCentre'
	BEGIN

    delete #OutlineIS
    insert #OutlineIS
    exec sp_Dashboard_AddNewTask @ProjID, @Link_ID, @Dept, 'MSPTASK', @SourceFlavour,
     null, null, null, null, null, '0', null, 'C', @GroupDescription, null, null

    select @DepartmentOutline = OutlineIS
    from #OutlineIS
           
    exec sp_Dashboard_AddNewTask @ProjID,@Link_ID,@dept,'MSPTASK',@SourceFlavour,null,null,null,
     null, null, null,  @DepartmentOutline, 'T', 'enter task name here', 1, null   -- 1

	END  
end   
else  
begin
  if @dept = '0' 
  begin        
		 update msp_projects
		 set  PROJ_NAME = @ProjectDescription
		 where PROJ_ID = @Proj
		
		 update msp_dashboard_projects
		 set  PROJ_NAME = @ProjectDescription
		 where PROJ_ID  = @Proj
  end
  else
  begin     
   declare @count int
        
   select @count = count(*) 
   from msp_dashboard_projects   p
   join msp_dashboard_tasks  t
   on p.PROJ_ID = t.PROJ_ID
   and p.Link_ID = t.Link_ID  
   and p.PROJ_ID = @Proj
   and Dashboard_TaskGroupID = @dept
         
         
   if @count = 0 
   begin
    print ('old project and new department')
    select @IncTaskID =  max(TASK_UID) + 1 
    from  msp_dashboard_tasks
    where PROJ_ID  =  @Proj
            
           
    select  @OutLineNum =   max(isnull(TASK_OUTLINE_NUM,0))  
    from  msp_tasks mt
    join msp_dashboard_tasks t
    on mt.task_uid = t.task_uid
	   and mt.PROJ_ID = t.PROJ_ID
    where Codetype = 'C'
    and mt.PROJ_ID =  @Proj  
             
    exec sp_Dashboard_AddNewTask @Proj,@Link_ID,@dept,'MSPTASK',@SourceFlavour,null,null,null,
     null, null, @OutLineNum, null, 'C', @GroupDescription, 1, null 
        
    select  @OutLineNum =   max(isnull(TASK_OUTLINE_NUM,0))  
    from  msp_tasks mt
    join msp_dashboard_tasks t
    on mt.task_uid = t.task_uid
    and mt.PROJ_ID = t.PROJ_ID
    where Codetype = 'C'
    and mt.PROJ_ID =  @Proj  
          
    exec sp_Dashboard_AddNewTask @Proj,@Link_ID,@dept,'MSPTASK',@SourceFlavour,null,null,null,
    null, null, null, @OutLineNum, 'T', 'enter task name here', 1, null


   end
 end   
end



select 'Done' 'Result'












Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Dashboard_PurchasingHeader]') and xtype = 'P ')  
 drop Procedure sp_Dashboard_PurchasingHeader
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go









-- exec sp_Dashboard_PurchasingHeader 'tr_bravo_57_test','hr_bravo_57_test','1','%'







-- declare
CREATE            proc sp_Dashboard_PurchasingHeader
 @Company_ID varchar(500),
 @Human_ID varchar(500),
 @Project varchar(500),
 @DBModule_ID varchar(500)
-- set @company_id='tr_bravo_57_test'
-- set @human_id='hr_bravo_57_test'
-- set @project='95'
-- set @dbmodule_id='%'

as
declare @S varchar(8000)

select @s = '
select 
''ApprovedBOM'' PurchaseType, drbom.DRBOM_id RelationID, pri.Pri_Num HRProj_ID, drbom.DMC_ID CodeID, drbom.Proj_ID_ID ProjectID, 1 DatabaseModuleID, 
''Project Costing'' [Description], HumanDBName HRDB, TreasuryDBName TRDB, 
''Project Costing'' [Caption Module], PROJ_NAME Project, Company_Name Company, MajorCode [Major Code], CodeDescription [Major Code Description], 
BOMTYpe, Qty, UOM, ProductCode, ProductDescription, Price, DateRequired, Critical, Requested,
RevisedQty, 

 case when isnull(Qty,0) -  
		isNull((select sum(wom_tot_picked)
  from ' + @Human_ID + '..wo_bom wo
  join ' + @Human_ID + '..proj_id pid
  on pid.pri_num = wo.pri_num
  where Proj_ID_ID = Link_ID
  and wo.DRBOM_id = drbom.DRBOM_id),0) <> 0
 then datediff(day, isNull(DateRequested,getdate()), getDate()) end as DaysOutstanding,

 (select max(ORDER_DATE)
  from ' + @Human_ID + '..wo_bom wo
  join ' + @Human_ID + '..proj_id pid
  on pid.pri_num = wo.pri_num
  join ' + @Company_ID + '..po_header h
  on h.Po_ID = wo.PO_ID
  where Proj_ID_ID = Link_ID
  and wo.DRBOM_id = drbom.DRBOM_id) as PODate,

 (select max(isNull(Revised_Due_Date,Org_Due_Date))
  from ' + @Human_ID + '..wo_bom wo
  join ' + @Human_ID + '..proj_id pid
  on pid.pri_num = wo.pri_num
  join ' + @Company_ID + '..po_header h
  on h.Po_ID = wo.PO_ID
  where Proj_ID_ID = Link_ID
  and wo.DRBOM_id = drbom.DRBOM_id) as  DeliverDate, 

--  case when isnull(Qty,0) -  
-- 		isNull((select sum(wom_tot_picked)
--   from ' + @Human_ID + '..wo_bom wo
--   join ' + @Human_ID + '..proj_id pid
--   on pid.pri_num = wo.pri_num
--   where Proj_ID_ID = Link_ID
--   and wo.DRBOM_id = drbom.DRBOM_id),0) <> 0
--  and isNull(DateRequired, getdate() + 100) < getdate() then ''Overdue''
-- when isnull(Qty,0) -  
-- 		isNull((select sum(wom_tot_picked)
--   from ' + @Human_ID + '..wo_bom wo
--   join ' + @Human_ID + '..proj_id pid
--   on pid.pri_num = wo.pri_num
--   where Proj_ID_ID = Link_ID
--   and wo.DRBOM_id = drbom.DRBOM_id),0) <> 0
--  and isNull(DateRequired, getdate() + 100) < getdate() + 5 then ''Urgent'' 
--  else ''Not Received'' end DeliveryStatus,

case 
 when Requested = 0
 then ''Not Requested''

 when isnull(Qty,0) - isNull((select sum(wom_tot_picked) 
  from ' + @Human_ID + '..wo_bom wo 
  join ' + @Human_ID + '..proj_id pid 
  on pid.pri_num = wo.pri_num 
  where pid.Proj_ID_ID = drbom.Proj_ID_ID 
  and wo.DRBOM_id = drbom.DRBOM_id),0) > 0 
  and isNull(DateRequired, getdate() + 100) between getDate() and getdate() + 5
 then ''Urgent'' 

 when isnull(Qty,0) - isNull((select sum(wom_tot_picked) 
  from ' + @Human_ID + '..wo_bom wo 
  join ' + @Human_ID + '..proj_id pid 
  on pid.pri_num = wo.pri_num 
  where pid.Proj_ID_ID = drbom.Proj_ID_ID 
  and wo.DRBOM_id = drbom.DRBOM_id),0) > 0
  and isNull(DateRequired, getdate() + 100) < getdate() 
 then ''Overdue'' 

 when round(isnull(Qty,0) - isNull((select sum(wom_tot_picked) 
  from ' + @Human_ID + '..wo_bom wo 
  join ' + @Human_ID + '..proj_id pid 
  on pid.pri_num = wo.pri_num 
  where pid.Proj_ID_ID = drbom.Proj_ID_ID 
  and wo.DRBOM_id = drbom.DRBOM_id),0),4) = 0
 then ''Received''

 else ''Requested'' end as DeliveryStatus, 



isnull(Qty,0) -  
		isNull((select sum(wom_tot_picked)
  from ' + @Human_ID + '..wo_bom wo
  join ' + @Human_ID + '..proj_id pid
  on pid.pri_num = wo.pri_num
  where Proj_ID_ID = Link_ID
  and wo.DRBOM_id = drbom.DRBOM_id),0) 
Outstanding

from Dashboard_RequestBOM drbom
left outer join msp_dashboard_projects mdp
on mdp.Link_ID = drbom.Proj_ID_ID
left outer join Companies c
on mdp.Company_ID = c.Company_ID and c.treasurydbname = ''' + @Company_ID + '''
left outer join Dashboard_MajorCodes dmc
on dmc.DMC_ID = drbom.DMC_ID
join ' + @Human_ID + '..Proj_ID pri
on pri.Proj_ID_ID = drbom.Proj_ID_ID and pri.pri_num like '''+@project+'''



union
select 
''AddedBOM'' PurchaseType, wom_seq RelationID, wo.Pri_Num HRProj_ID, mc.DMC_ID CodeID, pri.Proj_ID_ID ProjectID, 1 /*dm.DBModule_ID*/ DatabaseModuleID, 
''Project Costing'' [Description], HumanDBName ''' + @Human_ID + ''', TreasuryDBName ''' + @Company_ID + ''', 
''Project Costing'' [Caption Module], PROJ_NAME Project, Company_Name Company, wo.Phs_code [Major Code],
phs_desc [Major Code Description], ''External'' BOMTYpe,
case when wom_buyin=''T'' then wom_buyin_qty else wom_qty end QTY, wom_units UOM, wo.part_number ProductCode, wom_desc ProductDescription, 
case when wom_buyin=''T'' then wom_buyin_cost else unit_cost end Price, 
null DateRequired, null Critical, cast(1 as bit) Requested, 
null RevisedQty, 0, 

 (select max(ORDER_DATE)
  from ' + @Human_ID + '..wo_bom wom
  join ' + @Human_ID + '..proj_id pid
  on pid.pri_num = wo.pri_num
  join ' + @Company_ID + '..po_header h
  on h.Po_ID = wo.PO_ID
  where Proj_ID_ID = Link_ID
  and wom.DRBOM_id = wo.DRBOM_id) as PODate,

 (select max(isNull(Revised_Due_Date,Org_Due_Date))
  from ' + @Human_ID + '..wo_bom wom
  join ' + @Human_ID + '..proj_id pid
  on pid.pri_num = wo.pri_num
  join ' + @Company_ID + '..po_header h
  on h.Po_ID = wo.PO_ID
  where Proj_ID_ID = Link_ID
  and wom.DRBOM_id = wo.DRBOM_id) as  DeliverDate, 

case 
 when round(isnull(wom_qty,0) - isNull(wom_tot_picked,0),4) = 0
 then ''Received''
 else ''Requested'' end as DeliveryStatus,

round(isnull(wom_qty,0) - isNull(wom_tot_picked,0),4) Outstanding


from ' + @Human_ID + '..wo_bom wo
-- join Dashboard_Modules dm
-- on ''nbgProjectsCosting'' = dm.description
join ' + @Human_ID + '..Proj_ID pri
on pri.pri_num = wo.pri_num
join ' + @Human_ID + '..Proj_phase pp
on pp.phs_code = wo.phs_code
and pp.pri_num = wo.pri_num
join Companies c
on c.treasurydbname = ''' + @Company_ID + '''
left outer join ' + @Company_ID + '..po_header ph
on wo.po = ph.po
join dashboard_majorcodes mc
on pri.Proj_ID_ID = mc.Proj_ID_ID
and pp.Proj_Phase_ID = mc.Proj_Phase_ID
join msp_dashboard_projects msp
on msp.Link_ID = pri.Proj_ID_ID
where isnull(wo.DRBOM_id,'''') = ''''
and pri.pri_num like ''' + @Project + ''''
--and dm.DBModule_ID Like ''' + @DBModule_ID + ''''


print @s
exec(@s)
-- exec sp_Dashboard_PurchasingHeader 'Tr_Alco', 'Hr_Alco', '%', '%'





















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Dashboard_RemoveTasksMarkedForDeletion]') and xtype = 'P ')  
 drop Procedure sp_Dashboard_RemoveTasksMarkedForDeletion
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go






create proc sp_Dashboard_RemoveTasksMarkedForDeletion
 @PCID varchar(500)
as
 declare @Proj_ID int 

 select @Proj_ID = Proj_ID
 from Working_NavBarProjectTaskAccessDel
 where @PCID = PCID

 delete msp_tasks
 where proj_id = @proj_id
 and TASK_UID in (select task_UID from Working_NavBarProjectTaskAccessDel) 

 delete Working_NavBarProjectTaskAccessDel where PCID = @PCID









Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Dashboard_RequestBOM]') and xtype = 'P ')  
 drop Procedure sp_Dashboard_RequestBOM
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go











CREATE    proc sp_Dashboard_RequestBOM
 @TR varchar(500), 
 @HR varchar(500),
 @Project varchar(500),
 @Code varchar(500)
as

-- exec sp_Dashboard_RequestBOM 'Tr_alco', 'Hr_alco', null, null

exec('
SELECT 
 (select max(ORDER_DATE) 
  from ' + @HR + '..wo_bom wo 
  join ' + @HR + '..proj_id pid 
  on pid.pri_num = wo.pri_num 
  join ' + @TR + '..po_header h 
  on h.Po_ID = wo.PO_ID 
  where pid.Proj_ID_ID = drbom.Proj_ID_ID 
  and wo.DRBOM_id = drbom.DRBOM_id) as PODate,

 (select max(isNull(Revised_Due_Date,Org_Due_Date)) 
  from ' + @HR + '..wo_bom wo 
  join ' + @HR + '..proj_id pid 
  on pid.pri_num = wo.pri_num 
  join ' + @TR + '..po_header h 
  on h.Po_ID = wo.PO_ID 
  where pid.Proj_ID_ID = drbom.Proj_ID_ID 
  and wo.DRBOM_id = drbom.DRBOM_id) as DeliverDate, 

case 
 when Requested = 0
 then ''Not Requested''

 when isnull(Qty,0) - isNull((select sum(wom_tot_picked) 
  from ' + @HR + '..wo_bom wo 
  join ' + @HR + '..proj_id pid 
  on pid.pri_num = wo.pri_num 
  where pid.Proj_ID_ID = drbom.Proj_ID_ID 
  and wo.DRBOM_id = drbom.DRBOM_id),0) > 0 
  and isNull(DateRequired, getdate() + 100) between getDate() and getdate() + 5
 then ''Urgent'' 

 when isnull(Qty,0) - isNull((select sum(wom_tot_picked) 
  from ' + @HR + '..wo_bom wo 
  join ' + @HR + '..proj_id pid 
  on pid.pri_num = wo.pri_num 
  where pid.Proj_ID_ID = drbom.Proj_ID_ID 
  and wo.DRBOM_id = drbom.DRBOM_id),0) > 0
  and isNull(DateRequired, getdate() + 100) < getdate() 
 then ''Overdue'' 

 when round(isnull(Qty,0) - isNull((select sum(wom_tot_picked) 
  from ' + @HR + '..wo_bom wo 
  join ' + @HR + '..proj_id pid 
  on pid.pri_num = wo.pri_num 
  where pid.Proj_ID_ID = drbom.Proj_ID_ID 
  and wo.DRBOM_id = drbom.DRBOM_id),0),4) = 0
 then ''Received''

 else ''Requested'' end as DeliveryStatus, 

 isnull(Qty,0) - isNull((
  select sum(wom_tot_picked)
  from ' + @HR + '..wo_bom wo
  join ' + @HR + '..proj_id pid
  on pid.pri_num = wo.pri_num
  where pid.Proj_ID_ID = drbom.Proj_ID_ID
  and drbom.DRBOM_id = drbom.DRBOM_id),0) as Outstanding, 


case 
 when Requested = 1 and isnull(Qty,0) - isNull((select sum(wom_tot_picked) 
  from ' + @HR + '..wo_bom wo 
  join ' + @HR + '..proj_id pid 
  on pid.pri_num = wo.pri_num 
  where pid.Proj_ID_ID = drbom.Proj_ID_ID 
  and wo.DRBOM_id = drbom.DRBOM_id),0) > 0
 then datePart(day, getdate() - DateRequested)

 else null end DaysOutstanding, 


*
FROM Dashboard_RequestBOM drbom
where Proj_id_id like ''' + @Project + ''' and DMC_ID like ''' + @Code + '''')
















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Dashboard_SalesCenterMetrics]') and xtype = 'P ')  
 drop Procedure sp_Dashboard_SalesCenterMetrics
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc sp_Dashboard_SalesCenterMetrics
--declare
 @HoldingID varchar(50),
 @CommunityID varchar(50),
 @PhaseID varchar(50),
 @Salesman varchar(50),
 @To datetime,
 @From datetime
as


-- select @HoldingID = '%', @CommunityID = '%',  @PhaseID = '%',
--  @Salesman = 0, @To = '1/1/2222', @From = '1/1/1950'

if @SalesMan = '0' 
 select @SalesMan = '%'


select 
(select count(*)
from ContactHistory
where DateCreated between @From and @To
and ContactType_ID in (7,8)
and ContactOwnerID like @Salesman) [# Visits], 
(select count(*)
from ContactHistory
where LinkType = 'Home Quote'
and LinkID in
(select id
from scquote
where Created between @From and @To
and Status is null)) [# Quotes], 
(select count(*)
from ContactHistory
where LinkType = 'Home Quote'
and LinkID in
 (select id
 from scquote
 where Created between @From and @To
 and isNull(Status,'U') <> 'U')) [# Sales], 
(select count(*)
from ContactHistory
where DateCreated between @From and @To
and ContactType_ID in (3,4)
and ContactOwnerID like @Salesman) [# Phone Calls]










Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Dashboard_UpdateOLMNotification]') and xtype = 'P ')  
 drop Procedure sp_Dashboard_UpdateOLMNotification
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE proc [dbo].[sp_Dashboard_UpdateOLMNotification]
 @ID int,
 @NotifyType varchar(50),
 @Action char(1)
as

if exists( select * from outlookmanagernotification where LinkID = @ID and LinkType=@NotifyType)
begin
 declare @OUT_PKkey int
 select @OUT_PKkey = OUT_PKkey 
 from OutlookManagerNotification
 where LinkID = @ID and LinkType = @NotifyType
 
 update OutlookManagerNotification
 set Mgr_TriggerUDI = @Action, Mgr_SeenItYN = 'N'
 where @OUT_PKkey = OUT_PKkey 
 
 select @OUT_PKkey
end
else
begin
	insert into OutlookManagerNotification(linkID, linkType, Mgr_TriggerUDI, Mgr_TaskCompleteYN, Mgr_SeenItYN)
	select @ID, @NotifyType, 'I', 'N', 'N'
	select scope_identity()
end






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DashboardGetAllCompanyCustomers]') and xtype = 'P ')  
 drop Procedure sp_DashboardGetAllCompanyCustomers
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go











-- exec sp_DashboardGetAllCompanyCustomers 1
CREATE        proc sp_DashboardGetAllCompanyCustomers
 @Username varchar(100)
as
--select @Username = '571'

delete working_Companies
where USerName = @USerName

delete working_Customers
where USerName = @USerName

insert working_Companies(UserName, TR_Name, HR_Name,
ServerName, CompanyID, Finished)
select @Username, TreasuryDBName, HumanDBName,
companyservername, AutoID, 0
from companies

declare @CurrentCompany varchar(10), @CountCompanies int

select @CurrentCompany = max(CompanyID), @CountCompanies = count(*)
from working_Companies
where UserName = @UserName
and Finished = 0


declare @TR_Name varchar(100), @HR_Name varchar(100), @ServerName varchar(100),
 @CompanyName varchar(100)


while isnull(@CountCompanies,0) > 0
begin --simple way to avoid use of cursors
 select @TR_Name = TR_Name, @HR_Name = HR_Name, @ServerName = ServerName
 from working_Companies
 where UserName = @UserName
 and CompanyID = @CurrentCompany

 declare @Execs varchar(8000)



 select @Execs = '
 declare @CompanyName varchar(100)
 select @CompanyName = CompanyName
 from ['+@servername+'].' + @TR_Name + '.dbo.company

 update working_Companies
 set CompanyName = @CompanyName
 where CompanyID = ' + @CurrentCompany + '
 and USerName = ''' + @Username + ''' 

 insert working_Customers(UserName, TR_Name, HR_Name, ServerName, CompanyID, [Company Name], 
 [Customer Code], [Customer Name], City, [State/Province], [Customer ID], [Territory], [ParentID])
 select ''' + @Username + ''', ''' +  @TR_Name + ''', ''' + @HR_Name + ''', ''' + @ServerName + ''', ' + @CurrentCompany + ', @CompanyName,
 null, @CompanyName, null, null, ' + '-' + @CurrentCompany + ', null, null


 insert working_Customers(UserName, TR_Name, HR_Name, ServerName, CompanyID, [Company Name], 
 [Customer Code], [Customer Name], City, [State/Province], [Customer ID], [Territory], [ParentID])
 select ''' + @Username + ''', ''' +  @TR_Name + ''', ''' + @HR_Name + ''', ''' + @ServerName + ''', ' + @CurrentCompany + ', @CompanyName,
 CUSTOMER_CODE, [name], BILL_CITY, BILL_STATE, CUSTOMER_ID,
 TERRITORY_DESC, case when ho_customer_id is null then ' + '-' + @CurrentCompany + ' else ho_customer_id end
 from ['+@servername+'].' + @TR_Name + '.dbo.Customers c
left outer join '+@servername+'.' + @TR_Name + '.dbo.territory t
on c.territory_id = t.territory_id
where Active = ''T'''


 print @Execs
 exec(@Execs)

 update working_Companies
 set Finished = 1
 where UserName = @UserName
 and CompanyID = @CurrentCompany
-- 
 select @CurrentCompany = max(CompanyID), @CountCompanies = count(*)
 from working_Companies
 where UserName = @UserName
 and Finished = 0
end
-- 
select *
from working_Customers
where UserName = @UserName
order by [Company Name], [Customer Name]














Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DashboardGetAllCompanyProjects]') and xtype = 'P ')  
 drop Procedure sp_DashboardGetAllCompanyProjects
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- declare
-- exec sp_DashboardGetAllCompanyProjects '259', 'Con', 'P'
CREATE                   proc [dbo].[sp_DashboardGetAllCompanyProjects]
 @Username varchar(100),
 @ProjectType varchar(50),
 @NavigatorType varchar(10)
-- set @username='88'
-- set @projecttype='LAND'
-- set @navigatortype='P'
as
--select @Username = '571'

delete working_Companies
where USerName = @USerName

delete working_Projects
where USerName = @USerName

insert working_Companies(UserName, TR_Name, HR_Name,
ServerName, CompanyID, Finished, CompanyName)
select @Username, TreasuryDBName, HumanDBName,
companyservername, AutoID, 0, Company_Name
from companies

declare @CurrentCompany varchar(10), @CountCompanies int

select @CurrentCompany = max(CompanyID), @CountCompanies = count(*)
from working_Companies
where UserName = @UserName
and Finished = 0


declare @TR_Name varchar(100), @HR_Name varchar(100), @ServerName varchar(100),
 @CompanyName varchar(100)


while isnull(@CountCompanies,0) > 0
begin --simple way to avoid use of cursors.........because cursors are the enemy???????
 select @TR_Name = TR_Name, @HR_Name = HR_Name, @ServerName = ServerName, @CompanyName = CompanyName
 from working_Companies
 where UserName = @UserName
 and CompanyID = @CurrentCompany

 declare @Execs varchar(8000)



 select @Execs = '

 insert working_Projects(UserName, TR_Name, HR_Name, ServerName, CompanyID, 
 [Proj_ID], [Project Code], [Project Group], Project, Customer, Status, Company_Name, customer_id)
 select ''' + @Username + ''', ''' +  @TR_Name + ''', ''' + @HR_Name + ''', ''' + @ServerName + ''', ' + @CurrentCompany + ',' + 

' PID.Pri_num,	
  case when isNull(PID.Pri_Super_Proj,'''') = '''' then cast(Pri_Proj_id as varchar(100)) + ''    '' else cast(Pri_Super_Proj as varchar(100)) + ''-'' + replicate(''0'', 4 -len(cast(Pri_Proj_id as varchar(100)))) + cast(Pri_Proj_id as varchar(100)) end,
  case when isNull(PID.Pri_Super_Proj,'''') = '''' then cast(Pri_Proj_id as varchar(100)) else cast(Pri_Super_Proj as varchar(100)) end,
  PID.pri_name,	
  c.NAME,			
	case when PID.Pri_Status = ''A'' or PID.Pri_Status = ''B'' then ''Active''
  when PID.Pri_Status = ''C'' then ''Complete''
  when PID.Pri_Status = ''L'' then ''Closed''
  when PID.Pri_Status = ''P'' then ''Pending''
  when PID.Pri_Status = ''Z'' then ''Cancelled''
 else PID.Pri_Status end [Status], ''' + @CompanyName + ''', c.Customer_ID
 from ['+@servername+'].' + @HR_Name + '.dbo.Proj_ID pid
 join ['+@servername+'].' + @TR_Name + '.dbo.Customers c
 on c.CUSTOMER_id = PID.Customer_id
'
if @NavigatorType = 'P'
begin
select @Execs = @Execs + ' where (pri_type = ''P'' or pri_type = ''C'')'
end
if @NavigatorType = 'S'
begin
select @Execs = @Execs + ' where pri_type = ''S'''
end
if @NavigatorType = 'W'
begin
select @Execs = @Execs + ' where pri_type = ''W'''
end
if @NavigatorType = 'A'
begin
select @Execs = @Execs + ' where pri_type = ''A'''
end

if @ProjectType = 'MF' 
begin
select @Execs = @Execs + ' and pri_bill_option = ''U''' 
end

if @ProjectType = 'Con' 
begin
select @Execs = @Execs + ' and isNull(pri_bill_option,'''') <> ''U'' and isNull(OriginType,'''') <> ''HB''' 
end

if @ProjectType = 'Unit' 
begin
select @Execs = @Execs + ' and isNull(pri_bill_option,'''') = ''U'' and isNull(OriginType,'''') <> ''HB''' 
end

print @execs
if @ProjectType not in ('HB','LAND','SALES','SERVICE')
 exec(@Execs)






 update working_Companies
 set Finished = 1
 where UserName = @UserName
 and CompanyID = @CurrentCompany

 select @CurrentCompany = max(CompanyID), @CountCompanies = count(*)
 from working_Companies
 where UserName = @UserName
 and Finished = 0
end


if @ProjectType in ('HB','SALES','SERVICE')
begin
	declare
	@id int,
	@tr_db varchar(50),
	@hr_db varchar(50),
	@server varchar(50)

	if @ProjectType in ('HB','SALES')
	begin
		declare cur_proj cursor for
		select q.id, c.treasurydbname, c.humandbname, c.companyservername
		from scquote q 
		join companies c on c.autoid=q.companyid
		where isnull(c.treasurydbname,'')<>'' and isnull(c.humandbname,'')<>''
		and isNull(q.status ,'') <> ''and q.status <> 'U' and isnull(q.status,'') in ('C', 'S')
		order by q.id
	end
	else
	begin
		declare cur_proj cursor for
		select q.id, c.treasurydbname, c.humandbname, c.companyservername
		from scquote q 
		join companies c on c.autoid=q.companyid
		where isnull(c.treasurydbname,'')<>'' and isnull(c.humandbname,'')<>''
		and isNull(q.status ,'') <> ''and q.status <> 'U' and isnull(q.status,'') in ('C')  --only show status of C for the service center
		order by q.id
	end
	open cur_proj
	fetch cur_proj into @id, @tr_db, @hr_db, @server
	while @@fetch_status=0
	begin

		set @execs='
		insert working_Projects(UserName, TR_Name, HR_Name, ServerName, CompanyID, 
	 	 [Proj_ID], [Project Code], [Project Group], Project, Customer, 
		Status, 
		hb_lot, hb_block, hb_plan, hb_add1, hb_add2, hb_city, hb_postal, hb_prov,
		hb_community, hb_lot_id, hb_holding_desc, hb_phase_desc, hb_model_desc, civic_address,
		hb_elevation, 
		holding_id, community_id, phase_id, model_id, elevation_id, customer_id, Company_Name)

		select '''+@username+''', '''+@tr_db+''', '''+@hr_db+''', '''+@server+''', q.companyid,
		q.id, case when isnull(q.pri_num,-1)=-1 then null else p.pri_proj_id end,
		case when isnull(q.pri_num,-1)=-1 then null else p.pri_proj_id end, case when isnull(q.pri_num,-1)=-1 then null else p.pri_proj_id end,
		case when isnull(q.pri_num,-1)=-1 then '''' else c.name end, 
		case when isnull(q.pri_num,-1)=-1 then 
			case when q.status=''S'' and q.convertflag=''T'' then ''In Progress''
			when q.status=''C'' and q.convertflag=''T'' then ''Completed''
			when q.status=''S'' and q.convertflag=''F'' then ''Not Started''
			else ''Not Started'' end

		else 	case when p.pri_status=''A'' then ''Active''
			when p.pri_status=''B'' then ''In Production''
			when p.pri_status=''C'' then ''Complete''
			when p.pri_status=''L'' then ''Closed''
			when p.pri_status=''P'' then ''Pending''
			when p.pri_status=''Z'' then ''Closed'' end
		end,

		q.lotdesc, q.blockdesc, q.planno, l.addr_1, l.addr_2, l.addr_city, l.addr_postal_code, l.addr_prov,
		q.communitydesc, q.lotid, q.holdingdesc, hp.project_desc, q.modelnamedesc, q.civicaddress, q.modeldesc,
		q.holdingid, q.communityid, q.projectid, q.modelnameid, q.modelid, q.customer_id, Company_Name

		from scquote q
		left outer join '+@hr_db+'..proj_id p on p.pri_num=q.pri_num
		left outer join '+@tr_db+'..customers c on p.customer_id=c.customer_id
		left outer join hb_lots l on l.lot_id=q.lotid
		left outer join hb_project hp on hp.project_cd=l.project_cd
  left outer join Companies co
  on co.AutoID = q.CompanyID
		where q.id='+cast(@id as varchar)

		print @execs
		exec(@execs)
		print cast(@id as varchar)
		fetch cur_proj into @id, @tr_db, @hr_db, @server
	end
	close cur_proj
	deallocate cur_proj

end

if @ProjectType='LAND'
begin
	declare @land_db varchar(50)

	declare cur_land cursor for 
	select distinct dbname, servername from dbs where flavour='LAND'
	open cur_land 
	fetch cur_land into @land_db, @server
	while @@fetch_status=0
	begin
		set @execs='
		insert working_Projects(UserName, CompanyID, [Proj_ID], [Project Code], 
		[Project Group], Project,  
		Status, land_municipality, land_region, project_manager, company_name)

		select '''+@username+''', ph.ph_cc_company_cd, ph.ph_project_cd, ph.ph_project_cd, 
		ph.ph_project_cd, ph.ph_desc, 
		ps.psc_status_desc, m.mc_muni_desc, r.rc_region_desc, pm.pmc_manager_name, c.cc_company_name
	
		from '+@land_db+'.dbo.project_head ph
		left outer join '+@land_db+'.dbo.company_ctrl c on c.cc_company_cd=ph.ph_cc_company_cd
		left outer join '+@land_db+'.dbo.project_manager_ctrl pm on pm.pmc_manager_cd=ph.ph_pmc_manager_cd
		left outer join '+@land_db+'.dbo.project_status_ctrl ps on ps.psc_status_cd=ph.ph_psc_status_cd
		left outer join '+@land_db+'.dbo.regions_ctrl r on r.rc_region_cd=ph.ph_rc_region_cd
		left outer join '+@land_db+'.dbo.muni_ctrl m on m.mc_muni_cd=ph.ph_mc_muni_cd'

		exec(@Execs)

		fetch cur_land into @land_db, @server
	end
	close cur_land
	deallocate cur_land
end




 update working_Projects
 set [Project Code] = replicate(' ',  12 - len([Project Group])) + [Project Code]
 where UserName = @UserName


if @ProjectType<>'SALES'
begin
	select *
	from working_Projects p
	where UserName = @UserName
	order by [Project Code]
end
else
begin
	select distinct hb_community, hb_holding_desc, hb_phase_desc, community_id, holding_id, phase_id, Company_Name 
 from working_projects p
 where username=@username
end













Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DashboardGetAllCompanySuppliers]') and xtype = 'P ')  
 drop Procedure sp_DashboardGetAllCompanySuppliers
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go









CREATE     proc sp_DashboardGetAllCompanySuppliers
 @Username varchar(100)
as
--select @Username = '571'

delete working_Companies
where USerName = @USerName

delete working_Suppliers
where USerName = @USerName

insert working_Companies(UserName, TR_Name, HR_Name,
ServerName, CompanyID, Finished)
select @Username, TreasuryDBName, HumanDBName,
companyservername, AutoID, 0
from companies

declare @CurrentCompany varchar(10), @CountCompanies int

select @CurrentCompany = max(CompanyID), @CountCompanies = count(*)
from working_Companies
where UserName = @UserName
and Finished = 0


declare @TR_Name varchar(100), @HR_Name varchar(100), @ServerName varchar(100),
 @CompanyName varchar(100)


while isnull(@CountCompanies,0) > 0
begin --simple way to avoid use of cursors
 select @TR_Name = TR_Name, @HR_Name = HR_Name, @ServerName = ServerName
 from working_Companies
 where UserName = @UserName
 and CompanyID = @CurrentCompany

 declare @Execs varchar(8000)



 select @Execs = '
 declare @CompanyName varchar(100)
 select @CompanyName = CompanyName
 from ['+@servername+'].' + @TR_Name + '.dbo.company

 update working_Companies
 set CompanyName = @CompanyName
 where CompanyID = ' + @CurrentCompany + '
 and USerName = ''' + @Username + ''' 

 insert working_Suppliers(UserName, TR_Name, HR_Name, ServerName, CompanyID, [Company Name], 
 [Supplier Code], [Supplier Name], City, [State/Province], [Supplier ID])
 select ''' + @Username + ''', ''' +  @TR_Name + ''', ''' + @HR_Name + ''', ''' + @ServerName + ''', ' + @CurrentCompany + ', @CompanyName,
 Supplier, [name], PO_CITY, PO_STATE, SUPPLIER_ID
 from ['+@servername+'].' + @TR_Name + '.dbo.supplier_master
 where Supplier_ID is not null'

 print @Execs
 exec(@Execs)

 update working_Companies
 set Finished = 1
 where UserName = @UserName
 and CompanyID = @CurrentCompany

 select @CurrentCompany = max(CompanyID), @CountCompanies = count(*)
 from working_Companies
 where UserName = @UserName
 and Finished = 0
end

select *
from working_Suppliers
where UserName = @UserName
order by [Company Name], [Supplier Name]











Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DashboardGetContacts]') and xtype = 'P ')  
 drop Procedure sp_DashboardGetContacts
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE  proc [dbo].[sp_DashboardGetContacts]
@LeaderID int, 
@LeaderCompanyID int, 
@InstanceType varchar(100)
as

--select @LeaderID = 2, @LeaderCompanyID = 1, @InstanceType = 'Supplier'
--sp_DashboardGetContacts 212,null,'Project'

if @InstanceType <> 'Project' and @InstanceType <> 'Prospect'
begin
 select -1 [ID], '***All Contacts***' [Known As], '***All Contacts***'[First Name], '***All Contacts***'[Last Name], '***N/A***' [Job Title], '***N/A***' ExternalReference
 union
 select c.ID, KnownAs [Known As], Firstname [First Name], Lastname [Last Name], JobTitle [Job Title], c.ExternalReference
 from relations r
 join Contact c
 on c.id = r.ItemID
 and ItemType = 'Contact'
 where Target = @InstanceType
 and TargetID = @LeaderID
 and isnull(@LeaderCompanyID,'') = isNull(CompanyID,'')
end

if @InstanceType = 'Prospect'
begin
 select -1 [ID], '***All Contacts***' [Known As], '***All Contacts***'[First Name], '***All Contacts***'[Last Name], '***N/A***' [Job Title], '***N/A***' ExternalReference
 union 
 select c.ID, c.KnownAs [Known As], c.Firstname [First Name], c.Lastname [Last Name], JobTitle [Job Title], c.ExternalReference
 from scLead l 
 JOIN Contact c ON l.Contact_ID = c.ID 
 where l.id = @LeaderID
 union 
 select c.ID, c.KnownAs [Known As], c.Firstname [First Name], c.Lastname [Last Name], JobTitle [Job Title], c.ExternalReference
 from scLead l 
 JOIN Contact c ON l.Contact_ID = c.ID 
 where l.ParentID = @LeaderID

end

if @InstanceType = 'Project'
begin
 select -1 [ID], '***All Contacts***' [Known As], '***All Contacts***'[First Name], '***All Contacts***'[Last Name], '***N/A***' [Job Title], '***N/A***' ExternalReference
 union 
 select Distinct c.ID, c.KnownAs [Known As], c.Firstname [First Name], c.Lastname [Last Name], JobTitle [Job Title], c.ExternalReference
 from Contact c 
 Where C.ID in (Select ContactID from ContactHistory Where pri_num = @LeaderID) OR 
	   C.ID in (Select ContactID From MSP_Dashboard_Tasks Where pri_num = @LeaderID) OR
	   C.ID in (Select TargetID from Relations r Inner Join Notes n on n.ID = r.ItemID Where r.ItemType = 'Notes' and r.Target = 'Contact' and n.pri_num = @LeaderID)
end







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DashboardGetNextTimeBlock]') and xtype = 'P ')  
 drop Procedure sp_DashboardGetNextTimeBlock
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go








CREATE    proc sp_DashboardGetNextTimeBlock 
 @CurrentSequence int, 
 @TimeRemaining int, 
 @RunningDate datetime
as

print 'InGetNextTimeBlocl ' + cast(@CurrentSequence as varchar(500)) + cast(@TimeRemaining as varchar(500)) + cast(@RunningDate as varchar(500))

if 1=2
begin
 create table #WeeklySchedule(
 DayOfWeek int,
 Minutes int,
 Seq int,
 FromTime int,
 ToTime int,
 ExceptionStart datetime,
 ExceptionEnd datetime,
 Working int)
 
 create table #BlockReturn(
 CurrentSequence int,
 TimeRemaining int,
 RunningDate datetime,
 EndTime int)
end

-- declare 
-- @DayOfWeek int, 
-- @CurrentSequence int, 
-- @TimeRemaining int, 
-- @RunningDate datetime
-- 
-- select 
-- @DayOfWeek = 4,
-- @CurrentSequence = 2, 
-- @TimeRemaining = 3000, 
-- @RunningDate = '9/14/05'

declare @InException int, @Minutes int, @StartDateName varchar(20), @FoundValid int, 
@Count int, @Working int, @EndTime int, @DayOfWeek int
select @StartDateName = DATENAME(weekday,@RunningDate)
select @DayOfWeek = case
 when @StartDateName = 'Sunday' then 1
 when @StartDateName = 'Monday' then 2
 when @StartDateName = 'Tuesday' then 3
 when @StartDateName = 'Wednesday' then 4
 when @StartDateName = 'Thursday' then 5
 when @StartDateName = 'Friday' then 6
 when @StartDateName = 'Saturday' then 7
 end



select @FoundValid = 0

--use regular calendar
select @Minutes = Minutes
from #WeeklySchedule
where DayOfWeek = @DayOfWeek
and Working = 1
and Seq = @CurrentSequence

print 'minutes ' + isNull(cast(@Minutes as varchar(50)),'')

if isNull(@Minutes,0) = 0  
  select @RunningDate = dateAdd(day, 1, @RunningDate)
else
begin	
	if @Minutes < @TimeRemaining
	begin -- need to call again
	 select @TimeRemaining = @TimeRemaining - @Minutes

	 select @Count = count(*)
	 from #WeeklySchedule
	 where DayOfWeek = @DayOfWeek
	 and Working = 1
	 and Seq = @CurrentSequence + 1
	 if @Count = 0
	 begin
	  select @CurrentSequence = 1
	  select @RunningDate = dateAdd(day, 1, @RunningDate)
	 end
	 else
	  select @CurrentSequence = @CurrentSequence + 1
	end
	else
	begin -- done, need exact cut off time
	 select @EndTime = FromTime + @TimeRemaining
	 from #WeeklySchedule
	 where DayOfWeek = @DayOfWeek
	 and Working = 1
	 and Seq = @CurrentSequence
	
	 select @TimeRemaining = 0  
	end
end
insert #BlockReturn
select @CurrentSequence, @TimeRemaining, @RunningDate, @EndTime

print 'OutGetNextTimeBlocl ' + cast(@CurrentSequence as varchar(500)) + cast(@TimeRemaining as varchar(500)) + cast(@RunningDate as varchar(500))









Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DashboardGetPurchNav]') and xtype = 'P ')  
 drop Procedure sp_DashboardGetPurchNav
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- declare
CREATE procedure sp_DashboardGetPurchNav
@Username varchar(100),
@ProjectType varchar(50),
@NavigatorType varchar(10)

-- set @username='marty'
-- set @projecttype='Con'
-- set @navigatortype='P'

as


--populate the working_projects table
exec sp_DashboardGetAllCompanyProjects @username, @projecttype, @navigatortype


delete working_purchase_requests where username=@username

insert working_purchase_requests
(username, company_id, company_name, request_type, tr_name, hr_name, server_name, proj_id, proj_group, proj_code, project, customer_name,
proj_status, hb_lot, hb_block, hb_plan, hb_add1, hb_add2, hb_city, hb_postal, hb_prov, hb_community, hb_holding_desc, hb_phase_desc,
hb_model_desc, civic_address, land_municipality, land_region)

select @username, companyid, company_name, 'Project', tr_name, hr_name, servername, proj_id, [project group], [project code], project, customer,
status, hb_lot, hb_block, hb_plan, hb_add1, hb_add2, hb_city, hb_postal, hb_prov, hb_community, hb_holding_desc, hb_phase_desc,
hb_model_desc, civic_address, land_municipality, land_region
from working_projects where username=@username







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DashboardHBMajorCodeSummary]') and xtype = 'P ')  
 drop Procedure sp_DashboardHBMajorCodeSummary
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec sp_DashboardHBMajorCodeSummary 958,'marty'
-- declare
CREATE  procedure sp_DashboardHBMajorCodeSummary
@id int,
@username varchar(10)

-- set @id=958  --this will be the quote_id
-- set @username='marty'

as


delete working_major_code_summary where username=@username

insert working_major_code_summary
(username, quote_id, phs_code, phs_desc, contracted, complete, in_progress, tasks_incomplete, notification_os)
select distinct @username, @id,d.majorcode, d.codedescription, 'F', 'F', 'F', 0, 0
from dashboard_majorcodes d
join scQuote q on q.proj_id_id=d.proj_id_id and q.id=@id
left outer join cms_contract_management c on c.phs_code=d.majorcode and c.quoteid=q.id
order by d.majorcode


declare
@quoteid int,
@phs_code varchar(50),
@cmsid int,
@tmp int

declare cur cursor for
select quote_id, phs_code from working_major_code_summary where username=@username
open cur 
fetch cur into @quoteid, @phs_code
while @@fetch_status=0
begin
	select @cmsid=cms_id from cms_contract_management where quoteid=@quoteid and phs_code=@phs_code

	--contracted
	if exists (select * from cms_contract_management_supp where cms_id=@cmsid
	and supplier is not null and po is not null)
	begin
		update working_major_code_summary
		set contracted='T' where quote_id=@quoteid and phs_code=@phs_code
		and username=@username
	end

	--tasks_incomplete
	update working_major_code_summary 
	set tasks_incomplete=(select count(*) 
	from msp_tasks t
	join msp_dashboard_tasks d on d.proj_id=t.proj_id and d.task_uid=t.task_uid
	join dashboard_majorcodes dmc on dmc.dmc_id=d.dmc_id and dmc.majorcode=@phs_code
	join scQuote q on q.proj_id_id=dmc.proj_id_id and q.id=@quoteid
	where t.task_pct_comp<100)
	where quote_id=@quoteid and phs_code=@phs_code
	and username=@username

	--complete
	update working_major_code_summary
	set complete='T' where tasks_incomplete=0
	and username=@username

	--notification_os
	select @tmp=count(*) from cms_contract_management_supp where cms_id=@cmsid
	and poed is null 

	update working_major_code_summary
	set notification_os=@tmp where quote_id=@quoteid and phs_code=@phs_code
	and username=@username

	--in_progress
	select @tmp=count(*) 
	from msp_tasks t
	join msp_dashboard_tasks d on d.proj_id=t.proj_id and d.task_uid=t.task_uid
	join dashboard_majorcodes dmc on dmc.dmc_id=d.dmc_id and dmc.majorcode=@phs_code
	join scQuote q on q.proj_id_id=dmc.proj_id_id and q.id=@quoteid
	where t.task_finish_date<getdate()
	and q.id=@quoteid and dmc.majorcode=@phs_code

	update working_major_code_summary
	set in_progress='T' 
	where @tmp>0 and quote_id=@quoteid and phs_code=@phs_code
	and username=@username

	fetch cur into @quoteid, @phs_code
end
close cur
deallocate cur



select *, 
(select count(*) from working_major_code_summary where contracted='F' and username=@username) [total_not_contracted],
(select count(*) from working_major_code_summary where complete='F' and username=@username) [total_not_complete],
(select count(*) from working_major_code_summary where in_progress='T' and username=@username) [total_in_progress],
(select isnull(sum(tasks_incomplete),0) from working_major_code_summary  where username=@username) [total_tasks_incomplete],
(select isnull(sum(notification_os),0) from working_major_code_summary where  username=@username) [total_notification_os]
from working_major_code_summary
where username=@username






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DashboardRecalcDate]') and xtype = 'P ')  
 drop Procedure sp_DashboardRecalcDate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





-- exec sp_DashboardRecalcDate 1


CREATE  Proc sp_DashboardRecalcDate
 @Proj_ID int
as

-- declare @Proj_ID int
-- select @Proj_ID = 1

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TasksToDo'))
drop table #TasksToDo
create table #TasksToDo(
 Proj_ID int,
 Task_Uid int,
 Duration float,
 Done bit default 0)

insert #TasksToDo
select tt.Proj_ID, tt.Task_Uid, cast(tt.task_dur as float)/ 10.0 / PROJ_OPT_MINUTES_PER_DAY, 0
from MSP_Tasks tt
join msp_dashboard_tasks dt
on dt.proj_id = tt.Proj_id
and dt.task_uid = tt.task_uid
join msp_projects p
on p.proj_id = tt.Proj_id
where 
 tt.proj_id = @Proj_ID
 and (codeType = 'T' or codeType = 'P')
 and tt.task_uid > 0
 and RESERVED_DATA <> 'X'

select * from #TasksToDo

exec sp_Dashboard_CalcDates @Proj_ID, 1

select * from #TasksToDo










Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DashboardSCMetrics]') and xtype = 'P ')  
 drop Procedure sp_DashboardSCMetrics
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



--all of these will be either the ID or a '%' for ALL
-- declare
-- exec sp_DashboardSCMetrics '1','%','%','%','%','%','%','%','%','%','%','%','%','%','tr_clear_weld'
CREATE procedure [dbo].[sp_DashboardSCMetrics]
@username varchar(10),
@holding varchar(10),--
@community varchar(10),--
@phase varchar(10),--
@project varchar(10),--
@customer varchar(10),
@status varchar(10),
@model varchar(10),--
@elevation varchar(10),--
@lot varchar(50),
@block varchar(50),
@plan varchar(50),
@prov varchar(10),
@postal varchar(10),
@tr_db varchar(50)

-- set @username='11'
-- set @community='12'
-- set @holding='%'
-- set @phase='%'
-- set @project='%'
-- set @customer='%'
-- set @status='%'
-- set @model='%'
-- set @elevation='%'
-- set @lot='%'
-- set @block='%'
-- set @plan='%'
-- set @prov='%'
-- set @postal='%'
-- set @tr_Db='tr_realestate1'

as

declare
@joinsql varchar(4000),
@wheresql varchar(4000),
@fieldname varchar(200)


-- if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#summary'))
-- drop table #summary
-- create table #summary
-- (num_inc_complete int null,
-- num_inc_inspected int null,
-- num_inc_os int null,
-- num_inc_deleted int null,
-- num_inc_declined int null,
-- num_inc_in_progress int null)

delete sc_metric_summary where username=@username


set @joinsql='=(select count(*)from svincident i
join scquote q on q.id=i.quoteid
and isnull(q.communityid,0) like '''+@community+''' and isnull(q.holdingid,0) like '''+@holding+''' and isnull(q.projectid,0) like '''+@phase+'''
and isnull(q.modelid,0) like '''+@elevation+''' and isnull(q.modelnameid,0) like '''+@model+''' and isnull(q.id,0) like '''+@project+'''
and isnull(q.customer_id,0) like '''+@customer+''' and isnull(q.status,'''') like '''+@status+''' and isnull(q.lotdesc,'''') like '''+@lot+'''
and isnull(q.blockdesc,'''') like '''+@block+''' and q.planno like '''+@plan+'''
join hb_lots l on l.lot_id=q.lotid and isnull(l.addr_postal_code,'''') like '''+@postal+''' and isnull(l.addr_prov,'''') like '''+@prov+''''



--get a record in there
insert sc_metric_summary
(username)
select @username

-----------------
set @fieldname='
update sc_metric_summary
set num_inc_complete'

set @wheresql='
and i.status=''C'')
where username='''+@username+''''

print @fieldname+' '+@joinsql+' '+@wheresql
exec(@fieldname+' '+@joinsql+' '+@wheresql)

-------------------
set @fieldname='
update sc_metric_summary
set num_inc_inspected'

set @wheresql='
and i.status=''I'')
where username='''+@username+''''

print @fieldname+' '+@joinsql+' '+@wheresql
exec(@fieldname+' '+@joinsql+' '+@wheresql)


-------------------
set @fieldname='
update sc_metric_summary
set num_inc_os'

set @wheresql='
and i.status=''O'')
where username='''+@username+''''

print @fieldname+' '+@joinsql+' '+@wheresql
exec(@fieldname+' '+@joinsql+' '+@wheresql)


-------------------
set @fieldname='
update sc_metric_summary
set num_inc_deleted'

set @wheresql='
and i.status=''DEL'')
where username='''+@username+''''

print @fieldname+' '+@joinsql+' '+@wheresql
exec(@fieldname+' '+@joinsql+' '+@wheresql)

-------------------
set @fieldname='
update sc_metric_summary
set num_inc_declined'

set @wheresql='
and i.status=''D'')
where username='''+@username+''''

print @fieldname+' '+@joinsql+' '+@wheresql
exec(@fieldname+' '+@joinsql+' '+@wheresql)


-------------------
set @fieldname='
update sc_metric_summary
set num_inc_in_progress'

set @wheresql='
and i.qastartdate is not null and i.qaenddate is null)'

print @fieldname+' '+@joinsql+' '+@wheresql
exec(@fieldname+' '+@joinsql+' '+@wheresql)



select * from sc_metric_summary where username=@username







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DDS_GetDepUser]') and xtype = 'P ')  
 drop Procedure sp_DDS_GetDepUser
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_DDS_GetDepUser]

@LoginName   varchar(30), @companyID   int

as

--declare @LoginName   varchar(30),@companyID   int  

--select @LoginName = 'hm', @companyID   = 12

declare @trDB varchar(200), @trServer   varchar(200), @sqlStr   varchar(3000)

select @trDB = treasuryDBName, @trServer = companyservername 
 from companies where autoid = @companyID

delete Working_DepUser where LoginName =@LoginName

set @sqlStr= ' insert Working_DepUser ( NameCode, NameDesc , ParentCode,LoginName) select Name, description, null, ' + 
              ''''+@LoginName+''' from [' + @trServer + '].' + @trDb + '.DBO.department '

--print @sqlStr
exec (@sqlStr)

set @sqlStr= ' insert Working_DepUser ( NameCode, NameDesc ,ParentCode,LoginName) select u.Name, u.full_name,department,' +
            ''''+@LoginName+''' from [' + @trServer + '].' + @trDb + '.DBO.department d join [' +  @trServer + '].' + @trDb + '.DBO.mluser  u on d.name = u.department '


exec (@sqlStr)
select * from  Working_DepUser
 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DDS_GetFilterStr]') and xtype = 'P ')  
 drop Procedure sp_DDS_GetFilterStr
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_DDS_GetFilterStr]

@sQueryID   int, @companyID   int ,   @LoginName   varchar(50), @fieldName    varchar(100), 
 @department varchar(20), @isWidget   varchar(1) 

as
 


--declare @sQueryID   int, @companyID   int ,   @LoginName   varchar(50), @fieldName    varchar(100),
--       @department   varchar(20), @isWidget   varchar(1) 
--
--select @sQueryID  = 11, @companyID  = 12, @LoginName  = 'karen',  @fieldName   = 'p.AR_year', @isWidget = 'T'


declare @sFilter    varchar(500)



if @isWidget= 'F'
begin
   if  isnull(@department,'')  = ' '
      select @department  = parentcode  from  Working_DepUser u
       where namecode = @LoginName and loginname = @LoginName
end

declare @si_id   int, @j int , @totalInstance  int

set @j = 1  
set @totalInstance  = 0

if @isWidget= 'T'
begin
    select @totalInstance  = count(*) from  security_instance  i
	join security_limit l on i.id = l.si_id
	where target =@sQueryID
		and active = 1 and companyid=  @companyID 
		and targettype = 'widget'
		and columnname =  @fieldName  
end
else
begin
	select @totalInstance  = count(*) from  security_instance  i
	join security_limit l on i.id = l.si_id
	where sq_id =@sQueryID
		and active = 1 and companyid=  @companyID 
		and target in (@LoginName, @department)
		and columnname =  @fieldName  
end


if  @totalInstance > 0
    set @sFilter =  @fieldName   
else
   set @sFilter = ''


if @isWidget= 'T'
begin
    declare cur_instance cursor for
    select i.id from  security_instance  i
    join security_limit l on i.id = l.si_id
	where target =@sQueryID
		and active = 1 and companyid=  @companyID 
		and targettype = 'widget'
		and columnname =  @fieldName 
end
else
begin
    declare cur_instance cursor for
	select i.id from  security_instance  i
	join security_limit l on i.id = l.si_id
	where sq_id =@sQueryID
		and active = 1 and companyid=  @companyID 
		and target in (@LoginName, @department)
		and columnname =  @fieldName  
end

open cur_instance
fetch cur_instance into @si_id 
while @@fetch_status=0
begin
	
   
	declare @limittype  varchar(20), @sl_id  int 

	declare cur_limit cursor for

	 select distinct limittype, l.id 
	from  security_limit l 
	join security_instance i on l.si_id= i.id 
	where columnname = @fieldName
	 and si_id= @si_id

    
	open  cur_limit 
	fetch  cur_limit  into @limittype,@sl_id
	while @@fetch_status=0
	begin
		-------
		
        
        declare @i   int, @total   int
        select @i =1, @total=0

       select @total = count(*)  from  security_values where sl_id= @sl_id

        set @sFilter = @sFilter +  ' ' + @limittype + ' (' 
        declare @value   varchar(200)

		declare cur_value cursor for

		select value from  security_values where sl_id= @sl_id


		open   cur_value
		fetch   cur_value into @value 
		while @@fetch_status=0
		begin
			
			 
             if @i = @total   -- last one
             begin 
                 if @limittype = 'between' 
					set @sFilter = @sFilter + 'getDate() - '+@value+') and getDate())'
		         else
                    set @sFilter = @sFilter + ''''+@value+ '''' + ')'
             end
             else
             begin
                 
                     set @sFilter = @sFilter + ''''+@value+ ''''  + ','
             end
             set @i = @i+1
			fetch   cur_value  into @value 
		end

		close   cur_value
		deallocate   cur_value

		------------------------- 
		fetch  cur_limit  into @limittype,@sl_id
	end

	close  cur_limit 
	deallocate  cur_limit 

   
    if @j <> @totalInstance
    begin
       set @sFilter     = @sFilter +   ' or ' +  @fieldName    
    end
    else
    begin
        set @sFilter     =   @sFilter 
    end


     set  @j = @j+ 1
	fetch cur_instance into @si_id 
end

close cur_instance
deallocate cur_instance


select  @sFilter  ' @sFilter'





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DDS_SetFieldsSecurity]') and xtype = 'P ')  
 drop Procedure sp_DDS_SetFieldsSecurity
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_DDS_SetFieldsSecurity]

@sQueryID   int,@loginName   varchar(50),@companyID  int

as

--declare @sQueryID   int,@loginName   varchar(50),@companyID  int
--select @sQueryID = 1, @loginName  = 'hms',@companyID   = 12



   insert Security_Instance( SQ_ID, Target, Source, CompanyID, Active, TargetType, 
                          TargetDesc)

    select @sQueryID , NameCode,@loginName,@companyID,1,case when isnull (parentCode,'') = '' then 'Department' else 'User' end,
                  NameDesc
   
    from  Working_DepUser
    where  selected ='T' and loginName = @loginName 
and namecode <> @loginName 



declare @si_id   int

declare cur_line cursor for

select i.id from working_depuser w
join Security_Instance i on w.namecode = i.target
where selected ='T' and loginName = @loginName



open cur_line
fetch cur_line into @si_id 
while @@fetch_status=0
begin
    
    declare @count int
    select  @count = count(*) from Security_Limit where si_id = @si_id
    
    if  isnull(@count,0) = 0 
    begin
		
       insert Security_columns (SI_ID,ColumnName, Caption)

    	select @si_id,ColumnName, ColumnCaption from working_Security_columns
		where loginname = @loginname

		insert Security_Limit (SI_ID,ColumnName,LimitType, Caption,value_member)
		select distinct @si_id ,ColumnName,LimitType, ColumnCaption,value_member from Working_Security_Limit l
        join Working_Security_values v on l.id = v.sl_id and l.loginname = v.loginname
		where l.loginname = @loginname

       insert Security_Values(SL_ID,Value)
		select sl.id,  v.value from Working_Security_Limit l
		join Working_Security_values v on l.id = v.sl_id and l.loginname = v.loginname
		join  Security_Limit sl on l.ColumnName= sl.ColumnName 
		where l.loginname = @loginname  and sl.si_id = @si_id 



    end

	fetch cur_line into @si_id 
end

close cur_line
deallocate cur_line


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DDS_SetWidgetSecurity]') and xtype = 'P ')  
 drop Procedure sp_DDS_SetWidgetSecurity
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_DDS_SetWidgetSecurity]

@widgetID   int,@loginName   varchar(50),@companyID  int, @TagetType varchar(50)

as
--
--declare @widgetID   int,@loginName   varchar(50),@companyID  int
--select @widgetID = 11, @loginName  = 'karen',@companyID   = 12
--
	declare @isWidget int

	if(@TagetType = 'User')
		set @isWidget = 0
	else
		set @isWidget = 1

   insert Security_Instance(  Target, TargetType, Source, CompanyID, Active,isWidget)

   select @widgetID,@TagetType,@loginName,@companyID,1,@isWidget
 


declare @si_id   int

set @si_id = 1

select @si_id = max(id )
from Security_Instance 


insert Security_columns (SI_ID,ColumnName, Caption)
select @si_id,ColumnName, ColumnCaption from working_Security_columns
where loginname = @loginname

insert Security_Limit (SI_ID,ColumnName,LimitType, Caption)
select distinct @si_id ,ColumnName,LimitType, ColumnCaption from Working_Security_Limit l
join Working_Security_values v on l.id = v.sl_id and l.loginname = v.loginname
where l.loginname = @loginname

insert Security_Values(SL_ID,Value)
select sl.id,  v.value from Working_Security_Limit l
join Working_Security_values v on l.id = v.sl_id and l.loginname = v.loginname
join  Security_Limit sl on l.ColumnName= sl.ColumnName 
where l.loginname = @loginname  and sl.si_id = @si_id 



select @si_id 


    






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DDS_UpdateFieldsSecurity]') and xtype = 'P ')  
 drop Procedure sp_DDS_UpdateFieldsSecurity
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_DDS_UpdateFieldsSecurity]

@si_id   int,@loginName   varchar(50)

as
--
--declare @si_id    int,@loginName   varchar(50)
--select @si_id  = 120, @loginName  = 'hms'


if isnull(@si_id,-1 ) <> -1
begin

	-- 1. removed one
	-- find out all the removed columns and delete from   security_values and security_limits table
	delete security_values
	--select v.*
	from Security_Limit l 
	join security_values  v on l.id = v.sl_id
	where l.si_id =@si_id and columnname not in (select wl.columnName from Working_Security_limit wl
										 join Working_Security_Values   wv  on wl.id= wv.sl_id
									 where wl.LoginName = @loginName and wl.si_id =@si_id )

	delete 
	--select l.* 
	from Security_Limit  
	where si_id =@si_id and columnname not in (select wl.columnName from Working_Security_limit wl
										 join Working_Security_Values   wv  on wl.id= wv.sl_id
									 where wl.LoginName = @loginName and wl.si_id =@si_id )



	-- 2.update  the exist one


	delete security_values 
	--select  v.*
	from security_values v
	join Security_Limit l  on l.id = v.sl_id
	where l.si_id = @si_id and value not in  (  select wv.value from Working_Security_limit wl
										 join Working_Security_Values   wv  on wl.id= wv.sl_id
									 where wl.LoginName = @loginName and wl.si_id =@si_id )

	update Security_Limit set  limittype =wl.limittype,value_member =wl.value_member
	-- select l.* ,wl.limittype
	from Security_Limit  l
	join Working_Security_limit wl on l.si_id = wl.si_id and l.columnname = wl.columnname
	join working_Security_Values   wv  on wl.id= wv.sl_id
	where l.si_id = @si_id and  wl.LoginName = @loginName

	-- 3. new one 
	insert Security_Limit (SI_ID,ColumnName,LimitType, Caption,value_member)
	select distinct @si_id ,ColumnName,LimitType, ColumnCaption , l.value_member
    from Working_Security_Limit l
	join Working_Security_values v on l.id = v.sl_id and l.loginname = v.loginname
	where l.loginname = @loginName and si_id =-1 

	insert Security_Values(SL_ID,Value)
	select sl.id,  v.value
    from Working_Security_Limit l
	join Working_Security_values v on l.id = v.sl_id and l.loginname = v.loginname
	join  Security_Limit sl on l.ColumnName= sl.ColumnName and sl.si_id = @si_id
	where l.loginname =@loginName and l.si_id = -1

    insert Security_Values(SL_ID,Value)
    select sl.id,  v.value
    from Working_Security_Limit l
	join Working_Security_values v on l.id = v.sl_id and l.loginname = v.loginname
	join  Security_Limit sl on l.ColumnName= sl.ColumnName and sl.si_id =@si_id
	where l.loginname =@loginName and l.si_id = @si_id and v.value not in
               (select v.value
                  from  Security_Values v
                 join Security_limit  l on v.sl_id = l.id
                    join security_instance  i on l.si_id = i.id
                     where i.id   = @si_id)


    delete security_columns 
	where si_id = @si_id and columnname not in  (  select columnname from working_security_columns 
									 where LoginName = @loginName and si_id =@si_id )

    insert Security_columns (SI_ID,ColumnName, Caption)
    select @si_id,ColumnName,ColumnCaption from working_Security_columns
		where loginname = @loginname and si_id =-1





---

end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DefaultWordMerge]') and xtype = 'P ')  
 drop Procedure sp_DefaultWordMerge
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure [dbo].[sp_DefaultWordMerge](@ContactID int)
AS

Select IsNull(FirstName,'') [FirstName], IsNull(LastName,'') [LastName], IsNull(KnownAs,'') [Name], 
IsNull(Greeting,'') [Greeting], IsNull(Title,'') [Salutation], IsNull(JobTitle,'') [JobTitle], 
IsNull(BusinessStreet,'') [BusinessStreet], IsNull(BusinessCity,'') [BusinessCity], 
IsNull(BusinessState,'') [BusinessStateProv], IsNull(BusinessPostalCode,'') [BusinessZipPostalCode], 
IsNull(BusinessCountry,'') [BusinessCountry], IsNull(BusinessTelephoneNumber,'') [BusinessPhoneNumber], 
IsNull(BusinessFaxNumber,'') [BusinessFaxNumber], IsNull(Email1Address,'') [EmailAddress],
IsNull(Convert(varchar(12),Birthday),'') [Birthday], IsNull(BusinessCompany,'') [CompanyName]
from Contact where ID = @ContactID



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Delete_KBI_Instance]') and xtype = 'P ')  
 drop Procedure sp_Delete_KBI_Instance
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
 

CREATE proc [dbo].[sp_Delete_KBI_Instance] 
@KBII_ID int, @CompanyID int = -1
as 
begin
	declare @ID int, @trdb varchar(500), @SQL varchar(8000)
	
	if( @CompanyID <> -1 )
		select @CompanyID=company_id from Security_KBI_SUMMARY where kbi_instance_id=@KBII_ID
		
	select @trdb=TreasuryDBName from companies where autoID=@CompanyID
	delete Security_KBI_Instance_Restricted_Columns where Security_KBI_Instance_ID = @KBII_ID
	delete from security_kbi_goals where skbii_id=@KBII_ID

	delete from security_kbi_company_schedule where skbii_id=@KBII_ID

	delete from security_kbi_instance where id=@KBII_ID

	--select @ID=id from security_instance where source=cast(@KBII_ID as varchar(15))

	delete from security_values where sl_id in 
		( select id from security_limit where si_id in(
			 select id from security_instance where source=cast(@KBII_ID as varchar(15)  ) ))

	delete from security_limit where si_id in(
			 select id from security_instance where source=cast(@KBII_ID as varchar(15)  ))

	delete from security_columns where si_id in(
			 select id from security_instance where source=cast(@KBII_ID as varchar(15)  ))

	delete from security_widget_gauge_range where swg_id in ( 
		select id from security_widget_gauge where sw_id in ( 
			select id from security_widget where si_id in(
			 select id from security_instance where source=cast(@KBII_ID as varchar(15)  ) ) ))

	delete from security_widget_gauge where sw_id in ( 
		select id from security_widget where si_id in(
			 select id from security_instance where source=cast(@KBII_ID as varchar(15)  ) ) )

	delete from security_widget_chart_series where swc_id in ( 
		select id from security_widget_chart where sw_id in ( 
			select id from security_widget where si_id in(
			 select id from security_instance where source=cast(@KBII_ID as varchar(15)  ) ) ))

	delete from security_widget_chart where sw_id in ( 
			select id from security_widget where si_id in(
			 select id from security_instance where source=cast(@KBII_ID as varchar(15)  ) ) )

	delete from security_widget_users where sw_id in ( 
			select id from security_widget where si_id in(
			 select id from security_instance where source=cast(@KBII_ID as varchar(15)  ) ) )

	delete from security_widget where si_id in(
			 select id from security_instance where source=cast(@KBII_ID as varchar(15)  ))

	delete from security_instance where id in(
			 select id from security_instance where source=cast(@KBII_ID as varchar(15)  ))

	delete from security_instance where source=cast(@KBII_ID as varchar(50))-- and targettype = 'Widget'

	delete from KBI_INSTANCE_COMPANY_SETUP where KBII_ID=@KBII_ID

	delete from KBI_GL_GROUP_SELECTED where KBII_ID=@KBII_ID

	delete from KBI_INSTANCE_GL_GROUP_IE_DET where KBII_ID=@KBII_ID

	delete from KBI_RATIO_GROUP where KBII_ID=@KBII_ID

	delete from Security_KBI_SUMMARY where KBI_Instance_ID=@KBII_ID

	set @SQL =
	'delete from '+@trdb+'..KBI_WO_ESTIMATOR_SELECTED where KBII_ID='+cast(@KBII_ID as varchar)+' 
	delete from '+@trdb+'..KBI_WO_TYPE_SELECTED where KBII_ID='+cast(@KBII_ID as varchar)+'
	delete from '+@trdb+'..KBI_WO_MANAGER_SELECTED where KBII_ID='+cast(@KBII_ID as varchar)+'
	delete from '+@trdb+'..KBI_DIST_DelvPerfProp where KBII_ID='+cast(@KBII_ID as varchar)+'
	delete from '+@trdb+'..KBI_DIST_PROD_TYPE where KBII_ID='+cast(@KBII_ID as varchar)+'
	delete from '+@trdb+'..kbi_invoice_type where KBII_ID='+cast(@KBII_ID as varchar)+'
	delete from '+@trdb+'..KBI_Property_Selected where KBII_ID='+cast(@KBII_ID as varchar)+'	
	delete from '+@trdb+'..KBI_UnitUsage_Selected where KBII_ID='+cast(@KBII_ID as varchar)+'
	delete from '+@trdb+'..KBI_UnitType_Selected where KBII_ID='+cast(@KBII_ID as varchar)+'
	delete from '+@trdb+'..WORKING_KBI_RE_AVG_SQFT_FILL where KBII_ID='+cast(@KBII_ID as varchar)+'
	
	delete from '+@trdb+'.dbo.KBI_LD_GeoAreaSel where KBII_ID='+cast(@KBII_ID as varchar)+'
	delete from '+@trdb+'.dbo.KBI_LD_RegionSel where KBII_ID='+cast(@KBII_ID as varchar)+'
	delete from '+@trdb+'.dbo.KBI_LD_MunicSel where KBII_ID='+cast(@KBII_ID as varchar)+'
	delete from '+@trdb+'.dbo.KBI_LD_CommunitySel where KBII_ID='+cast(@KBII_ID as varchar)+'
	delete from '+@trdb+'.dbo.KBI_LD_LandUseSel where KBII_ID='+cast(@KBII_ID as varchar)+'
	delete from '+@trdb+'.dbo.KBI_LD_ProjSel where KBII_ID='+cast(@KBII_ID as varchar)+'
	delete from '+@trdb+'.dbo.KBI_LD_LotClassSel where KBII_ID='+cast(@KBII_ID as varchar)+'
	'
	exec(@SQL)	

	delete from KBI_CF_BookingBacklog_Properties where KBII_ID=@KBII_ID
	delete from KBI_CF_Shipment_Properties where KBII_ID=@KBII_ID
	delete from Security_widget_users where targettype='user' and target=cast(@KBII_ID as varchar(100))
end






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DeleteListSelections]') and xtype = 'P ')  
 drop Procedure sp_DeleteListSelections
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





create proc sp_DeleteListSelections 
 @PCID varchar(500)
as
 delete session_listbox_selections
 where Guid = @PCID







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_dropdiagram]') and xtype = 'P ')  
 drop Procedure sp_dropdiagram
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

	CREATE PROCEDURE dbo.sp_dropdiagram
	(
		@diagramname 	sysname,
		@owner_id	int	= null
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
	
		if(@diagramname is null)
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end
	
		EXECUTE AS CALLER;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		REVERT; 
		
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)
			return -3
		end
	
		delete from dbo.sysdiagrams where diagram_id = @DiagId;
	
		return 0;
	END
	

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_EmptyListboxSelections]') and xtype = 'P ')  
 drop Procedure sp_EmptyListboxSelections
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





create proc sp_EmptyListboxSelections
 @Guid varchar(500)
as

delete session_listbox_selections
where Guid = @Guid







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_EstimateDocsToCopy]') and xtype = 'P ')  
 drop Procedure SP_EstimateDocsToCopy
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE   PROC SP_EstimateDocsToCopy
@Estimate_ID int, 
@EstimateCode_ID int, 
@DestEstimate_ID int, 
@DestEstimateCode_ID int,
@HR_DB varchar(500)
as

-- DECLARE @Estimate_ID int, @EstimateCode_ID int, @EstimateCode_Indent varchar(6000), 
-- @HR_DB VARCHAR(500), @DestEstimate_ID int, @DestEstimateCode_ID int
-- 
-- select 
-- @Estimate_ID = 999903, 
-- @EstimateCode_ID = -1,
-- @HR_DB = 'HR_ALCOPRELIVE', 
-- @DestEstimate_ID = -1, 
-- @DestEstimateCode_ID = 18405


--first get relevant target type id
declare @ESTIMATEHEADER_ID int, @CODECODE_ID int, @Company int, @EstimateCode_Indent varchar(8000) 

select @Company = AutoID
from Companies
where HumanDBName = @HR_DB 


SELECT @ESTIMATEHEADER_ID = TargetTypeID FROM Doc_TargetType WHERE TargetTypeDesc='ESTIMATEHEADER'
SELECT @CODECODE_ID = TargetTypeID FROM Doc_TargetType WHERE TargetTypeDesc='CODECODE'

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#DriverTable'))
drop table #DriverTable
create table #DriverTable(
 [id] int identity(1,1) not null,
 Type varchar(50),
 Rel_ID int,
 Doc_Count int,
 CopiedTo_ID int
)
declare @SQL varchar(8000)


if (@Estimate_ID > -1)
begin--get all references of codes and the estimate head with docs attached 
 print 'in estimate' 

 insert #DriverTable(Type, Rel_ID, Doc_Count)
 select 'ESTIMATEHEADER', @Estimate_ID, count(*)
 from doc_group dg 
 join doc_file df
 on dg.GroupID = df.GroupID
 where TargetTypeID = @ESTIMATEHEADER_ID
 and TargetID = @Estimate_ID 

 select @EstimateCode_Indent = @Estimate_ID 
 select @SQL ='
 insert #DriverTable(Type, Rel_ID, Doc_Count)
 select ''CODECODE'', ec.EstimateCode_ID, count(*)
 from ' + @HR_DB + '..estimate_code ec
 join doc_group dg 
 on ec.EstimateCode_ID = dg.TargetID
 join doc_file df
 on dg.GroupID = df.GroupID
 where TargetTypeID = ' + cast(@CODECODE_ID as varchar(200)) + 
 ' and TargetID = ec.EstimateCode_ID
 and company = ' + cast(@Company as varchar(50)) +
' and CodeIndent like ''' + @EstimateCode_Indent + '%''
 GROUP BY ec.EstimateCode_ID'
 exec(@SQL)


 
 select @SQL = '
 declare @cDestEstimate_ID varchar(1000)

 if ' + cast(@DestEstimate_ID as varchar(1000)) + '= -1
 begin
  select @cDestEstimate_ID = Estimate_ID
  from ' + @HR_DB + '..estimate_code
  where EstimateCode_ID = ' + cast(@DestEstimateCode_ID as varchar(1000)) + '
 end
 else
  select @cDestEstimate_ID = ' +cast(@DestEstimate_ID as varchar(100)) + '


 -- assign to header and codes regardless of destination
 --header first
 update #DriverTable
 set CopiedTo_ID = @cDestEstimate_ID
 where Type = ''ESTIMATEHEADER''

 --codes
 update #DriverTable
 set CopiedTo_ID = EstimateCode_ID
 from #DriverTable dt
 join ' + @HR_DB + '..estimate_code ec
 on Rel_ID = CopiedFrom_EstimateCode_ID
 where Type = ''CODECODE''
 and Estimate_ID = @cDestEstimate_ID
 and CopiedFrom_Completed = 0'
 exec(@SQL)

end
else--get all references of codes (including this one) with docs attached
begin
 print 'in code'

 SELECT @EstimateCode_Indent = @EstimateCode_ID
 select @SQL ='
 insert #DriverTable(Type, Rel_ID, Doc_Count)
 select ''CODECODE'', ec.EstimateCode_ID, count(*)
 from ' + @HR_DB + '..estimate_code ec
 join doc_group dg 
 on ec.EstimateCode_ID = dg.TargetID
 join doc_file df
 on dg.GroupID = df.GroupID
 where TargetTypeID = ' + cast(@CODECODE_ID as varchar(200)) + 
 ' and TargetID = ec.EstimateCode_ID
 and company = ' + cast(@Company as varchar(50)) +
' and CodeIndent like ''%' + @EstimateCode_Indent + '%''
 GROUP BY ec.EstimateCode_ID'
 exec(@SQL)

 select @SQL = '
 declare @cEstimate_ID varchar(100)
 select @cEstimate_ID = estimate_id
 from ' + @HR_DB + '..estimate_code
 where estimateCode_id = ' + cast(@EstimateCode_ID as varchar(100)) + '
 -- assign to codes only (since source didnt include estimate header)
 update #DriverTable
 set CopiedTo_ID = EstimateCode_ID
 from #DriverTable dt
 join ' + @HR_DB + '..estimate_code ec
 on Rel_ID = CopiedFrom_EstimateCode_ID
 where Type = ''CODECODE''
 and CopiedFrom_Completed = 0
 and Estimate_ID = ' + cast(@DestEstimate_ID as varchar(100))
 exec(@SQL)

end



 select *
 from #DriverTable
 where isNull(Doc_Count,0) > 0





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_EstimateToProjectDocsToCopy]') and xtype = 'P ')  
 drop Procedure SP_EstimateToProjectDocsToCopy
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go






-- exec SP_EstimateToProjectDocsToCopy 13154, 'HR_ALCOLIVE'

CREATE    PROC SP_EstimateToProjectDocsToCopy
@Estimate_ID int, 
@HR_DB varchar(500)
as

-- declare 
-- @Estimate_ID int, 
-- @HR_DB varchar(500)
-- select @Estimate_ID = 999916, @hr_db = 'HR_ALCOLIVE'

--first get relevant target type id
declare @ESTIMATEHEADER_ID int, @CODECODE_ID int, @NODECODE_ID int,@Company int, @EstimateCode_Indent varchar(8000) 

select @Company = AutoID
from Companies
where HumanDBName = @HR_DB 

SELECT @ESTIMATEHEADER_ID = TargetTypeID FROM Doc_TargetType WHERE TargetTypeDesc='ESTIMATEHEADER'
SELECT @CODECODE_ID = TargetTypeID FROM Doc_TargetType WHERE TargetTypeDesc='CODECODE'
SELECT @NODECODE_ID = TargetTypeID FROM Doc_TargetType WHERE TargetTypeDesc='ESTIMATENODE'


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#DriverTable'))
drop table #DriverTable
create table #DriverTable(
 [id] int identity(1,1) not null,
 Type varchar(50),
 Rel_ID int,
 Doc_Count int,
 CopiedTo_ID int,
 CopiedToType varchar(50),
 Phs_code varchar(50),
 Estimate_ID int
)
declare @SQL varchar(8000)


 --get all references of codes and the estimate head with docs attached 

 insert #DriverTable(Type, Rel_ID, Doc_Count, Phs_code, Estimate_ID, CopiedToType)
 select 'ESTIMATEHEADER', @Estimate_ID, count(*), null, @Estimate_ID, 'PROJECTHEADER' 
 from doc_group dg 
 join doc_file df
 on dg.GroupID = df.GroupID
 where TargetTypeID = @ESTIMATEHEADER_ID 
 and TargetID = @Estimate_ID 

 select @EstimateCode_Indent = @Estimate_ID 
 select @SQL ='
 insert #DriverTable(Type, Rel_ID, Doc_Count, Phs_Code, Estimate_ID, CopiedToType)
 select ''CODECODE'', ec.EstimateCode_ID, count(*), phs_code, ' + cast(@Estimate_ID as varchar(50)) + ', ''PROJECTCODE''
 from ' + @HR_DB + '..estimate_code ec
 join doc_group dg 
 on ec.EstimateCode_ID = dg.TargetID
 join doc_file df
 on dg.GroupID = df.GroupID
 where TargetTypeID = ' + cast(@CODECODE_ID as varchar(200)) + 
 ' and TargetID = ec.EstimateCode_ID
 and company = ' + cast(@Company as varchar(50)) +
' and CodeIndent like ''' + @EstimateCode_Indent + '%''
 GROUP BY ec.EstimateCode_ID, EC.Phs_Code, ec.Estimate_ID'
 exec(@SQL)


 select @SQL ='
 insert #DriverTable(Type, Rel_ID, Doc_Count, Phs_Code, Estimate_ID, CopiedToType)
 select ''ESTIMATENODE'', ec.EstimateNode_ID, count(*), null, ' + cast(@Estimate_ID as varchar(50)) + ', ''PROJECTNODE''
 from ' + @HR_DB + '..estimate_nodes ec
 join doc_group dg 
 on ec.EstimateNode_ID = dg.TargetID
 join doc_file df
 on dg.GroupID = df.GroupID
 where TargetTypeID = ' + cast(@NODECODE_ID as varchar(200)) + 
 ' and TargetID = ec.EstimateNode_ID
 and company = ' + cast(@Company as varchar(50)) +
' and CodeIndent like ''%''
 GROUP BY ec.EstimateNode_ID, ec.Estimate_ID'
 exec(@SQL)

 select @SQL =' 
UPDATE #DriverTable
SET CopiedTo_ID = Rel_ID
from #DriverTable dt
join ' + @HR_DB + '..project_head ph
on ph.Estimate_ID = Rel_ID
where dt.CopiedToType = ''PROJECTHEADER''


UPDATE #DriverTable
SET CopiedTo_ID = Rel_ID
from #DriverTable dt
join ' + @HR_DB + '..project_code ph
on ph.Estimatecode_ID = Rel_ID
where dt.CopiedToType = ''PROJECTCODE''


UPDATE #DriverTable
SET CopiedTo_ID = Rel_ID
from #DriverTable dt
join ' + @HR_DB + '..project_nodes ph
on ph.EstimateNode_ID = Rel_ID
where dt.CopiedToType = ''PROJECTNODE''
'
 exec(@SQL)

--  select @SQL = '
--  declare @cDestEstimate_ID varchar(1000)
-- 
--  select @cDestEstimate_ID = pri_num
--  from ' + @HR_DB + '..PROJCONV_HEADER 
--  WHERE srcID = ' + cast(@Estimate_ID as varchar(50)) + '

-- 
--  -- assign to header and codes regardless of destination
--  --header first
--  update #DriverTable
--  set CopiedTo_ID = @cDestEstimate_ID
--  where Type = ''ESTIMATEHEADER''
-- 
--  --codes
--  update #DriverTable
--  set CopiedTo_ID = Proj_Phase_ID
--  from #DriverTable dt
--  join ' + @HR_DB + '..PROJCONV_HEADER PC_H
--  on pc_h.srcid = dt.Estimate_id 
--  join ' + @HR_DB + ' ..proj_phase ph
--  on dt.Phs_code = ph.Phs_code
--  and pc_h.pri_num = ph.pri_num
--  join ' + @HR_DB + '..estimate_code c
--  on c.phs_code = ph.phs_code
--  and c.estimate_id = pc_h.srcid
--  WHERE srcID = ' + cast(@Estimate_ID as varchar(100)) + '
--  AND srcType = ''EST''
--  and prp_comp = ''_''
--  and ph.phs_code <> ''_''
-- 
--  and Type = ''CODECODE''
--  and CopiedFrom_Completed = 0'
--  exec(@SQL)


 select *
 from #DriverTable
 where isNull(Doc_Count,0) > 0
 and CopiedTo_ID is not null










Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_EstimateWordMerge]') and xtype = 'P ')  
 drop Procedure sp_EstimateWordMerge
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE  Procedure [dbo].[sp_EstimateWordMerge] (@Estimate_ID int, @TRDB varchar(50), @HRDB varchar(50))

AS
--
--Declare @Estimate_ID int, @TRDB varchar(50), @WebDB varchar(50), @HRDB varchar(50)
--Select @Estimate_ID = 53, @TRDB = 'TR_Q62', @HRDB = 'HR_Q62'


Declare @str varchar(8000)

set @str = 'Select IsNull(eh.CustomNumber,'''') as [Custom Number], IsNull(eh.ContactPhone,'''') as [Estimate Contact Phone], IsNull(eh.Cust_Name,'''') as [Estimate Name],
IsNull(eh.ContactEmail,'''') as [Estimate Contact Email], IsNull(eh.ContactFax,'''') as [Estimate Contact Fax], ISNULL(eh.Notes,'' '') as [Estimate Notes], 
ISNULL(eh.EstimateDescription,'' '') as [Estimate Description], 
ISNULL((Select Name from ' + @HRDB + '..Estimators Where Estimator_Code = eh.Estimator_Code),''None Assigned'') as Estimator,
Convert(varchar(12),eh.EstimateDate) as [Estimate Date], eh.LegalDescription as [Estimate Legal Description],eh.EstimateSize as [Estimate Size],
Case When EST_Type = ''C'' Then ''Customer'' When EST_Type = ''P'' then ''Prospect'' Else ''Internal'' End as [Estimate Type],
IsNull(p.pri_proj_id,0) as [Project Number], 
IsNull(p.pri_desc,'''') as [Project Description],
IsNull(p.pri_ship_name,'''') as [Shipping Name],
RTRIM(IsNull(p.pri_ship_address1,'''') + '' '' + IsNull(p.pri_ship_address2,'''') + '' '' + IsNull(p.pri_ship_address3,''''))  as [Shipping Street],
IsNull(p.pri_ship_city,'''') as [Shipping City], IsNull(p.pri_ship_prov,'''') as [Shipping State Prov],
IsNull(p.pri_ship_postal,'''') as [Shipping Zip Postal Code],
C.Customer_code, Case When EST_Type = ''C'' Then C.Name When EST_Type = ''P'' Then pr.KnownAs Else ''Internal'' End as [Name],
Case When EST_Type = ''C'' Then IsNull(C.Bill_Address_1,'''') + '' '' + IsNull(C.Bill_Address_2,'''') + '' '' + IsNull(C.Bill_Address_3,'''') 
     When EST_Type = ''P'' Then IsNull(pr.BusinessStreet,'''') Else ''Internal'' End as [Street],
Case When EST_Type = ''C'' Then IsNull(C.Bill_City,'''') When EST_Type = ''P'' Then IsNull(pr.BusinessCity,'''') Else ''Internal'' End as [City],
Case When EST_Type = ''C'' Then IsNull(C.Bill_State,'''') When EST_Type = ''P'' Then IsNull(pr.BusinessState,'''') Else ''Internal'' End as [State Prov],
Case When EST_Type = ''C'' Then IsNull(C.Bill_Zip,'''') When EST_Type = ''P'' Then IsNull(pr.BusinessPostalCode,'''') Else ''Internal'' End as [Zip Postal Code],
Case When EST_Type = ''C'' Then IsNull(C.Bill_Country_Code,'''') When EST_Type = ''P'' Then IsNull(pr.BusinessCountry,'''') Else ''Internal'' End as [Country],
Case When EST_Type = ''C'' Then IsNull(C.Telephone,'''') When EST_Type = ''P'' Then IsNull(pr.BusinessTelephoneNumber,'''') Else ''Internal'' End as [Phone],
Case When EST_Type = ''C'' Then IsNull(C.Fax,'''') When EST_Type = ''P'' Then IsNull(pr.BusinessFaxNumber,'''') Else ''Internal'' End as [Fax], 
Case When EST_Type = ''C'' Then IsNull(C.Cust_Email,'''') When EST_Type = ''P'' Then IsNull(pr.Email1Address,'''') Else ''Internal'' End as [Email]
from ' + @HRDB + '..estimate_head eh 
left join ' + @HRDB + '..proj_id p on p.pri_num = eh.pri_num
left outer join ' + @TRDB + '..Customers C on eh.Customer_ID = C.Customer_ID
left outer join Contact pr on eh.Customer_ID = pr.ID
Where eh.Estimate_ID = ' + convert(varchar(50),@Estimate_ID)

exec(@str)





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_FA_Routing_EquipmentCreate]') and xtype = 'P ')  
 drop Procedure sp_FA_Routing_EquipmentCreate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE   proc [dbo].[sp_FA_Routing_EquipmentCreate]
@ID int,
@Status char(1)
as

--declare 
--@ID int,
--@Status char(1)

--select @id =23


begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@modref varchar(100),
	@stat varchar(50)

    
	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db= treasurydbname  from companies where autoid = @CompanyID
	 

	select @modref=module_reference_id, @stat=status from approvals_requested where id=@id

	if( @stat = 'declined' )
	begin
		--set @sql ='delete '+@hr_db+'..Equip_ID  where eqi_num='+@modref
        set @sql ='update '+@tr_db+'..Equip_ID set eqi_status =''Q''  where eqi_num='+@modref
	    exec( @sql )		
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..Equip_ID set eqi_status =''A''  where eqi_num='+@modref
        
		exec( @sql )
	end

	

end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Fill_ServerSubMod]') and xtype = 'P ')  
 drop Procedure sp_Fill_ServerSubMod
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_Fill_ServerSubMod] as
begin
	declare @CompanyID int, @SM_ID int, @NAME varchar(50), @FLAVOUR varchar(20), @SERVER_PROC varchar(100), @EXEC_TYPE varchar(1), @APP_NAME varchar(50)
	
	--Clean up inactive companies
	delete from SERVER_SUB_MODULE where companyid not in (
		select autoid from companies where active = 1
		union 
		select -1
	)
	
	--Cleanup duplicate servers per company
	declare @dup_CompanyID int, @dup_name varchar(50)

	declare cur_dup cursor for	
	select companyid, Name 
	from SERVER_SUB_MODULE 
	group by companyid, name 
	having count(*) > 1
	
	open cur_dup 
	fetch cur_dup into @dup_CompanyID, @dup_name
	while @@fetch_status=0
	begin
		if exists( select * from SERVER_SUB_MODULE where companyid=@dup_CompanyID and name=@dup_name and run='T' )
		begin
			-- leave the server that ran last
			delete from SERVER_SUB_MODULE where companyid=@dup_CompanyID and name=@dup_name and ID not in (
				select top 1 ID 
				from SERVER_SUB_MODULE 
				where companyid=@dup_CompanyID and name=@dup_name 
				order by case when isnull(run,'F') = 'T' then 0 else 1 end, last_run desc
			)
		end
		else if exists( select * from SERVER_SUB_MODULE where companyid=@dup_CompanyID and name=@dup_name and start_date is not null )
		begin
			-- leave the server that was configured first
			delete from SERVER_SUB_MODULE where companyid=@dup_CompanyID and name=@dup_name and ID not in  (
				select top 1 ID 
				from SERVER_SUB_MODULE 
				where companyid=@dup_CompanyID and name=@dup_name 
				order by start_date, last_run desc
			)
		end
		else
		begin
			-- leave the first and remove the rest
			delete from SERVER_SUB_MODULE where companyid=@dup_CompanyID and name=@dup_name and ID not in  (
				select top 1 ID 
				from SERVER_SUB_MODULE 
				where companyid=@dup_CompanyID and name=@dup_name
				order by ID asc
			)
		end
		
		fetch cur_dup into @dup_CompanyID, @dup_name
	end			
	close cur_dup
	deallocate cur_dup
	
	
	--Create new unscripted servers
	declare cur_co cursor for
	select autoid from companies where active = 1
	union 
	select -1

	open cur_co
	fetch cur_co into @CompanyID
	while @@fetch_status=0
	begin

		declare cur_ssm cursor for
		select sm_id, name, flavour, server_proc, EXEC_TYPE, isnull(APP_NAME,NAME) 
		from SERVER_SUB_MOD_MASTER

		open cur_ssm
		fetch cur_ssm into @SM_ID, @NAME, @FLAVOUR, @SERVER_PROC, @EXEC_TYPE, @APP_NAME
		while @@fetch_status=0
		begin
			if @NAME != 'PO Notifications' and @FLAVOUR = 'WEB'
			begin--delete web flavours that had company ids (now support single instance instead of multi-instance)
				delete SERVER_SUB_MODULE where APP_NAME=@APP_NAME and FLAVOUR = @FLAVOUR and COMPANYID != -1
				if @CompanyID = -1
				begin
					if exists( select * from SERVER_SUB_MODULE where sm_id=@SM_ID and companyid=@CompanyID and isnull(APP_NAME, NAME)=@APP_NAME )
					begin
						update SERVER_SUB_MODULE set flavour=@FLAVOUR, server_proc=@SERVER_PROC, EXEC_TYPE=@EXEC_TYPE, name=@NAME where sm_id=@SM_ID and companyid=@CompanyID and isnull(APP_NAME,NAME)=@APP_NAME
					end 
					else
					begin
						INSERT INTO SERVER_SUB_MODULE ( SM_ID, COMPANYID, NAME, ISRUNNING, START_DATE, PERIOD, PERIOD_AMT, RUN, LAST_RUN, FLAVOUR, SERVER_PROC, EXEC_TYPE, APP_NAME ) 
						VALUES ( @SM_ID, @CompanyID, @NAME, 'F', null, null, null, 'F', null, @FLAVOUR, @SERVER_PROC, @EXEC_TYPE, @APP_NAME )
					end		
				end
			end
			else if @CompanyID != -1
			begin		
				if exists( select * from SERVER_SUB_MODULE where sm_id=@SM_ID and companyid=@CompanyID and isnull(APP_NAME,NAME)=@APP_NAME )
				begin
					update SERVER_SUB_MODULE set flavour=@FLAVOUR, server_proc=@SERVER_PROC, EXEC_TYPE=@EXEC_TYPE, name=@NAME where sm_id=@SM_ID and companyid=@CompanyID and isnull(APP_NAME,NAME)=@APP_NAME
				end 
				else
				begin
					INSERT INTO SERVER_SUB_MODULE ( SM_ID, COMPANYID, NAME, ISRUNNING, START_DATE, PERIOD, PERIOD_AMT, RUN, LAST_RUN, FLAVOUR, SERVER_PROC, EXEC_TYPE, APP_NAME ) 
					VALUES ( @SM_ID, @CompanyID, @NAME, 'F', null, null, null, 'F', null, @FLAVOUR, @SERVER_PROC, @EXEC_TYPE, @APP_NAME )
				end		
			end		
		fetch cur_ssm into @SM_ID, @NAME, @FLAVOUR, @SERVER_PROC, @EXEC_TYPE, @APP_NAME
		end
		close cur_ssm
		deallocate cur_ssm
		
	fetch cur_co into @CompanyID
	end
	close cur_co
	deallocate cur_co
		
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_fill_working_security_kbi_module]') and xtype = 'P ')  
 drop Procedure sp_fill_working_security_kbi_module
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec sp_fill_working_security_kbi_module 'hm'
CREATE proc [dbo].[sp_fill_working_security_kbi_module]
@username varchar(500)
as
begin
	
	delete from working_security_kbi_module where username=@username

	insert into working_security_kbi_module
		select distinct @username, k.masterfillid, dbo.concat_security_kbi_module(k.masterfillid,0)[Description], dbo.concat_security_kbi_module(k.masterfillid,1) as Module
		from security_kbi_instance i 
		join security_kbis k on k.id = i.skbi_id
		join security_kbi_masterfill m on m.masterfillid = k.masterfillid
		where target = @username and k.masterfillid is not null 

		union

		select distinct @username, k.masterfillid, dbo.concat_security_kbi_module(k.masterfillid,0)[Description], dbo.concat_security_kbi_module(k.masterfillid,1) as Module
		from security_kbis k
		join security_kbi_masterfill m on m.masterfillid = k.masterfillid
		where module in(select module from security_kbi_administrators where contactID = 
			(select id from contact where type='user' and knownas=@username) )
		and k.masterfillid is not null
	

end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_FormsManagementCreditRequest]') and xtype = 'P ')  
 drop Procedure sp_FormsManagementCreditRequest
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
-- sp_FormsManagementCreditRequest 111, 'A'
CREATE    proc [dbo].[sp_FormsManagementCreditRequest] @AR_ID int , @A_or_D varchar ( 1 )
as
  declare @OH_ID int ,
          @dk_db varchar ( 50 ),
          @SQL varchar ( 500 ),
		  @Company_id int

  IF   ( @A_or_D = 'A' )
  BEGIN
	SELECT @Company_id = Companyid from Approvals_Requested where id = @AR_ID
    SELECT @dk_db = DocketDBNAME FROM COMPANIES WHERE AutoID = @Company_Id

    IF (NOT @dk_db IS NULL)
    BEGIN
      SELECT @OH_ID = Module_Reference_ID FROM Approvals_Requested WHERE ID = @AR_ID

      IF (NOT @OH_ID IS NULL)
      BEGIN
        SET @SQL = 'UPDATE ' + @dk_db + '..D_Head SET oh_CreditHold_H=NULL, oh_CreditApproved_YN=''Y'' WHERE oh_ID=' + CAST ( @OH_ID AS varchar ( 10 ))
        EXEC ( @SQL )
      END
    END
  END
    



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_FormsManagment_ReverseRecall]') and xtype = 'P ')  
 drop Procedure sp_FormsManagment_ReverseRecall
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
-- sp_FormsManagementCreditRequest 111, 'A'
create proc sp_FormsManagment_ReverseRecall @AR_ID int , @AN_ID int
as
  declare @OH_ID int ,
          @dk_db varchar ( 50 ),
          @SQL varchar ( 500 ),
		  @Company_id int,
		  @Result varchar(100)
 
	SELECT @Result = 'OK'

	SELECT @Company_id = Companyid from Approvals_Requested where id = @AR_ID
    SELECT @dk_db = DocketDBNAME FROM COMPANIES WHERE AutoID = @Company_Id

    IF (NOT @dk_db IS NULL)
    BEGIN
      SELECT @OH_ID = Module_Reference_ID FROM Approvals_Requested WHERE ID = @AR_ID

      IF (NOT @OH_ID IS NULL)
      BEGIN
		Exec sp_Approval_RevertStatus @AR_ID, @AN_ID, @Result output

		IF(@Result = 'OK')
		BEGIN
			SET @SQL = 'UPDATE ' + @dk_db + '..D_Head SET oh_CreditHold_H = ''H'', oh_CreditApproved_YN = NULL WHERE oh_ID=' + CAST ( @OH_ID AS varchar ( 10 ))
			EXEC ( @SQL )
		END
      END
    END

	Select @Result [Result]
  
    
--Select * From System_Exception



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_GenerateScripts]') and xtype = 'P ')  
 drop Procedure sp_GenerateScripts
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure [dbo].[sp_GenerateScripts] @ScriptBuildType varchar(1) = 'D' AS
/*
@ScriptBuildType = 'D'(rop and create) is fast
@ScriptBuildType = 'A'(lter) is slow
@ScriptBuildType = 'C'(reate only) is fast
*/
--declare @ScriptBuildType varchar(1) select @ScriptBuildType = 'A'
set nocount on

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[__Scripts]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table __Scripts
create table __Scripts(id int identity(1,1) not null, SQL varchar(8000) null, xType varchar(10))

if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[__ScriptProgress]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)	
create table __ScriptProgress(id int identity(1,1) not null, ScriptObject varchar(8000) null, oType varchar(25), xCount int, tCount int)
truncate table __ScriptProgress

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#SQL'))
drop table #SQL
create table #SQL(SQL varchar(8000), id int not null identity(1,1))

declare @Name varchar(500), @XType varchar(10), @SQL varchar(8000), @NewLine char(2), @xCount int, @tCount int

set @NewLine=char(13)+char(10)

select @tCount = count(*), @xCount = 0
from sysobjects
where (xtype = 'P' or xtype = 'FN' or xtype = 'V' or xtype='TR') and status >= 0 
--and name = 'usp_IN_AccountSubCodeGetByAccountNumber'

insert __ScriptProgress(ScriptObject, oType, xCount, tCount)
select 'Initializing', 'N/A', 0, @tCount

declare PrincCursor cursor
read_only
for
	 select name, xtype
	 from sysobjects
	 where (xtype = 'P' or xtype = 'FN' or xtype = 'V' or xtype='TR') and status >= 0 
--	and name = 'usp_IN_AccountSubCodeGetByAccountNumber'
	 order by xtype, name
	 
open PrincCursor
fetch next from PrincCursor into @name, @xtype
while (@@fetch_status <> -1)
begin
	 if (@@fetch_status <> -2)
	 begin  			
		truncate table #SQL  
		--quick build, does drop / create 
		if @ScriptBuildType = 'D'
		begin
			select @SQL = 'if exists (select * from dbo.sysobjects where id = object_id(N''[dbo].[' + @Name + ']'') and xtype = ''' + @xtype + ''')  ' +  char(13) + char(10) + ' drop '
			if @xtype = 'TR' 
				select @SQL = @SQL + 'Trigger ' + @Name
			if @xtype = 'P' 
				select @SQL = @SQL + 'Procedure ' + @Name
			if @xtype = 'FN' 
				select @SQL = @SQL + 'Function ' + @Name
			if @xtype = 'V' 
				select @SQL = @SQL + 'View ' + @Name 
			insert #SQL select @SQL 
		end

		--find the first line and update to get alter
		declare @Subject varchar(20)
		select @Subject = case @xtype when 'TR' then 'Trigger'
								when 'P' then 'Proc'
								when 'FN' then 'Function'
								when 'V' then 'View' end
		
		update __ScriptProgress set ScriptObject = @name, oType = @Subject, xCount = @xCount
		select @xCount = @xCount + 1
					
		insert #SQL select char(13) + char(10) + 'Go' + char(13) + char(10)
		if @Name in ('fn_GetConcatInvNo_New', 'sp_WMSFull_CreatePackStr', 'RM_CreateStepInstance', 'scSPFillscMethodInstances', 'WS_DM_DeleteAttachment', 
			'WS_DM_ClearAttachments', 'WS_DM_AddAttachment', 'WS_SyncEnd', 'WS_FLEM_Attachment_PostPut', 'WS_FLEM_LogHeader_PostPut')
			insert #SQL select 'SET QUOTED_IDENTIFIER ON' + char(13) + char(10)
		else
			insert #SQL select 'SET QUOTED_IDENTIFIER OFF' + char(13) + char(10)
			
		insert #SQL select 'Go' + char(13) + char(10)
		insert #SQL select 'SET ANSI_NULLS ON ' + char(13) + char(10)
		insert #SQL select 'Go' + char(13) + char(10)
		
		insert #SQL 
		exec('sp_helptext '''+ @Name +'''')
		
		insert #SQL select char(13) + char(10) + 'Go' + char(13) + char(10)
		insert #SQL select 'SET QUOTED_IDENTIFIER OFF' + char(13) + char(10)
		insert #SQL select 'Go' + char(13) + char(10)
		insert #SQL select 'SET ANSI_NULLS ON ' + char(13) + char(10)
		insert #SQL select 'Go' + char(13) + char(10)

		--slow build, does alter script required for published objects in replication (these do not allow drops)
		if @ScriptBuildType = 'A'
		begin
			--now do the alter
			print @name
						
			update #SQL 
			set sql = replace(dbo.DBA_ConditionText(sql, @xtype), 'create ' + @Subject, 'alter ' + @Subject)
			where SQL like '%create%' + @Subject + '%'
		end
		
		--inserts the alter/drop/create script
		insert __Scripts (SQL, xtype)
		select sql, @xtype from #SQL    
		order by id
	 end

fetch next from PrincCursor into @name, @xtype
end 

close PrincCursor
deallocate PrincCursor

update __ScriptProgress set ScriptObject = 'Scripting Complete', oType = 'N/A', xCount = @tCount

select cast(SQL as varchar(8000)) from __Scripts order by id



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_Glass_Parts]') and xtype = 'P ')  
 drop Procedure sp_Get_Glass_Parts
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

--exec sp_Get_Glass_Parts 'hm', 56020, 0, 12
CREATE PROCEDURE [dbo].[sp_Get_Glass_Parts]
--declare
@username varchar(100),
@veh_id int,
@Whse_ID int,
@companyID int
AS
BEGIN
--set @username = 'hm'
--set @veh_id = 56020
--set @Whse_ID = 1
--set @companyID = 12

declare 
@parts int,
@loop_cnt int,
@current_glass_id varchar(20),
@eff_dt datetime,
@override_cnt int,
@pfnumber1 float, 
@pfnumber2 float, 
@pfnumber3 float, 
@pfnumber4 float, 
@pfnumber5 float, 
@pfnumber6 float, 
@pfnumber7 float, 
@pfnumber8 float, 
@pfnumber9 float, 
@pfnumber10 float,
@ranking int,
@hours float,
@notes varchar(5000),
@srp float,
@timeRestriction datetime,
@MAKE_MODEL_ID int,
@tr_db varchar(50),
@strSQL varchar(8000),
@whse_counter int,
@num_whses int,
@available_qty int,
@current_whse int,
@Stocking_whse_id int,
@Stocking_company_id int,
@Stocking_TR_DB varchar(50),
@whse_name varchar(50)


set @loop_cnt = 0
set @current_glass_id = -1


select @tr_db=treasurydbname from companies where autoid=@companyID

CREATE TABLE #whse_ids( whse_id int, company_id int )
--gets all of the warehouses from the current company that arnt stocking warehouses.
set @strSQL = 
'CREATE TABLE #whse_ids1 ( whse_id int, company_id int )
insert into #whse_ids1
select u.whse_id, u.company_id from user_rights u
join '+@tr_db+'..warehouse w on w.whse_id = u.whse_id
where contact_id=(select contactid from '+@tr_db+'..mluser where name='''+@username+''') and u.company_id='
+cast(@companyID as varchar(15))+' and mainstocking_id is not null
select * from #whse_ids1
DROP TABLE #whse_ids1'
delete from #whse_ids
insert into #whse_ids(whse_id, company_id) exec (@strSQL)
select @num_whses=count(*) from #whse_ids
-----------------------------------------------------
--gets the tr_database name that the stocking warehouse is in
set @strSQL =
'select top 1 mainstocking_id, company_id from '+@tr_db+'..warehouse where whse_id in(
select u.whse_id from user_rights u
join '+@tr_db+'..warehouse w on w.whse_id = u.whse_id
where contact_id=(select contactid from '+@tr_db+'..mluser where name='''+@username+''') and u.company_id='+cast(@companyID as varchar(15))+' and mainstocking_id is not null)'

CREATE TABLE #tr_stocking ( whse_id int, company_id int )
INSERT #tr_stocking exec ( @strSQL )
declare @cnt int
select @cnt=count(*) from #tr_stocking
if @cnt > 0
begin
	SELECT @Stocking_whse_id=whse_id, @Stocking_company_id=company_id from #tr_stocking
	DROP TABLE #tr_stocking
	select @Stocking_TR_DB=treasurydbname from companies where autoid=@Stocking_company_id


	-----------------------------------------------------------
	-- updates the working table that contains the names of the warehouses to be displayed in the grid headers
	delete from working_ws_qty_column_headers where username=@username and table_type='working_glass_parts'
	insert into working_ws_qty_column_headers (username, table_type)values (@username, 'working_glass_parts')


	set @whse_counter = 1	
	set @current_whse = -1
	CREATE TABLE #tr_name ( name varchar(50) )
	--the warehouse names in the current company
	while( @whse_counter <= @num_whses )
	begin

		select top 1 @current_whse=whse_id from #whse_ids where whse_id > @current_whse order by whse_id
		delete from #tr_name
		set @strSQL = 'select description from '+@tr_db+'..warehouse where whse_id='+cast(@current_whse as varchar(15))
		insert into #tr_name exec( @strSQL )
		select top 1 @whse_name=replace(name,'''', '''''') from #tr_name
		set @strSQL = 'update working_ws_qty_column_headers set hdr'+cast(@whse_counter as varchar(10))+'='''+@whse_name+''' where username='''+@username+''' and table_type=''working_glass_parts'' '
		exec( @strSQL )
		set @whse_counter = @whse_counter + 1
	end
	--the stocking warehouse name
	delete from #tr_name
	set @strSQL = 'select description from '+@Stocking_TR_DB+'..warehouse where whse_id='+cast(@Stocking_whse_id as varchar(15))
	insert into #tr_name exec( @strSQL )
	select top 1 @whse_name=replace(name,'''', '''''') from #tr_name
	DROP TABLE #tr_name
	set @strSQL = 'update working_ws_qty_column_headers set hdr'+cast(@whse_counter as varchar(10))+'='''+@whse_name+''' where username='''+@username+''' and table_type=''working_glass_parts'' '
	exec( @strSQL )

	-------------------------------------------------------

	--clears out the working table for the current user.
	delete from working_glass_parts where username = @username
	--inserts all of the current glass parts that are associated to the specified vehicle id
	insert into working_glass_parts(part_num, nags_glass_id, description, dimension, ureth, labour, clips, molding, nags_price, effective_date, username, make_model_id,PFValue1, PFValue2, PFValue3, PFValue4, PFValue5, PFValue6, PFValue7, PFValue8, PFValue9, PFValue10)
	SELECT distinct ng.NAGS_GLASS_ID + '' + ngp.GLASS_COLOR_CD + '' + ngp.ATCHMNT_FLAG AS [Part Num], ng.NAGS_GLASS_ID, 
	np.DSC + ' ' +
	case when p.name is null then '' else '['+ p.name + ']' end + 
	case when s.name is null then '' else '['+ s.name + ']' end + 
	case when ng.ANT_FLAG = 'Y' then '[Ant]' else '' end + 
	case when HEATED_FLAG = 'Y' then '[Heated]' else '' end AS Description,  
	CAST(ng.BLK_SIZE1 AS varchar) + ' X ' + CAST(ng.BLK_SIZE2 AS varchar) AS Dimension, ng.tube_qty AS Ureth, 
	ngc.NAGS_LABOR AS Labour, ngc.CLIPS_FLAG AS Clips, ngc.MLDING_FLAG AS Molding, ngp.PRC AS [NAGS Price],  
	ngp.EFF_DT AS [Effective Date], @username, v.MAKE_MODEL_ID, pfc.PFValue1, pfc.PFValue2,pfc.PFValue3,
	pfc.PFValue4,pfc.PFValue5,
	pfc.PFValue6,pfc.PFValue7,pfc.PFValue8,pfc.PFValue9,pfc.PFValue10
	FROM NAGS_GLASS ng 
	INNER JOIN NAGS_GLASS_CFG ngc ON ng.NAGS_GLASS_ID = ngc.NAGS_GLASS_ID 
	INNER JOIN NAGS_GLASS_PRC ngp ON ng.NAGS_GLASS_ID = ngp.NAGS_GLASS_ID 
	INNER JOIN VEH_GLASS vg ON ng.NAGS_GLASS_ID = vg.NAGS_GLASS_ID 
	INNER JOIN NAGS_PREFIX np ON np.prefix_cd = ng.prefix_cd
	INNER JOIN VEH v ON v.VEH_ID = vg.VEH_ID
	INNER JOIN GLASS_ON_OPENING goo ON goo.NAGS_GLASS_ID = ng.NAGS_GLASS_ID
	LEFT OUTER JOIN PRICE_FACTOR_CTRL pfc ON pfc.Prefix = ng.PREFIX_CD and pfc.companyid=@companyID
	and Whse_id = @Whse_id
	LEFT OUTER JOIN POS p ON p.POS_CD = goo.POS_CD
	LEFT OUTER JOIN SIDE s ON s.SIDE_CD = goo.SIDE_CD
	WHERE (vg.VEH_ID = @veh_id)  order by [Part Num]

	--select * from  working_glass_parts  

	update working_glass_parts set Description = (
	select '('+SUBSTRING(cast(min( v.model_yr )as varchar),3,4) + '-' + SUBSTRING(cast(max( v.model_yr )as varchar),3,4) + ')'
	from working_glass_parts wgp
	join veh_glass vg on wgp.NAGS_GLASS_ID = vg.NAGS_GLASS_ID
	join veh v ON v.veh_id = vg.veh_id
	where wgp.make_model_id=v.make_model_id and username=@username )+ ' ' + Description where username = @username

	--gets the number of distinct part numbers for the specified user
	select @parts=count( distinct part_num ) from working_glass_parts where username=@username
	--loops through each one of those parts
	while( @loop_cnt < @parts )
	begin
		--increases the loop counter 
		set @loop_cnt = @loop_cnt + 1
		--selectes the most current part number based on its effective date
		select top 1 @current_glass_id=part_num, @MAKE_MODEL_ID=make_model_id, @eff_dt=effective_date
		from working_glass_parts 
		where part_num > @current_glass_id and effective_date < getdate() and username=@username
		order by part_num, effective_date desc
		--deletes all other parts of the same part number that dates arnt the most current
		delete from working_glass_parts_interchange
		where part_num = @current_glass_id and make_model_id<>@MAKE_MODEL_ID and username=@username
		delete from working_glass_parts
		where part_num = @current_glass_id and effective_date <> @eff_dt and username=@username
	end

	set @loop_cnt = 0
	set @current_glass_id = -1
	select @parts=count( distinct part_num ) from working_glass_parts where username=@username
	while( @loop_cnt < @parts )
	begin
		set @override_cnt = 0
		set @loop_cnt = @loop_cnt + 1
		select top 1 @current_glass_id=part_num from working_glass_parts where part_num > @current_glass_id and username=@username
		select @override_cnt=count( * ) from parts_catalogue where override='T' and referenceid=@current_glass_id
		select  @ranking = Ranking,@hours = Hours, @Notes = Notes, @srp = Srp, @timeRestriction = TimeRestriction from PARTS_CATALOGUE where ReferenceID = @current_glass_id
		update working_glass_parts set  Ranking = @ranking, Hours = @hours, Notes = @notes, Srp = @srp, TimeRestriction = @timeRestriction where part_num = @current_glass_id and username=@username
		if( @override_cnt > 0 )
		begin
			select @pfnumber1=pfnumber1, @pfnumber2=pfnumber2, @pfnumber3=pfnumber3, @pfnumber4=pfnumber4, @pfnumber5=pfnumber5, 
				@pfnumber6=pfnumber6, @pfnumber7=pfnumber7, @pfnumber8=pfnumber8, @pfnumber9=pfnumber9, @pfnumber10=pfnumber10
			from parts_catalogue where referenceid=@current_glass_id
			update working_glass_parts set pfvalue1=@pfnumber1, pfvalue2=@pfnumber2, pfvalue3=@pfnumber3, pfvalue4=@pfnumber4, pfvalue5=@pfnumber5, 
				pfvalue6=@pfnumber6, pfvalue7=@pfnumber7, pfvalue8=@pfnumber8, pfvalue9=@pfnumber9, pfvalue10=@pfnumber10, override='T'
			where part_num = @current_glass_id and username=@username
		end
		


		-----------------------------------------------------------
		--WAREHOUSE QUANTITIES
		--gets the quantities available for the current part
		set @whse_counter = 1	
		set @current_whse = -1
		
		--the qty in the current companies warehouses
		while( @whse_counter <= @num_whses )
		begin
			select top 1 @current_whse=whse_id from #whse_ids where whse_id > @current_whse order by whse_id
			set @strSQL = @tr_db+'..sp_get_warehouse_qty_available '''+@tr_db+''', '''+@current_glass_id+''', '''+@username+''', '+cast(@current_whse as varchar(15))+''
			exec( @strSQL )

			set @available_qty = 0
			CREATE TABLE #qty_aval (var int)
			INSERT #qty_aval exec ( 'select qty_available from '+@tr_db+'..working_ws_available_qty where username='''+@username+'''')
			SELECT @available_qty = var from #qty_aval
			DROP TABLE #qty_aval
			set @strSQL = 'update working_glass_parts set qty'+cast(@whse_counter as varchar(10))+'='+cast(@available_qty as varchar(15))+' where username='''+@username+''' and part_num = '''+@current_glass_id+''' '
			exec( @strSQL )
			set @whse_counter = @whse_counter + 1
		end

		--the qty in the stocking warehouse
		set @strSQL = @tr_db+'..sp_get_warehouse_qty_available '''+@Stocking_TR_DB+''', '''+@current_glass_id+''', '''+@username+''', '+cast(@Stocking_whse_id as varchar(15))+''
		exec( @strSQL )
		
		set @available_qty = 0
		CREATE TABLE #st_qty_aval (var int)
			INSERT #st_qty_aval exec ( 'select qty_available from '+@Stocking_TR_DB+'..working_ws_available_qty where username='''+@username+'''')
			SELECT @available_qty = var from #st_qty_aval
			DROP TABLE #st_qty_aval
			set @strSQL = 'update working_glass_parts set qty'+cast(@whse_counter as varchar(10))+'='+cast(@available_qty as varchar(15))+' where username='''+@username+''' and part_num = '''+@current_glass_id+''' '
			exec( @strSQL )
		--------------------------------------------------------
		
	end
	DROP TABLE #whse_ids
end
else
begin
select 'User Warehouse Access Setup Incomplete'
end
--select * from working_glass_parts where username = @username
END











Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_Glass_Parts_interchange]') and xtype = 'P ')  
 drop Procedure sp_Get_Glass_Parts_interchange
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
-- exec sp_Get_Glass_Parts_interchange 'hm', 'fb21072', 13, 1, 12
CREATE procedure [dbo].[sp_Get_Glass_Parts_interchange]
@username varchar(100),
@glassID char(7),
@MAKE_MODEL_ID int,
@whse_id int,
@companyID int
AS
BEGIN

declare 
@parts int,
@loop_cnt int,
@current_glass_id varchar(20),
@eff_dt datetime,
@override_cnt int,
@pfnumber1 float, 
@pfnumber2 float, 
@pfnumber3 float, 
@pfnumber4 float, 
@pfnumber5 float, 
@pfnumber6 float, 
@pfnumber7 float, 
@pfnumber8 float, 
@pfnumber9 float, 
@pfnumber10 float,
@ranking int,
@hours float,
@notes varchar(5000),
@srp float,
@timeRestriction datetime,
@tr_db varchar(50),
@strSQL varchar(8000),
@whse_counter int,
@num_whses int,
@available_qty int,
@current_whse int,
@Stocking_whse_id int,
@Stocking_company_id int,
@Stocking_TR_DB varchar(50),
@whse_name varchar(50)


set @loop_cnt = 0
set @current_glass_id = -1


select @tr_db=treasurydbname from companies where autoid=@companyID
CREATE TABLE #whse_ids( whse_id int, company_id int )
--gets all of the warehouses from the current company that arnt stocking warehouses.
set @strSQL = 
'CREATE TABLE #whse_ids1 ( whse_id int, company_id int )
insert into #whse_ids1
select u.whse_id, u.company_id from user_rights u
join '+@tr_db+'..warehouse w on w.whse_id = u.whse_id
where contact_id=(select contactid from '+@tr_db+'..mluser where name='''+@username+''') and u.company_id='
+cast(@companyID as varchar(15))+' and mainstocking_id is not null
select * from #whse_ids1
DROP TABLE #whse_ids1'
delete from #whse_ids
insert into #whse_ids(whse_id, company_id) exec (@strSQL)
select @num_whses=count(*) from #whse_ids
-----------------------------------------------------
--gets the tr_database name that the stocking warehouse is in
set @strSQL =
'select top 1 mainstocking_id, company_id from '+@tr_db+'..warehouse where whse_id in(
select u.whse_id from user_rights u
join '+@tr_db+'..warehouse w on w.whse_id = u.whse_id
where contact_id=(select contactid from '+@tr_db+'..mluser where name='''+@username+''') and u.company_id='+cast(@companyID as varchar(15))+' and mainstocking_id is not null)'

CREATE TABLE #tr_stocking ( whse_id int, company_id int )
INSERT #tr_stocking exec ( @strSQL )
declare @cnt int
select @cnt=count(*) from #tr_stocking
if @cnt > 0
begin
	SELECT @Stocking_whse_id=whse_id, @Stocking_company_id=company_id from #tr_stocking
	DROP TABLE #tr_stocking
	select @Stocking_TR_DB=treasurydbname from companies where autoid=@Stocking_company_id
	-----------------------------------------------------------
	-- updates the working table that contains the names of the warehouses to be displayed in the grid headers
	delete from working_ws_qty_column_headers where username=@username and table_type='working_glass_parts_interchange'
	insert into working_ws_qty_column_headers (username, table_type)values (@username, 'working_glass_parts_interchange')


	set @whse_counter = 1	
	set @current_whse = -1
	CREATE TABLE #tr_name ( name varchar(50) )
	--the warehouse names in the current company
	while( @whse_counter <= @num_whses )
	begin

		select top 1 @current_whse=whse_id from #whse_ids where whse_id > @current_whse order by whse_id
		delete from #tr_name
		set @strSQL = 'select description from '+@tr_db+'..warehouse where whse_id='+cast(@current_whse as varchar(15))
		insert into #tr_name exec( @strSQL )
		select top 1 @whse_name=replace(name,'''', '''''') from #tr_name

		set @strSQL = 'update working_ws_qty_column_headers set hdr'+cast(@whse_counter as varchar(10))+'='''+@whse_name+''' where username='''+@username+''' and table_type=''working_glass_parts_interchange'' '
		exec( @strSQL )
		set @whse_counter = @whse_counter + 1
	end
	--the stocking warehouse name
	delete from #tr_name
	set @strSQL = 'select description from '+@Stocking_TR_DB+'..warehouse where whse_id='+cast(@Stocking_whse_id as varchar(15))
	insert into #tr_name exec( @strSQL )
	select top 1 @whse_name=replace(name,'''', '''''') from #tr_name
	DROP TABLE #tr_name
	set @strSQL = 'update working_ws_qty_column_headers set hdr'+cast(@whse_counter as varchar(10))+'='''+@whse_name+''' where username='''+@username+''' and table_type=''working_glass_parts_interchange'' '
	exec( @strSQL )

	-------------------------------------------------------


	--clears out the working table for the current user.
	delete from working_glass_parts_interchange where username = @username 

	insert into working_glass_parts_interchange(part_num, nags_glass_id, description, dimension, ureth, labour, clips,
	molding, nags_price, effective_date, username, make_model_id,PFValue1, PFValue2, PFValue3, PFValue4, PFValue5,
	PFValue6, PFValue7, PFValue8, PFValue9, PFValue10,SRC_Name,NAGS_Note,interchange_notes)
	SELECT distinct ngi.RPLMT_GLASS_ID + '' + ngp.GLASS_COLOR_CD + '' + ngp.ATCHMNT_FLAG AS [Part Num], ngi.RPLMT_GLASS_ID, 
	np.DSC + ' ' +
	case when p.name is null then '' else '['+ p.name + ']' end + 
	case when s.name is null then '' else '['+ s.name + ']' end + 
	case when ng.ANT_FLAG = 'Y' then '[Ant]' else '' end + 
	case when HEATED_FLAG = 'Y' then '[Heated]' else '' end AS Description,  
	CAST(ng.BLK_SIZE1 AS varchar) + ' X ' + CAST(ng.BLK_SIZE2 AS varchar) AS Dimension, ng.tube_qty AS Ureth, 
	ngc.NAGS_LABOR AS Labour, ngc.CLIPS_FLAG AS Clips, ngc.MLDING_FLAG AS Molding, ngp.PRC AS [NAGS Price],  
	ngp.EFF_DT AS [Effective Date], @username, v.make_model_id, pfc.PFValue1, pfc.PFValue2,pfc.PFValue3,pfc.PFValue4,pfc.PFValue5,
	pfc.PFValue6,pfc.PFValue7,pfc.PFValue8,pfc.PFValue9,pfc.PFValue10,null /*src.NAME*/,nte.TEXT,ngi.Notes
	FROM NAGS_GLASS_INTCHG ngi 

	inner join NAGS_GLASS ng on ng.NAGS_GLASS_ID = ngi.RPLMT_GLASS_ID
	INNER JOIN NAGS_GLASS_CFG ngc ON ng.NAGS_GLASS_ID = ngc.NAGS_GLASS_ID 
	INNER JOIN NAGS_GLASS_PRC ngp ON ng.NAGS_GLASS_ID = ngp.NAGS_GLASS_ID 
	INNER JOIN VEH_GLASS vg ON ng.NAGS_GLASS_ID = vg.NAGS_GLASS_ID --uncommented
	INNER JOIN NAGS_PREFIX np ON np.prefix_cd = ng.prefix_cd
	INNER JOIN VEH v ON v.VEH_ID = vg.VEH_ID --uncommented
	INNER JOIN GLASS_ON_OPENING goo ON goo.NAGS_GLASS_ID = ng.NAGS_GLASS_ID
	--LEFT OUTER join INTCHG_SRC src on ngi.INTCHG_SRC_CD = src.INTCHG_SRC_CD
	LEFT OUTER JOIN NOTE nte on ngi.NOTE_ID	= nte.NOTE_ID
	LEFT OUTER JOIN PRICE_FACTOR_CTRL pfc ON pfc.Prefix = ng.PREFIX_CD and whse_id = @whse_id and pfc.companyid=@companyID
	LEFT OUTER JOIN POS p ON p.POS_CD = goo.POS_CD
	LEFT OUTER JOIN SIDE s ON s.SIDE_CD = goo.SIDE_CD
	where ngi.NAGS_GLASS_ID = @glassID and ngi.Deleted <> 'T' order by [Part Num]

	declare @year varchar(15), @mm_id int
	declare cur_nags cursor for
	select distinct make_model_id from working_glass_parts_interchange
	open cur_nags
	fetch cur_nags into @mm_id
	while @@fetch_status=0
	begin
			
		select @year='('+SUBSTRING(cast(min( v.model_yr )as varchar),3,4) + '-' + SUBSTRING(cast(max( v.model_yr )as varchar),3,4) + ')'
		from working_glass_parts_interchange wgp
		join veh_glass vg on wgp.NAGS_GLASS_ID = vg.NAGS_GLASS_ID
		join veh v ON v.veh_id = vg.veh_id
		where wgp.make_model_id=@mm_id and username=@username

		update working_glass_parts_interchange set Description = @year + ' ' + Description where username = @username and make_model_id=@mm_id

		fetch cur_nags into @mm_id
	end
	close cur_nags
	deallocate cur_nags


	--gets the number of distinct part numbers for the specified user
	select @parts=count( distinct part_num ) from working_glass_parts_interchange where username=@username
	--loops through each one of those parts
	while( @loop_cnt < @parts )
	begin
		--increases the loop counter 
		set @loop_cnt = @loop_cnt + 1
		--selectes the most current part number based on its effective date
		select top 1 @current_glass_id=part_num, @MAKE_MODEL_ID=make_model_id, @eff_dt=effective_date
		from working_glass_parts_interchange
		where part_num > @current_glass_id and effective_date < getdate() and username=@username
		order by part_num, effective_date desc
		--deletes all other parts of the same part number that dates arnt the most current
		delete from working_glass_parts_interchange
		where part_num = @current_glass_id and make_model_id<>@MAKE_MODEL_ID and username=@username
		delete from working_glass_parts_interchange
		where part_num = @current_glass_id and effective_date<>@eff_dt and username=@username
	end

	set @loop_cnt = 0
	set @current_glass_id = -1
	select @parts=count( distinct part_num ) from working_glass_parts_interchange where username=@username
	while( @loop_cnt < @parts )
	begin
		set @override_cnt = 0
		set @loop_cnt = @loop_cnt + 1
		select top 1 @current_glass_id=part_num from working_glass_parts_interchange where part_num > @current_glass_id and username=@username
		select @override_cnt=count( * ) from parts_catalogue where override='T' and referenceid=@current_glass_id
			select  @ranking = Ranking,@hours = Hours, @Notes = Notes, @srp = Srp, @timeRestriction = TimeRestriction from PARTS_CATALOGUE where ReferenceID = @current_glass_id
		update working_glass_parts_interchange set  Ranking = @ranking, Hours = @hours, Notes = @notes, Srp = @srp, TimeRestriction = @timeRestriction where part_num = @current_glass_id and username=@username
		if( @override_cnt > 0 )
		begin
			select @pfnumber1=pfnumber1, @pfnumber2=pfnumber2, @pfnumber3=pfnumber3, @pfnumber4=pfnumber4, @pfnumber5=pfnumber5, 
				@pfnumber6=pfnumber6, @pfnumber7=pfnumber7, @pfnumber8=pfnumber8, @pfnumber9=pfnumber9, @pfnumber10=pfnumber10
			from parts_catalogue where referenceid=@current_glass_id
			update working_glass_parts_interchange set pfvalue1=@pfnumber1, pfvalue2=@pfnumber2, pfvalue3=@pfnumber3, pfvalue4=@pfnumber4, pfvalue5=@pfnumber5, 
				pfvalue6=@pfnumber6, pfvalue7=@pfnumber7, pfvalue8=@pfnumber8, pfvalue9=@pfnumber9, pfvalue10=@pfnumber10, override='T'
			where part_num = @current_glass_id and username=@username
		end


		-----------------------------------------------------------
		--WAREHOUSE QUANTITIES
		--gets the quantities available for the current part
		set @whse_counter = 1	
		set @current_whse = -1
		
		--the qty in the current companies warehouses
		while( @whse_counter <= @num_whses )
		begin
			select top 1 @current_whse=whse_id from #whse_ids where whse_id > @current_whse order by whse_id
			set @strSQL = @tr_db+'..sp_get_warehouse_qty_available '''+@tr_db+''', '''+@current_glass_id+''', '''+@username+''', '+cast(@current_whse as varchar(15))+''
			exec( @strSQL )

			set @available_qty = 0
			CREATE TABLE #qty_aval (var int)
			INSERT #qty_aval exec ( 'select qty_available from '+@tr_db+'..working_ws_available_qty where username='''+@username+'''')
			SELECT @available_qty = var from #qty_aval
			DROP TABLE #qty_aval
			set @strSQL = 'update working_glass_parts_interchange set qty'+cast(@whse_counter as varchar(10))+'='+cast(@available_qty as varchar(15))+' where username='''+@username+''' and part_num = '''+@current_glass_id+''' '
			exec( @strSQL )
			set @whse_counter = @whse_counter + 1
		end

		--the qty in the stocking warehouse
		set @strSQL = @tr_db+'..sp_get_warehouse_qty_available '''+@Stocking_TR_DB+''', '''+@current_glass_id+''', '''+@username+''', '+cast(@Stocking_whse_id as varchar(15))+''
		exec( @strSQL )
		
		set @available_qty = 0
		CREATE TABLE #st_qty_aval (var int)
			INSERT #st_qty_aval exec ( 'select qty_available from '+@Stocking_TR_DB+'..working_ws_available_qty where username='''+@username+'''')
			SELECT @available_qty = var from #st_qty_aval
			DROP TABLE #st_qty_aval
			set @strSQL = 'update working_glass_parts_interchange set qty'+cast(@whse_counter as varchar(10))+'='+cast(@available_qty as varchar(15))+' where username='''+@username+''' and part_num = '''+@current_glass_id+''' '
			exec( @strSQL )
		--------------------------------------------------------
		
	end
	DROP TABLE #whse_ids
end
else
begin
select 'User Warehouse Access Setup Incomplete'
end
--select * from working_glass_parts where username = @username
END





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_get_ip_address]') and xtype = 'P ')  
 drop Procedure sp_get_ip_address
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create Procedure sp_get_ip_address (@ip varchar(40) out)
as
begin
Declare @ipLine varchar(200)
Declare @pos int
set nocount on
          set @ip = NULL
          Create table #temp (ipLine varchar(200))
          Insert #temp exec master..xp_cmdshell 'ipconfig'
          select @ipLine = ipLine
          from #temp
          where upper (ipLine) like '%IP ADDRESS%'
          if (isnull (@ipLine,'***') != '***')
          begin 
                set @pos = CharIndex (':',@ipLine,1);
                set @ip = rtrim(ltrim(substring (@ipLine , 
               @pos + 1 ,
                len (@ipLine) - @pos)))
           end 
drop table #temp
set nocount off
end 



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_scCampaign]') and xtype = 'P ')  
 drop Procedure sp_Get_scCampaign
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--select * from scReport_Options  
--exec sp_Get_scCampaign 'c04c73e9-aec9-4073-959a-3e4d9ef83122'  
  
CREATE proc sp_Get_scCampaign @PCID varchar(500)  
as  
  
declare @sql_str as varchar(5000),  
 @sql varchar(2500),  
 @count int  
  
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Campaign'))  
drop table #Campaign  
  
create table #Campaign(  
 CampaignID int null,  
 Campaign_Desc varchar(128) null,  
 ProcessID int null,  
 Campaign_StartDate datetime null,  
 Campaign_EndDate datetime null,  
 SalesManID int null,  
 ContactID int null,  
 LeadID int null,  
 Lead_FirstName varchar(50) null,  
 Lead_LastName varchar(50) null,  
 Lead_DateAdded datetime null,  
 Process_Description varchar(64) null,  
 Process_Status varchar(50) null,  
 Process_As_Followup bit null,  
 Process_As_Campaign bit null,  
 CompanyName varchar(100) null  
)  
  
--select * from scProcess  
  
-- declare  
-- @CommunityID int, @CommunityDesc varchar(100),  
--select * from scCampaign c  
--join scCampaignees cs on cs.CampaignID=c.ID  
--join scProcessInstance pi on pi.linkid=c.id and pi.ProcessTypeInstance='Campaign'  
--join scLead l on l.ID=cs.LeadID  
--join Contact con on con.ID=l.Contact_ID  
--left outer join scProcess p on p.ID=pi.ProcessID  
--where c.id=60  
--left outer join scProcess p on p.ID=c.ProcessID  
--where con.type='Prospect'  
--and c.id=60  
--select * from scMethodInstance where pi_id=104  
--select * from scStep  
--  
  
set @sql_str='  
select  c.ID, c.Description, c.ProcessID, c.StartDate, c.EndDate, c.SalesManID, con.ID,  
 l.ID, con.FirstName, con.LastName, l.DateCreated, p.Description, pi.ProcessStatus, p.AsFollowup, p.AsCampaign,   
 co.Company_Name  
from scCampaign c  
join scCampaignees cs on cs.CampaignID=c.ID  
join scProcessInstance pi on pi.linkid=c.ID and pi.ProcessTypeInstance=''Campaign''  
join scLead l on l.ID=cs.LeadID  
join Contact con on con.ID=l.Contact_ID  
join scProcess p on p.ID=pi.ProcessID  
left outer join Companies co on co.AutoID=con.CompanyAutoID  
where con.type=''Prospect'''  
  
--join companies co on co.AutoID=con.CompanyAutoID  
  
if exists (select * from working_process where pcid=@PCID)  
set @sql_str=@sql_str+' and p.ID in (select Process_ID from working_process where pcid='''+@PCID+''')'  
  
if exists (select * from working_campaign where pcid=@PCID)  
set @sql_str=@sql_str+' and c.ID in (select ID from working_campaign where pcid='''+@PCID+''')'  
  
insert #Campaign(CampaignID, Campaign_Desc, ProcessID, Campaign_StartDate,  
 Campaign_EndDate, SalesManID, ContactID, LeadID, Lead_FirstName, Lead_LastName,  
 Lead_DateAdded, Process_Description, Process_Status,Process_As_Followup, Process_As_Campaign, CompanyName)  
exec(@sql_str)  
  
select * from #Campaign c  
join scReport_Options sc on sc.PCID=@PCID  
and c.Campaign_StartDate>=sc.start_date  
and c.Campaign_EndDate<=sc.end_date  
  
  



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_scCampaignActivity]') and xtype = 'P ')  
 drop Procedure sp_Get_scCampaignActivity
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--select * from scReport_Options

--exec sp_Get_scCampaignActivity 'adafcb34-22d1-46b4-8706-9cbbcf608d83'
CREATE proc sp_Get_scCampaignActivity @PCID varchar(500)
as

declare @sql_str as varchar(5000),
 @count int,
 @sql varchar(5000)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Campaign'))
drop table #Campaign

create table #Campaign(
 CampaignID int null,
 Campaign_Desc varchar(128) null,
 Campaign_StartDate datetime null,
 Campaign_EndDate datetime null,
 ProcessID int null, 
 Process_Description varchar(64) null,
 Process_As_Followup bit null,
 Process_As_Campaign bit null,
 Lead_Name varchar(100) null,
 ProcessStatus varchar(50) null,
 CompanyName varchar(100) null,
G1_VALUE varchar(50) null,
G2_VALUE varchar(50) null,
G3_VALUE varchar(50) null,
G1_DESC varchar(50) null,
G2_DESC varchar(50) null,
G3_DESC varchar(50) null)


-- declare
-- @CommunityID int, @CommunityDesc varchar(100),


set @sql_str='
select  c.ID, c.Description, c.StartDate, c.EndDate, p.ID, p.Description, p.AsFollowup, p.AsCampaign, 
 con.KnownAs, pi.ProcessStatus,
 co.Company_Name
from scCampaign c  
join scCampaignees cs on cs.CampaignID=c.ID  
join scProcessInstance pi on pi.linkid=c.ID and pi.ProcessTypeInstance=''Campaign''  
join scLead l on l.ID=cs.LeadID  
join Contact con on con.ID=l.Contact_ID  
join scProcess p on p.ID=pi.ProcessID  
left outer join Companies co on co.AutoID=con.CompanyAutoID  
where con.type=''Prospect'''  

  
if exists (select * from working_process where pcid=@PCID)  
set @sql_str=@sql_str+' and p.ID in (select Process_ID from working_process where pcid='''+@PCID+''')'  
  
if exists (select * from working_campaign where pcid=@PCID)  
set @sql_str=@sql_str+' and c.ID in (select ID from working_campaign where pcid='''+@PCID+''')'  
  



insert #Campaign( CampaignID, Campaign_Desc, Campaign_StartDate, Campaign_EndDate, ProcessID,
 Process_Description, Process_As_Followup, Process_As_Campaign, Lead_Name, ProcessStatus, CompanyName)
exec(@sql_str)


set @count=1    
while @count<=3    
begin    
 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Campaign'')
 begin
 update #Campaign
 set g'+cast(@count as varchar)+'_value=Campaign_Desc, g'+cast(@count as varchar)+'_desc=Campaign_Desc
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Start Date'')
 begin
 update #Campaign
 set g'+cast(@count as varchar)+'_value=Campaign_StartDate, g'+cast(@count as varchar)+'_desc=Campaign_StartDate
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Status'')
 begin
 update #Campaign
 set g'+cast(@count as varchar)+'_value=ProcessStatus, g'+cast(@count as varchar)+'_desc=ProcessStatus
 end'
 exec(@sql)

 set @count=@count+1    
end

exec sp_UpdateSCRptGrouping @PCID

select * from #Campaign c  
join scReport_Options sc on sc.PCID=@PCID  
and c.Campaign_StartDate>=sc.start_date  
and c.Campaign_EndDate<=sc.end_date  



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_scCodes]') and xtype = 'P ')  
 drop Procedure sp_Get_scCodes
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE  proc [dbo].[sp_Get_scCodes] @PCID varchar(500), @UserName varchar(500)
as

--Declare @PCID varchar(500), @UserName varchar(500)
--Select @PCID = 'a7220e60-b4b5-421d-bbf9-852bae6e8bd9', @UserName = '4'

declare @sql_str as varchar(5000), @TRDB varchar(500)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Codes'))
drop table #Codes

create table #Codes(
 CatID int null,
 Category varchar(50) null,
 USCategory varchar(50) null, 
 CatCodeID int null, 
 Entry varchar(90) null,
 Description varchar(100) null,
 Additional varchar(100) null,
 ProcessID int null,
 AvailableYN bit null,
 CountryCode varchar(5) null)


-- declare
-- @CommunityID int, @CommunityDesc varchar(100),


set @sql_str='
select  c.ID, c.Category, c.USCategory,
 cc.ID, cc.Entry, cc.Description, cc.Additional, cc.ProcessID, cc.AvailibleYN
from scCategories c
join scCatCodes cc on cc.CatID=c.ID
where 1=1'

if exists (select * from working_category where pcid=@PCID)
set @sql_str=@sql_str+' and c.ID in (select CatID from working_category where pcid='''+@PCID+''')'
--print @sql_str
insert #Codes( CatID, Category, USCategory, CatCodeID, Entry, Description,
 Additional, ProcessID, AvailableYN)
exec(@sql_str)

Select @TRDB = TreasuryDBName from working_reportdatabases Where UserID = @UserName

If @TRDB is null
Begin
	Update #Codes
	Set CountryCode = 'CDN'
End
Else
Begin
	Select @sql_str = 'Update #Codes
				   Set CountryCode = (Select Case When (CO_Country = ''U'') Then ''USA'' Else ''CDN'' END 
				   From ' + @TRDB + '..Company)'
	Exec (@sql_str)
End


select * from #Codes
join scReport_Options on PCID=@PCID

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_scCommissionAnalysis]') and xtype = 'P ')  
 drop Procedure sp_Get_scCommissionAnalysis
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go











--select * from scReport_Options
--exec sp_Get_scCommissionAnalysis 'c95a0548-48e1-4e75-89e1-e551ccb273a7'

CREATE  proc sp_Get_scCommissionAnalysis @PCID varchar(500)
as

declare @sql_str as varchar(5000),
 @sql varchar(2500),
 @count int

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Sales'))
drop table #Sales

create table #Sales(
 SlsID int null,
 SalesPersonName varchar(128) null,
 SlsMgrID int null,
 SalesManagerName varchar(128) null,
 Sale_Date datetime null,
 HoldingDesc varchar(128) null,
 CommunityDesc varchar(128) null,
 PhaseDesc varchar(128) null,
 Base_Sales money null,
 Option_Sales money null,
 Base_Commission money null,
 Option_Commission money null,
 CompanyName varchar(100) null,
G1_VALUE varchar(50) null,
G2_VALUE varchar(50) null,
G3_VALUE varchar(50) null,
G1_DESC varchar(50) null,
G2_DESC varchar(50) null,
G3_DESC varchar(50) null)


-- declare
-- @CommunityID int, @CommunityDesc varchar(100),

set @sql_str='
select q.SalesmanID, c.FirstName+'' ''+c.LastName,
 q.ID, '''', q.HoldingDesc, q.CommunityDesc, q.ProjectDesc,
 0.00,0.00, 0.00, 0.00, co.company_name
from scQuote q
join scQuoteSalesman qs on qs.QuoteID=q.ID
join contact c on c.ID=qs.ContactID
join companies co on co.autoid=q.companyid
where status=''S'''

if exists (select * from working_holding where pcid=@PCID)
set @sql_str=@sql_str+' and q.HoldingDesc in (select hbrl.raw_land_desc from working_holding wh
join hb_raw_land hbrl on hbrl.raw_land_cd=wh.raw_land_cd where pcid='''+@PCID+''')'

if exists (select * from working_community where pcid=@PCID)
set @sql_str=@sql_str+' and q.CommunityDesc in (select community_desc from working_community wc
join hb_communities hbc on hbc.community_cd=wc.community_cd where pcid='''+@PCID+''')'

if exists (select * from working_project where pcid=@PCID)
set @sql_str=@sql_str+' and q.ProjectDesc in (select project_desc from working_project wp
join hb_project hbp on hbp.project_cd=wp.project_cd where pcid='''+@PCID+''')'

insert #Sales(SlsID, SalesPersonName, SlsMgrID, SalesManagerName, HoldingDesc,
 CommunityDesc, PhaseDesc, Base_Sales, Option_Sales, Base_Commission, Option_Commission, CompanyName)
exec(@sql_str)


set @count=1    
while @count<=3    
begin    
 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Community'')
 begin
 update #Sales
 set g'+cast(@count as varchar)+'_value=CommunityDesc, g'+cast(@count as varchar)+'_desc=CommunityDesc
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Date'')
 begin
 update #Sales
 set g'+cast(@count as varchar)+'_value=cast(Sale_Date as varchar(255)), g'+cast(@count as varchar)+'_desc=cast(Sale_Date as varchar(255))
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Holding'')
 begin
 update #Sales
 set g'+cast(@count as varchar)+'_value=HoldingDesc, g'+cast(@count as varchar)+'_desc=HoldingDesc
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Phase'')
 begin
 update #Sales
 set g'+cast(@count as varchar)+'_value=PhaseDesc, g'+cast(@count as varchar)+'_desc=PhaseDesc
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Sales Person'')
 begin
 update #Sales
 set g'+cast(@count as varchar)+'_value=SalespersonName, g'+cast(@count as varchar)+'_desc=SalespersonName
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Sales Manager'')
 begin
 update #Sales
 set g'+cast(@count as varchar)+'_value=SalesManagerName, g'+cast(@count as varchar)+'_desc=SalesManagerName
 end'
 exec(@sql)

-- select * from rpt_dynamic_grouping where rpt=104
 set @count=@count+1    
end

exec sp_UpdateSCRptGrouping @PCID

select * from #Sales
join scReport_Options on PCID=@PCID





















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_scCommissionDetail]') and xtype = 'P ')  
 drop Procedure sp_Get_scCommissionDetail
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go











--select * from scReport_Options
--exec sp_Get_scCommissionDetail 'c95a0548-48e1-4e75-89e1-e551ccb273a7'
CREATE  proc sp_Get_scCommissionDetail @PCID varchar(500)
as

declare @sql_str as varchar(5000),
 @sql varchar(2500),
 @count int

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Sales'))
drop table #Sales

create table #Sales(
 SlsID int null,
 SalesPersonName varchar(128) null,
 SlsMgrID int null,
 SalesManagerName varchar(128) null,
 Sale_Date datetime null,
 HoldingDesc varchar(128) null,
 CommunityDesc varchar(128) null,
 PhaseDesc varchar(128) null,
 CivicAddress varchar(255) null,
 Close_date datetime null,
 Paid varchar(1) null,
 Base_Sales money null,
 Option_Sales money null,
 Base_Commission money null,
 Option_Commission money null,
 CompanyName varchar(100) null,
G1_VALUE varchar(50) null,
G2_VALUE varchar(50) null,
G3_VALUE varchar(50) null,
G1_DESC varchar(50) null,
G2_DESC varchar(50) null,
G3_DESC varchar(50) null)


-- declare
-- @CommunityID int, @CommunityDesc varchar(100),

set @sql_str='
select q.SalesmanID, c.FirstName+'' ''+c.LastName,
 q.ID, '''', q.HoldingDesc, q.CommunityDesc, q.ProjectDesc,
 q.CivicAddress, q.SaleDate, q.GoodUntilDate, ''N'',
 0.00,0.00, 0.00, 0.00, co.company_name
from scQuote q
join scQuoteSalesman qs on qs.QuoteID=q.ID
join contact c on c.ID=qs.ContactID
join companies co on co.autoid=q.companyid
where status=''S'''

if exists (select * from working_holding where pcid=@PCID)
set @sql_str=@sql_str+' and q.HoldingDesc in (select hbrl.raw_land_desc from working_holding wh
join hb_raw_land hbrl on hbrl.raw_land_cd=wh.raw_land_cd where pcid='''+@PCID+''')'

if exists (select * from working_community where pcid=@PCID)
set @sql_str=@sql_str+' and q.CommunityDesc in (select community_desc from working_community wc
join hb_communities hbc on hbc.community_cd=wc.community_cd where pcid='''+@PCID+''')'

if exists (select * from working_project where pcid=@PCID)
set @sql_str=@sql_str+' and q.ProjectDesc in (select project_desc from working_project wp
join hb_project hbp on hbp.project_cd=wp.project_cd where pcid='''+@PCID+''')'

insert #Sales(SlsID, SalesPersonName, SlsMgrID, SalesManagerName, HoldingDesc,
 CommunityDesc, PhaseDesc,  CivicAddress, Sale_Date, Close_date, Paid, Base_Sales, 
 Option_Sales, Base_Commission, Option_Commission, CompanyName)
exec(@sql_str)


set @count=1    
while @count<=3    
begin    
 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Community'')
 begin
 update #Sales
 set g'+cast(@count as varchar)+'_value=CommunityDesc, g'+cast(@count as varchar)+'_desc=CommunityDesc
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Date'')
 begin
 update #Sales
 set g'+cast(@count as varchar)+'_value=cast(Sale_Date as varchar(255)), g'+cast(@count as varchar)+'_desc=cast(Sale_Date as varchar(255))
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Holding'')
 begin
 update #Sales
 set g'+cast(@count as varchar)+'_value=HoldingDesc, g'+cast(@count as varchar)+'_desc=HoldingDesc
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Phase'')
 begin
 update #Sales
 set g'+cast(@count as varchar)+'_value=PhaseDesc, g'+cast(@count as varchar)+'_desc=PhaseDesc
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Sales Person'')
 begin
 update #Sales
 set g'+cast(@count as varchar)+'_value=SalespersonName, g'+cast(@count as varchar)+'_desc=SalespersonName
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Sales Manager'')
 begin
 update #Sales
 set g'+cast(@count as varchar)+'_value=SalesManagerName, g'+cast(@count as varchar)+'_desc=SalesManagerName
 end'
 exec(@sql)

-- select * from rpt_dynamic_grouping where rpt=104
 set @count=@count+1    
end

exec sp_UpdateSCRptGrouping @PCID

select * from #Sales
join scReport_Options on PCID=@PCID





















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_scHomeClose]') and xtype = 'P ')  
 drop Procedure sp_Get_scHomeClose
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go












--select * from scReport_Options
--exec sp_Get_scHomeClose '21e275e2-fa5f-422b-8d2b-2410fdf407cd'

CREATE    proc [dbo].[sp_Get_scHomeClose] @PCID varchar(500)
as

--declare @PCID varchar(500)
--Set @PCID = '21e275e2-fa5f-422b-8d2b-2410fdf407cd'

declare @sql_str as varchar(5000),
        @count as int,
        @sql as varchar(2500)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#HomeClose'))
drop table #HomeClose

create table #HomeClose(
 Purchaser varchar(100) null,
 Civic_Address varchar(100) null,
 Model_Elevation_Plan varchar(255) null,
 Lot_Block_Plan varchar(100) null,
 Sale_Date datetime null,
 Close_Date datetime null,
 Sales_Person varchar(100) null,
 Status varchar(25) null,
 Sale_Amount money null,
 HoldingDesc varchar(128) null,
 CommunityDesc varchar(128) null,
 PhaseDesc varchar(128) null,
 CompanyName varchar(100) null,
 QuoteID int null,
G1_VALUE varchar(50) null,
G2_VALUE varchar(50) null,
G3_VALUE varchar(50) null,
G1_DESC varchar(50) null,
G2_DESC varchar(50) null,
G3_DESC varchar(50) null)



-- declare
-- @CommunityID int, @CommunityDesc varchar(100),

set @sql_str='
select  isnull(c.FirstName,'''')+'' ''+isnull(c.LastName,''''), q.CivicAddress, q.ModelDesc, q.LotDesc,
 q.SaleDate, q.COPDate, '''', q.Status, q.FinalPrice, q.HoldingDesc, q.CommunityDesc, q.ProjectDesc,
 co.Company_Name, q.ID
from scQuote q
join scLead l on q.LeadID=l.ID
join Contact c on c.ID=l.Contact_ID
join companies co on co.AutoID=q.CompanyID
 where c.type=''Prospect'''

if exists (select * from working_holding where pcid=@PCID)
set @sql_str=@sql_str+' and q.HoldingID in (select raw_land_cd from working_holding where pcid='''+@PCID+''')'
if exists (select * from working_community where pcid=@PCID)
set @sql_str=@sql_str+' and q.CommunityID in (select community_cd from working_community where pcid='''+@PCID+''')'
if exists (select * from working_project where pcid=@PCID)
set @sql_str=@sql_str+' and q.ProjectID in (select project_cd from working_project where pcid='''+@PCID+''')'
if exists (select * from working_company where pcid=@PCID)
set @sql_str=@sql_str+' and q.CompanyID in (select Company_ID from working_company where pcid='''+@PCID+''')'

insert #HomeClose(Purchaser, Civic_Address, Model_Elevation_Plan, Lot_Block_Plan,
 Sale_Date, Close_Date, Sales_Person, Status, Sale_Amount, HoldingDesc, CommunityDesc, PhaseDesc, CompanyName,QuoteID)
exec(@sql_str)

Declare @SalesPerson varchar(100), @QuoteID int, @PreviousQuoteID int, @SalesPersons varchar(500)
Select @PreviousQuoteID = 0, @SalesPersons = ''

Declare aSalesPerson Cursor For

Select IsNull(c.FirstName,'') + ' ' +  IsNull(c.LastName,'') as SalesMan, QuoteID 
from scQuoteSalesMan qs inner join contact c on c.ID = qs.ContactID

Open aSalesPerson
Fetch aSalesPerson Into @SalesPerson,@QuoteID

While @@Fetch_Status = 0
Begin
	
	If @PreviousQuoteID <> @QuoteID
	Begin
		Update #HomeClose Set Sales_Person = @SalesPersons Where QuoteID = @QuoteID
		Set @SalesPersons = ''
	End

	If @SalesPersons = ''
		Begin
			Set @SalesPersons = @SalesPerson
		End
	Else
		Begin
			Select @SalesPersons = @SalesPersons + ', ' + @SalesPerson
		End
	Fetch aSalesPerson Into @SalesPerson,@QuoteID
End

Close aSalesPerson
DeAllocate aSalesPerson

set @count=1    
while @count<=3    
begin    
 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Community'')
 begin
 update #HomeClose
 set g'+cast(@count as varchar)+'_value=CommunityDesc, g'+cast(@count as varchar)+'_desc=CommunityDesc
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Holding'')
 begin
 update #HomeClose
 set g'+cast(@count as varchar)+'_value=HoldingDesc, g'+cast(@count as varchar)+'_desc=HoldingDesc
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Phase'')
 begin
 update #HomeClose
 set g'+cast(@count as varchar)+'_value=PhaseDesc, g'+cast(@count as varchar)+'_desc=PhaseDesc
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Close Date'')
 begin
 update #HomeClose
 set g'+cast(@count as varchar)+'_value=''Close Date: ''+cast(Close_Date as varchar(255)), g'+cast(@count as varchar)+'_desc=''Close Date: ''+cast(Close_Date as varchar(255))
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Status'')
 begin
 update #HomeClose
 set g'+cast(@count as varchar)+'_value=Status, g'+cast(@count as varchar)+'_desc=Status
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Model/Elevation/Plan'')
 begin
 update #HomeClose
 set g'+cast(@count as varchar)+'_value=Model_Elevation_Plan, g'+cast(@count as varchar)+'_desc=Model_Elevation_Plan
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Model/Elevation/Plan'')
 begin
 update #HomeClose
 set g'+cast(@count as varchar)+'_value=Model_Elevation_Plan, g'+cast(@count as varchar)+'_desc=Model_Elevation_Plan
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Model'')
 begin
 update #HomeClose
 set g'+cast(@count as varchar)+'_value=Model_Elevation_Plan, g'+cast(@count as varchar)+'_desc=Model_Elevation_Plan
 end'
 exec(@sql)


-- select * from rpt_dynamic_grouping where rpt=100
 set @count=@count+1    
end

exec sp_UpdateSCRptGrouping @PCID

select * from #HomeClose hc
join scReport_Options sc on PCID=@PCID
where hc.Sale_Date<=sc.end_date and
	  hc.Sale_Date>=sc.start_date





















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_scInventory]') and xtype = 'P ')  
 drop Procedure sp_Get_scInventory
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE    proc [dbo].[sp_Get_scInventory] @PCID varchar(500),@ShowAvailable char(1), @ShowInstructions bit
as

--Declare @PCID varchar(500),@ShowAvailable char(1), @ShowInstructions bit
--Select @PCID = 'Mike', @ShowAvailable = 'B', @ShowInstructions = 1

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#HomeInventory '))  
drop table #HomeInventory
create table #HomeInventory
(	
	Inventory_ID int null,
	CivicAddress varchar(128) null,
	LotDesc varchar(20) null,
	BlockDesc varchar(128) null,
	PlanNo varchar(20) null,
	ModelNameDesc varchar(60) null,
	ModelDesc varchar(60) null,
	MLS_Num int null,
	LockBoxCombination varchar(25) null,
	ListingPrice money null,
	ShowingInstructions varchar(256) null,
	HoldingDesc varchar(128) null,
	CommunityDesc varchar(128) null,
	ProjectDesc varchar(60) null,
	LotClass varchar(30) null,
	LotSubClass varchar(30) null,
	ListingStartDate datetime null,
	ListingExpiryDate datetime null,
	AvailableForSale varchar(100) null,
	G1_VALUE varchar(200) null,
	G2_VALUE varchar(200) null,
	G3_VALUE varchar(200) null,
	G1_DESC varchar(200) null,
	G2_DESC varchar(200) null,
	G3_DESC varchar(200) null
)

Declare @where varchar(8000), @Select varchar(8000), @Count int, @Sql varchar(8000)
Select @where = ''

if Exists (Select * from working_InventoryHolding Where PCID = @PCID)
begin
	select @where = ' And i.HoldingDesc in (Select HoldingDesc From working_InventoryHolding where PCID = ''' + @PCID + ''') '
end

if Exists (Select * from working_InventoryCommunities Where PCID = @PCID)
begin
	select @where = @where + ' And i.CommunityDesc in (Select CommunityDesc From working_InventoryCommunties Where PCID = ''' + @PCID + ''') '
end

if Exists (Select * from working_InventoryPhase Where PCID = @PCID)
begin
	select @where = @where + ' And i.ProjectDesc in (Select ProjectDesc From working_InventoryPhase Where PCID = ''' + @PCID + ''') '
end

if Exists (Select * from working_InventoryModelName Where PCID = @PCID)
begin
	select @where = @where + ' And i.ModelNameDesc in (Select ModelNameDesc From working_InventoryModelName Where PCID = ''' + @PCID + ''') '
end

if Exists (Select * from working_InventoryModel Where PCID = @PCID)
begin
	select @where = @where + ' And i.ModelDesc in (Select ModelDesc Form working_InventoryModel Where PCID = ''' + @PCID + ''') '
end

if @ShowAvailable = '1' or @ShowAvailable = '0'
begin
	select @where = @where + ' And i.AvailableForSale = ' + @ShowAvailable + ' '
end

Select @Select = 'Select i.CivicAddress, i.LotDesc, i.BlockDesc, i.PlanNo, i.ModelNameDesc, i.ModelDesc, 
	   il.MLS_Num, il.LockBoxCombination, il.ListingPrice,
Case When ' + Convert(varchar(1),@ShowInstructions) + ' = 1 Then il.ShowingInstructions Else null End as ShowingInstructions,
i.HoldingDesc, i.CommunityDesc, i.ProjectDesc, i.LotClass, i.LotSubClass, il.StartDate, il.ExpiryDate, i.ID, 
Case When IsNull(i.AvailableForSale,0) = 1 Then ''For Sale'' Else ''Not For Sale'' End
From Inventory i
Left Outer Join scInventoryListings il on i.ID = il.InventoryID 
and IsNull(Cast (il.ExpiryDate as DateTime),''1/1/3009'') > GetDate()
Where 1=1 '

Insert Into #HomeInventory (CivicAddress, LotDesc, BlockDesc, PlanNo, ModelNameDesc, ModelDesc, MLS_Num, LockBoxCombination, 
							ListingPrice, ShowingInstructions, HoldingDesc, CommunityDesc, ProjectDesc, LotClass, LotSubClass, 
							ListingStartDate, ListingExpiryDate, Inventory_ID,AvailableForSale)
exec (@Select + @where)

--Pull in orgional quote final prices
update #HomeInventory
set ListingPrice=isnull(s.FinalPrice,0) from scQuote s where Inventory_ID=s.InventoryID

--Cleans up missing Listing Price Values
update #HomeInventory
set ListingPrice=isnull(ListingPrice,0)
where ListingPrice is null

--Create Dynamic Grouping
Set @Count=1    
While @Count<=3    
Begin 
	 Set @Sql='If Exists (Select * From scReport_Options ro  
	 Where ro.PCID=''' + Cast(@PCID as varchar(500)) + '''
	 and ro.g' + Cast(@Count as varchar(2)) + '_field=''Holding'')
	 Begin
	 Update #HomeInventory
	 Set g' + Cast(@Count as varchar(2))+'_value=HoldingDesc, g' + Cast(@Count as varchar(2)) + '_desc=HoldingDesc
	 End'
	 Exec(@sql)

	 Set @sql='If Exists (Select * From scReport_Options ro    
	 Where ro.PCID=''' + Cast(@PCID as varchar(500)) + '''
	 and ro.g' + Cast(@Count as varchar) + '_field=''Community'')
	 Begin
	 Update #HomeInventory
	 Set g' + Cast(@Count as varchar)+'_value=CommunityDesc, g' + Cast(@Count as varchar) + '_desc=CommunityDesc
	 End'
	 Exec(@sql)

	 Set @sql='If Exists (Select * From scReport_Options ro    
	 Where ro.PCID=''' + Cast(@PCID as varchar(500)) + '''
	 and ro.g' + Cast(@count as varchar) + '_field=''Phase'')
	 Begin
	 Update #HomeInventory
	 Set g' + Cast(@count as varchar) + '_value=ProjectDesc, g' + Cast(@count as varchar) + '_desc=ProjectDesc
	 End'
	 Exec(@sql)

	 Set @sql='If Exists (Select * From scReport_Options ro    
	 Where ro.PCID=''' + Cast(@PCID as varchar(500)) + '''
	 and ro.g' + Cast(@count as varchar) + '_field=''Model'')
	 Begin
	 Update #HomeInventory
	 Set g' + Cast(@count as varchar) + '_value=ModelDesc, g' + Cast(@count as varchar) + '_desc=ModelDesc    
	 End'
	 Exec(@sql)

	 Set @sql='If Exists (Select * From scReport_Options ro    
	 Where ro.PCID=''' + Cast(@PCID as varchar(500)) + '''
	 and ro.g' + Cast(@count as varchar) + '_field=''Model/Elevation'')
	 Begin
	 Update #HomeInventory
	 Set g' + Cast(@count as varchar) + '_value=ModelDesc+'' ''+ModelNameDesc, g' + Cast(@count as varchar) + '_desc=ModelDesc+'' ''+ModelNameDesc
	 End'
	 Exec(@sql)

	 Set @sql='If Exists (Select * From scReport_Options ro    
	 Where ro.PCID=''' + Cast(@PCID as varchar(500)) + '''
	 and ro.g' + Cast(@count as varchar) + '_field=''Lot Class'')
	 Begin
	 Update #HomeInventory
	 Set g' + Cast(@count as varchar) + '_value=LotClass, g' + Cast(@count as varchar) + '_desc=LotClass    
	 End'
	 Exec(@sql)

	 Set @sql='If Exists (Select * From scReport_Options ro    
	 Where ro.PCID=''' + Cast(@PCID as varchar(500)) + '''
	 and ro.g' + Cast(@count as varchar) + '_field=''Lot Sub Class'')
	 Begin
	 Update #HomeInventory
	 Set g' + Cast(@count as varchar) + '_value=LotSubClass, g' + Cast(@count as varchar) + '_desc=LotSubClass    
	 End'
	 Exec(@sql)

	Select @Count = @Count + 1 
End

exec sp_UpdateSCRptGrouping @PCID

Select HoldingDesc [Holding], CommunityDesc [Community], ProjectDesc [Phase], ModelNameDesc [Model], ModelDesc [Elevation],
CivicAddress, LotDesc [Lot], BlockDesc [Block], PlanNo [Plan], LotClass, LotSubClass,  MLS_Num [MLS], LockBoxCombination, 
ListingPrice, ListingStartDate, ListingExpiryDate, ShowingInstructions, AvailableForSale, i.G1_VALUE, i.G1_DESC, i.G2_VALUE, i.G2_DESC, i.G3_VALUE, i.G3_DESC,
ro.*
From #HomeInventory i, scReport_Options ro
Where ro.PCID = @PCID

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_scLeadActivity]') and xtype = 'P ')  
 drop Procedure sp_Get_scLeadActivity
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go













--exec sp_Get_scLeadActivity 'abbd264c-838f-4e70-88b7-2ac3fb644759'

CREATE   proc [dbo].[sp_Get_scLeadActivity] @PCID varchar(500)
as

declare @sql_str as varchar(5000)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#LeadActivity'))
drop table #LeadActivity

create table #LeadActivity(
 Contact_Name varchar(100) null,
 Civic_Address varchar(100) null,
 Activity_Type varchar(50) null,
 Activity_Date datetime null,
 Notes varchar(255) null,
 CompanyName varchar(100) null,
G1_VALUE varchar(50) null,
G2_VALUE varchar(50) null,
G3_VALUE varchar(50) null,
G1_DESC varchar(50) null,
G2_DESC varchar(50) null,
G3_DESC varchar(50) null)


-- declare
-- @CommunityID int, @CommunityDesc varchar(100),

set @sql_str='Select c.FirstName+'' ''+c.LastName, 
Case When IsNull(c.BusinessStreet,'''') <> '''' Then c.BusinessStreet + '' '' +IsNull(c.BusinessCity,'''') + '' '' +IsNulL(c.BusinessPostalCode,'''')
	 When IsNull(c.HomeStreet,'''') <> '''' Then c.HomeStreet + '' '' +IsNull(c.HomeCity,'''') + '' '' +IsNulL(c.HomePostalCode,'''')
	 Else IsNull(c.OtherStreet,'''') + '' '' +IsNull(c.OtherCity,'''') + '' '' +IsNulL(c.OtherPostalCode,'''')
End As CivicAddress,
(Select ct.ContactType from ContactType ct Where ct.ID = ch.ContactType_ID),
ch.DateCreated, IsNull(ch.Subject,''''),''''
-- Select *
From contact c
inner join contacthistory ch on c.ID = ch.ContactID
where 1=1 '

if exists (select * from working_city where pcid=@PCID)
set @sql_str=@sql_str+' and BusinessCity in (select City from working_city where pcid='''+@PCID+''')'
if exists (select * from working_province where pcid=@PCID)
set @sql_str=@sql_str+' and BusinessState in (select Province from working_province where pcid='''+@PCID+''')'


insert #LeadActivity( Contact_Name, Civic_Address, Activity_Type, Activity_Date, Notes,
 CompanyName)
exec(@sql_str)

print @sql_str

exec sp_UpdateSCRptGrouping @PCID

select * from #LeadActivity
join scReport_Options on PCID=@PCID




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_scLeads]') and xtype = 'P ')  
 drop Procedure sp_Get_scLeads
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE   proc [dbo].[sp_Get_scLeads] @PCID varchar(500), @UserName varchar(500), @Zip varchar(32), @Campaign varchar(2), @SalesPerson int, @IsRealtor varchar(2)
as

--Declare @PCID varchar(500), @UserName varchar(500), @Zip varchar(32), @Campaign varchar(2), @SalesPerson int, @IsRealtor varchar(2)
--Select @PCID = 'a7220e60-b4b5-421d-bbf9-852bae6e8bd9', @UserName = '4', @Zip = '', @Campaign = 'B', @SalesPerson = 4, @IsRealtor = 'B'

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Leads '))  
drop table #Leads
create table #Leads
(
 ContactName varchar(100) null,
 [Address] varchar (255) null,
 City varchar(64) null,
 ProvinceState varchar(32) null,
 PostalCodeZip varchar(32) null,
 Phone varchar(64) null,
 Email varchar(128) null,
 SalesPerson varchar(100) null,
 Realtor varchar(100) null,
 LastName varchar(50) null,
 G1_VALUE varchar(100) null,
 G2_VALUE varchar(100) null,
 G3_VALUE varchar(100) null,
 G1_DESC varchar(100) null,
 G2_DESC varchar(100) null,
 G3_DESC varchar(100) null,
 CountryCode varchar(5) null 
)

Declare @Where varchar(8000), @Count int, @Sql varchar(8000), @TRDB varchar(500)
Set @Where = ''

If @Campaign <> 'B'
Begin
	Select @Where = ' AND IsNull(PersonalEmailOnly,0) = ' + @Campaign + ' '
End

If IsNull(@SalesPerson,-1) <> -1
Begin
	If Exists (Select * from user_owners where OwnerID = @SalesPerson)
	Begin
		Select @Where = @Where + ' AND Owner_ID in ((Select userid from user_owners Where OwnerID = ' + Convert(varchar(20),@SalesPerson) + '),' + Convert(varchar(20),@SalesPerson) + ')  '
	End
	Else
	Begin
		Select @Where = @Where + ' AND Owner_ID = ' + Convert(varchar(20),@SalesPerson) + ' '
	End
End

If @IsRealtor <> 'B'
Begin
	Select @Where = @Where + ' AND IsNull(IsRealtor,0) = ' + @IsRealtor + ' '
End

Exec ('Insert Into #Leads (ContactName, [Address], City, ProvinceState, PostalCodeZip, Phone, Email, SalesPerson, Realtor, LastName)

Select 
Case When IsNull(KnownAs,'''') <> '''' Then KnownAs
Else IsNull(LastName + '', '','''') + IsNull(FirstName,'''') End ContactName,
Case When IsNull(HomeStreet + '' '','''') + IsNull(HomeCity + '' '','''') + IsNull(HomeState + '' '','''') + IsNull(HomePostalCode + '' '','''') <> '''' Then HomeStreet
Else 
	Case When IsNull(BusinessStreet + '' '','''') + IsNull(BusinessCity + '' '','''') + IsNull(BusinessState + '' '','''') + IsNull(BusinessPostalCode + '' '','''') <> '''' Then BusinessStreet
	Else OtherStreet End
End [Address],
Case When IsNull(HomeStreet + '' '','''') + IsNull(HomeCity + '' '','''') + IsNull(HomeState + '' '','''') + IsNull(HomePostalCode + '' '','''') <> '''' Then HomeCity
Else 
	Case When IsNull(BusinessStreet + '' '','''') + IsNull(BusinessCity + '' '','''') + IsNull(BusinessState + '' '','''') + IsNull(BusinessPostalCode + '' '','''') <> '''' Then BusinessCity
	Else OtherCity End
End [City],
Case When IsNull(HomeStreet + '' '','''') + IsNull(HomeCity + '' '','''') + IsNull(HomeState + '' '','''') + IsNull(HomePostalCode + '' '','''') <> '''' Then HomeState
Else 
	Case When IsNull(BusinessStreet + '' '','''') + IsNull(BusinessCity + '' '','''') + IsNull(BusinessState + '' '','''') + IsNull(BusinessPostalCode + '' '','''') <> '''' Then BusinessState
	Else OtherState End
End [ProvinceState],
Case When IsNull(HomeStreet + '' '','''') + IsNull(HomeCity + '' '','''') + IsNull(HomeState + '' '','''') + IsNull(HomePostalCode + '' '','''') <> '''' Then HomePostalCode
Else 
	Case When IsNull(BusinessStreet + '' '','''') + IsNull(BusinessCity + '' '','''') + IsNull(BusinessState + '' '','''') + IsNull(BusinessPostalCode + '' '','''') <> '''' Then BusinessPostalCode
	Else OtherPostalCode End
End [PostalCodeZip],
Case When IsNull(PrimaryTelephoneNumber,'''') <> '''' Then PrimaryTelephoneNumber
	 When IsNull(AssistantTelephoneNumber,'''') <> '''' Then AssistantTelephoneNumber
	 When IsNull(MobileTelephoneNumber, '''') <> '''' Then MobileTelephoneNumber
	 When IsNull(BusinessTelephoneNumber,'''') <> '''' Then BusinessTelephoneNumber
	 When IsNull(Business2TelephoneNumber,'''') <> '''' Then Business2TelephoneNumber
	 When IsNull(HomeTelephoneNumber,'''') <> '''' Then HomeTelephoneNumber
	 When IsNull(Home2TelephoneNumber,'''') <> '''' Then Home2TelephoneNumber
	 Else OtherTelephoneNumber End [Phone],
Case When IsNull(Email1Address,'''') <> '''' Then Email1Address
	 When IsNull(Email2Address,'''') <> '''' Then Email2Address
	 Else Email3Address End [Email],
(Select Case When IsNull(KnownAs,'''') <> '''' Then KnownAs Else IsNull(LastName + '', '','''') + IsNull(FirstName,'''') End From Contact c Where c.ID = p.Owner_ID) [SalesPerson],
(Select Case When IsNull(KnownAs,'''') <> '''' Then KnownAs Else IsNull(LastName + '', '','''') + IsNull(FirstName,'''') End From Contact c Where c.ID = p.Realtor) [Realtor],
LastName
From Contact P
Where Type = ''Prospect'' ' + @Where)

Set @Where = ''

If IsNull(@Zip,'') <> ''
Begin
	Select @Where = ' AND PostalCodeZip Like ''' + @Zip + '%'' '
End

If Exists (Select * from working_city Where PCID = @PCID)
Begin
	Select @Where = ' AND City in (Select City From working_city Where PCID = ''' + @PCID + ''') '
End

If Exists (Select * from working_province Where PCID = @PCID)
Begin
	Select @Where = ' And ProvinceState in (Select Province From working_province Where PCID = ''' + @PCID + ''') '
End

Set @Count=1    
While @Count<=3    
Begin 
	 Set @Sql='If Exists (Select * From scReport_Options ro  
	 Where ro.PCID=''' + Cast(@PCID as varchar(500)) + '''
	 and ro.g' + Cast(@Count as varchar(2)) + '_field=''State/Province'')
	 Begin
	 Update #Leads
	 Set g' + Cast(@Count as varchar(2))+'_value=ProvinceState, g' + Cast(@Count as varchar(2)) + '_desc=ProvinceState
	 End'
	 Exec(@sql)

	 Set @Sql='If Exists (Select * From scReport_Options ro  
	 Where ro.PCID=''' + Cast(@PCID as varchar(500)) + '''
	 and ro.g' + Cast(@Count as varchar(2)) + '_field=''City'')
	 Begin
	 Update #Leads
	 Set g' + Cast(@Count as varchar(2))+'_value=City, g' + Cast(@Count as varchar(2)) + '_desc=City
	 End'
	 Exec(@sql)

	 Set @Sql='If Exists (Select * From scReport_Options ro  
	 Where ro.PCID=''' + Cast(@PCID as varchar(500)) + '''
	 and ro.g' + Cast(@Count as varchar(2)) + '_field=''Sales Person'')
	 Begin
	 Update #Leads
	 Set g' + Cast(@Count as varchar(2))+'_value=SalesPerson, g' + Cast(@Count as varchar(2)) + '_desc=SalesPerson
	 End'
	 Exec(@sql)

	 Set @Sql='If Exists (Select * From scReport_Options ro  
	 Where ro.PCID=''' + Cast(@PCID as varchar(500)) + '''
	 and ro.g' + Cast(@Count as varchar(2)) + '_field=''Realtor'')
	 Begin
	 Update #Leads
	 Set g' + Cast(@Count as varchar(2))+'_value=Realtor, g' + Cast(@Count as varchar(2)) + '_desc=Realtor
	 End'
	 Exec(@sql)

	 Select @Count = @Count + 1 
End

Select @TRDB = TreasuryDBName from working_reportdatabases Where UserID = @UserName

If @TRDB is null
Begin
	Update #Leads
	Set CountryCode = 'CDN'
End
Else
Begin
	Select @Sql = 'Update #Leads
				   Set CountryCode = (Select Case When (CO_Country = ''U'') Then ''USA'' Else ''CDN'' END 
				   From ' + @TRDB + '..Company)'
	Exec (@Sql)
End

Exec('Select ContactName, [Address], City, ProvinceState, PostalCodeZip, Phone, Email, SalesPerson, Realtor,
			 l.G1_VALUE, l.G2_VALUE, l.G3_VALUE, l.G1_DESC, l.G2_DESC, l.G3_DESC, CountryCode
From #Leads l, scReport_Options ro Where ro.PCID = ''' + @PCID + ''' ' + @Where +
' 
Order By LastName')

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_scProcess]') and xtype = 'P ')  
 drop Procedure sp_Get_scProcess
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE   proc [dbo].[sp_Get_scProcess] @PCID varchar(500), @ProcessStatus varchar(20), @StartDate datetime, @EndDate datetime  
as 

exec sp_scProcessListings @PCID, 'Lead', @ProcessStatus, @StartDate, @EndDate

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_scQuote]') and xtype = 'P ')  
 drop Procedure sp_Get_scQuote
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go















--exec sp_Get_scQuote 968

CREATE          proc sp_Get_scQuote @QUOTE_ID int
as

declare @sql_str as varchar(5000)

set @sql_str='
select co.Company_Name, qh.ID, qh.LeadID, qh.HoldingID, qh.CommunityID, qh.ProjectID, la.FirstName, la.LastName,
 qh.LotID, lot.LOT, lot.BLOCK, lot.PLAN_NO, lot.PRICE, lot.LOT_PREMIUM, lot.LIH_STR_NUM, lot.LIH_STR_NAME,
 lot.LIH_STR_SUFF, lot.ADDR_1, lot.ADDR_2, lot.ADDR_CITY, lot.ADDR_PROV, lot.ADDR_POSTAL_CODE, qh.LotGuesstimate,
 qh.ModelID, mod.BASE_PRICE, qh.ModelNameID, mn.MODEL_NAME, mn.MODEL_EXP_DESC, mn.WEB_DESC, mn.FOOTAGE,
 mn.BEDROOMS, mn.BATH, mn.HALF_BATH, mn.GARAGE, mn.BASE_PRICE, mn.ISORT, mn.MODEL_CODE, mn.MODSTYLE_ID, mn.FOOTAGE_un_code,
 qh.GoodUntilDate, qh.FinalPrice,
 qh.Status, qh.StartDate, qh.Proj_ID_ID, qh.pri_num, qh.ConvertFlag, qh.LotDesc,
 qh.CommunityDesc, qh.COPDate, qh.COIDate, qh.SaleDate, qh.BlockDesc,
 qh.CompanyID, qh.HoldingDesc, qh.ProjManagerID, qh.ProjManagerName, qh.GST, qh.GSTRebate, qh.GSTTotal,
 la.DefaultAddress, la.BusinessStreet, la.BusinessCity, la.BusinessPostalCode,
 la.BusinessState, la.BusinessCountry, la.HomeStreet, la.HomeCity, la.HomePostalCode, la.HomeState, la.HomeCountry,
 la.OtherStreet, la.OtherCity, la.OtherPostalCode, la.OtherState, la.OtherCountry, la.PhoneNarrative,
 la.PrimaryTelephoneNumber, la.AssistantTelephoneNumber, la.BusinessTelephoneNumber, la.Business2TelephoneNumber,
 la.HomeTelephoneNumber, la.Home2TelephoneNumber, la.MobileTelephoneNumber, la.OtherTelephoneNumber,
 la.PagerNumber, la.FaxNarrative, la.HomeFaxNumber, la.BusinessFaxNumber, la.OtherFaxNumber, la.EmailNarrative,
 la.Email1Address, la.Email1DisplayName, la.Email2Address, la.Email2DisplayName, la.Email3Address,
 la.Email3DisplayName, '''' [Details], lot.status_id
from scQuote qh
left outer join Companies co on qh.CompanyID=co.AutoID
left outer join scLead ld on qh.LeadID = ld.id
left outer join Contact la on la.id = ld.Contact_id
left outer join hb_lots lot on lot.LOT_ID = qh.LOTID
left outer join hb_model_name mn on mn.model_name_id = qh.ModelNameID
left outer join hb_model mod on mod.model_id = qh.ModelID and mod.raw_land_cd = qh.HoldingID
where qh.id='+cast(@QUOTE_ID as varchar(10))



exec(@sql_str)


















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_scQuoteAddendum]') and xtype = 'P ')  
 drop Procedure sp_Get_scQuoteAddendum
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go








--exec sp_Get_scQuoteAddendum 458, 'tr_reflex_demo1'
CREATE   proc sp_Get_scQuoteAddendum @QUOTE_ID int
as

select [Authorization] [Authorized By], SessionDate [When], DidWhat [Change Request]
from scAuthorizelog a
join scquoteChangelog c
on a.ID = AuthorLog
where quoteid = @QUOTE_ID







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_scQuoteOption]') and xtype = 'P ')  
 drop Procedure sp_Get_scQuoteOption
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go









--exec sp_Get_scQuoteOption 458

CREATE   proc sp_Get_scQuoteOption @QUOTE_ID int
as

declare @sql_str as varchar(5000)

set @sql_str='
select scqo.*, hbo.exp_desc, hbo.prc_fixed, hbo.prc_sell, hbo.cost_supl, hbo.cost_int
from scQuoteOption scqo, hb_options hbo
where quoteid='+cast(@QUOTE_ID as varchar(10))+' and scqo.Option_ID=hbo.Option_ID'

exec(@sql_str)












Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_scQuoteStructural]') and xtype = 'P ')  
 drop Procedure sp_Get_scQuoteStructural
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go









--exec sp_Get_scQuoteStructural 458

CREATE   proc sp_Get_scQuoteStructural @QUOTE_ID int
as

declare @sql_str as varchar(5000)

set @sql_str='
select scqs.*, hbo.exp_desc, hbo.prc_fixed, hbo.prc_sell, hbo.cost_supl, hbo.cost_int
from scQuoteStructural scqs, hb_options hbo
where scqs.quoteid='+cast(@QUOTE_ID as varchar(10))+' and scqs.option_id=hbo.option_id'

exec(@sql_str)












Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_scQuoteUpgrade]') and xtype = 'P ')  
 drop Procedure sp_Get_scQuoteUpgrade
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go










--exec sp_Get_scQuoteUpgrade 505

CREATE    proc sp_Get_scQuoteUpgrade @QUOTE_ID int
as

declare @sql_str as varchar(5000)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TmpOutput'))
drop table #TmpOutput

CREATE TABLE #TmpOutput 
(ID int NULL,
QuoteID int NULL,
UpgradeID int NULL,
Price real NULL,
exp_desc text NULL,
prc_fixed real NULL,
prc_sell real NULL,
cost_supl real NULL,
cost_int real NULL)

set @sql_str='
insert #TmpOutput
select scqu.ID, scqu.QuoteID, scqu.UpgradeID, scqu.Price,
 hbo.exp_desc, hbo.prc_fixed, hbo.prc_sell, hbo.cost_supl, hbo.cost_int
from scQuoteUpgrade scqu, hb_options hbo
where quoteid='+cast(@QUOTE_ID as varchar(10))+' and upgradeid=option_id'
exec(@sql_str)

set @sql_str='
insert #TmpOutput
select scqo.ID, scqo.QuoteID, scqo.OriginalOption_ID, scqo.Net,
''Removed: ''+hbo.exp_desc [exp_desc], hbo.prc_fixed, hbo.prc_sell, hbo.cost_supl, hbo.cost_int
from scQuoteOption scqo, hb_options hbo
where scqo.quoteid='+cast(@QUOTE_ID as varchar(10))+' and scqo.option_id=0
and scqo.OriginalOption_ID=hbo.option_id'
exec(@sql_str)

select * from #TmpOutput












Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_scRevenueAnalysis]') and xtype = 'P ')  
 drop Procedure sp_Get_scRevenueAnalysis
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go













--select * from scReport_Options
-- exec sp_Get_scRevenueAnalysis '41c53bb4-daf0-4517-b444-23e7798314aa'

CREATE proc [dbo].[sp_Get_scRevenueAnalysis] @PCID varchar(500)
as

declare @sql_str as varchar(5000),
 @sql varchar(2500),
 @count int

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Sales'))
drop table #Sales

create table #Sales(
 SlsID int null,
 SalesPersonName varchar(128) null,
 SlsMgrID int null,
 SalesManagerName varchar(128) null,
 Sale_Date datetime null,
 HoldingDesc varchar(128) null,
 CommunityDesc varchar(128) null,
 PhaseDesc varchar(128) null,
 Base_Sales money null,
 Option_Sales money null,
 QuoteID int null,
 CompanyName varchar(100) null,
G1_VALUE varchar(50) null,
G2_VALUE varchar(50) null,
G3_VALUE varchar(50) null,
G1_DESC varchar(50) null,
G2_DESC varchar(50) null,
G3_DESC varchar(50) null)


-- declare
-- @CommunityID int, @CommunityDesc varchar(100),

set @sql_str='
select qs.ContactID, c.FirstName+'' ''+c.LastName,
 q.ID, '''', q.HoldingDesc, q.CommunityDesc, q.ProjectDesc,
 q.finalprice,0.00, q.SaleDate, co.company_name
from scQuote q
join scQuoteSalesman qs on qs.QuoteID=q.ID
join contact c on c.ID=qs.ContactID
join companies co on co.autoid=q.companyid
where status=''S'''

if exists (select * from working_holding where pcid=@PCID)
set @sql_str=@sql_str+' and q.HoldingDesc in (select hbrl.raw_land_desc from working_holding wh
join hb_raw_land hbrl on hbrl.raw_land_cd=wh.raw_land_cd where pcid='''+@PCID+''')'

if exists (select * from working_community where pcid=@PCID)
set @sql_str=@sql_str+' and q.CommunityDesc in (select community_desc from working_community wc
join hb_communities hbc on hbc.community_cd=wc.community_cd where pcid='''+@PCID+''')'

if exists (select * from working_project where pcid=@PCID)
set @sql_str=@sql_str+' and q.ProjectDesc in (select project_desc from working_project wp
join hb_project hbp on hbp.project_cd=wp.project_cd where pcid='''+@PCID+''')'

insert #Sales(SlsID, SalesPersonName, QuoteID, SalesManagerName, HoldingDesc,
 CommunityDesc, PhaseDesc, Base_Sales, Option_Sales, Sale_Date, CompanyName)
exec(@sql_str)

print @sql_str

set @count=1    
while @count<=3    
begin    
 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Community'')
 begin
 update #Sales
 set g'+cast(@count as varchar)+'_value=CommunityDesc, g'+cast(@count as varchar)+'_desc=CommunityDesc
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Date'')
 begin
 update #Sales
 set g'+cast(@count as varchar)+'_value=cast(Sale_Date as varchar(255)), g'+cast(@count as varchar)+'_desc=cast(Sale_Date as varchar(255))
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Holding'')
 begin
 update #Sales
 set g'+cast(@count as varchar)+'_value=HoldingDesc, g'+cast(@count as varchar)+'_desc=HoldingDesc
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Phase'')
 begin
 update #Sales
 set g'+cast(@count as varchar)+'_value=PhaseDesc, g'+cast(@count as varchar)+'_desc=PhaseDesc
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Sales Person'')
 begin
 update #Sales
 set g'+cast(@count as varchar)+'_value=SalespersonName, g'+cast(@count as varchar)+'_desc=SalespersonName
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Sales Manager'')
 begin
 update #Sales
 set g'+cast(@count as varchar)+'_value=SalesManagerName, g'+cast(@count as varchar)+'_desc=SalesManagerName
 end'
 exec(@sql)

-- select * from rpt_dynamic_grouping where rpt=104
 set @count=@count+1    
end

exec sp_UpdateSCRptGrouping @PCID

update #sales set option_sales=isnull((select sum(unittotal) from scQuoteOptions where quoteid=#sales.QuoteID),0)
update #sales set base_sales=isnull(base_sales,0)-isnull(option_sales,0)

select * from #Sales s
join scReport_Options sc on PCID=@PCID
where s.Sale_Date<=sc.end_date
and s.Sale_Date>=sc.start_date


























Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_scSales]') and xtype = 'P ')  
 drop Procedure sp_Get_scSales
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go










--exec sp_Get_scSales '02/09/2006', '02/13/2006', 'c95a0548-48e1-4e75-89e1-e551ccb273a7'

CREATE     proc sp_Get_scSales @StartDate datetime, @EndDate datetime, @PCID varchar(500)
as

declare @sql_str as varchar(5000)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Sales'))
drop table #Sales
create table #Sales(
 LeadID int null,
 PhaseID int null,
 PhaseName varchar(100) null,
 CommunityID int null,
 CommunityName varchar(100) null,
 HoldingID int null,
 HoldingName varchar(100) null,
 StartDate datetime null,
 EndDate datetime null,
 Block_Desc varchar(128) null,
 Lot_Desc varchar(128) null,
 Civic_Address varchar(255) null,
 Purchaser varchar(128) null,
 Purch_Amt money null,
 Sales_date datetime null,
 UserID int null,
 Salesperson varchar(128) null,
 Lead_Source varchar(128) null,
 Initial_Contact datetime null,
 Is_Realtor varchar(2) null,
 CompanyID int null,
 CompanyName varchar(100) null
 )

 declare
 @CommunityID int, @CommunityDesc varchar(100),
 @HoldingID int, @HoldingDesc varchar(100),
 @ProjectID int, @ProjectDesc varchar(100)

set @sql_str='
select LeadID [LeadID], ProjectID [PhaseID], ProjectDesc [PhaseName],
 CommunityID [CommunityID], CommunityDesc [CommunityName],
 HoldingID [HoldingID], HoldingDesc [HoldingName], NULL [StartDate], NULL [EndDate],
 BlockDesc [Block_Desc], LotDesc [Lot_Desc], CivicAddress [Civic_Address], NULL [Purchaser],
 FinalPrice [Purch_Amt], SaleDate [Sales_Date], NULL [UserID], NULL [Salesperson],
 ''Other'' [Lead_Source], Created [Initial_Contact], ''N'' [Is_Realtor], CompanyID [CompanyID], NULL [CompanyName]
from scQuote where status=''S'''
--nd saledate between '''+@startdate+''' and '''+@enddate+''''
if exists (select * from working_holding where pcid=@PCID)
set @sql_str=@sql_str+' and scQuote.HoldingID in (select raw_land_cd from working_holding where pcid='''+@PCID+''')'
if exists (select * from working_community where pcid=@PCID)
set @sql_str=@sql_str+' and scQuote.CommunityID in (select community_cd from working_community where pcid='''+@PCID+''')'
if exists (select * from working_project where pcid=@PCID)
set @sql_str=@sql_str+' and scQuote.ProjectID in (select project_cd from working_project where pcid='''+@PCID+''')'
print @sql_str
insert #Sales
exec(@sql_str)

update #Sales set CompanyName=(select Company_Name from companies where AUTOID=CompanyID)
update #Sales set Purchaser=(select LastName+', '+FirstName from scLead
 join Contact on Contact.ID=scLead.Contact_ID where scLead.ID=LeadID)
update #Sales set UserID=(select SalesmanID from scLead where ID=LeadID)
update #Sales set Salesperson=(select USER_NAME from USER_LOGIN where user_login_id=UserID)

select * from #Sales where sales_date between @startdate and @enddate and purch_amt <>0
















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_scSalesActivity]') and xtype = 'P ')  
 drop Procedure sp_Get_scSalesActivity
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

--select * from scReport_Options  
--exec sp_Get_scSalesActivity 'f3060f65-d0af-4d45-9640-8b87b32b143a'  
CREATE  proc sp_Get_scSalesActivity @PCID varchar(500)  
as  
  
declare  
-- @PCID varchar(500),  
 @sql_str varchar(5000),  
 @sql varchar(2500),  
 @count int,  
 @start datetime,  
 @end datetime  
--select @PCID='6d13329c-f92d-4005-b7fd-9457410942ef'  
  
select @start=start_date, @end=end_date from scReport_Options where pcid=@PCID  
  
delete from rpt_dynamic_grouping where rpt=104  
insert rpt_dynamic_grouping(rpt,g_field)  
select 104,'Sales Manager'  
union  
select 104,'Sales Person'  
  
  
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Sales'))  
drop table #Sales  
  
create table #Sales(  
 SlsID int null,  
 SalesPersonName varchar(128) null,  
 SlsMgrID int null, SalesManagerName varchar(128) null,   
 HoldingDesc varchar(128) null,  
 HoldingID int null,  
 CommunityDesc varchar(128) null,  
 CommunityID int null,  
 PhaseDesc varchar(128) null,  
 ProjectID int null,  
 ytd_Leads int null,  
 ytd_Quotes int null,  
 ytd_Sales int null,  
 ytd_Quote_Success money null,  
 ytd_Sales_Success money null,  
 mth_Leads int null,  
 mth_Quotes int null,  
 mth_Sales int null,  
 mth_Quote_Success money null,  
 mth_Sales_Success money null,  
 CompanyName varchar(100) null,  
G1_VALUE varchar(50) null,  
G2_VALUE varchar(50) null,  
G3_VALUE varchar(50) null,  
G1_DESC varchar(50) null,  
G2_DESC varchar(50) null,  
G3_DESC varchar(50) null)  
  
  
-- declare  
-- @CommunityID int, @CommunityDesc varchar(100),  
  
set @sql_str='  
select distinct qs.ContactID, c.FirstName+'' ''+c.LastName, 0, '''',  
 q.HoldingDesc, q.HoldingID, q.CommunityDesc, q.CommunityID, q.ProjectDesc, q.ProjectID,  
 0,0,0,0.00,0.00,0,0,0,0.00,0.00, co.company_name  
from scQuote q  
join scQuoteSalesman qs on qs.QuoteID=q.ID  
join contact c on c.ID=qs.ContactID  
join companies co on co.autoid=q.companyid'  
  
  
if exists (select * from working_holding where pcid=@PCID)  
set @sql_str=@sql_str+' and q.HoldingDesc in (select hbrl.raw_land_desc from working_holding wh  
join hb_raw_land hbrl on hbrl.raw_land_cd=wh.raw_land_cd where pcid='''+@PCID+''')'  
  
if exists (select * from working_community where pcid=@PCID)  
set @sql_str=@sql_str+' and q.CommunityDesc in (select community_desc from working_community wc  
join hb_communities hbc on hbc.community_cd=wc.community_cd where pcid='''+@PCID+''')'  
  
if exists (select * from working_project where pcid=@PCID)  
set @sql_str=@sql_str+' and q.ProjectDesc in (select project_desc from working_project wp  
join hb_project hbp on hbp.project_cd=wp.project_cd where pcid='''+@PCID+''')'  

if exists (select * from working_salesperson where pcid=@PCID)
set @sql_str=@sql_str+' and qs.ContactID in (select ID from working_salesperson where pcid='''+@PCID+''')'

print @sql_str  
insert #Sales(SlsID, SalesPersonName, SlsMgrID, SalesManagerName, HoldingDesc, HoldingID,  
 CommunityDesc, CommunityID, PhaseDesc, ProjectID, ytd_Leads, ytd_Quotes, ytd_Sales, ytd_Quote_Success, ytd_Sales_Success, mth_Leads, mth_Quotes, mth_Sales,  
 mth_Quote_Success, mth_Sales_Success, CompanyName)  
exec(@sql_str)  
  
  
set @count=1      
while @count<=3      
begin      
 set @sql='  
 if exists (select * from scReport_Options ro      
 where ro.PCID='''+cast(@PCID as varchar(500))+'''  
 and ro.g'+cast(@count as varchar)+'_field=''Community'')  
 begin  
 update #Sales  
 set g'+cast(@count as varchar)+'_value=CommunityDesc, g'+cast(@count as varchar)+'_desc=CommunityDesc  
 end'  
 exec(@sql)  
  
-- set @sql='  
-- if exists (select * from scReport_Options ro      
-- where ro.PCID='''+cast(@PCID as varchar(500))+'''  
-- and ro.g'+cast(@count as varchar)+'_field=''Date'')  
-- begin  
-- update #Sales  
-- set g'+cast(@count as varchar)+'_value=cast(Sale_Date as varchar(255)), g'+cast(@count as varchar)+'_desc=cast(Sale_Date as varchar(255))  
-- end'  
-- exec(@sql)  
  
 set @sql='  
 if exists (select * from scReport_Options ro      
 where ro.PCID='''+cast(@PCID as varchar(500))+'''  
 and ro.g'+cast(@count as varchar)+'_field=''Holding'')  
 begin  
 update #Sales  
 set g'+cast(@count as varchar)+'_value=HoldingDesc, g'+cast(@count as varchar)+'_desc=HoldingDesc  
 end'  
 exec(@sql)  
  
 set @sql='  
 if exists (select * from scReport_Options ro      
 where ro.PCID='''+cast(@PCID as varchar(500))+'''  
 and ro.g'+cast(@count as varchar)+'_field=''Phase'')  
 begin  
 update #Sales  
 set g'+cast(@count as varchar)+'_value=PhaseDesc, g'+cast(@count as varchar)+'_desc=PhaseDesc  
 end'  
 exec(@sql)  
  
 set @sql='  
 if exists (select * from scReport_Options ro      
 where ro.PCID='''+cast(@PCID as varchar(500))+'''  
 and ro.g'+cast(@count as varchar)+'_field=''Sales Person'')  
 begin  
 update #Sales  
 set g'+cast(@count as varchar)+'_value=SalespersonName, g'+cast(@count as varchar)+'_desc=SalespersonName  
 end'  
 exec(@sql)  
  
 set @sql='  
 if exists (select * from scReport_Options ro      
 where ro.PCID='''+cast(@PCID as varchar(500))+'''  
 and ro.g'+cast(@count as varchar)+'_field=''Sales Manager'')  
 begin  
 update #Sales  
 set g'+cast(@count as varchar)+'_value=SalesManagerName, g'+cast(@count as varchar)+'_desc=SalesManagerName  
 end'  
 exec(@sql)  
  
-- select * from rpt_dynamic_grouping where rpt=104  
 set @count=@count+1      
end  
  
exec sp_UpdateSCRptGrouping @PCID  
  
update #Sales  
set mth_leads=(select count(*) from scQuote q  
join scQuoteSalesman qs on qs.QuoteID=q.ID  
 where SlsID=qs.ContactID and SaleDate>=@start and SaleDate<=@end  
 and q.HoldingID=#sales.holdingid and q.CommunityID=#sales.CommunityID and q.ProjectID=#sales.ProjectID)  
update #Sales  
set mth_quotes=(select count(*) from scQuote  q  
join scQuoteSalesman qs on qs.QuoteID=q.ID  
 where SlsID=qs.ContactID and SaleDate>=@start and SaleDate<=@end and status is null  
 and q.HoldingID=#sales.holdingid and q.CommunityID=#sales.CommunityID and q.ProjectID=#sales.ProjectID)  
update #Sales  
set mth_sales=(select count(*) from scQuote  q  
join scQuoteSalesman qs on qs.QuoteID=q.ID where SlsID=qs.ContactID and SaleDate>=@start and SaleDate<=@end and status='S'  
 and q.HoldingID=#sales.holdingid and q.CommunityID=#sales.CommunityID and q.ProjectID=#sales.ProjectID)  
  
update #sales  
set ytd_leads=(select count(*) from scQuote  q  
join scQuoteSalesman qs on qs.QuoteID=q.ID where SlsID=qs.ContactID and SaleDate<=@end and datepart(yyyy,SaleDate)=datepart(yyyy,@end)  
 and q.HoldingID=#sales.holdingid and q.CommunityID=#sales.CommunityID and q.ProjectID=#sales.ProjectID)  
update #sales  
set ytd_quotes=(select count(*) from scQuote  q  
join scQuoteSalesman qs on qs.QuoteID=q.ID  
where SlsID=qs.ContactID and SaleDate<=@end and datepart(yyyy,SaleDate)=datepart(yyyy,@end) and status is null  
 and q.HoldingID=#sales.holdingid and q.CommunityID=#sales.CommunityID and q.ProjectID=#sales.ProjectID)  
update #sales  
set ytd_sales=(select count(*) from scQuote  q  
join scQuoteSalesman qs on qs.QuoteID=q.ID where SlsID=qs.ContactID and SaleDate<=@end and datepart(yyyy,SaleDate)=datepart(yyyy,@end) and status='S'  
 and q.HoldingID=#sales.holdingid and q.CommunityID=#sales.CommunityID and q.ProjectID=#sales.ProjectID)  
  
  
select * from #Sales s  
join scReport_Options sc on sc.PCID=@PCID  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Get_scTraffic]') and xtype = 'P ')  
 drop Procedure sp_Get_scTraffic
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go












--select * from scReport_Options Order By Start_Date
--exec sp_Get_scTraffic '02/01/2006', '02/23/2006', '21e275e2-fa5f-422b-8d2b-2410fdf407cd'

CREATE          proc [dbo].[sp_Get_scTraffic] @StartDate datetime, @EndDate datetime, @PCID varchar(500)
as

--Declare @PCID varchar(500), @EndDate datetime, @StartDate datetime
--Select @PCID = '21e275e2-fa5f-422b-8d2b-2410fdf407cd', @StartDate = '04/20/2007', @EndDate = '04/30/2007'

declare @sql_str as varchar(5000)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#work_tmp'))
drop table #work_tmp
create table #work_tmp
(CommunityID int NULL,
 CommunityDesc varchar(500) NULL,
 HoldingID int NULL,
 HoldingDesc varchar(500) NULL,
 ProjectID int NULL,
 ProjectDesc varchar(500) NULL,
 CompanyID int NULL)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#RunDays'))
drop table #RunDays
create table #RunDays(
 id int identity(1,1) not null,
 PhaseID int null,
 PhaseName varchar(100) null,
 CommunityID int null,
 CommunityName varchar(100) null,
 HoldingID int null,
 HoldingName varchar(100) null,
 StartDate datetime null,
 EndDate datetime null,
 Date datetime null,
 Day varchar(20) null,
 block1 int null,
 blk1_sdesc varchar(10) null,
 blk1_edesc varchar(10) null,
 block2 int null,
 blk2_sdesc varchar(10) null,
 blk2_edesc varchar(10) null,
 block3 int null,
 blk3_sdesc varchar(10) null,
 blk3_edesc varchar(10) null,
 block4 int null,
 blk4_sdesc varchar(10) null,
 blk4_edesc varchar(10) null,
 block5 int null,
 blk5_sdesc varchar(10) null,
 blk5_edesc varchar(10) null,
 block6 int null,
 blk6_sdesc varchar(10) null,
 blk6_edesc varchar(10) null,
 block7 int null,
 blk7_sdesc varchar(10) null,
 blk7_edesc varchar(10) null,
 block8 int null,
 blk8_sdesc varchar(10) null,
 blk8_edesc varchar(10) null,
 block9 int null,
 blk9_sdesc varchar(10) null,
 blk9_edesc varchar(10) null,
 block10 int null,
 blk10_sdesc varchar(10) null,
 blk10_edesc varchar(10) null,
 block11 int null,
 blk11_sdesc varchar(10) null,
 blk11_edesc varchar(10) null,
 block12 int null,
 blk12_sdesc varchar(10) null,
 blk12_edesc varchar(10) null,
 Totals int null, 
 VisitType1 int null,
 VisitType1Desc varchar(50) null,
 VisitType2 int null,
 VisitType2Desc varchar(50) null,
 VisitType3 int null,
 VisitType3Desc varchar(50) null,
 Owners int null,
 Realitors int null,
 Other int null,
 TotalQuotes int null,
 TotalSales int null,
 TotalNewLeads int null,
 TotalLeadsMod int null,
 CompanyID int NULL,
 CompanyName varchar(100) null
 )

declare @x int, @RunDate datetime

select @x = datediff(day, @EndDate, @Startdate), @RunDate = @Startdate
declare @Start int, @End int


Declare @VisitTypeID int, @vt1 int, @vt2 int, @vt3 int,
		@vtn1 varchar(50), @vtn2 varchar(50), @vtn3 varchar(50)

Select @vtn1='', @vtn2 = '', @vtn3 = '', @vt1 = 0, @vt2 = 0, @vt3 = 0

Declare aVisitTypes Cursor For

Select Top 3 VisitTypeID From working_VisitTypes Where PCID = @PCID

Open aVisitTypes 
Fetch aVisitTypes Into @VisitTypeID

While @@Fetch_Status = 0
Begin
	
	If (IsNull(@vt1,0) = 0)
		Begin
			Set @vt1 = @VisitTypeID
			Select @vtn1 = VisitType From VisitType Where ID = @VisitTypeID
		End
	Else If IsNull(@vt2,0) = 0
		Begin
			Set @vt2 = @VisitTypeID
			Select @vtn2 = VisitType From VisitType Where ID = @VisitTypeID
		End
	Else If IsNull(@vt3,0) = 0
		Begin
			Set @vt3 = @VisitTypeID
			Select @vtn3 = VisitType From VisitType Where ID = @VisitTypeID
		End
	
	Fetch aVisitTypes Into @VisitTypeID	
End

Close aVisitTypes
DeAllocate aVisitTypes

while @RunDate <= @EndDate
begin 

 declare @b1 int, @b2 int, @b3 int, @b4 int, @b5 int, @b6 int, @b7 int, @b8 int, @b9 int, @b10 int, @b11 int, @b12 int, @t int, @bb int, @iv int, @o int, @r int,
 @AP1 int, @AP2 int,
 @b1ds varchar(10), @b1de varchar(10),
 @b2ds varchar(10), @b2de varchar(10),
 @b3ds varchar(10), @b3de varchar(10),
 @b4ds varchar(10), @b4de varchar(10),
 @b5ds varchar(10), @b5de varchar(10),
 @b6ds varchar(10), @b6de varchar(10),
 @b7ds varchar(10), @b7de varchar(10),
 @b8ds varchar(10), @b8de varchar(10),
 @b9ds varchar(10), @b9de varchar(10),
 @b10ds varchar(10), @b10de varchar(10),
 @b11ds varchar(10), @b11de varchar(10),
 @b12ds varchar(10), @b12de varchar(10),
 @CommunityID int, @CommunityDesc varchar(100),
 @HoldingID int, @HoldingDesc varchar(100),
 @PhaseID int, @ProjectDesc varchar(100),
 @CompanyID int, @Other int

set @sql_str='
select CommunityID,CommunityDesc,HoldingID,HoldingDesc,ProjectID,ProjectDesc,CompanyID from scQuote where 1=1'
if exists (select * from working_community where PCID=@PCID)
set @sql_str=@sql_str+' and  CommunityID in (select Community_CD from working_community where PCID='''+@PCID+''')'
if exists (select * from working_holding where PCID=@PCID)
set @sql_str=@sql_str+' and HoldingID in (select Raw_Land_CD from working_holding where PCID='''+@PCID+''')'
if exists (select * from working_project where PCID=@PCID)
set @sql_str=@sql_str+' and ProjectID in (select Project_CD from working_project where PCID='''+@PCID+''')'

insert into #work_tmp
exec(@sql_str)

select @CommunityID=CommunityID,@CommunityDesc=CommunityDesc,
       @HoldingID=HoldingID,
       @HoldingDesc=HoldingDesc,
       @Phaseid=ProjectID,
       @ProjectDesc=ProjectDesc,
       @CompanyID=CompanyID from #work_tmp

--block 1
 select @AP1 = patindex('%P.M.%',block1s),
 @AP2 =  patindex('%P.M.%',block1e),
 @b1ds = block1s, @b1de = block1e
 from scSchedules 
 where Phaseid = @Phaseid
 and CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block1s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block1e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b1 = sum(NumberOfVisits)
 from ContactHistory
 where PhaseID = @PhaseID
 and CompanyID = @CompanyID
-- and (ContactType_ID=7 or ContactType_ID=8)
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
-- and datepart(hour,ItemDate) >= @Start
 and datepart(hour,DateCreated) < @End
 and VisitType in (Select ID from VisitType where ContactTypeGroup_ID = 4)

--block 2 
 select @AP1 = patindex('%P.M.%',block2s),
 @AP2 =  patindex('%P.M.%',block2e),
 @b2ds = block2s, @b2de = block2e
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block2s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block2e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b2 = sum(NumberOfVisits)
 from ContactHistory
 where PhaseID = @PhaseID
 and CompanyID = @CompanyID
-- and (ContactType_ID=7 or ContactType_ID=8)
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and VisitType in (Select ID from VisitType where ContactTypeGroup_ID = 4)


--block 3
 select @AP1 = patindex('%P.M.%',block3s),
 @AP2 =  patindex('%P.M.%',block3e),
 @b3ds = block3s, @b3de = block3e
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block3s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block3e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b3 = sum(NumberOfVisits)
 from ContactHistory
 where PhaseID = @PhaseID
 and CompanyID = @CompanyID
-- and (ContactType_ID=7 or ContactType_ID=8)
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and VisitType in (Select ID from VisitType where ContactTypeGroup_ID = 4)

--block 4 
 select @AP1 = patindex('%P.M.%',block4s),
 @AP2 =  patindex('%P.M.%',block4e),
 @b4ds = block4s, @b4de = block4e
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block4s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block4e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b4 = sum(NumberOfVisits)
 from ContactHistory
 where PhaseID = @PhaseID
 and CompanyID = @CompanyID
-- and (ContactType_ID=7 or ContactType_ID=8)
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and VisitType in (Select ID from VisitType where ContactTypeGroup_ID = 4)

--block 5 
 select @AP1 = patindex('%P.M.%',block5s),
 @AP2 =  patindex('%P.M.%',block5e),
 @b5ds = block5s, @b5de = block5e
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block5s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block5e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b5 = sum(NumberOfVisits)
 from ContactHistory
 where PhaseID = @PhaseID
 and CompanyID = @CompanyID
-- and (ContactType_ID=7 or ContactType_ID=8)
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and VisitType in (Select ID from VisitType where ContactTypeGroup_ID = 4)

--block 6 
 select @AP1 = patindex('%P.M.%',block6s),
 @AP2 =  patindex('%P.M.%',block6e),
 @b6ds = block6s, @b6de = block6e
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block6s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block6e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b6 = sum(NumberOfVisits)
 from ContactHistory
 where PhaseID = @PhaseID
 and CompanyID = @CompanyID
-- and (ContactType_ID=7 or ContactType_ID=8)
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and VisitType in (Select ID from VisitType where ContactTypeGroup_ID = 4)

--block 7 
 select @AP1 = patindex('%P.M.%',block7s),
 @AP2 =  patindex('%P.M.%',block7e),
 @b7ds = block7s, @b7de = block7e
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block7s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block7e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b7 = sum(NumberOfVisits)
 from ContactHistory
 where PhaseID = @PhaseID
 and CompanyID = @CompanyID
-- and (ContactType_ID=7 or ContactType_ID=8)
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and VisitType in (Select ID from VisitType where ContactTypeGroup_ID = 4)

--block 8
 select @AP1 = patindex('%P.M.%',block8s),
 @AP2 =  patindex('%P.M.%',block8e),
 @b8ds = block8s, @b8de = block8e
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block8s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block8e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b8 = sum(NumberOfVisits)
 from ContactHistory
 where PhaseID = @PhaseID
 and CompanyID = @CompanyID
-- and (ContactType_ID=7 or ContactType_ID=8)
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and VisitType in (Select ID from VisitType where ContactTypeGroup_ID = 4)

--block 9
 select @AP1 = patindex('%P.M.%',block9s),
 @AP2 =  patindex('%P.M.%',block9e),
 @b9ds = block9s, @b9de = block9e
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block9s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block9e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b9 = sum(NumberOfVisits)
 from ContactHistory
 where PhaseID = @PhaseID
 and CompanyID = @CompanyID
-- and (ContactType_ID=7 or ContactType_ID=8)
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and VisitType in (Select ID from VisitType where ContactTypeGroup_ID = 4)

--block 10
 select @AP1 = patindex('%P.M.%',block10s),
 @AP2 =  patindex('%P.M.%',block10e),
 @b10ds = block10s, @b10de = block10e
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID
 
 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block10s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block10e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b10 = sum(NumberOfVisits)
 from ContactHistory
 where PhaseID = @PhaseID
 and CompanyID = @CompanyID
-- and (ContactType_ID=7 or ContactType_ID=8)
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and VisitType in (Select ID from VisitType where ContactTypeGroup_ID = 4)

--block 11 
 select @AP1 = patindex('%P.M.%',block11s),
 @AP2 =  patindex('%P.M.%',block11e),
 @b11ds = block11s, @b11de = block11e
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block11s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block11e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b11 = sum(NumberOfVisits)
 from ContactHistory
 where PhaseID = @PhaseID
 and CompanyID = @CompanyID
-- and (ContactType_ID=7 or ContactType_ID=8)
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and VisitType in (Select ID from VisitType where ContactTypeGroup_ID = 4)

--block 12
 select @AP1 = patindex('%P.M.%',block12s),
 @AP2 =  patindex('%P.M.%',block12e),
 @b12ds = block12s, @b12de = block12e
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @AP1 = case when @AP1 > 0 then 12 else 0 end,
 @AP2 = case when @AP2 > 0 then 12 else 0 end

 select @Start = isNull(@AP1,0) + isNull(cast(replace(replace(block12s,'A.M.', ''),'P.M.', '') as int),0),
        @End = isNull(@AP2,0) + isNull(cast(replace(replace(block12e,'A.M.', ''),'P.M.', '') as int),0)
 from scSchedules 
 where Phaseid = @Phaseid 
 and CompanyID = @CompanyID

 select @Start = case when @Start = 24 then 12 when @Start = 12 then 24 else @Start end,
 @End = case when @End = 24 then 12 when @End = 12 then 24 else @End end

 select @b12 = sum(NumberOfVisits)
 from ContactHistory
 where PhaseID = @PhaseID
 and CompanyID = @CompanyID
-- and (ContactType_ID=7 or ContactType_ID=8)
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and datepart(hour,DateCreated) >= @Start
 and datepart(hour,DateCreated) < @End
 and VisitType in (Select ID from VisitType where ContactTypeGroup_ID = 4)

-- .. block 12

--totals

 select @t = sum(NumberOfVisits)
 from ContactHistory
 where PhaseID = @PhaseID
 and CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and VisitType in (Select ID from VisitType Where ContactTypeGroup_ID = 4)
 
--Visit Type 1
 select @bb = sum(NumberOfVisits)
 from ContactHistory
 where PhaseID = @PhaseID
 and CompanyID = @CompanyID
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and VisitType = @vt1


--Visit Type 2
 select @iv = sum(NumberOfVisits)
 from ContactHistory
 where PhaseID = @PhaseID
 and CompanyID = @CompanyID
-- and (ContactType_ID=7 or ContactType_ID=8)
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and VisitType = @vt2

 
--Visit Type 3
 select @o = sum(NumberOfVisits)
 from ContactHistory
 where PhaseID = @PhaseID
 and CompanyID = @CompanyID
-- and (ContactType_ID=7 or ContactType_ID=8)
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and VisitType = @vt3

--Other Visit Types
select @Other = sum(NumberOfVisits)
 from ContactHistory
 where PhaseID = @PhaseID
 and CompanyID = @CompanyID
-- and (ContactType_ID=7 or ContactType_ID=8)
 and (datepart(year,DateCreated) = datepart(year,@RunDate)
 and datepart(month,DateCreated) = datepart(month,@RunDate)
 and datepart(day,DateCreated) = datepart(day,@RunDate))
 and VisitType not in (@vt1,@vt2,@vt3)
 and VisitType in (Select ID from VisitType where ContactTypeGroup_ID = 4)

 insert #RunDays(
 PhaseID, PhaseName,
 CommunityID, CommunityName,
 HoldingID, HoldingName,
 StartDate, EndDate, Date, Day,
 block1, blk1_sdesc, blk1_edesc,
 block2, blk2_sdesc, blk2_edesc,
 block3, blk3_sdesc, blk3_edesc,
 block4, blk4_sdesc, blk4_edesc,
 block5, blk5_sdesc, blk5_edesc,
 block6, blk6_sdesc, blk6_edesc,
 block7, blk7_sdesc, blk7_edesc,
 block8, blk8_sdesc, blk8_edesc,
 block9, blk9_sdesc, blk9_edesc,
 block10, blk10_sdesc, blk10_edesc,
 block11, blk11_sdesc, blk11_edesc,
 block12, blk12_sdesc, blk12_edesc,
 totals, VisitType1, VisitType1Desc, VisitType2, VisitType2Desc, VisitType3, VisitType3Desc, Other, CompanyID)
 select @PhaseID, @ProjectDesc, @CommunityID, @CommunityDesc, @HoldingID, @HoldingDesc, @Startdate, @EndDate, @RunDate, datename(dw, @RunDate),
 @b1, @b1ds, @b1de,
 @b2, @b2ds, @b2de,
 @b3, @b3ds, @b3de,
 @b4, @b4ds, @b4de,
 @b5, @b5ds, @b5de,
 @b6, @b6ds, @b6de,
 @b7, @b7ds, @b7de,
 @b8, @b8ds, @b8de,
 @b9, @b9ds, @b9de,
 @b10, @b10ds, @b10de,
 @b11, @b11ds, @b11de,
 @b12, @b12ds, @b12de,
 @t, IsNull(@bb,0), IsNull(@vtn1,''), IsNull(@iv,0), IsNull(@vtn2,''), IsNull(@o,0), IsNull(@vtn3,''), IsNull(@Other,0), @CompanyID
 select @RunDate = dateadd(day,1,@RunDate)

end

update #RunDays set CompanyName=(select Company_Name from companies where CompanyID=AutoID)

update #RunDays set TotalQuotes=(select count(*) from scQuote sc
  where sc.CompanyID=CompanyID and sc.HoldingID=HoldingID and
  sc.CommunityID=CommunityID and sc.ProjectID=PhaseID and sc.status<>'S' and
  sc.Created between @startdate and @enddate)
update #RunDays set TotalSales=(select count(*) from scQuote sc
  where sc.CompanyID=CompanyID and sc.HoldingID=HoldingID and
  sc.CommunityID=CommunityID and sc.ProjectID=PhaseID and sc.status='S' and
  sc.SaleDate between @startdate and @enddate)
update #Rundays set TotalNewLeads=(select count(*) from scLead sl
  where DateCreated between @startdate and @enddate)
update #Rundays set TotalLeadsMod=(select count(*) from scLead sl
  where DateModified between @startdate and @enddate)
-- apparently scLead is not company aware and neither is sman_id back to user_login for company_id

select * from #RunDays



--Insert Into working_VisitTypes (PCID, VisitTypeID)
--Select '21e275e2-fa5f-422b-8d2b-2410fdf407cd', ID From VisitType Where ContactTypeGroup_ID = 4



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_GetCommunicationDefault]') and xtype = 'P ')  
 drop Procedure sp_GetCommunicationDefault
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc sp_GetCommunicationDefault @SourceID int, @CompanyID int, @Type varchar(1)
as
begin

	select cd.contact_id [ContactID], cd.comm_type_id [Communication_TypeID], c.businesstelephonenumber [Phone], 
	c.businessfaxnumber [Fax], Email1Address [Email]
	from communication_defaults cd
	left outer join contact c on c.id = cd.contact_id
	where cd.company_id=@CompanyID and cd.source_id=@SourceID and cd.type=@Type

end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_GetContactDetails]') and xtype = 'P ')  
 drop Procedure sp_GetContactDetails
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go









CREATE          proc [dbo].[sp_GetContactDetails]
 @ContactID varchar(20), 
 @SupplierID int,
 @CustomerID int,
 @InternalUserID int,
 @ProjectID int,
 @ProspectID int,
 @CompanyID int,  
 @CallerID int,
 @InstanceType varchar(500)
as
-- declare
--  @ContactID varchar(20), 
--  @SupplierID int,
--  @CustomerID int,
--  @InternalUserID int,
--  @ProjectID int,
--  @ProspectID int,
--  @CompanyID int,  
--  @CallerID int,
--  @InstanceType varchar(500)
 
--  select @ContactID = -1, @CallerID = 571, @Prospectid = 1646, @InstanceType = 'Prospect'
--	select @ContactID = 11433, @CustomerID = 100, @CompanyID = 17, @CallerID = 1, @ProjectID = 259, @InstanceType = 'Project'

 delete working_ContactDetails
 where UserName = @CallerID

 delete working_DashboardContacts
 where UserName = @CallerID

if @InstanceType='Contact' -- a single prospect is chosen
begin
 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
 select @CallerID, DateCreated [Date], KnownAs [Owner], ContactTypeGroup [Group], ContactType [Type],
 GlyphID, Subject, Direction, Succeeded [Status], ch.ID [ID], c.ID
 from ContactHistory ch
 join Contact c
 on c.id = ch.ContactOwnerID
 join ContactType ct
 on ch.ContactType_ID = ct.id
 join ContactTypeGroup ctg
 on ct.ContactGroupID = ctg.id
 where ContactID = @ContactID

 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
 select @CallerID, case when getdate() < TASK_START_DATE then TASK_START_DATE else isnull(TASK_FINISH_DATE,TASK_START_DATE) end [Date],
 KnownAs [Owner], 
 case when TaskType = 'Outlook:Appointment' then 'Appointment' else 'Task' end [Group], 
 case when TaskType = 'Outlook:Appointment' then 'Appointment' else 'Task' end [Type],
 case when TaskType = 'Outlook:Appointment' then 
  case when getdate() > isnull(TASK_FINISH_DATE,TASK_START_DATE) then 5 else 6 end
 else 
  case when Task_pct_comp < 100 then 4 else 3 end
 end GlyphID, 
 task_name, 'Outgoing' Direction,

 case when TaskType = 'Outlook:Appointment' then 
  case when getdate() > isnull(TASK_FINISH_DATE,TASK_START_DATE) then 1 else 0 end
 else 
  case when Task_pct_comp < 100 then 0 else 1 end
 end [Status], dt.[MDT_ID] [ID], c.ID
 from  msp_dashboard_tasks dt
 join msp_tasks t
 on dt.proj_id = t.Proj_id
 and dt.task_uid = t.task_uid
 join Contact c
 on c.id = dt.AssignedToID
 where ContactID = @ContactID

 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
 select @CallerID,  DateCreated [Date], KnownAs [Owner], 'Note' [Group], 
 case when [Public] = 1 then 'Public' else 'Private' end [Type],
 case when [Public] = 1 then 8 else 7 end GlyphID, cast(Content as varchar(256)), 'Outgoing',
 1 [Status], n.[ID] [ID], c.ID
 from notes n
 join Contact c
 on c.id = n.Owner_ID
 join Relations r
 on r.ItemID = n.id
 and ItemType = 'Notes'
 where TargetID = @ContactID
 and [Public] = case when [Public] = 0 then 
  case when @CallerID = n.Owner_ID then 0 else 1 end
  else [Public]
 end
end
else if @InstanceType='ProjectContact'
begin -- a single prospect is chosen for a project


 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
 select @CallerID, DateCreated [Date], KnownAs [Owner], ContactTypeGroup [Group], ContactType [Type],
 GlyphID, Subject, Direction, Succeeded [Status], ch.ID [ID], c.ID
 from ContactHistory ch
 join Contact c
 on c.id = ch.ContactOwnerID
 join ContactType ct
 on ch.ContactType_ID = ct.id
 join ContactTypeGroup ctg
 on ct.ContactGroupID = ctg.id
 join relations r
 on r.Target = 'Project'
 and r.TargetID = @ProjectID
 and r.ItemType = 'Interaction'
 and r.ItemID = c.id
 where ContactID = @ContactID


 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
 select @CallerID, case when getdate() < TASK_START_DATE then TASK_START_DATE else isnull(TASK_FINISH_DATE,TASK_START_DATE) end [Date],
 KnownAs [Owner], 
 case when TaskType = 'Outlook:Appointment' then 'Appointment' else 'Task' end [Group], 
 case when TaskType = 'Outlook:Appointment' then 'Appointment' else 'Task' end [Type],
 case when TaskType = 'Outlook:Appointment' then 
  case when getdate() > isnull(TASK_FINISH_DATE,TASK_START_DATE) then 5 else 6 end
 else 
  case when Task_pct_comp < 100 then 4 else 3 end
 end GlyphID, 
 task_name, 'Outgoing' Direction,

 case when TaskType = 'Outlook:Appointment' then 
  case when getdate() > isnull(TASK_FINISH_DATE,TASK_START_DATE) then 1 else 0 end
 else 
  case when Task_pct_comp < 100 then 0 else 1 end
 end [Status], dt.[MDT_ID] [ID], c.ID
 from  msp_dashboard_tasks dt
 join msp_tasks t
 on dt.proj_id = t.Proj_id
 and dt.task_uid = t.task_uid
 join Contact c
 on c.id = dt.AssignedToID
 where ContactID = @ContactID
 and dt.mdt_id = @ProjectID

 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
 select @CallerID,  DateCreated [Date], KnownAs [Owner], 'Note' [Group], 
 case when [Public] = 1 then 'Public' else 'Private' end [Type],
 case when [Public] = 1 then 8 else 7 end GlyphID, cast(Content as varchar(256)), 'Outgoing',
 1 [Status], n.[ID] [ID], c.ID
 from notes n
 join Contact c
 on c.id = n.Owner_ID
 join Relations r
 on r.ItemID = n.id
 and ItemType = 'Notes'
 join relations r2
 on r2.Target = 'Project'
 and r2.TargetID = @ProjectID
 and r2.ItemType = 'Notes'
 and r2.ItemID = c.id
 where r.TargetID = @ContactID
 and [Public] = case when [Public] = 0 then 
  case when @CallerID = n.Owner_ID then 0 else 1 end
  else [Public]
 end
 

end
else if @InstanceType='Prospect'
begin
 if @ContactID = -1 
 begin
  insert working_DashboardContacts
  select c.ID, @CallerID
  from scLead l 
  JOIN Contact c ON l.Contact_ID = c.ID 
  where l.id = @ProspectID
  union 
  select c.ID, @CallerID
  from scLead l 
  JOIN Contact c ON l.Contact_ID = c.ID 
  where l.ParentID = @ProspectID

 end
 else
 begin 
  insert working_DashboardContacts
  select @ContactID, @CallerID
 end


 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
 select @CallerID, DateCreated [Date], KnownAs [Owner], ContactTypeGroup [Group], ContactType [Type],
 GlyphID, Subject, Direction, Succeeded [Status], ch.ID [ID], ContactID
 from ContactHistory ch
 join Contact c
 on c.id = ch.ContactOwnerID
 join ContactType ct
 on ch.ContactType_ID = ct.id
 join ContactTypeGroup ctg
 on ct.ContactGroupID = ctg.id
 where ContactID in (select ContactID from working_DashboardContacts where Username = @CallerID)

 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
 select @CallerID, case when getdate() < TASK_START_DATE then TASK_START_DATE else isnull(TASK_FINISH_DATE,TASK_START_DATE) end [Date],
 KnownAs [Owner], 
 case when TaskType = 'Outlook:Appointment' then 'Appointment' else 'Task' end [Group], 
 case when TaskType = 'Outlook:Appointment' then 'Appointment' else 'Task' end [Type],
 case when TaskType = 'Outlook:Appointment' then 
  case when getdate() > isnull(TASK_FINISH_DATE,TASK_START_DATE) then 5 else 6 end
 else 
  case when Task_pct_comp < 100 then 4 else 3 end
 end GlyphID, 
 task_name, 'Outgoing' Direction,

 case when TaskType = 'Outlook:Appointment' then 
  case when getdate() > isnull(TASK_FINISH_DATE,TASK_START_DATE) then 1 else 0 end
 else 
  case when Task_pct_comp < 100 then 0 else 1 end
 end [Status], dt.[MDT_ID] [ID], ContactID
 from  msp_dashboard_tasks dt
 join msp_tasks t
 on dt.proj_id = t.Proj_id
and dt.task_uid = t.task_uid
 join Contact c
 on c.id = dt.AssignedToID
 where ContactID in (select ContactID from working_DashboardContacts where Username = @CallerID)

 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
 select @CallerID,  DateCreated [Date], KnownAs [Owner], 'Note' [Group], 
 case when [Public] = 1 then 'Public' else 'Private' end [Type],
 case when [Public] = 1 then 8 else 7 end GlyphID, cast(Content as varchar(256)), 'Outgoing',
 1 [Status], n.[ID] [ID], TargetID
 from notes n
 join Contact c
 on c.id = n.Owner_ID
 join Relations r
 on r.ItemID = n.id
 and ItemType = 'Notes'
 where TargetID in (select ContactID from working_DashboardContacts where Username = @CallerID)
 and [Public] = case when [Public] = 0 then 
  case when @CallerID = n.Owner_ID then 0 else 1 end
  else [Public]
 end


end
else if @InstanceType='Customer'
begin

 if @ContactID = -1 
 begin
  insert working_DashboardContacts
  select itemID, @CallerID
  from relations
  where Target = 'Customer'
  and TargetID = @CustomerID
  and ItemType = 'Contact '

	Declare @HumanDB varchar(100)

	Select @HumanDB = HumanDBName from Companies where AutoID = @CompanyID

	-- Select @HumanDB 'HumanDBName', @TreasuryDB 'TreasuryDBName'

	declare @str varchar(8000)


	Set @str = 'insert into working_ContactDetails(UserName, [Date], Owner, [Group], 
		Type, GlyphID, Subject, Direction, Status, ID, ContactID)
	Select ' + convert(varchar(100),@CallerID) + ' [UserName], EstimateDate [Date], 
	(Select KnownAs from contact where ID = ' + convert(varchar(100),@CallerID) + ') [Owner], 
	''Estimate''[Group],''Estimate''[Type], 18 [GlyphID], EstimateDescription [Subject], ''Outgoing'' [Direction],
	null [Status], Estimate_ID [ID], 0 [ContactID]
	from ' + @HumanDB + '..Estimate_Head e
	where Customer_ID = ' + convert(varchar(100),@CustomerID)

	-- select @str

	exec (@str)

	set @str = 'insert into working_ContactDetails(UserName, [Date], Owner, [Group], 
		Type, GlyphID, Subject, Direction, Status, ID, ContactID)
	Select ' + convert(varchar(100),@CallerID) + ' [UserName], p.pri_start_date [Date], 
	(Select KnownAs from contact where ID = ' + convert(varchar(100),@CallerID) + ') [Owner], 
	''Project''[Group],''Project''[Type], 19 [GlyphID],p.pri_name [Subject], ''Outgoing'' [Direction],
	null [Status], pri_num [ID], 0 [ContactID]
	from ' + @HumanDB + '..proj_id p
	where Customer_ID = ' + convert(varchar(100),@CustomerID)

	-- select @str

	exec (@str)
 end
 else
 begin 
  insert working_DashboardContacts
  select @ContactID, @CallerID
 end


 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
 select @CallerID, DateCreated [Date], KnownAs [Owner], ContactTypeGroup [Group], ContactType [Type],
 GlyphID, Subject, Direction, Succeeded [Status], ch.ID [ID], ContactID
 from ContactHistory ch
 left outer join Contact c
 on c.id = ch.ContactOwnerID
 join ContactType ct
 on ch.ContactType_ID = ct.id
 join ContactTypeGroup ctg
 on ct.ContactGroupID = ctg.id
 where ContactID in (select ContactID from working_DashboardContacts where Username = @CallerID)

 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
 select @CallerID, case when getdate() < TASK_START_DATE then TASK_START_DATE else isnull(TASK_FINISH_DATE,TASK_START_DATE) end [Date],
 KnownAs [Owner], 
 case when TaskType = 'Outlook:Appointment' then 'Appointment' else 'Task' end [Group], 
 case when TaskType = 'Outlook:Appointment' then 'Appointment' else 'Task' end [Type],
 case when TaskType = 'Outlook:Appointment' then 
  case when getdate() > isnull(TASK_FINISH_DATE,TASK_START_DATE) then 5 else 6 end
 else 
  case when Task_pct_comp < 100 then 4 else 3 end
 end GlyphID, 
 task_name, 'Outgoing' Direction,

case when TaskType = 'Outlook:Appointment' then 
  case when getdate() > isnull(TASK_FINISH_DATE,TASK_START_DATE) then 1 else 0 end
 else 
  case when Task_pct_comp < 100 then 0 else 1 end
 end [Status], dt.[MDT_ID] [ID], ContactID
 from  msp_dashboard_tasks dt
 join msp_tasks t
 on dt.proj_id = t.Proj_id
 and dt.task_uid = t.task_uid
 join Contact c
 on c.id = dt.AssignedToID
 where ContactID in (select ContactID from working_DashboardContacts where Username = @CallerID)

 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
 select @CallerID,  DateCreated [Date], KnownAs [Owner], 'Note' [Group], 
 case when [Public] = 1 then 'Public' else 'Private' end [Type],
 case when [Public] = 1 then 8 else 7 end GlyphID, cast(Content as varchar(256)), 'Outgoing',
 1 [Status], n.[ID] [ID], TargetID
 from notes n
 join Contact c
 on c.id = n.Owner_ID
 join Relations r
 on r.ItemID = n.id
 and ItemType = 'Notes'
 where TargetID in (select ContactID from working_DashboardContacts where Username = @CallerID)
 and [Public] = case when [Public] = 0 then 
  case when @CallerID = n.Owner_ID then 0 else 1 end
  else [Public]
 end



end
else if @InstanceType='Supplier'
begin

 if @ContactID = -1 
 begin
  insert working_DashboardContacts
  select itemID, @CallerID
  from relations
  where Target = 'Supplier'
  and TargetID = @SupplierID
  and ItemType = 'Contact '
 end
 else
 begin 
  insert working_DashboardContacts
  select @ContactID, @CallerID
 end


 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
 select @CallerID, DateCreated [Date], KnownAs [Owner], ContactTypeGroup [Group], ContactType [Type],
 GlyphID, Subject, Direction, Succeeded [Status], ch.ID [ID], ContactID
 from ContactHistory ch
 join Contact c
 on c.id = ch.ContactOwnerID
 join ContactType ct
 on ch.ContactType_ID = ct.id
 join ContactTypeGroup ctg
 on ct.ContactGroupID = ctg.id
 where ContactID in (select ContactID from working_DashboardContacts where Username = @CallerID)

 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
 select @CallerID, case when getdate() < TASK_START_DATE then TASK_START_DATE else isnull(TASK_FINISH_DATE,TASK_START_DATE) end [Date],
 KnownAs [Owner], 
 case when TaskType = 'Outlook:Appointment' then 'Appointment' else 'Task' end [Group], 
 case when TaskType = 'Outlook:Appointment' then 'Appointment' else 'Task' end [Type],
 case when TaskType = 'Outlook:Appointment' then 
  case when getdate() > isnull(TASK_FINISH_DATE,TASK_START_DATE) then 5 else 6 end
 else 
  case when Task_pct_comp < 100 then 4 else 3 end
 end GlyphID, 
 task_name, 'Outgoing' Direction,

 case when TaskType = 'Outlook:Appointment' then 
  case when getdate() > isnull(TASK_FINISH_DATE,TASK_START_DATE) then 1 else 0 end
 else 
  case when Task_pct_comp < 100 then 0 else 1 end
 end [Status], dt.[MDT_ID] [ID], ContactID
 from  msp_dashboard_tasks dt
 join msp_tasks t
 on dt.proj_id = t.Proj_id
 and dt.task_uid = t.task_uid
 join Contact c
 on c.id = dt.AssignedToID
 where ContactID in (select ContactID from working_DashboardContacts where Username = @CallerID)

 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
 select @CallerID,  DateCreated [Date], KnownAs [Owner], 'Note' [Group], 
 case when [Public] = 1 then 'Public' else 'Private' end [Type],
 case when [Public] = 1 then 8 else 7 end GlyphID, cast(Content as varchar(256)), 'Outgoing',
 1 [Status], n.[ID] [ID], TargetID
 from notes n
 join Contact c
 on c.id = n.Owner_ID
 join Relations r
 on r.ItemID = n.id
 and ItemType = 'Notes'
 where TargetID in (select ContactID from working_DashboardContacts where Username = @CallerID)
and [Public] = case when [Public] = 0 then 
  case when @CallerID = n.Owner_ID then 0 else 1 end
  else [Public]
 end




end
else if @InstanceType='Project'
begin
 print 'project'

 if(@CustomerID != -1)
 begin
	
	insert working_DashboardContacts
	select @ContactID, @CallerID

	 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
	 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
	 select @CallerID, DateCreated [Date], KnownAs [Owner], ContactTypeGroup [Group], ContactType [Type],
	 GlyphID, Subject, Direction, Succeeded [Status], ch.ID [ID], ContactID
	 from ContactHistory ch
	 left outer join Contact c
	 on c.id = ch.ContactOwnerID
	 join ContactType ct
	 on ch.ContactType_ID = ct.id
	 join ContactTypeGroup ctg
	 on ct.ContactGroupID = ctg.id
	 where ContactID in (select ContactID from working_DashboardContacts where Username = @CallerID) And
		   ch.pri_num = @ProjectID

	 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
	 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
	 select @CallerID, case when getdate() < TASK_START_DATE then TASK_START_DATE else isnull(TASK_FINISH_DATE,TASK_START_DATE) end [Date],
	 KnownAs [Owner], 
	 case when TaskType = 'Outlook:Appointment' then 'Appointment' else 'Task' end [Group], 
	 case when TaskType = 'Outlook:Appointment' then 'Appointment' else 'Task' end [Type],
	 case when TaskType = 'Outlook:Appointment' then 
	  case when getdate() > isnull(TASK_FINISH_DATE,TASK_START_DATE) then 5 else 6 end
	 else 
	  case when Task_pct_comp < 100 then 4 else 3 end
	 end GlyphID, 
	 task_name, 'Outgoing' Direction,

	 case when TaskType = 'Outlook:Appointment' then 
	  case when getdate() > isnull(TASK_FINISH_DATE,TASK_START_DATE) then 1 else 0 end
	 else 
	  case when Task_pct_comp < 100 then 0 else 1 end
	 end [Status], dt.[MDT_ID] [ID], ContactID
	 from  msp_dashboard_tasks dt
	 join msp_tasks t
	 on dt.proj_id = t.Proj_id
	 and dt.task_uid = t.task_uid
	 join Contact c
	 on c.id = dt.AssignedToID
	 where ContactID in (select ContactID from working_DashboardContacts where Username = @CallerID)
		   And dt.pri_num = @ProjectID

	 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
	 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
	 select @CallerID,  DateCreated [Date], KnownAs [Owner], 'Note' [Group], 
	 case when [Public] = 1 then 'Public' else 'Private' end [Type],
	 case when [Public] = 1 then 8 else 7 end GlyphID, cast(Content as varchar(256)), 'Outgoing',
	 1 [Status], n.[ID] [ID], TargetID
	 from notes n
	 join Contact c
	 on c.id = n.Owner_ID
	 join Relations r
	 on r.ItemID = n.id
	 and ItemType = 'Notes'
	 where n.pri_num = @ProjectID
     and TargetID in (select ContactID from working_DashboardContacts where Username = @CallerID)
	 and [Public] = case when [Public] = 0 then 
	  case when @CallerID = n.Owner_ID then 0 else 1 end
	  else [Public]
	 end

 end
 
 else
 begin
	 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
	 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
	 select @CallerID, DateCreated [Date], KnownAs [Owner], ContactTypeGroup [Group], ContactType [Type],
	 GlyphID, Subject, Direction, Succeeded [Status], ch.ID [ID], c.ID
	 from ContactHistory ch
	 join Contact c
	 on c.id = ch.ContactOwnerID
	 join ContactType ct
	 on ch.ContactType_ID = ct.id
	 join ContactTypeGroup ctg
	 on ct.ContactGroupID = ctg.id
	 where pri_num = @ProjectID
	 
	 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
	 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
	 select @CallerID, case when getdate() < TASK_START_DATE then TASK_START_DATE else isnull(TASK_FINISH_DATE,TASK_START_DATE) end [Date],
	 KnownAs [Owner], 
	 case when TaskType = 'Outlook:Appointment' then 'Appointment' else 'Task' end [Group], 
	 case when TaskType = 'Outlook:Appointment' then 'Appointment' else 'Task' end [Type],
	 case when TaskType = 'Outlook:Appointment' then 
	  case when getdate() > isnull(TASK_FINISH_DATE,TASK_START_DATE) then 5 else 6 end
	 else 
	  case when Task_pct_comp < 100 then 4 else 3 end
	 end GlyphID, 
	 task_name, 'Outgoing' Direction,

	 case when TaskType = 'Outlook:Appointment' then 
	  case when getdate() > isnull(TASK_FINISH_DATE,TASK_START_DATE) then 1 else 0 end
	 else 
	  case when Task_pct_comp < 100 then 0 else 1 end
	 end [Status], dt.[MDT_ID] [ID], c.ID
	 from  msp_dashboard_tasks dt
	 join msp_tasks t
	 on dt.proj_id = t.Proj_id
	 and dt.task_uid = t.task_uid
	 join Contact c
	 on c.id = dt.AssignedToID
	 where dt.pri_num = @ProjectID

	 insert working_ContactDetails(UserName, [Date], Owner, [Group], 
	 Type, GlyphID, Subject, Direction, Status, ID, ContactID)
	 select @CallerID,  DateCreated [Date], KnownAs [Owner], 'Note' [Group], 
	 case when [Public] = 1 then 'Public' else 'Private' end [Type],
	 case when [Public] = 1 then 8 else 7 end GlyphID, cast(Content as varchar(256)), 'Outgoing',
	 1 [Status], n.[ID] [ID], c.ID
	 from notes n
	 join Contact c
	 on c.id = n.Owner_ID
	 join Relations r
	 on r.ItemID = n.id
	 and ItemType = 'Notes'
	 where n.pri_num = @ProjectID
	 and TargetID in (Select c.ID From Contact c inner join ContactHistory ch on c.ID = ch.ContactID Where pri_num = @ProjectID)
	 and [Public] = case when [Public] = 0 then 
	  case when @CallerID = n.Owner_ID then 0 else 1 end
	  else [Public]
	 end
 end
end

--Updates Contact ID's with proper names
Update working_ContactDetails
Set Contact = (Select IsNull(KnownAs,'') from Contact Where ID = ContactID)

select *
from working_ContactDetails
where UserName = @CallerID




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_GetGridFilters]') and xtype = 'P ')  
 drop Procedure sp_GetGridFilters
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





CREATE proc sp_GetGridFilters
 @Guid varchar(100), 
 @GridNamePage varchar(500)
as
select FieldName, DisplayName, Filter
from  session_filter_selections
where Guid = @Guid
and GridNamePage = @GridNamePage







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_GetInventoryRefData]') and xtype = 'P ')  
 drop Procedure sp_GetInventoryRefData
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE PROCEDURE dbo.sp_GetInventoryRefData
AS
	SET NOCOUNT ON
	
	SELECT	RAW_LAND_CD, RAW_LAND_DESC
	FROM	HB_RAW_LAND

	SELECT	COMMUNITY_CD, RAW_LAND_CD, COMMUNITY_DESC
	FROM	HB_COMMUNITIES

	SELECT	PROJECT_CD, RAW_LAND_CD, COMMUNITY_CD, PROJECT_DESC
	FROM	HB_PROJECT

	SELECT	LOT_ID, RAW_LAND_CD, COMMUNITY_CD, HB_LOTS.PROJECT_CD, LOT, 
		ADDR_1, ADDR_2, ADDR_CITY, ADDR_PROV, ADDR_POSTAL_CODE
	FROM	HB_LOTS, HB_PROJECT
	WHERE	HB_LOTS.PROJECT_CD = HB_PROJECT.PROJECT_CD

	SELECT	MODEL_NAME_ID, MODEL_NAME
	FROM	HB_MODEL_NAME

	SELECT	MODEL_ID, MODEL_NAME_ID, MODEL_DESC
	FROM	HB_MODEL
	
	RETURN 




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_getMarsallingCompanies]') and xtype = 'P ')  
 drop Procedure sp_getMarsallingCompanies
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE proc [dbo].[sp_getMarsallingCompanies](@autoID int)
as
begin
declare 
@marsallingType varchar(1),
@ParentCompanyAutoID int,
@custID	int,
@SupplierID int

declare @companies table 
(
Company_Name varchar(50),
[MarsallingType] varchar(10),
CustomerID int,
SupplierID int,
autoID int,
[Default] varchar(10)
)



select @marsallingType = MarsallingType, @ParentCompanyAutoID = ParentCompanyAutoID,
@custID = CustomerID , @SupplierID = SupplierID from companies where autoID = @autoID


if(@marsallingType is null)
begin 

insert into @companies
select Company_Name,''[MarsallingType],CustomerID,SupplierID,autoID,'Default'[Default] from companies where autoID = @autoID
union
select Company_Name,case when [MarsallingType] ='S' then 'Supplier' when [MarsallingType] ='C' then 'Customer' else '' end[MarsallingType],CustomerID,SupplierID,autoID,''[Default] 
from companies where (ParentCompanyAutoID = @autoID and [MarsallingType] in('S','C')) or ([MarsallingType] is null and autoID <> @autoID)



end
else if(@marsallingType = 'C')
begin
insert into @companies
select Company_Name,'Customer'[MarsallingType],CustomerID,SupplierID,autoID,'Default'[Default] from companies where autoID = @autoID
union
select Company_Name,'Parent'[MarsallingType],CustomerID,SupplierID,autoID,''[Default] from companies where autoID = @ParentCompanyAutoID


end
else if(@marsallingType = 'S')
begin
insert into @companies
select Company_Name,'Supplier'[MarsallingType],CustomerID,SupplierID,autoID,'Default'[Default] from companies where autoID = @autoID


end

end
select * from @companies



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_GetNextSystemID]') and xtype = 'P ')  
 drop Procedure sp_GetNextSystemID
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





create PROCEDURE [dbo].[sp_GetNextSystemID] --xx 
   @IDName	varchar(64)
as
DECLARE @SystemID integer
SELECT	@SystemID = ID
FROM	SYSTEM_IDS
WHERE	ID_NAME = @IDName
IF @@ROWCOUNT = 0
BEGIN
	INSERT INTO SYSTEM_IDS 
	(
		ID_NAME, 
		ID
	)
	VALUES
	(
		@IDName, 
		2
	)
	SELECT @SystemID = 1
END
ELSE
BEGIN
	UPDATE	SYSTEM_IDS
	SET	ID = ID + 1
	WHERE	ID_NAME = @IDName
END
SELECT @SystemID as ID




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_GetTXBs]') and xtype = 'P ')  
 drop Procedure sp_GetTXBs
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go







create proc sp_GetTXBs
 @Database varchar(500),
 @TRANSACTION_TYPE varchar(20)
as

--select @Database ='tr_pelican', @TRANSACTION_TYPE = 'Online Sales'

declare @ExcS varchar(8000)

if @TRANSACTION_TYPE = 'Online Sales' 
begin
 select @ExcS = 
 'select RELEASE, TRANSACTION_ID [Ref.No], c.CUSTOMER_CODE [Code], c.NAME [Name], CREATED [Date], 
 ''Order : $'' + dbo.fn_FormatCash(cast(sum(isNull(Quantity,0) * isnull(price,0)) as varchar(50))) Details, 
 RESPONSE_TB_ID, TB_ID, DIRECTION_FLAG, USER_LOGIN_ID
 from TXR_BROKER TB
 left outer join ' + @Database + '..customers c
 on tb.REFERENCE_ID = c.customer_id
 left outer join ' + @Database + '..Web_Order_HD woh
 on ORDER_NO = TRANSACTION_ID
 left outer join ' + @Database + '..web_order_det wod
 on wod.order_no = woh.order_no
 where TRANSACTION_TYPE like ''' + @TRANSACTION_TYPE + ''' 
 group by RELEASE, TRANSACTION_ID, c.CUSTOMER_CODE, c.NAME, CREATED,
 RESPONSE_TB_ID, TB_ID, DIRECTION_FLAG, USER_LOGIN_ID ' +
 'order by TRANSACTION_ID '

exec(@ExcS)
end

else if @TRANSACTION_TYPE = '3rd Party' 
begin
 print 'hi'
end

else
begin
  select @ExcS = 
 'select RELEASE, TRANSACTION_ID [Ref.No], -1 [Code], ''N/A'' [Name], CREATED [Date], 
 ''N/A'' Details, 
 RESPONSE_TB_ID, TB_ID, DIRECTION_FLAG, USER_LOGIN_ID
 from TXR_BROKER TB
 group by RELEASE, TRANSACTION_ID, CREATED,
 RESPONSE_TB_ID, TB_ID, DIRECTION_FLAG, USER_LOGIN_ID'
exec(@ExcS)

end



 










Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_GetUserPresets]') and xtype = 'P ')  
 drop Procedure sp_GetUserPresets
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





create proc sp_GetUserPresets
 @Login int, 
 @ReportID int, 
 @ReportControlID int
as

select PresetValue 
from user_reports ur
join user_presets up
on ur.USER_REPORTS_ID = up.USER_REPORTS_ID
where USER_LOGIN_ID = @Login
and ur.ReportID = @ReportID
and ReportControlID = @ReportControlID







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_GL_Approval]') and xtype = 'P ')  
 drop Procedure sp_GL_Approval
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_GL_Approval] @ID int, @Status char(1) as
--declare @ID int, @Status char(1) select @ID = 2787, @Status = 'A'

declare @tr_db varchar(100), @sql varchar(8000), @CompanyID int, @stat varchar(50), @GL_ID varchar(50), @Last_Changed_By_Notes varchar(8000), @PostResult varchar(150)
select @CompanyID=CompanyID from approvals_requested where id = @id 
select @tr_db=treasurydbname from companies where autoid = @CompanyID 
select @GL_ID=module_reference_id, @stat=status, @Last_Changed_By_Notes = Last_Changed_By_Notes from approvals_requested where id=@id
select @Last_Changed_By_Notes = replace(@Last_Changed_By_Notes, '''', '''''')
--select @Last_Changed_By_Notes
if( @stat = 'declined' )
begin
	select @sql = 'update ' + @tr_db + '..gl_journal_headers set status = ''D'', ApprovalNotes = ''' + @Last_Changed_By_Notes + ''' where journal_id = ' + @GL_ID
	exec(@sql)
end
else if( @stat = 'approved' )
begin
	begin tran
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#postresult'))  
	drop table #postresult
	create table #postresult(result varchar(50))
	select @sql = 'Declare @result varchar(500) exec ' + @tr_db + '..sp_PostJournalEntry '+@GL_ID+', @result out insert #postresult select @result'
	exec(@sql)
	select @PostResult = result from #postresult
	if @PostResult != 'OK'
	begin
		rollback tran
		update approvals_requested set Status = 'Declined', Additional_notes = isnull(Additional_notes,'') + '***' 
		+ @PostResult where id = @id 
		select @sql = 'update ' + @tr_db + '..gl_journal_headers set status = ''D'', ApprovalNotes = ''' + @Last_Changed_By_Notes + ''' where journal_id = ' + @GL_ID
		exec(@sql)
	end
	else
		Commit tran
end

select @PostResult Result		







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_att_opt]') and xtype = 'P ')  
 drop Procedure sp_hb_att_opt
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go







--exec sp_hb_att_opt 18
CREATE  PROCEDURE sp_hb_att_opt 
  @MODEL_ID integer,
  @HR_DB  varchar(50) 
 AS
--declare @username varchar(10)
--select @username = 'hm'
declare @sql_str varchar(4096)



set @sql_str='
select o.*, e.*, opt.short_desc, maj.phs_desc, min.subp_desc from hb_elv_opt o, hb_est e, hb_options opt, '+@HR_DB+'..phase maj, '+@HR_DB+'..subphase min
where o.option_id=e.option_id
and o.option_id=opt.option_id
and o.attached_yn=''Y''
and e.model_id=-1
and e.phs_code*=maj.phs_code
and e.subp_code*=min.subp_code
and e.phs_code*=min.phs_code
and o.model_id='+cast(@MODEL_ID as varchar(50))

exec(@sql_str)








Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HB_CheckOptions]') and xtype = 'P ')  
 drop Procedure sp_HB_CheckOptions
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_HB_CheckOptions]
 @Option_id int, @Raw_land_cd int, @Community_cd int, @Model_name_Id int
as

--declare @Option_id int, @Raw_land_cd int, @Community_cd int, @Model_name_Id int
--select @option_id = 20, @Raw_land_cd = -1, @Model_name_Id = -1, @Community_cd = -1

declare @NA varchar(50) set @NA = '*N/A'

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#OptionsUsed'))  
drop table #OptionsUsed
create table #OptionsUsed(
 Holding varchar(30) null,
 Community varchar(30) null,
 Project varchar(30) null,
 Model varchar(30) null,
 Elevation varchar(30) null,
 [Option Package] varchar(30) null)
 
--**** check to see if any projects have this option
if @Community_cd <> -1
begin 
 --Projects
 insert #OptionsUsed(Holding, Community, Project, Model, Elevation, [Option Package])
 select isnull(RAW_LAND_DESC,@NA), COMMUNITY_DESC, PROJECT_DESC, @NA, @NA, @NA
 from hb_proj_opt po
 join hb_project p
 on p.project_cd = po.project_cd
 join hb_communities c
 on c.community_cd = p.community_cd
 join hb_raw_land rl
 on rl.raw_land_cd = c.raw_land_cd
 where option_id = @option_id
 and p.Community_cd = @Community_cd
end

--**** check to see if any elevations have this option
else if @Model_name_Id <> -1 
begin 
 --elevations
 insert #OptionsUsed(Holding, Community, Project, Model, Elevation, [Option Package])
 select isnull(RAW_LAND_DESC,@NA), @NA, @NA, MODEL_NAME, MODEL_DESC, @NA
 from hb_elv_opt eo
 join hb_model m
 on eo.model_id = m.model_id
 and eo.Raw_Land_CD = m.Raw_Land_CD
 join hb_model_name mn
 on m.model_name_id = mn.model_name_id
 join hb_raw_land rl
 on rl.raw_land_cd = m.raw_land_cd
 where option_id = @option_id
 and m.model_id in (select model_id from hb_models where model_name_id = @Model_name_Id)
 and rl.raw_land_cd = @raw_land_cd
end

--**** check to see if any models, elevations, communities or projects have this option
else if @Raw_land_cd <> -1
begin 
 --elevations
 insert #OptionsUsed(Holding, Community, Project, Model, Elevation, [Option Package])
 select isnull(RAW_LAND_DESC,@NA), @NA, @NA, MODEL_NAME, MODEL_DESC, @NA
 from hb_elv_opt eo
 join hb_model m
 on eo.model_id = m.model_id
 and eo.Raw_Land_CD = m.Raw_Land_CD
 join hb_model_name mn
 on m.model_name_id = mn.model_name_id
 join hb_raw_land rl
 on rl.raw_land_cd = m.raw_land_cd
 where option_id = @option_id
 and rl.raw_land_cd = @raw_land_cd

 --models
 insert #OptionsUsed(Holding, Community, Project, Model, Elevation, [Option Package])
 select isnull(RAW_LAND_DESC,@NA), @NA, @NA, MODEL_NAME, @NA, @NA
 from hb_mod_opt mo
 join hb_model_name mn
 on mo.model_name_id = mn.model_name_id
 join hb_raw_land rl
 on rl.raw_land_cd = mo.raw_land_cd
 where option_id = @option_id
 and rl.raw_land_cd = @raw_land_cd

 --Communities
 insert #OptionsUsed(Holding, Community, Project, Model, Elevation, [Option Package])
 select isnull(RAW_LAND_DESC,@NA), COMMUNITY_DESC, @NA, @NA, @NA, @NA
 from hb_comm_opt co
 join hb_communities c
 on c.community_cd = co.community_cd
 join hb_raw_land rl
 on rl.raw_land_cd = c.raw_land_cd
 where option_id = @option_id
end

--**** check to see if any holdings, models, elevations or packages have this option
else 
begin 

 --elevations
 insert #OptionsUsed(Holding, Community, Project, Model, Elevation, [Option Package])
 select isnull(RAW_LAND_DESC,@NA), @NA, @NA, MODEL_NAME, MODEL_DESC, @NA
 from hb_elv_opt eo
 join hb_model m
 on eo.model_id = m.model_id 
 and eo.Raw_Land_CD = m.Raw_Land_CD
 join hb_model_name mn
 on m.model_name_id = mn.model_name_id
 join hb_options o
 on o.option_id = eo.option_id
 left outer join hb_raw_land rl
 on rl.raw_land_cd = m.raw_land_cd 
 where eo.option_id = @option_id
 and isnull(mn.Is_Option_Package,0) = 0

 --models
 insert #OptionsUsed(Holding, Community, Project, Model, Elevation, [Option Package])
 select isnull(RAW_LAND_DESC,@NA), @NA, @NA, MODEL_NAME, @NA, @NA
 from hb_mod_opt mo
 join hb_model_name mn
 on mo.model_name_id = mn.model_name_id
 join hb_options o
 on o.option_id = mo.option_id
 left outer join hb_raw_land rl
 on rl.raw_land_cd = mo.raw_land_cd
 where mo.option_id = @option_id
 and isnull(mn.Is_Option_Package,0) = 0

 --holdings
 insert #OptionsUsed(Holding, Community, Project, Model, Elevation, [Option Package])
 select isnull(RAW_LAND_DESC,@NA), @NA, @NA, @NA, @NA, @NA
 from hb_raw_opt ro
 join hb_raw_land rl
 on rl.raw_land_cd = ro.raw_land_cd
 where option_id = @option_id

 --packages
 insert #OptionsUsed(Holding, Community, Project, Model, Elevation, [Option Package])
 select @NA, @NA, @NA, @NA, @NA, o.SHORT_DESC
 from hb_options o
 join hb_elv_opt eo
 on o.HBM_ID = eo.model_id
 join hb_options oo
 on oo.option_id = eo.option_id
 where isnull(o.Is_Option_Package,0) = 1
 and oo.option_id = @Option_ID
 

end
select *
from #OptionsUsed
order by Holding, Community, Project, Model, Elevation, [Option Package]

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_community]') and xtype = 'P ')  
 drop Procedure sp_hb_community
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--exec sp_hb_community 'hm'  
CREATE  PROCEDURE sp_hb_community @USERNAME varchar(500) AS  
--select @username = 'hm'  
declare @sql_str varchar(4096)  
  
  
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempHoldings'))  
  drop table #TempHoldings  
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempCommunity'))  
  drop table #TempCommunity  
  
if exists (select * from working_holding where PCID=@USERNAME)  
begin  
  set @sql_str='select rl.* into #TempHoldings from hb_raw_land rl, working_holding wrl  
  where wrl.PCID='''+@USERNAME+'''  
  and rl.raw_land_cd = wrl.raw_land_cd'  
end  
else  
begin  
  set @sql_str='select rl.* into #TempHoldings from hb_raw_land rl'  
end  
  
if exists (select * from working_community where PCID=@USERNAME)  
begin  
  set @sql_str=@sql_str+'  
select c.* into #TempCommunity from hb_communities c, working_community wc  
  where wc.PCID='''+@USERNAME+'''  
  and c.community_cd = wc.community_cd'  
end  
else  
begin  
  set @sql_str=@sql_str+'  
select c.* into #TempCommunity from hb_communities c'  
end  
  
--if exists (select * from hb_working_holding_status where username=@USERNAME)  
--begin  
-- set @sql_str=@sql_str+'  
--delete from #TempHoldings where raw_land_status not in (select holding_status_cd from hb_working_holding_status where username='''+@USERNAME+''')'  
--end  
  
set @sql_str=@sql_str+'  
select ro.*, th.raw_land_cd, th.raw_land_desc, th.raw_land_sdesc, th.raw_land_status,  
 c.community_desc, c.use_phases_yn from hb_report_options ro, #TempHoldings th, #TempCommunity c  
where ro.PCID='''+@USERNAME+'''  
and c.raw_land_cd=th.raw_land_cd  
order by th.raw_land_sdesc'  
  
exec(@sql_str)  
  
  
  
  
  
  
  



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HB_CopyPricingFromCommunityToProject]') and xtype = 'P ')  
 drop Procedure sp_HB_CopyPricingFromCommunityToProject
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc [dbo].[sp_HB_CopyPricingFromCommunityToProject]
@Model_ID int, @Project_CD int
as

declare @Community_CD int

select @Community_CD = Community_CD from HB_Project where Project_CD = @Project_CD

insert HB_ModelPriceHistory(Model_ID, Raw_Land_CD, Price, ExpieryDate, Community_CD, Project_CD, Level)
select Model_ID, -1, Price, ExpieryDate, -1, @Project_CD, 'P'
from HB_ModelPriceHistory
where Model_ID = @Model_id
and Community_CD = @Community_CD

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HB_CopyPricingFromRLHToCommunity]') and xtype = 'P ')  
 drop Procedure sp_HB_CopyPricingFromRLHToCommunity
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc [dbo].[sp_HB_CopyPricingFromRLHToCommunity]
@Model_ID int, @Community_CD int
as

declare @Raw_LAnd_CD int

select @Raw_Land_CD = RAW_LAND_CD from HB_communities where Community_CD = @Community_CD

insert HB_ModelPriceHistory(Model_ID, Raw_Land_CD, Price, ExpieryDate, Community_CD, Project_CD, Level)
select Model_ID, -1, Price, ExpieryDate, @Community_CD, Project_CD, 'C'
from HB_ModelPriceHistory
where Model_ID = @Model_id
and Raw_Land_CD = @Raw_Land_CD

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HB_Duplicate_HB_Model]') and xtype = 'P ')  
 drop Procedure sp_HB_Duplicate_HB_Model
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc sp_HB_Duplicate_HB_Model
@Source_ID int, 
@Dest_ID int,
@CleanOut char(1)
as
begin
	declare 
	@MSP_ProjID int,
	@NewMSP_ProjID int,
	@MSP_Proj_Name varchar(255),
	@Date datetime,
	@Notes varchar(4000)

	---=================================================================================================
	------------------------------------Copy HB_ScheduleMap---------------------------------------------
	---=================================================================================================
	if @CleanOut = 'T'
	begin
		delete from hb_schedulemap where model_uid=@Dest_ID
	end

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#tmp_schedulemap'))  
		drop table #tmp_schedulemap

	create table #tmp_schedulemap(
	schedulepoint_id int,
	model_uid int,
	msp_task_uid int,
	quoteid int
	)

	insert into #tmp_schedulemap ( schedulepoint_id, msp_task_uid, quoteid )
	select schedulepoint_id, msp_task_uid, quoteid from hb_schedulemap where model_uid=@Source_ID
	union  
	select schedulepoint_id, msp_task_uid, quoteid from hb_schedulemap where model_uid=@Dest_ID

	update #tmp_schedulemap set model_uid = @Dest_ID

	delete from hb_schedulemap where model_uid=@Dest_ID
	insert into hb_schedulemap
	select * from #tmp_schedulemap
	---=================================================================================================
	------------------------------------Duplicate MSP_Project-------------------------------------------
	---=================================================================================================
	select @MSP_ProjID=msp_template_id from hb_model where id=@Source_ID
	select @MSP_Proj_Name=proj_name from msp_projects where proj_id=@MSP_ProjID
	select @Date=GETDATE()

	exec sp_CMS_MSP_Copy @MSP_ProjID, @MSP_Proj_Name, @Date

	select @NewMSP_ProjID=max(proj_id) from MSP_Projects

	update hb_model set MSP_Template_ID=@NewMSP_ProjID where id=@Dest_ID
	---=================================================================================================
	------------------------------------Create HB_Model_Templates Record--------------------------------
	---=================================================================================================
	select @Notes=Notes from hb_model_templates where proj_id=@MSP_ProjID
	insert into hb_model_templates values ( @NewMSP_ProjID, null )

end







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HB_EsitmateChangeFlowCount]') and xtype = 'P ')  
 drop Procedure sp_HB_EsitmateChangeFlowCount
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure [dbo].[sp_HB_EsitmateChangeFlowCount]
(@Option_ID int, @Model_ID int, @Raw_Land_CD int, @EstimateLevel varchar(2), @UserName varchar(50))

AS

--exec sp_HB_EsitmateChangeFlowCount -1, 44, -1, 'E', 'Ken'
--exec sp_HB_EsitmateChangeFlowCount -1, 1, -1
--Declare @Option_ID int, @Model_ID int, @Raw_Land_CD int, @EstimateLevel varchar(2), @UserName varchar(50)
--Select @Option_ID = -1, @Model_ID = 44, @Raw_Land_CD = -1, @EstimateLevel = 'E', @UserName ='ken'

Declare @Count int


---------------------------------------------- HB_EST CHANGES -----------------------------------------------------
Select @Count = Count(*) from HB_EST e
Left Outer Join working_HB_EST we on we.Option_ID = e.Option_ID and we.Model_ID = e.Model_ID and we.Raw_Land_CD = e.Raw_Land_CD
Where ((IsNull(we.Internal_EST,0) <> IsNull(e.Internal_EST,0) or IsNull(we.External_EST,0) <> IsNull(e.External_Est,0) or IsNull(we.Final_EST,0) <> IsNull(e.Final_Est,0) or
	  IsNull(we.Hours,0) <> IsNull(e.Hours,0) or we.Send_RFQ <> e.Send_RFQ or IsNull(we.Mat_Est,0) <> IsNull(e.Mat_Est,0) or IsNull(we.Trade_Est,0) <> IsNull(e.Trade_Est,0) or
	  we.Manual_YN_TRD <> e.Manual_YN_TRD or we.Manual_YN_MAT <> e.Manual_YN_MAT or IsNull(we.MAT_RFQ,0) <> IsNull(we.MAT_RFQ,0)) 
	  AND (we.phs_code = e.phs_code AND we.subp_code = e.subp_code and e.Option_ID = @Option_ID and e.Model_ID = @Model_ID 
	  and e.Raw_Land_CD = @Raw_Land_CD and e.EstimateLevel = @EstimateLevel and we.UserName = @UserName)) 


Select @Count = @Count + Count(*) from HB_EST e
Where (e.phs_code Not In (Select he.phs_code from working_HB_EST he where he.Option_ID = @Option_ID and he.Model_ID = @Model_ID and he.Raw_Land_CD = @Raw_Land_CD)
or e.subp_code Not In (Select eh.subp_code from working_HB_EST eh where eh.Option_ID = @Option_ID and eh.Model_ID = @Model_ID and eh.Raw_Land_CD = @Raw_Land_CD))
and e.Option_ID = @Option_ID and e.Model_ID = @Model_ID and e.Raw_Land_CD = @Raw_Land_CD and e.EstimateLevel = @EstimateLevel



Select @Count = @Count + Count(*) from working_HB_EST
Where ID not in (Select wbe.ID From working_HB_EST wbe 
				 Inner Join HB_EST e on e.phs_code = wbe.phs_code and e.subp_code = wbe.subp_code and
				                        e.Option_ID = wbe.Option_ID and e.Model_ID = e.Model_ID and 
										e.Raw_Land_CD = wbe.Raw_Land_CD and e.EstimateLevel = wbe.EstimateLevel
				 Where e.Option_ID = @Option_ID and e.Model_ID = @Model_ID and e.Raw_Land_CD = @Raw_Land_CD and 
					   e.EstimateLevel = @EstimateLevel and wbe.UserName = @UserName)
and UserName = @UserName

------------------------------------------- HB_EST_TRD CHANGES -----------------------------------------------------

Select @Count = @Count + Count(*) From HB_EST_TRD t
Left Outer Join working_HB_EST_TRD wt on wt.Option_ID = t.Option_ID and wt.Model_ID = t.Model_ID and wt.Raw_Land_CD = t.Raw_Land_CD
Where (IsNull(t.EST_COST,0) <> IsNull(wt.EST_COST,0) or IsNull(t.EST_SIB,'') <> IsNull(wt.EST_SIB,'') or IsNull(t.EST_HOURS,0) <> IsNull(wt.EST_HOURS,0) 
	   or t.EXPIRE_DATE <> wt.EXPIRE_DATE or t.RFQC_ID <> wt.RFQC_ID or IsNull(t.UOM,'') <> IsNull(wt.UOM,'')
	   or IsNull(t.HB_ConfirmationPoint_ID,0) <> IsNull(wt.HB_ConfirmationPoint_ID,0) 
	   or IsNull(t.HB_ScheduleDeliveryPoint_ID,0) <> IsNull(wt.HB_ScheduleDeliveryPoint_ID,0)
	   or IsNull(t.ConfirmationDeadlineDays,0) <> IsNull(wt.ConfirmationDeadLineDays,0) or IsNull(t.HB_OrderPoint_ID,0) <> IsNull(wt.HB_OrderPoint_ID,0)) AND
	  (wt.phs_code = t.phs_code AND wt.subp_code = t.subp_code and t.Option_ID = @Option_ID and t.Model_ID = @Model_ID 
	  and t.Raw_Land_CD = @Raw_Land_CD and t.EstimateLevel = @EstimateLevel and wt.UserName = @UserName
	  and t.Trade_ID = wt.Trade_ID)

Select @Count = @Count + Count(*) From HB_EST_TRD t
Where (t.phs_code Not In (Select wt.phs_code from working_HB_EST_TRD wt where wt.Option_ID = @Option_ID and wt.Model_ID = @Model_ID and wt.Raw_Land_CD = @Raw_Land_CD)
or t.subp_code Not In (Select wt.subp_code from working_HB_EST_TRD wt where wt.Option_ID = @Option_ID and wt.Model_ID = @Model_ID and wt.Raw_Land_CD = @Raw_Land_CD))
and t.Option_ID = @Option_ID and t.Model_ID = @Model_ID and t.Raw_Land_CD = @Raw_Land_CD and t.EstimateLevel = @EstimateLevel

Select @Count = @Count + Count(*) From working_HB_EST_TRD t
Where ID not in (Select wt.ID From working_HB_EST_TRD wt
				 Inner Join HB_EST_TRD t on t.phs_code = wt.phs_code and t.subp_code = wt.subp_code and
				                        t.Option_ID = wt.Option_ID and t.Model_ID = wt.Model_ID and 
										t.Raw_Land_CD = wt.Raw_Land_CD and t.EstimateLevel = wt.EstimateLevel
				 Where t.Option_ID = @Option_ID and t.Model_ID = @Model_ID and t.Raw_Land_CD = @Raw_Land_CD and 
					   t.EstimateLevel = @EstimateLevel and wt.UserName = @UserName)
and UserName = @UserName

------------------------------------------- HB_EST_MAT CHANGES -----------------------------------------------------

Select @Count = @Count + Count(*) From HB_EST_MAT m
Left Outer Join working_HB_EST_MAT wm on wm.Option_ID = m.Option_ID and wm.Model_ID = m.Model_ID 
									 and wm.Raw_Land_CD = m.Raw_Land_CD and m.Material_ID = wm.Material_ID
Where (IsNull(m.Trade_ID,0) <> IsNull(wm.Trade_ID,0) or IsNull(m.qty,0) <> IsNull(wm.qty,0) or IsNull(m.Est_Cost,0) <> IsNull(wm.Est_Cost,0)
	   or IsNull(m.HB_Package_ID,0) <> IsNull(wm.HB_Package_ID,0) or IsNull(m.HB_OrderPoint_ID,0) <> IsNull(wm.HB_OrderPoint_ID,0) 
	   or IsNull(m.HB_ConfirmationPoint_ID,0) <> IsNull(wm.HB_ConfirmationPoint_ID,0)
	   or IsNull(m.ConfirmationDeadlineDays,0) <> IsNull(wm.ConfirmationDeadlineDays,0)) AND
	  (wm.phs_code = m.phs_code AND wm.subp_code = m.subp_code and m.Option_ID = @Option_ID and m.Model_ID = @Model_ID 
	  and m.Raw_Land_CD = @Raw_Land_CD and m.EstimateLevel = @EstimateLevel and wm.UserName = @UserName
	  and m.Material_ID = wm.Material_ID)

Select @Count = @Count + Count(*) From HB_EST_MAT m
Where m.EMAT_ID Not In (Select wm.EMAT_ID From working_HB_EST_MAT wm Where UserName = @UserName)
and m.Option_ID = @Option_ID and m.Model_ID = @Model_ID and m.Raw_Land_CD = @Raw_Land_CD and m.EstimateLevel = @EstimateLevel

Select @Count = @Count + Count(*) From working_HB_EST_MAT m
Where m.ID not in (Select wm.ID From working_HB_EST_MAT wm
				 Inner Join HB_EST_MAT m on m.phs_code = wm.phs_code and m.subp_code = wm.subp_code and
				                        m.Option_ID = wm.Option_ID and m.Model_ID = wm.Model_ID and 
										m.Raw_Land_CD = wm.Raw_Land_CD and m.EstimateLevel = wm.EstimateLevel and
										m.Material_ID = wm.Material_ID
				 Where m.Option_ID = @Option_ID and m.Model_ID = @Model_ID and m.Raw_Land_CD = @Raw_Land_CD and 
					   m.EstimateLevel = @EstimateLevel and wm.UserName = @UserName)
and m.UserName = @UserName

Select @Count Count


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_est]') and xtype = 'P ')  
 drop Procedure sp_hb_est
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go









--exec sp_hb_est 18
create     PROCEDURE sp_hb_est
   @MODEL_ID integer ,
   @HR_DB varchar(50)
AS
--declare @username varchar(10)
--select @username = 'hm'
declare @sql_str varchar(4096)

set @sql_str='
select m.*, e.*, maj.phs_desc, min.subp_desc, t.* from hb_model m, hb_est e, '+@HR_DB+'..phase maj, '+@HR_DB+'..subphase min, hb_est_trd t
where m.model_id=e.model_id
and t.model_id=e.model_id
and t.phs_code=e.phs_code
and t.subp_code=e.subp_code
and t.est_cost<>0
and e.internal_est<>0
and e.phs_code*=maj.phs_code
and e.subp_code*=min.subp_code
and e.phs_code*=min.phs_code
and m.model_id='+cast(@MODEL_ID as varchar(50))

exec(@sql_str)








Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_fill_rfq_materials]') and xtype = 'P ')  
 drop Procedure sp_hb_fill_rfq_materials
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_hb_fill_rfq_materials]
@username varchar(350),
@update_method_id int,
@AsAtDate datetime,
@company_id int,
@supplier_id int,
@option_id int
as
begin

	declare
	@model_id int,
	@raw_land_cd int,
	@material_id int

	--if @option_id = -1
		delete from working_hb_material_selected where username = @username --and option_id = -1
	--else 
	--	delete from working_hb_material_selected where username = @username and option_id <> -1

	exec sp_hb_rankingjoin @company_id, @username


	if @option_id = -1
	begin
		insert into working_hb_material_selected
		select distinct em.model_id, em.raw_land_cd, m.matgroup_id as [group], m.material_id as [Item], trade_id, isnull(em.est_cost,1) as [Estimate], 
		@update_method_id as [Update Method], case when @update_method_id = -1 then 0 else
		
		case when option_id = -1 then
		dbo.fn_hb_calc_update_mat_amt( em.model_id, em.raw_land_cd, m.material_id, @AsAtDate, @update_method_id, @username )  else
		dbo.fn_hb_calc_update_opt_amt( em.model_id, em.raw_land_cd, Option_id, @AsAtDate, @update_method_id, m.material_id, 'M', @username) end
		end, 	

		0 as [% Change], 
		null as [Last Updated], null as [Last Update Method ], em.qty, @username as Username, 

		case when option_id = -1 then
			case when @update_method_id in (select id from hb_rfq_update_method  where description not in ('Manual', 'By Ranking Average Alternate', 'By Average Price'))
			then dbo.fn_hb_calc_update_mat_vendor(em.model_id, em.raw_land_cd, m.material_id, @AsAtDate, @update_method_id, @username)
			else null end  
		else
			case when @update_method_id in (select id from hb_rfq_update_method  where description not in ('Manual', 'By Ranking Average Alternate', 'By Average Price'))
			then dbo.fn_hb_calc_update_opt_vendor(em.model_id, em.raw_land_cd, Option_id, @AsAtDate, @update_method_id, m.material_id, 'M', @username)
			else null end 
		end as [supplier id],

		'N', option_id
		from hb_est_mat em
		join hb_material m on m.material_id = em.material_id
		where --option_id = -1 and
 em.model_id in (select model_id from working_hb_rfq_update where username = @username ) 
		and em.raw_land_cd = ( select top 1 raw_land_cd from working_hb_rfq_update where username = @username )
	end
	else 
	begin
		insert into working_hb_material_selected
		select distinct em.model_id, em.raw_land_cd, m.matgroup_id as [group], m.material_id as [Item], trade_id, isnull(em.est_cost,1) as [Estimate], 
		@update_method_id as [Update Method], case when @update_method_id = -1 then 0 else
        dbo.fn_hb_calc_update_opt_amt( em.model_id, em.raw_land_cd, Option_id, @AsAtDate, @update_method_id, m.material_id, 'M', @username)
		end, 	
		0 as [% Change], 
		null as [Last Updated], null as [Last Update Method ], em.qty, @username as Username, 

		case when @update_method_id in (select id from hb_rfq_update_method  where description not in ('Manual', 'By Ranking Average Alternate', 'By Average Price'))
		then dbo.fn_hb_calc_update_opt_vendor(em.model_id, em.raw_land_cd, Option_id, @AsAtDate, @update_method_id, m.material_id, 'M', @username)
		else null end as [supplier id],

		'N', option_id
		from hb_est_mat em
		join hb_material m on m.material_id = em.material_id
		where option_id <> -1 and em.model_id = -1
		and em.raw_land_cd = @option_id
	end

	declare cur_mat cursor for
	select model_id, raw_land_cd, item
	from working_hb_material_selected where username=@username

	open cur_mat
	fetch cur_mat into @model_id, @raw_land_cd, @material_id
	
	while @@fetch_status=0
	begin
		update working_hb_material_selected set 
		last_updated=(select top 1 date from hb_material_selected_history where model_id=@model_id and raw_land_cd=@raw_land_cd and item=@material_id order by date desc ), 
		last_update_method=(select top 1 update_method from hb_material_selected_history where model_id=@model_id and raw_land_cd=@raw_land_cd and item=@material_id order by date desc )
		where model_id=@model_id and raw_land_cd=@raw_land_cd and item=@material_id and username=@username

		update working_hb_material_selected set 
		change_pct=(cast(update_amt as float) / cast(estimate as float) * cast(100 as float)) - cast(100 as float)		
		where model_id=@model_id and raw_land_cd=@raw_land_cd and item=@material_id and username=@username and estimate > 0

		fetch cur_mat into @model_id, @raw_land_cd, @material_id
	end
	close cur_mat
	deallocate cur_mat
	
end





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_fill_rfq_options]') and xtype = 'P ')  
 drop Procedure sp_hb_fill_rfq_options
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[sp_hb_fill_rfq_options]
@username varchar(350),
@update_method_id int,
@AsAtDate datetime,
@company_id int,
@supplier_id int,
@raw_land_cd int
as
begin
-- exec sp_hb_fill_rfq_options 'ken',2,'12/12/2007',16,44,-1 



	if @update_method_id <> -99
	begin


	delete from working_hb_option_selected where username = @username

	exec sp_hb_rankingjoin @company_id, @username

	

	if @raw_land_cd = -1
	begin
		insert into working_hb_option_selected(model_id, raw_land_cd, Option_id, group_desc, maj_group_desc, sub_group_desc, option_only_est, trd_mat_est, total_est, update_method, option_only_update_amt, trd_Mat_update_amt, change_pct, total_update_amt, last_updated, last_update_method, username, supplier_id, selected) 
		select eo.model_id,w.raw_land_cd[raw_land_cd],o.option_id[option_id], o.SHORT_DESC,m.GROUP_DESC,sg.SUB_GROUP_DESC, 
		isnull(eo.opt_only_cost,0)[option only cost],isnull(((select sum(isnull(est_cost,0)) from hb_est_mat m where m.option_id = o.option_id and m.raw_land_Cd = eo.raw_land_Cd and eo.model_id = m.model_id )+
													  (select sum(isnull(est_cost,0)) from hb_est_trd t where t.option_id = o.option_id and t.raw_land_Cd = eo.raw_land_Cd and eo.model_id = t.model_id)),0)[trdANDmatCOST],
		isnull(((select sum(isnull(est_cost,0)) from hb_est_mat m where m.option_id = o.option_id and m.raw_land_Cd = eo.raw_land_Cd and eo.model_id = m.model_id )+
													  (select sum(isnull(est_cost,0)) from hb_est_trd t where t.option_id = o.option_id and t.raw_land_Cd = eo.raw_land_Cd and eo.model_id = t.model_id)),0)+isnull(eo.opt_only_cost,0)[total],@update_method_id,
		dbo.fn_hb_calc_update_opt_amt(eo.model_id,w.raw_land_cd,o.option_id,@AsAtDate,@update_method_id,-1,'O',@username)[option update amt], 
		
		
		0 [trd_mat_update_amt],0[chg_pct],0[total_amt],null[lastUpdated],null[last_update_meth], 
		@username,

		case when @update_method_id in (select id from hb_rfq_update_method  where description not in ('Manual', 'By Ranking Average Alternate', 'By Average Price'))
		then dbo.fn_hb_calc_update_opt_vendor(eo.model_id,w.raw_land_cd,o.option_id,@AsAtDate,@update_method_id,-1,'O',@username)
		else @supplier_id end as [supplier id],
		'N'
     
        --select *
		from working_hb_rfq_update w
		join hb_elv_opt eo
		on eo.model_id = w.model_id
		and eo.raw_land_cd = w.raw_land_cd
		join hb_options o
		on o.option_id = eo.option_id
		join HB_OPT_MAJ_GROUP m
		on m.MAJ_GROUP_ID = o.MAJ_GROUP_ID
		join HB_OPT_SUB_GROUP sg
		on sg.SUB_GROUP_ID = o.SUB_GROUP_ID
		where o.IS_STRUCTURAL = 'Y' and w.raw_land_cd=eo.raw_land_cd
	end
		else
	begin
		insert into working_hb_option_selected(model_id, raw_land_cd, Option_id, group_desc, maj_group_desc, sub_group_desc, option_only_est, trd_mat_est, total_est, update_method, option_only_update_amt, trd_Mat_update_amt, change_pct, total_update_amt, last_updated, last_update_method, username, supplier_id, selected) 
		select  -1[model_id],@raw_land_cd[raw_land_cd],o.option_id[option_id],o.SHORT_DESC,m.GROUP_DESC, sg.SUB_GROUP_DESC,
		isnull(r.opt_only_cost,0)[option only cost],isnull(((select sum(isnull(est_cost,0)) from hb_est_mat m where m.option_id = o.option_id and raw_land_cd = @raw_land_cd and -1 = m.model_id )+
													  (select sum(isnull(est_cost,0)) from hb_est_trd t where t.option_id = o.option_id and raw_land_cd = @raw_land_cd and -1 = t.model_id )),0)[trdANDmatCOST],
		isnull(((select sum(isnull(est_cost,0)) from hb_est_mat m where m.option_id = o.option_id and raw_land_cd = @raw_land_cd and -1 = m.model_id)+
				(select sum(isnull(est_cost,0)) from hb_est_trd t where t.option_id = o.option_id and raw_land_cd = @raw_land_cd and -1 = t.model_id)) + isnull(r.opt_only_cost,0) ,0)[Total],
		


		@update_method_id,dbo.fn_hb_calc_update_opt_amt(-1,@raw_land_cd,o.option_id,@AsAtDate,@update_method_id,-1,'O',@username)[option update amt], 0[trd_mat_update_amt],0[chg_pct],0[total_amt],null[lastUpdated],null[last_update_meth], 
		@username,

		case when @update_method_id in (select id from hb_rfq_update_method  where description not in ('Manual', 'By Ranking Average Alternate', 'By Average Price'))
		then dbo.fn_hb_calc_update_opt_vendor(-1,@raw_land_cd,o.option_id,@AsAtDate,@update_method_id,-1,'O',@username)
		else @supplier_id end as [supplier id],'N'

		from hb_options o
		join hb_raw_opt r
		on r.option_id = o.option_id
		join HB_OPT_MAJ_GROUP m
		on m.MAJ_GROUP_ID = o.MAJ_GROUP_ID
		join HB_OPT_SUB_GROUP sg
		on sg.SUB_GROUP_ID = o.SUB_GROUP_ID
		where o.IS_STRUCTURAL = 'N'
		and r.Raw_land_CD = @raw_land_cd
end

	end


	declare
	@id int,
	@model_id int,
	@material_id int,
	@option_id int,
	@trd_value float,
	@mat_value float

if @update_method_id <> -99
begin
		
	declare cur_opt cursor for
	select id,model_id, raw_land_cd, option_id
	from working_hb_option_selected where username=@username

	open cur_opt
	fetch cur_opt into @id ,@model_id, @raw_land_cd, @option_id
	
	while @@fetch_status=0
	begin
		
		select @trd_value = sum(isnull(update_amt,0)) from working_hb_trade_selected where option_id = @option_id and username = @username
		select @mat_value = sum(isnull(update_amt,0)) from working_hb_material_selected where option_id = @option_id and username = @username
				
		
		update working_hb_option_selected set 
		
		last_updated=(select top 1 date from hb_option_selected_history where model_id=@model_id and raw_land_cd=@raw_land_cd and option_id=@option_id order by date desc ), 
		last_update_method=(select top 1 update_method from hb_option_selected_history where model_id=@model_id and raw_land_cd=@raw_land_cd and option_id=@option_id order by date desc ),
		trd_mat_update_amt = isnull(@trd_value,0) + isnull(@mat_value,0),
		total_update_amt = isnull(option_only_update_amt,0) + isnull(@trd_value,0) + isnull(@mat_value,0)
		where model_id=@model_id and raw_land_cd=@raw_land_cd and option_id=@option_id  and username=@username
		
		

		--second update will calculate the percent
		update working_hb_option_selected set 
		change_pct=case when ( ( cast(isnull(total_update_amt,0) as float) / cast( (case when isnull(total_est,0) = 0 then (case when isnull(total_update_amt,0) = 0 then 1 else total_update_amt end) else total_est end) as float) * cast(100 as float)) - cast(100 as float)	) = -100 
						then 0 
						else ( cast(isnull(total_update_amt,0) as float) / cast( (case when isnull(total_est,0) = 0 then (case when isnull(total_update_amt,0) = 0 then 1 else total_update_amt end) else total_est end) as float) * cast(100 as float)) - cast(100 as float)	end	

		where model_id=@model_id and raw_land_cd=@raw_land_cd and option_id=@option_id  and username=@username

		set @trd_value = 0
		set @mat_value = 0

		fetch cur_opt into  @id ,@model_id, @raw_land_cd, @option_id
	end
	close cur_opt
	deallocate cur_opt
end
	else
begin
select  @option_id = option_id from working_hb_option_selected where id = @company_id
select @trd_value = sum(isnull(update_amt,0)) from working_hb_trade_selected where option_id = @option_id and username = @username
select @mat_value = sum(isnull(update_amt,0)) from working_hb_material_selected where option_id = @option_id and username = @username
 		
update working_hb_option_selected set 
	trd_mat_update_amt = isnull(@trd_value,0) + isnull(@mat_value,0),
	total_update_amt = isnull(option_only_update_amt,0) + isnull(@trd_value,0) + isnull(@mat_value,0)
	where id = @company_id

update working_hb_option_selected set 
		change_pct=case when ( ( cast(isnull(total_update_amt,0) as float) / cast( (case when isnull(total_est,0) = 0 then (case when isnull(total_update_amt,0) = 0 then 1 else total_update_amt end) else total_est end) as float) * cast(100 as float)) - cast(100 as float)	) = -100 
						then 0 
						else ( cast(isnull(total_update_amt,0) as float) / cast( (case when isnull(total_est,0) = 0 then (case when isnull(total_update_amt,0) = 0 then 1 else total_update_amt end) else total_est end) as float) * cast(100 as float)) - cast(100 as float)	end	
where id = @company_id


end




end




select *
from working_hb_option_selected

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_fill_rfq_trades]') and xtype = 'P ')  
 drop Procedure sp_hb_fill_rfq_trades
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_hb_fill_rfq_trades]
@username varchar(350),
@update_method_id int,
@AsAtDate datetime,
@company_id int,
@supplier_id int,
@option_id int
as
begin

	declare
	@model_id int,
	@raw_land_cd int,
	@trade_id int,
	@HR_DB varchar(50),
	@sqlStr varchar(8000),
	@minor_cd varchar(5),
	@major_cd varchar(5),
	@minor_desc varchar(30),
	@major_desc varchar(30)

	select @HR_DB=humandbname from companies where autoid = @company_id
	
	--if @option_id = -1
		delete from working_hb_trade_selected where username = @username --and option_id = -1
	--else 
		--delete from working_hb_trade_selected where username = @username and option_id <> -1
	

	exec sp_hb_rankingjoin @company_id, @username

	if @option_id = -1
	begin
		insert into working_hb_trade_selected
		select model_id, raw_land_cd, trade_id as [Item], isnull(est_cost,1) as [Estimate], @update_method_id as [Update Method],

		case when @update_method_id = -1 then 0 else		
		case when option_id = -1 then
		dbo.fn_hb_calc_update_trd_amt( model_id, raw_land_cd, trade_id, @AsAtDate, @update_method_id, @username ) else
		dbo.fn_hb_calc_update_opt_amt( model_id, raw_land_cd, Option_id, @AsAtDate, @update_method_id, trade_id, 'T', @username) end
		end, 	

		0 as [% Change], null as [Last Updated], null as [Last Update Method ], isnull(est_hours,0), phs_code, null as major_desc,
		subp_code, null as minor_desc,
		@username as Username, 

		case when option_id = -1 then
			case when @update_method_id in (select id from hb_rfq_update_method  where description not in ('Manual', 'By Ranking Average Alternate', 'By Average Price'))
			then dbo.fn_hb_calc_update_trd_vendor(model_id, raw_land_cd, trade_id, @AsAtDate, @update_method_id, @username)
			else null end
		else
			case when @update_method_id in (select id from hb_rfq_update_method  where description not in ('Manual', 'By Ranking Average Alternate', 'By Average Price'))
			then dbo.fn_hb_calc_update_opt_vendor( model_id, raw_land_cd, Option_id, @AsAtDate, @update_method_id, trade_id, 'T', @username)
			else null end			
		end as [supplier id], 

		'N', option_id
		from hb_est_trd 
		where --option_id = -1 and 
		model_id in (select model_id from working_hb_rfq_update where username = @username ) 
		and raw_land_cd = ( select top 1 raw_land_cd from working_hb_rfq_update where username = @username )
	end
	else
	begin	
		insert into working_hb_trade_selected
		select model_id, raw_land_cd, trade_id as [Item], isnull(est_cost,1) as [Estimate], @update_method_id as [Update Method],
		case when @update_method_id = -1 then 0 else	
		dbo.fn_hb_calc_update_opt_amt( model_id, raw_land_cd, Option_id, @AsAtDate, @update_method_id, trade_id, 'T', @username) end,
		0 as [% Change], null as [Last Updated], null as [Last Update Method ], isnull(est_hours,0), phs_code, null as major_desc,
		subp_code, null as minor_desc,
		@username as Username, 

		case when @update_method_id in (select id from hb_rfq_update_method  where description not in ('Manual', 'By Ranking Average Alternate', 'By Average Price'))
		then dbo.fn_hb_calc_update_opt_vendor(model_id, raw_land_cd, Option_id, @AsAtDate, @update_method_id, trade_id, 'T', @username)
		else null end as [supplier id], 

		'N', option_id
		from hb_est_trd 
		where option_id <> -1 and model_id = -1
		and raw_land_cd = @option_id
	end

	declare cur_trd cursor for
	select model_id, raw_land_cd, item, major_cd, minor_cd 
	from working_hb_trade_selected where username=@username

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#tmpTbl '))  
	drop table #tmpTbl
	create table #tmpTbl(
	[desc] varchar(30) )

	open cur_trd
	fetch cur_trd into @model_id, @raw_land_cd, @trade_id, @major_cd, @minor_cd
	
	while @@fetch_status=0
	begin
		set @sqlStr='select distinct phs_desc from '+@HR_DB+'..proj_phase where phs_code='''+@major_cd+''''
		
		delete from #tmpTbl
		insert #tmpTbl
		exec( @sqlStr )		
		
		select @major_desc=[desc] from #tmpTbl

		set @sqlStr='select distinct subp_desc from '+@HR_DB+'..subphase where subp_code='''+@minor_cd+''' and phs_code='''+@major_cd+''''
		
		delete from #tmpTbl
		insert #tmpTbl
		exec( @sqlStr )
		select @minor_desc=[desc] from #tmpTbl

		update working_hb_trade_selected set 
		last_updated=(select top 1 date from hb_trade_selected_history where model_id=@model_id and raw_land_cd=@raw_land_cd and item=@trade_id order by date desc ), 
		last_update_method=(select top 1 update_method from hb_trade_selected_history where model_id=@model_id and raw_land_cd=@raw_land_cd and item=@trade_id order by date desc ),
		major_desc=@major_desc,
		minor_desc=@minor_desc
		where model_id=@model_id and raw_land_cd=@raw_land_cd and item=@trade_id and username=@username

		update working_hb_trade_selected set 
		change_pct=(cast(update_amt as float) / cast(estimate as float) * cast(100 as float)) - cast(100 as float)		
		where model_id=@model_id and raw_land_cd=@raw_land_cd and item=@trade_id and username=@username and estimate > 0		

		fetch cur_trd into @model_id, @raw_land_cd, @trade_id, @major_cd, @minor_cd
	end
	close cur_trd
	deallocate cur_trd
	
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_getElevationModel_BADC]') and xtype = 'P ')  
 drop Procedure sp_hb_getElevationModel_BADC
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[sp_hb_getElevationModel_BADC](
@username varchar(500),
@model_id int,
@raw_land_cd int,
@selectData_YN varchar(1)
)
as 
begin

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#hb_model'))
drop table #hb_model 
create table #hb_model(
model_id int,
base_model_id int,
raw_land_cd int
)




if @model_id = -1 
begin 

insert into #hb_model (model_id,raw_land_cd)
select model_id,raw_land_cd from working_hb_ElevationModel_SP_Source
where username = @username

end
else
	insert into #hb_model values(@model_id, null,@raw_land_cd)



--now that the temp table has all model_id's get the base model
declare models cursor for 
select model_id,raw_land_cd from #hb_model 


declare
@tmp_modelID int,
@tmp_modelNameID int,
@tmp_raw_land_cd int

open models
fetch models into @tmp_modelID,@tmp_raw_land_cd

while @@fetch_status = 0
begin 

set @tmp_modelNameID = (select model_name_id from hb_model where model_id = @tmp_modelID and raw_land_cd = @tmp_raw_land_cd and base_model = 'N')
update #hb_model set base_model_id = (select model_id from hb_model 
where model_name_id = @tmp_modelNameID and raw_land_cd = @tmp_raw_land_cd and base_model = 'Y')
where model_id = @tmp_modelID and raw_land_cd = @tmp_raw_land_cd

fetch models into @tmp_modelID,@tmp_raw_land_cd
end
close models
deallocate models


--now update the models that are the base(no changes needed
update #hb_model set base_model_id = model_id where base_model_id is null

delete working_hb_ElevationModel_BADC WHERE USERNAME = @username

--insert into working table base values
insert into working_hb_ElevationModel_BADC (username,base_model_id,model_id, phs_code, subp_code, INTERNAL_EST, EXTERNAL_EST, FINAL_EST, HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, Raw_Land_CD, MAT_RFQ, TRADE_RFQ, EstimateLevel, BaseAddChange)
select                                     @username,m.base_model_id,m.model_id,e.phs_code,e.subp_code,e.internal_est,e.external_est,e.FINAL_EST, e.HOURS, e.SEND_RFQ, e.MAT_EST, e.TRADE_EST, e.MANUAL_YN_TRD, e.MANUAL_YN_MAT, e.Raw_Land_CD, e.MAT_RFQ, e.TRADE_RFQ, e.EstimateLevel, 'B'
from hb_est e join #hb_model m on
e.model_id = m.base_model_id and e.raw_land_cd = m.raw_land_cd
where e.option_id = -1

--first do the changes e.badc = 'C'
update working_hb_ElevationModel_BADC set INTERNAL_EST = e.INTERNAL_EST, EXTERNAL_EST = e.EXTERNAL_EST, BaseAddChange = 'C'
--select *
from  hb_est e join working_hb_ElevationModel_BADC s on
e.model_id = s.model_id and e.raw_land_cd = s.raw_land_cd
where e.option_id = -1 and e.badc = 'C' and e.phs_code = s.phs_code and e.subp_code = s.subp_code
--now do the Add e.badc = 'A'
insert into working_hb_ElevationModel_BADC (username,base_model_id,model_id, phs_code, subp_code, INTERNAL_EST, EXTERNAL_EST, FINAL_EST, HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, Raw_Land_CD, MAT_RFQ, TRADE_RFQ, EstimateLevel, BaseAddChange)
select                                     @username,m.base_model_id,m.model_id,e.phs_code,e.subp_code,e.internal_est,e.external_est,e.FINAL_EST, e.HOURS, e.SEND_RFQ, e.MAT_EST, e.TRADE_EST, e.MANUAL_YN_TRD, e.MANUAL_YN_MAT, e.Raw_Land_CD, e.MAT_RFQ, e.TRADE_RFQ, e.EstimateLevel, 'A'
from hb_est e join #hb_model m on
e.model_id = m.model_id and e.raw_land_cd = m.raw_land_cd
where e.option_id = -1 and e.badc = 'A' 
--now delete
delete working_hb_ElevationModel_BADC 
from  hb_est e join working_hb_ElevationModel_BADC s on
e.model_id = s.model_id and e.raw_land_cd = s.raw_land_cd
where e.option_id = -1 and e.badc = 'D' and e.phs_code = s.phs_code and e.subp_code = s.subp_code

if @selectData_YN = 'Y'--if selectData is Yes select from working table
	select username, base_model_id, model_id, phs_code, subp_code, INTERNAL_EST, EXTERNAL_EST, FINAL_EST, HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, Raw_Land_CD, MAT_RFQ, TRADE_RFQ, EstimateLevel, BaseAddChange from working_hb_ElevationModel_BADC where username = @username

end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HB_GetMissingPackageOptions]') and xtype = 'P ')  
 drop Procedure sp_HB_GetMissingPackageOptions
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE proc [dbo].[sp_HB_GetMissingPackageOptions] @Package_ID_To_Add int, @Model_ID int, @Model_Name_ID int, @RLH_ID int, @Type varchar(50), @PCID varchar(500) as

--declare @Package_ID_To_Add int, @Model_ID int, @Model_Name_ID int, @RLH_ID int, @Type varchar(50), @PCID varchar(500)
--select @Package_ID_To_Add = 382, @Model_ID = -1, @Model_Name_ID = -1, @RLH_ID = 50016, 
--@Type = 'Option Package - Check RLH', @PCID = 'Rob Giesbrecht was here in 07'


/************ notes
 the proc will write the missing options to a working table to allow the user to 
 select for insertion into either the model or elevation when adding an option package */


 -- need to set up for insertion into elv opt from mod opt
delete working_InsertOption where PCID = @PCID

if @Type = 'Option Package - Check Elevation'
begin 
 insert working_InsertOption(SUB_GROUP_DESC, GROUP_DESC, OPTION_ID, 
 MAJ_GROUP_ID, SUB_GROUP_ID, SHORT_DESC, UOM, IS_STRUCTURAL, PART_NUMBER, 
 REQUIRES_INSTALL_YN, ALLOWANCE, PRC_FM, PRC_MARKUP_PCT, PRC_FIXED, PRC_SELL, 
 COST_SUPL, COST_INT, RQD_DEPOSIT_PCT, EXP_DESC, Is_Option_Package, PCID, Selected,
 HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, OveridePrice, Opt_only_cost)
 select sg.SUB_GROUP_DESC, mg.GROUP_DESC, ho.OPTION_ID, ho.MAJ_GROUP_ID, 
 ho.SUB_GROUP_ID, ho.SHORT_DESC, ho.UOM, ho.IS_STRUCTURAL, ho.PART_NUMBER, 
 ho.REQUIRES_INSTALL_YN, mo.ALLOWANCE, mo.PRC_FM, mo.PRC_MARKUP_PCT, mo.PRC_FIXED, 
 mo.PRC_SELL, mo.COST_SUPL, mo.COST_INT, ho.RQD_DEPOSIT_PCT, ho.EXP_DESC, 
 ho.Is_Option_Package, @PCID PCID, 0,
 mo.HB_OrderPoint_ID, mo.HB_ConfirmationPoint_ID, mo.HB_ScheduleDeliveryPoint_ID, mo.ConfirmationDeadlineDays,
 mo.OveridePrice, mo.Opt_only_cost  
 from hb_mod_opt mo
 join hb_options ho
 on mo.Option_id = ho.option_id
 join hb_Opt_maj_group mg
 on mg.MAJ_GROUP_ID = ho.MAJ_GROUP_ID
 join hb_opt_sub_group sg
 on sg.SUB_GROUP_ID = ho.SUB_GROUP_ID
 where raw_land_cd = @RLH_ID and Model_name_ID = @Model_name_ID
 and mo.Option_id in
 (select oo.OPTION_ID
 from hb_options o
 join hb_model m
 on m.model_id = o.HBM_ID
 join hb_elv_opt eo
 on eo.RAW_LAND_CD = m.RAW_LAND_CD and 
 eo.MODEL_ID = m.MODEL_ID
 join hb_options oo
 on oo.Option_id = eo.Option_id
 where o.option_id = @Package_ID_To_Add
 and oo.Option_ID not in
 (select option_id
  from hb_elv_opt where raw_land_cd = @RLH_ID and MODEL_ID = @Model_ID))

end

if @Type = 'Option Package - Check Elevation Available'
begin
 /*
 insert working_InsertOption(SUB_GROUP_DESC, GROUP_DESC, OPTION_ID, 
 MAJ_GROUP_ID, SUB_GROUP_ID, SHORT_DESC, UOM, IS_STRUCTURAL, PART_NUMBER, 
 REQUIRES_INSTALL_YN, ALLOWANCE, PRC_FM, PRC_MARKUP_PCT, PRC_FIXED, PRC_SELL, 
 COST_SUPL, COST_INT, RQD_DEPOSIT_PCT, EXP_DESC, Is_Option_Package, PCID, Selected)
 select sg.SUB_GROUP_DESC, mg.GROUP_DESC, oo.OPTION_ID, oo.MAJ_GROUP_ID, 
 oo.SUB_GROUP_ID, oo.SHORT_DESC, oo.UOM, oo.IS_STRUCTURAL, oo.PART_NUMBER, 
 oo.REQUIRES_INSTALL_YN, elv.ALLOWANCE, elv.PRC_FM, elv.PRC_MARKUP_PCT, elv.PRC_FIXED, 
 elv.PRC_SELL, elv.COST_SUPL, elv.COST_INT, oo.RQD_DEPOSIT_PCT, oo.EXP_DESC, oo.Is_Option_Package, @PCID PCID, 0  
 from hb_elv_opt elv
 join hb_options oo
 on oo.Option_id = elv.Option_id
 join hb_Opt_maj_group mg
 on mg.MAJ_GROUP_ID = oo.MAJ_GROUP_ID
 join hb_opt_sub_group sg
 on sg.SUB_GROUP_ID = oo.SUB_GROUP_ID
 where raw_land_cd = @RLH_ID and MODEL_ID = @Model_ID and Attached_YN = 'N'
  and elv.option_id in(
   select eo.Option_id
   from hb_options o
   join hb_model m
   on m.model_id = o.HBM_ID
   join hb_elv_opt eo
   on eo.RAW_LAND_CD = m.RAW_LAND_CD and 
   eo.MODEL_ID = m.MODEL_ID
   where o.option_id = @Package_ID_To_Add)
*/
 print 'Do not use'
end

if @Type = 'Option Package - Check Model'
begin
insert working_InsertOption(SUB_GROUP_DESC, GROUP_DESC, SHORT_DESC, PART_NUMBER, 
 MODEL_NAME_ID, OPTION_ID, ALLOWANCE, PRC_FM, PRC_MARKUP_PCT, PRC_FIXED, PRC_SELL, 
 COST_SUPL, COST_INT, Raw_land_Cd, PCID, Selected, MAJ_GROUP_ID, SUB_GROUP_ID,
 UOM, IS_STRUCTURAL, REQUIRES_INSTALL_YN, RQD_DEPOSIT_PCT, EXP_DESC, Is_Option_Package,
 HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, OveridePrice, Opt_only_cost)
 select sg.SUB_GROUP_DESC, mg.GROUP_DESC, oo.SHORT_DESC, oo.PART_NUMBER, m.MODEL_NAME_ID, 
 eo.OPTION_ID, eo.ALLOWANCE, eo.PRC_FM, eo.PRC_MARKUP_PCT, eo.PRC_FIXED, eo.PRC_SELL, 
 eo.COST_SUPL, eo.COST_INT, m.Raw_land_Cd, @PCID, 0, oo.MAJ_GROUP_ID, oo.SUB_GROUP_ID,
 oo.UOM, oo.IS_STRUCTURAL, oo.REQUIRES_INSTALL_YN, oo.RQD_DEPOSIT_PCT, oo.EXP_DESC, oo.Is_Option_Package,
 eo.HB_OrderPoint_ID, eo.HB_ConfirmationPoint_ID, eo.HB_ScheduleDeliveryPoint_ID, eo.ConfirmationDeadlineDays, 
 eo.OveridePrice, eo.Opt_only_cost
 from hb_options o
 join hb_model m
 on m.model_id = o.HBM_ID
 join hb_mod_opt eo
 on eo.RAW_LAND_CD = m.RAW_LAND_CD and 
 eo.MODEL_name_ID = m.MODEL_name_ID
 join hb_options oo
 on oo.Option_id = eo.Option_id
 join hb_Opt_maj_group mg
 on mg.MAJ_GROUP_ID = oo.MAJ_GROUP_ID
 join hb_opt_sub_group sg
 on sg.SUB_GROUP_ID = oo.SUB_GROUP_ID
 where o.option_id = @Package_ID_To_Add
 and oo.Option_ID not in
 (select option_id
  from hb_mod_opt where raw_land_cd = @RLH_ID and Model_name_ID = @Model_name_ID)
end

if @Type = 'Option Package - Check RLH'
begin
insert working_InsertOption(SUB_GROUP_DESC, GROUP_DESC, SHORT_DESC, PART_NUMBER, 
 MODEL_NAME_ID, OPTION_ID, ALLOWANCE, PRC_FM, PRC_MARKUP_PCT, PRC_FIXED, PRC_SELL, 
 COST_SUPL, COST_INT, Raw_land_Cd, PCID, Selected, MAJ_GROUP_ID, SUB_GROUP_ID,
 UOM, IS_STRUCTURAL, REQUIRES_INSTALL_YN, RQD_DEPOSIT_PCT, EXP_DESC, Is_Option_Package,
 HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, OveridePrice, Opt_only_cost)
 select sg.SUB_GROUP_DESC, mg.GROUP_DESC, oo.SHORT_DESC, oo.PART_NUMBER, -1, 
 oo.OPTION_ID, isnull(oo.ALLOWANCE,0), isnull(oo.PRC_FM,0), isnull(oo.PRC_MARKUP_PCT,0), isnull(oo.PRC_FIXED,0), isnull(oo.PRC_SELL,0), 
 isnull(oo.COST_SUPL,0), isnull(oo.COST_INT,0), @RLH_ID, @PCID, 0, oo.MAJ_GROUP_ID, oo.SUB_GROUP_ID,
 oo.UOM, oo.IS_STRUCTURAL, oo.REQUIRES_INSTALL_YN, isnull(oo.RQD_DEPOSIT_PCT,0), oo.EXP_DESC, oo.Is_Option_Package,
 oo.HB_OrderPoint_ID, oo.HB_ConfirmationPoint_ID, oo.HB_ScheduleDeliveryPoint_ID, oo.ConfirmationDeadlineDays,
 oo.OveridePrice, oo.Opt_only_cost
from hb_options o
 join hb_model m
 on m.model_id = o.HBM_ID
 join hb_elv_opt eo
 on eo.RAW_LAND_CD = m.RAW_LAND_CD and 
 eo.MODEL_ID = m.MODEL_ID
 join hb_options oo
 on oo.Option_id = eo.Option_id
 join hb_Opt_maj_group mg
 on mg.MAJ_GROUP_ID = oo.MAJ_GROUP_ID
 join hb_opt_sub_group sg
 on sg.SUB_GROUP_ID = oo.SUB_GROUP_ID
 where o.option_id = @Package_ID_To_Add
 and oo.option_id not in
 (select option_id from hb_raw_opt where RAW_LAND_CD = @RLH_ID)
end


 select * from working_InsertOption where PCID = @PCID





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_holdings]') and xtype = 'P ')  
 drop Procedure sp_hb_holdings
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--exec sp_hb_holdings 'hm'  
CREATE PROCEDURE sp_hb_holdings @USERNAME varchar(500) AS  
--select @username = 'hm'  
declare @sql_str varchar(4096)  
  
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempHoldings'))  
  drop table #TempHoldings  
  
if exists (select * from working_holding where PCID=@USERNAME)  
begin  
  set @sql_str='select rl.* into #TempHoldings from hb_raw_land rl, working_holding wrl  
  where wrl.PCID='''+@USERNAME+'''  
  and rl.raw_land_cd = wrl.raw_land_cd'  
end  
else  
begin  
  set @sql_str='select rl.* into #TempHoldings from hb_raw_land rl'  
end  
  
--if exists (select * from hb_working_holding_status where username=@USERNAME)  
--begin  
-- set @sql_str=@sql_str+'  
--delete from #TempHoldings where raw_land_status not in (select holding_status_cd from hb_working_holding_status where username='''+@USERNAME+''')'  
--end  
  
set @sql_str=@sql_str+'  
select ro.*, th.raw_land_cd, th.raw_land_desc, th.raw_land_sdesc, th.raw_land_status from hb_report_options ro, #TempHoldings th  
where ro.PCID='''+@USERNAME+'''  
order by th.raw_land_sdesc'  
  
exec(@sql_str)  
  
  
  
  
  
  
  
  
  



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HB_LoadEstimateUpdateSelection]') and xtype = 'P ')  
 drop Procedure sp_HB_LoadEstimateUpdateSelection
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure [dbo].[sp_HB_LoadEstimateUpdateSelection]
(@Option_ID int, @Model_ID varchar(20), @Raw_Land_CD varchar(20), @EstimateLevel varchar(2), @UserName varchar(50))
AS

--Declare @Option_ID int, @Model_ID varchar(20), @Raw_Land_CD varchar(20), @EstimateLevel varchar(2), @UserName varchar(50)
--Select @Option_ID = 46, @Model_ID = '-1', @Raw_Land_CD = '-1', @EstimateLevel = 'O', @UserName = 'ken'

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#working_HBEstimateChangeFlow'))  
 drop table #working_HBEstimateChangeFlow

Create Table #working_HBEstimateChangeFlow
(
 Raw_Land_CD int null,
 Raw_Land_Desc varchar(50) null,
 Model_Name_ID int null,
 Model_Name_Desc varchar(44) null,
 Model_ID int null,
 Model_Desc varchar(50) null
)

Delete working_HBEstimateChangeFlow Where UserName = @UserName

If @Model_ID = '-1'
	Begin
		Set @Model_ID = '%'
	End

If @Raw_Land_CD = '-1'
	Begin
		Set @Raw_Land_CD = '%'
	End


If @Option_ID <> -1
	Begin
		If @Raw_Land_CD = '%' and @EstimateLevel <> 'E' and @EstimateLevel <> 'M'
			Begin
				Insert Into #working_HBEstimateChangeFlow (Raw_Land_CD, Raw_Land_Desc, Model_Name_ID, Model_Name_Desc, Model_ID, Model_Desc)
				Select Distinct Raw_Land_CD, (Select Raw_Land_Desc From HB_Raw_Land r Where r.Raw_Land_CD = o.Raw_Land_CD),
				-1, '', -1, '' From HB_Raw_Opt o Where Option_ID = @Option_ID
			End
		
		If  @EstimateLevel <> 'E'
			Begin
				Insert Into #working_HBEstimateChangeFlow (Raw_Land_CD, Raw_Land_Desc, Model_Name_ID, Model_Name_Desc, Model_ID, Model_Desc)
				Select Distinct Raw_Land_CD, (Select Raw_Land_Desc From HB_Raw_Land r Where r.Raw_Land_CD = o.Raw_Land_CD), 
				Model_Name_ID, (Select Model_Name From HB_Model_Name m Where m.Model_Name_ID = o.Model_Name_ID and IsNull(m.Is_Option_Package,0) <> 1), -1, ''
				From HB_Mod_Opt o Where Option_ID = @Option_ID 
				and Convert(varchar(50),Raw_Land_CD) like @Raw_Land_CD
				and Convert(varchar(50),Model_Name_ID) like @Model_ID
				and Model_Name_ID not in (Select Model_Name_ID From HB_Model_Name Where IsNull(Is_Option_Package,0) <> 0)
			End
		
		If @EstimateLevel = 'E'
			Begin
				Insert Into #working_HBEstimateChangeFlow (Raw_Land_CD, Raw_Land_Desc, Model_Name_ID, Model_Name_Desc, Model_ID, Model_Desc)
				Select Distinct Raw_Land_CD, (Select Raw_Land_Desc From HB_Raw_Land r Where r.Raw_Land_CD = o.Raw_Land_CD), 
				(Select Model_Name_ID From HB_Model hm Where hm.Model_ID = o.Model_ID and hm.Raw_Land_CD = o.Raw_Land_CD
				  and Model_Name_ID not in (Select Model_Name_ID From HB_Model_Name Where IsNull(Is_Option_Package,0) <> 01)), 
				(Select Model_Name From HB_Model_Name m Where m.Model_Name_ID = 
				  (Select Model_Name_ID From HB_Model hm Where hm.Model_ID = o.Model_ID and hm.Raw_Land_CD = o.Raw_Land_CD
				   and Model_Name_ID not in (Select Model_Name_ID From HB_Model_Name Where IsNull(Is_Option_Package,0) <> 0) 
				    and IsNull(m.Is_Option_Package,0) <> 1)),
				Model_ID, (Select Model_Desc From HB_Model e Where e.Model_ID = o.Model_ID and e.Raw_Land_CD = o.Raw_Land_CD
							and Model_Name_ID not in (Select Model_Name_ID From HB_Model_Name Where IsNull(Is_Option_Package,0) <> 0))
				From HB_Elv_Opt o Where Option_ID = @Option_ID
				and Convert(varchar(50),Raw_Land_CD) Like @Raw_Land_CD
				and Convert(varchar(50),Model_ID) Like @Model_ID
				and Model_ID not In (Select Model_ID From HB_Model Where Model_Name_ID In
					(Select Model_Name_ID From HB_Model_Name Where IsNull(Is_Option_Package,0) <> 0))
			End
		Else
			Begin
				Insert Into #working_HBEstimateChangeFlow (Raw_Land_CD, Raw_Land_Desc, Model_Name_ID, Model_Name_Desc, Model_ID, Model_Desc)
				Select Distinct Raw_Land_CD, (Select Raw_Land_Desc From HB_Raw_Land r Where r.Raw_Land_CD = o.Raw_Land_CD), 
				(Select Model_Name_ID From HB_Model hm Where hm.Model_ID = o.Model_ID and hm.Raw_Land_CD = o.Raw_Land_CD
				 and Model_Name_ID not in (Select Model_Name_ID From HB_Model_Name Where IsNull(Is_Option_Package,0) <> 0)), 
				(Select Model_Name From HB_Model_Name m Where m.Model_Name_ID = 
				  (Select Model_Name_ID From HB_Model hm Where hm.Model_ID = o.Model_ID and hm.Raw_Land_CD = o.Raw_Land_CD
				   and Model_Name_ID not in (Select Model_Name_ID From HB_Model_Name Where IsNull(Is_Option_Package,0) <> 0) 
				    and IsNull(m.Is_Option_Package,0) <> 1)),
				Model_ID, (Select Model_Desc From HB_Model e Where e.Model_ID = o.Model_ID and e.Raw_Land_CD = o.Raw_Land_CD
							and Model_Name_ID not in (Select Model_Name_ID From HB_Model_Name Where IsNull(Is_Option_Package,0) <> 0))
				From HB_Elv_Opt o Where Option_ID = @Option_ID
				and Convert(varchar(50),Raw_Land_CD) Like @Raw_Land_CD
				and Model_ID in (Select es.Model_ID From HB_Model es Where Convert(varchar(50),Model_Name_ID) Like @Model_ID
				 And es.Model_Name_ID not in 
				(Select Model_Name_ID From HB_Model_Name Where IsNull(Is_Option_Package,0) <> 0))
			End
	End
Else --Currently Only Elevations have direct estimates no other level has direct estimates besides options
	Begin
		Insert Into #working_HBEstimateChangeFlow (Raw_Land_CD, Raw_Land_Desc, Model_Name_ID, Model_Name_Desc, Model_ID, Model_Desc)
		Select Raw_Land_CD, (Select Raw_Land_Desc From HB_Raw_Land r Where r.Raw_Land_CD = e.Raw_Land_CD),
		Model_Name_ID, (Select Model_Name From HB_Model_Name m Where m.Model_Name_ID = e.Model_Name_ID and IsNull(m.Is_Option_Package,0) <> 1),
		Model_ID, Model_Desc
		From HB_Model e
		Where Convert(varchar(50),e.Raw_Land_CD) Like @Raw_Land_CD
		and Convert(varchar(50),e.Model_ID) Like @Model_ID
		and e.Model_Name_ID in (Select Model_Name_ID From HB_Model_Name Where IsNull(Is_Option_Package,0) <> 1)
	End

If @Model_ID = '%'
	Begin
		Set @Model_ID = '-1'
	End

If @Raw_Land_CD = '%'
	Begin
		Set @Raw_Land_CD = '-1'
	End

If @EstimateLevel = 'M'
	Begin
		Delete #working_HBEstimateChangeFlow
		Where Raw_Land_CD = @Raw_Land_CD and Model_Name_ID = @Model_ID and Model_ID = -1
	End
Else
	Begin
		Delete #working_HBEstimateChangeFlow
		Where Raw_Land_CD = @Raw_Land_CD 
		and Model_Name_ID = IsNull((Select mn.Model_Name_ID From HB_Model_Name mn Where mn.Model_Name_ID = (Select Model_Name_ID from HB_Model m Where 
			   m.Model_ID = @Model_ID and m.Raw_Land_CD = @Raw_Land_CD) and IsNull(mn.Is_Option_Package,0) <> 1),-1)
		and Model_ID = @Model_ID
	End

Insert Into working_HBEstimateChangeFlow (Raw_Land_CD, Raw_Land_Desc, Model_Name_ID, Model_Name_Desc, 
										  Model_ID, Model_Desc, [Selected], UserName)
Select Distinct Raw_Land_CD, Raw_Land_Desc, Model_Name_ID, Model_Name_Desc, Model_ID, Model_Desc, 0, @UserName
from #working_HBEstimateChangeFlow

Select Raw_Land_CD, Raw_Land_Desc, Model_Name_ID, Model_Name_Desc, Model_ID, Model_Desc, [Selected], UserName 
from working_HBEstimateChangeFlow
Where UserName = @UserName

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_lot]') and xtype = 'P ')  
 drop Procedure sp_hb_lot
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--Do not show civic
--exec sp_hb_lot 'hm', 0
--Show civic
--exec sp_hb_lot 'hm', 1
CREATE  PROCEDURE [dbo].[sp_hb_lot] (@PCID varchar(500),@ShowCivic bit )AS  
--declare @PCID varchar(500), @ShowCivic bit  
--select @PCID = 'hm', @ShowCivic = 0
declare @sql_str varchar(4096)  
  
  
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempHoldings'))  
  drop table #TempHoldings  
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempCommunity'))  
  drop table #TempCommunity  
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempPhase'))  
  drop table #TempPhase  
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempLot'))  
  drop table #TempLot  
  
if exists (select * from working_holding where pcid=@PCID)  
begin  
  set @sql_str='select rl.* into #TempHoldings from hb_raw_land rl, working_holding wrl
  where wrl.pcid='''+@PCID+'''  
  and rl.raw_land_cd = wrl.raw_land_cd'  
end  
else  
begin  
  set @sql_str='select rl.* into #TempHoldings from hb_raw_land rl'  
end  
  
if exists (select * from working_community where pcid=@PCID)  
begin  
  set @sql_str=@sql_str+'  
select c.* into #TempCommunity from hb_communities c, working_community wc  
  where wc.pcid='''+@PCID+'''  
  and c.community_cd = wc.community_cd'  
end  
else  
begin  
  set @sql_str=@sql_str+'  
select c.* into #TempCommunity from hb_communities c'  
end  
  
if exists (select * from working_project where pcid=@PCID)  
begin  
  set @sql_str=@sql_str+'  
select p.* into #TempPhase from hb_project p, working_project wp  
  where wp.pcid='''+@PCID+'''  
  and p.project_cd = wp.project_cd'  
end  
else  
begin  
  set @sql_str=@sql_str+'  
select p.* into #TempPhase from hb_project p'  
end  

--if exists (select * from working_lots where pcid=@PCID)  
--begin  
--  set @sql_str=@sql_str+'  
--select l.* into #TempLot from hb_lots l, working_lots wl  
--  where wl.pcid='''+@PCID+'''  
--  and l.lot_id = wl.lot_id'  
--end  
--else  
--begin  
  set @sql_str=@sql_str+'  
select l.* into #TempLot from hb_lots l'  
--end  
  
--if exists (select * from hb_working_holding_status where username=@PCID)  
--begin  
-- set @sql_str=@sql_str+'  
--delete from #TempHoldings where raw_land_status not in (select holding_status_cd from hb_working_holding_status where username='''+@PCID+''')'  
--end  

If(@ShowCivic = 1)
	Begin  
		set @sql_str=@sql_str+'
		select ro.*, th.raw_land_cd, th.raw_land_desc, th.raw_land_sdesc, th.raw_land_status,  
		 c.community_desc, c.use_phases_yn,  
		 ph.project_desc, ph.lots,  
		 l.lot_id, l.status_id, lst.stat_desc, l.class_id, cl.class_desc, l.sub_class_id, scl.sub_class_desc, l.shape_id, ls.shape_desc, l.lot, l.block,  
		 l.plan_no, l.price, l.project_cd, Case When RTrim(LTrim(IsNull(l.lih_str_num,'''') + '' '' + IsNull(l.lih_str_name,'''') + '' '' + IsNull(l.lih_str_suff,'''') + '' '' +
										   IsNull(l.lih_str_suff_dir,'''') + '' '' +  IsNull(l.addr_city,'''') + '', '' +  IsNull(l.addr_prov,'''') + '' '' +  
										   IsNull(l.addr_postal_code,''''))) = '','' Then ''''
										   Else RTrim(LTrim(IsNull(l.lih_str_num,'''') + '' '' + IsNull(l.lih_str_name,'''') + '' '' + IsNull(l.lih_str_suff,'''') + '' '' +
										   IsNull(l.lih_str_suff_dir,'''') + '' '' +  IsNull(l.addr_city,'''') + '', '' +  IsNull(l.addr_prov,'''') + '' '' +  
										   IsNull(l.addr_postal_code,''''))) End [Civic Address],  
		 l.lot_premium, l.Width, l.Area  
		 from hb_report_options ro, #TempHoldings th 
		Inner Join #TempCommunity c on c.raw_land_cd = th.raw_land_cd
		Inner Join #TempPhase ph on th.raw_land_cd = ph.raw_land_cd and c.community_cd=ph.community_cd 
		Inner Join #TempLot l on l.project_cd=ph.project_cd 
		Left Outer Join hb_lot_shape ls on ls.shape_id=l.shape_id 
		Left Outer Join hb_lot_status lst on lst.status_id=l.status_id
		Left Outer Join hb_lot_class cl on cl.class_id=l.class_id
		Left Outer Join hb_lot_sub_class scl on scl.class_id=l.class_id and scl.sub_class_id=l.sub_class_id  
		where ro.pcid='''+@PCID+''' '  
	End
Else
	Begin
		set @sql_str=@sql_str+'  
		select ro.*, th.raw_land_cd, th.raw_land_desc, th.raw_land_sdesc, th.raw_land_status,  
		 c.community_desc, c.use_phases_yn,  
		 ph.project_desc, ph.lots,  
		 l.lot_id, l.status_id, lst.stat_desc, l.class_id, cl.class_desc, l.sub_class_id, scl.sub_class_desc, l.shape_id, ls.shape_desc, l.lot, l.block,  
		 l.plan_no, l.price, l.project_cd, null [Civic Address], l.lot_premium,l.Width, l.Area  
		 from hb_report_options ro, #TempHoldings th 
		Inner Join #TempCommunity c on c.raw_land_cd = th.raw_land_cd
		Inner Join #TempPhase ph on th.raw_land_cd = ph.raw_land_cd and c.community_cd=ph.community_cd 
		Inner Join #TempLot l on l.project_cd=ph.project_cd 
		Left Outer Join hb_lot_shape ls on ls.shape_id=l.shape_id 
		Left Outer Join hb_lot_status lst on lst.status_id=l.status_id
		Left Outer Join hb_lot_class cl on cl.class_id=l.class_id
		Left Outer Join hb_lot_sub_class scl on scl.class_id=l.class_id and scl.sub_class_id=l.sub_class_id  
		where ro.pcid='''+@PCID+''' '  
	End
 
exec(@sql_str)  
  
  
  
  
  
  




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_majorminor]') and xtype = 'P ')  
 drop Procedure sp_hb_majorminor
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--Trade Only
--exec sp_hb_majorminor 'hm', 'T' 
--Material Group Only
--exec sp_hb_majorminor 'hm', 'M' 
--Both
--exec sp_hb_majorminor 'hm', 'B' 
CREATE PROCEDURE [dbo].[sp_hb_majorminor]    
 @PCID varchar(500), @Type varchar(2)    
 AS    

--declare @PCID varchar(500)
--select @PCID = '3eb28cc0-0241-4d0d-a7df-eadc51865b19'
    
declare @sql_str varchar(8000),  
 @HR_DB varchar(50),  
 @AUTOID int  
  
select @AUTOID=autoid from hb_report_options where pcid=@PCID  
select @HR_DB=HumanDBName from Companies where autoid=@AUTOID  
  
  
--alter table hb_working_major  
--add PCID varchar(500) null  
--  
--alter table hb_working_minor  
--add PCID varchar(500) null  
    
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempMajor'))    
  drop table #TempMajor    
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempMinor'))    
  drop table #TempMinor
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempMajorMinor'))    
  drop table #TempMajorMinor

Create Table #TempMajorMinor
(
	[phs_co] [int] NULL,
	[phs_code] [char](5) NULL,
	[phs_desc] [char](30) NULL,
	[COST_TYPE] [varchar](5) NULL,
	[fa_exp_type] [char](1) NULL,
	[pri_type] [varchar](1) NULL,
	[subp_co] [int] NULL,
	[subp_code] [char](5) NULL,
	[subp_desc] [char](30) NULL,
	[Trade] [varchar] (50) NULL,
	[MATGROUP] [varchar] (50) NULL,
	[SortOrder] [int] NULL
)    
    
if exists (select * from hb_working_major where pcid=@PCID)    
begin    
  set @sql_str='select maj.* into #TempMajor from '+@HR_DB+'..phase maj, hb_working_major wmaj    
  where wmaj.pcid='''+@PCID+'''    
  and maj.phs_code = wmaj.phs_code'    
end    
else    
begin    
  set @sql_str='select maj.* into #TempMajor from '+@HR_DB+'..phase maj'    
end    
    
if exists (select * from hb_working_minor where pcid=@PCID)    
begin    
  set @sql_str=@sql_str+'    
select min.* into #TempMinor from '+@HR_DB+'..subphase min, hb_working_minor wmin    
  where wmin.pcid='''+@PCID+'''    
  and min.subp_code = wmin.subp_code'    
end    
else    
begin    
  set @sql_str=@sql_str+'    
select min.* into #TempMinor from '+@HR_DB+'..subphase min'    
end  
    
Select @sql_str = @sql_str +
' 
Declare @ShowType varchar(2)
Select @ShowType = ''' + @Type + '''

If(@ShowType = ''T'' Or @ShowType = ''B'')
Begin
	Insert Into #TempMajorMinor (phs_co, phs_code, phs_desc, COST_TYPE, fa_exp_type, pri_type, Trade, MATGROUP, SortOrder )
	Select p.phs_co, p.phs_code, p.phs_desc, p.COST_TYPE, p.fa_exp_type, p.pri_type,
	(Select Trade_Desc From HB_Trades t where t.Trade_ID = tmo.TMO_ID) [Trade], '''', 1
	from ' + @HR_DB + '..phase p
	Left Outer Join HB_TMO tmo on tmo.phs_code = p.phs_code
	Where tmo.TMO_TYPE = ''T''
End

If(@ShowType = ''M'' Or @ShowType = ''B'')
Begin
	Insert Into #TempMajorMinor (phs_co, phs_code, phs_desc, COST_TYPE, fa_exp_type, pri_type, Trade, MATGROUP, SortOrder)
	Select p.phs_co, p.phs_code, p.phs_desc, p.COST_TYPE, p.fa_exp_type, p.pri_type, '''',
	(Select Group_Desc From HB_MAT_GROUP mg where mg.MATGROUP_ID = tmo.TMO_ID) [Material Group], 2
	from ' + @HR_DB + '..phase p
	Left Outer Join HB_TMO tmo on tmo.phs_code = p.phs_code
	Where tmo.TMO_TYPE = ''M''
End

If(@ShowType = ''T'' Or @ShowType = ''B'')
Begin
	Insert Into #TempMajorMinor (subp_co, subp_code, subp_desc, COST_TYPE, phs_code, phs_desc, Trade, MATGROUP, SortOrder)
	Select s.subp_co, s.subp_code, s.subp_desc, s.COST_TYPE, s.phs_code, 
	(Select phs_desc from ' + @HR_DB + '..phase p where p.phs_code = s.phs_code) [phs_desc],
	(Select Trade_Desc From HB_Trades t where t.Trade_ID = tmo.TMO_ID) [Trade], '''', 1
	from ' + @HR_DB + '..Subphase s
	Left Outer Join HB_TMO_SubCode tmo on tmo.subp_code = s.subp_code
	Where tmo.TMO_TYPE = ''T''
End

If(@ShowType = ''M'' Or @ShowType = ''B'')
Begin
	Insert Into #TempMajorMinor (subp_co, subp_code, subp_desc, COST_TYPE, phs_code, phs_desc, Trade, MATGROUP, SortOrder)
	Select  s.subp_co, s.subp_code, s.subp_desc, s.COST_TYPE, s.phs_code, 
	(Select phs_desc from ' + @HR_DB + '..phase p where p.phs_code = s.phs_code) [phs_desc], '''',
	(Select Group_Desc From HB_MAT_GROUP mg where mg.MATGROUP_ID = tmo.TMO_ID) [Material Group], 2
	from ' + @HR_DB + '..Subphase s
	Left Outer Join HB_TMO_SubCode tmo on tmo.subp_code = s.subp_code
	Where tmo.TMO_TYPE = ''M''
End

Select ro.*, mn.* from hb_report_options ro, #TempMajorMinor mn
Inner Join #TempMajor m on m.phs_code = mn.phs_code
Where PCID = ''' + @PCID + ''' and IsNull(subp_code,'''') = ''''

UNION

Select ro.*, mn.* from hb_report_options ro, #TempMajorMinor mn
Inner Join #TempMajor m on m.phs_code = mn.phs_code
Inner Join #TempMinor n on n.subp_code = mn.subp_code and n.phs_code = m.phs_code
Where PCID = ''' + @PCID + '''
Order By mn.phs_code, mn.subp_code, mn.SortOrder'  
    
exec(@sql_str)    
    
    
    
    
    
    
    
    
    
  



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_materials]') and xtype = 'P ')  
 drop Procedure sp_hb_materials
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go








--exec sp_hb_materials 'hm'
CREATE  PROCEDURE sp_hb_materials

 @USERNAME varchar(10),
 @HR_DB varchar(50) 
AS
--declare @username varchar(10)
--select @username = 'hm'
declare @sql_str varchar(4096)


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempMaterial'))
  drop table #TempMaterial

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempMatGroup'))
  drop table #TempMatGroup

if exists (select * from hb_working_material where username=@USERNAME)
begin
  set @sql_str='select mat.* into #TempMaterial from hb_material mat, hb_working_material wm
  where wm.username='''+@USERNAME+'''
  and mat.material_id = wm.material_id'
end
else
begin
  set @sql_str='select mat.* into #TempMaterial from hb_material mat'
end

if exists (select * from hb_working_mat_group where username=@USERNAME)
begin
  set @sql_str=@sql_str+'
select mg.* into #TempMatGroup from hb_mat_group mg, hb_working_mat_group wmg
  where wmg.username='''+@USERNAME+'''
  and mg.matgroup_id = wmg.matgroup_id'
end
else
begin
  set @sql_str=@sql_str+'
select * into #TempMatGroup from hb_mat_group'
end

set @sql_str=@sql_str+'
select ro.*, mg.*, m.*, hr.un_desc from hb_report_options ro, #TempMatGroup mg, #TempMaterial m, '+@HR_DB+'..units hr
where ro.USERNAME='''+@USERNAME+'''
and mg.matgroup_id = m.matgroup_id
and hr.un_code = m.uom
order by mat_group, mat_code'
print @sql_str
exec(@sql_str)









Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_me_estimate]') and xtype = 'P ')  
 drop Procedure sp_hb_me_estimate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go









--exec sp_hb_me_estimate 'hm'
CREATE  PROCEDURE [dbo].[sp_hb_me_estimate] 

@USERNAME varchar(10),
@HR_DB varchar(50)
 AS
--declare @username varchar(10)
--select @username = 'hm'
declare @sql_str varchar(4096)


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempHoldings'))
  drop table #TempHoldings
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempCommunity'))
  drop table #TempCommunity
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempPhase'))
  drop table #TempPhase
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempModelName'))
  drop table #TempModelName
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempModel'))
  drop table #TempModel

if exists (select * from hb_working_raw_land where username=@USERNAME)
begin
  set @sql_str='select rl.* into #TempHoldings from hb_raw_land rl, hb_working_raw_land wrl
  where wrl.username='''+@USERNAME+'''
  and rl.raw_land_cd = wrl.raw_land_cd'
end
else
begin
  set @sql_str='select rl.* into #TempHoldings from hb_raw_land rl'
end

if exists (select * from hb_working_communities where pcid=@USERNAME)
begin
  set @sql_str=@sql_str+'
select c.* into #TempCommunity from hb_communities c, hb_working_communities wc
  where wc.username='''+@USERNAME+'''
  and c.community_cd = wc.community_cd'
end
else
begin
  set @sql_str=@sql_str+'
select c.* into #TempCommunity from hb_communities c'
end

if exists (select * from hb_working_project where username=@USERNAME)
begin
  set @sql_str=@sql_str+'
select p.* into #TempPhase from hb_project p, hb_working_project wp
  where wp.username='''+@USERNAME+'''
  and p.project_cd = wp.project_cd'
end
else
begin
  set @sql_str=@sql_str+'
select p.* into #TempPhase from hb_project p'
end

if exists (select * from hb_working_model_name where username=@USERNAME)
begin
  set @sql_str=@sql_str+'
select mn.* into #TempModelName from hb_model_name mn, hb_working_model_name wmn
  where wmn.username='''+@USERNAME+'''
  and mn.model_name_id = wmn.model_name_id'
end
else
begin
  set @sql_str=@sql_str+'
select mn.* into #TempModelName from hb_model_name mn'
end

if exists (select * from hb_working_model where username=@USERNAME)
begin
  set @sql_str=@sql_str+'
select m.* into #TempModel from hb_model m, hb_working_model wm
  where wm.username='''+@USERNAME+'''
  and m.model_id = wm.model_id'
end
else
begin
  set @sql_str=@sql_str+'
select m.* into #TempModel from hb_model m'
end

set @sql_str=@sql_str+'
select ro.*, th.raw_land_cd, th.raw_land_desc, th.raw_land_sdesc, th.raw_land_status,
 c.community_desc, c.use_phases_yn,
 ph.project_desc, ph.lots, mn.*, hr.un_desc, m.*, ms.modstyle_desc
 from hb_report_options ro, #TempHoldings th, #TempCommunity c, #TempPhase ph, #TempModelName mn, #TempModel m, hb_proj_model pm, '+@HR_DB+'..units hr, hb_model_style ms
where ro.USERNAME='''+@USERNAME+'''
and c.raw_land_cd=th.raw_land_cd
and th.raw_land_cd=ph.raw_land_cd
and c.community_cd=ph.community_cd
and mn.model_name_id=m.model_name_id
and ph.project_cd=pm.project_cd
and pm.model_id=m.model_id
and hr.un_code=*m.FOOTAGE_un_code
and ms.modstyle_id=mn.modstyle_id'

exec(@sql_str)











Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_melist]') and xtype = 'P ')  
 drop Procedure sp_hb_melist
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go








--exec sp_hb_melist 'hm'
CREATE  PROCEDURE [dbo].[sp_hb_melist] 

@USERNAME varchar(10),
@HR_DB varchar(50)

 AS
--declare @username varchar(10)
--select @username = 'hm'
declare @sql_str varchar(4096)


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempHoldings'))
  drop table #TempHoldings
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempCommunity'))
  drop table #TempCommunity
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempPhase'))
  drop table #TempPhase
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempModelName'))
  drop table #TempModelName
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempModel'))
  drop table #TempModel

if exists (select * from hb_working_raw_land where username=@USERNAME)
begin
  set @sql_str='select rl.* into #TempHoldings from hb_raw_land rl, hb_working_raw_land wrl
  where wrl.username='''+@USERNAME+'''
  and rl.raw_land_cd = wrl.raw_land_cd'
end
else
begin
  set @sql_str='select rl.* into #TempHoldings from hb_raw_land rl'
end

if exists (select * from hb_working_communities where pcid=@USERNAME)
begin
  set @sql_str=@sql_str+'
select c.* into #TempCommunity from hb_communities c, hb_working_communities wc
  where wc.username='''+@USERNAME+'''
  and c.community_cd = wc.community_cd'
end
else
begin
  set @sql_str=@sql_str+'
select c.* into #TempCommunity from hb_communities c'
end

if exists (select * from hb_working_project where username=@USERNAME)
begin
  set @sql_str=@sql_str+'
select p.* into #TempPhase from hb_project p, hb_working_project wp
  where wp.username='''+@USERNAME+'''
  and p.project_cd = wp.project_cd'
end
else
begin
  set @sql_str=@sql_str+'
select p.* into #TempPhase from hb_project p'
end

if exists (select * from hb_working_model_name where username=@USERNAME)
begin
  set @sql_str=@sql_str+'
select mn.* into #TempModelName from hb_model_name mn, hb_working_model_name wmn
  where wmn.username='''+@USERNAME+'''
  and mn.model_name_id = wmn.model_name_id'
end
else
begin
  set @sql_str=@sql_str+'
select mn.* into #TempModelName from hb_model_name mn'
end

if exists (select * from hb_working_model where username=@USERNAME)
begin
  set @sql_str=@sql_str+'
select m.* into #TempModel from hb_model m, hb_working_model wm
  where wm.username='''+@USERNAME+'''
  and m.model_id = wm.model_id'
end
else
begin
  set @sql_str=@sql_str+'
select m.* into #TempModel from hb_model m'
end

set @sql_str=@sql_str+'
select ro.*, th.raw_land_cd, th.raw_land_desc, th.raw_land_sdesc, th.raw_land_status,
 c.community_desc, c.use_phases_yn,
 ph.project_desc, ph.lots, mn.*, hr.un_desc, m.*, ms.modstyle_desc
 from hb_report_options ro, #TempHoldings th, #TempCommunity c, #TempPhase ph, #TempModelName mn, #TempModel m, hb_proj_model pm, '+@HR_DB+'..units hr, hb_model_style ms
where ro.USERNAME='''+@USERNAME+'''
and c.raw_land_cd=th.raw_land_cd
and th.raw_land_cd=ph.raw_land_cd
and c.community_cd=ph.community_cd
and mn.model_name_id=m.model_name_id
and ph.project_cd=pm.project_cd
and pm.model_id=m.model_id
and hr.un_code=*m.FOOTAGE_un_code
and ms.modstyle_id=mn.modstyle_id'

exec(@sql_str)










Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_optionslist]') and xtype = 'P ')  
 drop Procedure sp_hb_optionslist
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go










--exec sp_hb_optionslist 'hm'
CREATE  PROCEDURE sp_hb_optionslist 

@USERNAME varchar(10) ,
@HR_DB varchar(50)

AS
--declare @username varchar(10)
--select @username = 'hm'
declare @sql_str varchar(4096)


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempOptionGroups'))
  drop table #TempOptionGroups
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempOptionSubGroups'))
  drop table #TempOptionSubGroups
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempOptions'))
  drop table #TempOptions

if exists (select * from hb_working_opt_maj_group where username=@USERNAME)
begin
  set @sql_str='select mg.* into #TempOptionGroups from hb_opt_maj_group mg, hb_working_opt_maj_group wmg
  where wmg.username='''+@USERNAME+'''
  and mg.maj_group_id = wmg.maj_group_id'
end
else
begin
  set @sql_str='select mg.* into #TempOptionGroups from hb_opt_maj_group mg'
end

if exists (select * from hb_working_opt_sub_group where username=@USERNAME)
begin
  set @sql_str=@sql_str+'
select sg.* into #TempOptionSubGroups from hb_opt_sub_group sg, hb_working_opt_sub_group wsg
  where wsg.username='''+@USERNAME+'''
  and sg.sub_group_id = wsg.sub_group_id'
end
else
begin
  set @sql_str=@sql_str+'
select sg.* into #TempOptionSubGroups from hb_opt_sub_group sg'
end

if exists (select * from hb_working_options where username=@USERNAME)
begin
  set @sql_str=@sql_str+'
select o.* into #TempOptions from hb_options o, hb_working_options wo
  where wo.username='''+@USERNAME+'''
  and o.option_id = wo.option_id'
end
else
begin
  set @sql_str=@sql_str+'
select o.* into #TempOptions from hb_options o'
end

set @sql_str=@sql_str+'
select ro.*, mg.*, sg.*, o.*, hr.un_desc from hb_report_options ro, #TempOptionGroups mg, #TempOptionSubGroups sg, #TempOptions o, '+@HR_DB+'..units hr
where ro.USERNAME='''+@USERNAME+'''
and mg.maj_group_id=sg.maj_group_id
and mg.maj_group_id=o.maj_group_id
and sg.sub_group_id=o.sub_group_id
and hr.un_code=*o.uom
order by o.short_desc'

exec(@sql_str)











Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_phase]') and xtype = 'P ')  
 drop Procedure sp_hb_phase
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
    
CREATE PROCEDURE [dbo].[sp_hb_phase] @PCID varchar(500), @Type varchar(2), @REPORT int AS      



declare @sql_str varchar(8000), @Condition varchar(8000)      
Select @sql_str = '', @Condition = ''    
delete from hb_report_options where PCID=@PCID  
insert into hb_report_options(PCID)  
select @PCID  
  
if @REPORT=221  
 set @Type='H' else  
if @REPORT=222  
 set @Type='C' else  
if @REPORT=223  
 set @Type='P'  
  
--select * from hb_report_options  
    
If @Type = 'H'    
 Begin    
    
 If Exists(Select * from working_holding where PCID = @PCID)    
  Begin    
    
   Select @sql_str = 'select ro.*, r.raw_land_cd, r.raw_land_desc, r.raw_land_sdesc, r.raw_land_status,      
   null [community_desc], null[use_phases_yn],      
   null [project_desc], null [lots ]    
   from hb_report_options ro, HB_Raw_Land r Inner Join working_holding h on h.Raw_Land_CD = r.Raw_Land_CD    
   where ro.PCID = ''' + @PCID + ''' and h.PCID = ''' + @PCID + '''    
   order by r.raw_land_sdesc'     
    
  End    
 Else    
  Begin    
    
   Select @sql_str = 'select ro.*, r.raw_land_cd, r.raw_land_desc, r.raw_land_sdesc, r.raw_land_status,      
   null [community_desc], null[use_phases_yn],      
   null [project_desc], null [lots ]    
   from hb_report_options ro, HB_Raw_Land r    
   where ro.PCID = ''' + @PCID + '''    
   order by r.raw_land_sdesc'    
    
  End    
 End    
Else If @Type = 'C'    
 Begin    
      
  If Exists(Select * from working_holding where PCID = @PCID)    
   Begin    
    select @sql_str = 'HB_Raw_Land r Inner Join working_holding h on h.Raw_Land_CD = r.Raw_Land_CD '    
    select @Condition = 'AND h.PCID = ''' + @PCID + ''' '    
   End    
  Else    
   Begin    
    select @sql_str = 'HB_Raw_Land r '    
   End    
    
  Select @sql_str = @sql_str + 'Inner Join HB_Communities c on c.Raw_Land_CD = r.Raw_Land_CD '    
    
  If Exists(Select * from working_community where PCID = @PCID)    
   Begin    
    Select @sql_str = @sql_str + 'Inner Join working_community wc on wc.Community_CD = c.Community_CD '    
    
    If ((Select Len(@Condition)) > 0)    
     Begin    
       Select @Condition = @Condition + 'AND wc.PCID = ''' + @PCID + ''' '    
     End    
    Else    
     Begin    
       Select @Condition = 'AND wc.PCID = ''' + @PCID + ''' '    
     End    
    
   End    
    
  Select @sql_str = 'select ro.*, r.raw_land_cd, r.raw_land_desc, r.raw_land_sdesc, r.raw_land_status, ' +    
        'c.community_desc, c.use_phases_yn, ' +     
        'null [project_desc], null [lots ] From hb_report_options ro, ' + @sql_str +    
        'Where ro.PCID = ''' + @PCID + ''' ' + @Condition       
 End    
Else -- @Type = 'P' Phase/Project    
 Begin    
    
  If Exists(Select * from working_holding where PCID = @PCID)    
   Begin    
    select @sql_str = 'HB_Raw_Land r Inner Join working_holding h on h.Raw_Land_CD = r.Raw_Land_CD '    
    select @Condition = 'AND h.PCID = ''' + @PCID + ''' '    
   End    
  Else    
   Begin    
    select @sql_str = 'HB_Raw_Land r '    
   End    
    
  Select @sql_str = @sql_str + 'Inner Join HB_Communities c on c.Raw_Land_CD = r.Raw_Land_CD '    
    
  If Exists(Select * from working_community where PCID = @PCID)    
   Begin    
    Select @sql_str = @sql_str + 'Inner Join working_community wc on wc.Community_CD = c.Community_CD '    
    
    If ((Select Len(@Condition)) > 0)    
     Begin    
       Select @Condition = @Condition + 'AND wc.PCID = ''' + @PCID + ''' '    
     End    
    Else    
     Begin    
       Select @Condition = 'AND wc.PCID = ''' + @PCID + ''' '    
     End    
    
   End    
      
  Select @sql_str = @sql_str + 'Inner Join HB_Project p on p.Community_CD = c.Community_CD '    
    
  If Exists(Select * from working_project where PCID = @PCID)    
   Begin    
    Select @sql_str = @sql_str + 'Inner Join working_project wp on wp.Project_CD = p.Project_CD '    
    
    If ((Select Len(@Condition)) > 0)    
     Begin    
      Select @Condition = @Condition + 'AND wp.PCID = ''' + @PCID + ''' '    
     End      Else    
     Begin    
       Select @Condition = 'AND wp.PCID = ''' + @PCID + ''' '    
     End    
   End    
    
  Select @sql_str = 'select ro.*, r.raw_land_cd, r.raw_land_desc, r.raw_land_sdesc, r.raw_land_status, ' +    
        'c.community_desc, c.use_phases_yn, ' +     
        'p.project_desc, p.lots From hb_report_options ro, ' + @sql_str +    
        'Where ro.PCID = ''' + @PCID + ''' ' + @Condition       
 End    
    
If (Select Len(@sql_str)) > 0    
 exec(@sql_str)  
  



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_rankingJoin]') and xtype = 'P ')  
 drop Procedure sp_hb_rankingJoin
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--create table working_hb_rankingJoin(
--id identity(1,1) int,
--username varchar(50),
--cost money,
--supplier varchar(10),
--frqc_type_moe char(1),
--raw_land_cd int,
--model_id int,
--option_id int,
--material_id int,
--trade_id int,
--date_effective datetime,
--date_expire datetime,
--ranking int)
-- exec sp_hb_rankingJoin 16, 'kenny'
CREATE proc [dbo].[sp_hb_rankingJoin](
@companyAutoID int,
@userName varchar(500)
)
as
begin
declare 
@tablePrefix varchar(200)



select @tablePrefix = dbo.fn_tableprefix(@companyAutoID,'TR')

delete working_hb_rankingJoin where username = @username

insert into working_hb_rankingJoin
exec('select '''+@userName+'''[username],c.cost,c.supplier,c.rfqc_type_moe,c.raw_land_cd,c.model_id,c.Option_ID,c.material_id,trade_id,
c.date_effective,c.date_expire,s.ranking from rfq_cost c join '+@tablePrefix+'HB_SUPP_TMO s 
on c.supplier = s.supplier and c.rfqc_type_moe = s.TMO_TYPE and c.matgroup_ID = s.tmo_id
where c.Available = 1')

insert into working_hb_rankingJoin
exec('select '''+@userName+'''[username],c.cost,c.supplier,c.rfqc_type_moe,c.raw_land_cd,c.model_id,c.Option_ID,c.material_id,trade_id,
c.date_effective,c.date_expire,s.ranking from rfq_cost c join '+@tablePrefix+'HB_SUPP_TMO s 
on c.supplier = s.supplier and c.rfqc_type_moe = s.TMO_TYPE and c.TRADE_ID = s.tmo_id
where c.Available = 1')


end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_report_modelElevationComparison]') and xtype = 'P ')  
 drop Procedure sp_hb_report_modelElevationComparison
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_hb_report_modelElevationComparison](
@pcid varchar(500),@model_id int,@includeOption char(1),@budgetOnly char(1),@byCostType char(1)
)
as
begin
--exec sp_hb_report_modelElevationComparison 'gregtest',47,'Y','N','N'
declare 
@groupBy varchar(8000),
@holding int,
@sqlIn varchar(8000),
@sqlWhere varchar(8000),
@AUTOID int,
@tablePrefix varchar(8000),
@costCompare varchar(8000)

select @AUTOID=autoid from hb_report_options where pcid=@PCID 
--needed to run functions correctly
exec sp_hb_rankingJoin @AUTOID,@pcid

-- Model / Elevation Estimage & RFQ Comparitive report for Homebuilder
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------


--setup parameters-------------------------------------------------------

set @sqlWhere = 'where 1=1 '
--==========Raw_land_cd============
set @sqlIn = ''
select @sqlIn = (case when @sqlIn = '' then cast(RAW_LAND_CD as varchar(8000)) else (cast(RAW_LAND_CD as varchar(8000))+',' + @sqlIn)end) from working_holding where @pcid = pcid
if @sqlIn <> ''
begin 	set @sqlWhere = 'where m.raw_land_cd in ('+@sqlIn+')' end
--===end====Raw_land_cd====================
set @sqlWhere = @sqlWhere + 'and m.model_id = ' + cast(@model_id as varchar(8000))




if @byCostType = 'Y'
begin set @groupBy = ' order by r.Cost_Type' end
else 
begin set @groupBy = '' end

----====end===model_name_ID======Model======
---======================================================================
--end of setup parameters------------------------------------------------



select @tablePrefix = dbo.fn_tableprefix(@AUTOID,'HR')


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#RFQ_Model_Comparison'))
drop table #RFQ_Model_Comparison 
create table #RFQ_Model_Comparison(
id int identity(1,1) ,
footage money,
model_name_id int,
model_ID int,
model_style_id int,
raw_land_cd int,
option_id int,
phs_code char(5),
phs_desc varchar(30),
subp_code char(5),
subp_desc varchar(30),
cost_type varchar(5),
Planning money,
Cost_UOM money,
)


--update the values according to the badc changes
--====================================
--delete any values in the working table
delete working_hb_elevationModel_sp_source where username = @pcid



insert into working_hb_ElevationModel_SP_Source (username,model_id,raw_land_cd)
exec ('select distinct '''+@pcid+''',m.model_id,m.raw_land_cd from hb_model m
join hb_est e
on m.model_id = e.model_id
and m.Raw_land_Cd = e.Raw_land_cd
left join '+@tablePrefix+'subPhase sphs
on sphs.subp_code = e.subp_code 
left join '+@tablePrefix+'Phase phs
on phs.phs_code = e.phs_code left outer join hb_elv_opt eo on eo.model_id=m.model_id and eo.raw_land_cd=m.raw_land_cd and eo.option_id=e.option_id
 '+ @sqlWhere + ' and e.option_id = -1 ' ) 

--pass -1 in as model_id to tell proc to work from the working table
exec sp_hb_getElevationModel_BADC @pcid,-1,null,'N'


insert into #RFQ_Model_Comparison(footage,model_name_id,model_ID,model_style_id,raw_land_cd,option_id,phs_code,phs_desc,subp_code,subp_desc,cost_type,Planning,Cost_UOM)
exec('select m.footage,m.model_name_id,m.model_id,(select isnull(mn.modstyle_id,-1) from hb_model_name mn where mn.model_name_id = m.model_name_id and isnull(mn.is_option_package,0)<>1), m.Raw_land_Cd,-1[option_id],e.phs_code,phs.phs_desc,
e.subp_code,isnull(sphs.subp_desc,''''),isnull(phs.cost_type,''''),e.internal_est[Planning],case when isnull(m.Footage,0) = 0 then 0 else e.internal_est / m.Footage end 
from hb_model m 
join working_hb_ElevationModel_BADC e on
m.model_id = e.model_id
and m.Raw_land_Cd = e.Raw_land_cd
left join '+@tablePrefix+'subPhase sphs
on sphs.subp_code = e.subp_code 
left join '+@tablePrefix+'Phase phs
on phs.phs_code = e.phs_code 
'+ @sqlWhere +' order by e.raw_land_cd,e.phs_code')
--delete after running proc
delete working_hb_elevationModel_sp_source where username = @pcid
--====Now Insert The options================================



if @includeOption = 'Y'
begin
insert into #RFQ_Model_Comparison(footage,model_name_id,model_ID,model_style_id,raw_land_cd,option_id,phs_code,phs_desc,subp_code,subp_desc,cost_type,Planning,Cost_UOM)
exec('select m.footage,m.model_name_id,m.model_id,(select isnull(mn.modstyle_id,-1) from hb_model_name mn where mn.model_name_id = m.model_name_id), m.Raw_land_Cd,isnull(e.Option_id,-1)[option_id],e.phs_code,phs.phs_desc,
e.subp_code,isnull(sphs.subp_desc,''''),isnull(phs.cost_type,''''),e.internal_est[Planning],case when isnull(m.Footage,0) = 0 then 0 else e.internal_est / m.Footage end 
from hb_model m
join hb_est e
on e.model_id=-1
and m.Raw_land_Cd = e.Raw_land_cd
left join '+@tablePrefix+'subPhase sphs
on sphs.subp_code = e.subp_code 
left join '+@tablePrefix+'Phase phs
on RTRIM(phs.phs_code)  = RTRIM(e.phs_code )
join hb_elv_opt eo on eo.model_id=m.model_id and eo.raw_land_cd=m.raw_land_cd and eo.option_id=e.option_id
join hb_options o on o.option_id=e.option_id and o.is_structural=''N'' 
' + @sqlWhere +' and e.option_id <> -1')
--now do structural
insert into #RFQ_Model_Comparison(footage,model_name_id,model_ID,model_style_id,raw_land_cd,option_id,phs_code,phs_desc,subp_code,subp_desc,cost_type,Planning,Cost_UOM)
exec('select m.footage,m.model_name_id,m.model_id,(select isnull(mn.modstyle_id,-1) from hb_model_name mn where mn.model_name_id = m.model_name_id), m.Raw_land_Cd,isnull(e.Option_id,-1)[option_id],e.phs_code,phs.phs_desc,
e.subp_code,isnull(sphs.subp_desc,''''),isnull(phs.cost_type,''''),e.internal_est[Planning],case when isnull(m.Footage,0) = 0 then 0 else e.internal_est / m.Footage end 
from hb_model m
join hb_est e
on e.model_id= m.model_id
and m.Raw_land_Cd = e.Raw_land_cd
left join '+@tablePrefix+'subPhase sphs
on sphs.subp_code = e.subp_code 
left join '+@tablePrefix+'Phase phs
on RTRIM(phs.phs_code)  = RTRIM(e.phs_code )
join hb_elv_opt eo on eo.model_id=m.model_id and eo.raw_land_cd=m.raw_land_cd and eo.option_id=e.option_id
join hb_options o on o.option_id=e.option_id and o.is_structural=''Y'' 
' + @sqlWhere +' and e.option_id <> -1')
end


--now format the data correctly and insert it into a temp table



if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ModelElv_Comparison'))
drop table #ModelElv_Comparison 
create table #ModelElv_Comparison(
option_id int,
OptionOrBase char(1),
ModelElvName varchar(500),
MajCode varchar(500),
SubCode varchar(500),
raw_land_Name1 varchar(500),
raw_land_Name2 varchar(500),
raw_land_Name3 varchar(500),
raw_land_Name4 varchar(500),
raw_land_Name5 varchar(500),
planning1 money,
cost1 money,
planning2 money,
cost2 money,
planning3 money,
cost3 money,
planning4 money,
cost4 money,
planning5 money,
cost5 money,
)
declare
@counter int,
@footage money,
@model_name_id int,
@model_style_id int,
@raw_land_cd int,
@option_id int,
@phs_code char(5),
@phs_desc varchar(30),
@subp_code char(5),
@subp_desc varchar(30),
@cost_type varchar(5),
@planning money,
@cost_uom money,
@model_desc varchar(1000),
@raw1 varchar(5000),
@raw2 varchar(5000),
@raw3 varchar(5000),
@raw4 varchar(5000),
@raw5 varchar(5000)



set @counter = 0
set @holding = -9999999

declare csr_rawLand cursor for 
select footage,model_name_id,model_style_id,raw_land_cd,option_id,phs_code,phs_desc,subp_code,subp_desc,cost_type,planning,cost_uom from
#RFQ_Model_Comparison order by raw_land_cd



open csr_rawLand
fetch csr_rawLand into @footage,@model_name_id,@model_style_id,@raw_land_cd,@option_id,@phs_code,@phs_desc,@subp_code,@subp_desc,@cost_type,@planning,@cost_uom


while @@fetch_status = 0
begin 
if @holding <> @raw_land_cd
begin
set @holding = @raw_land_cd
set @counter = @counter + 1

if @counter = 1
	 set @raw1 = isnull( (select raw_land_desc from hb_raw_land where raw_land_cd = @raw_land_cd),'Master Level')
else if @counter = 2
	 set @raw2 = (select raw_land_desc from hb_raw_land where raw_land_cd = @raw_land_cd)
else if @counter = 3
	 set @raw3 = (select raw_land_desc from hb_raw_land where raw_land_cd = @raw_land_cd)
else if @counter = 4
	 set @raw4 = (select raw_land_desc from hb_raw_land where raw_land_cd = @raw_land_cd)
else if @counter = 5
	 set @raw5 = (select raw_land_desc from hb_raw_land where raw_land_cd = @raw_land_cd)

end
--ensure that their are no more then 5 raw land holdings
if(@counter <=5)
begin
	
    

	if exists (select * from #ModelElv_Comparison r where r.majCode = (@phs_code+' - '+ @phs_desc) and
														  r.SubCode = (@subp_code+' - '+ @subp_desc) and
														  r.option_id = @option_id )
	begin
		set @sqlWhere = 'update #ModelElv_Comparison set planning'+cast(@counter as varchar(10)) +' = '+cast(@planning as varchar(8000))+
		' where majCode = '''+@phs_code+' - '+ @phs_desc+''' and SubCode = '''+@subp_code+' - '+ @subp_desc+''' and option_id = '+cast(@option_id as varchar(8000))
		exec(@sqlWhere)--update planning#	
		set @sqlWhere = 'update #ModelElv_Comparison set cost'+cast(@counter as varchar(10)) +' = '+cast(@cost_uom as varchar(8000))+
		' where majCode = '''+@phs_code+' - '+ @phs_desc+''' and SubCode = '''+@subp_code+' - '+ @subp_desc+''' and option_id = '+cast(@option_id as varchar(8000))
		exec(@sqlWhere)--update cost#
		
		
	end
	else
	begin
		select @model_desc = model_desc  from hb_model where model_id = @model_id and model_name_id = @model_name_id and raw_land_cd = @raw_land_cd
		




		insert into #ModelElv_Comparison (option_id,OptionOrBase,ModelElvName,MajCode,SubCode)
		values(  @option_id,
				 case when @option_id = -1 then 'B' else 'O'end ,
				@model_desc,
				@phs_code+' - '+ @phs_desc,
				@subp_code+' - '+ @subp_desc
			  )


		
		--now the row exsists update the correct planning/cost
		set @sqlWhere = 'update #ModelElv_Comparison set planning'+cast(@counter as varchar(10)) +' = '+cast(@planning as varchar(8000))+
		' where majCode = '''+@phs_code+' - '+ @phs_desc+''' and SubCode = '''+@subp_code+' - '+ @subp_desc+''' and option_id = '+cast(@option_id as varchar(8000))
		exec(@sqlWhere)--update planning#	
		set @sqlWhere = 'update #ModelElv_Comparison set cost'+cast(@counter as varchar(10)) +' = '+cast(@cost_uom as varchar(8000))+
		' where majCode = '''+@phs_code+' - '+ @phs_desc+''' and SubCode = '''+@subp_code+' - '+ @subp_desc+''' and option_id = '+cast(@option_id as varchar(8000))
		exec(@sqlWhere)--update cost#

		
	end

	



end

fetch csr_rawLand into @footage,@model_name_id,@model_style_id,@raw_land_cd,@option_id,@phs_code,@phs_desc,@subp_code,@subp_desc,@cost_type,@planning,@cost_uom
end

close csr_rawLand
deallocate csr_rawLand

--update the raw lands
update #ModelElv_Comparison set raw_land_name1 = @raw1, raw_land_name2 = @raw2 ,raw_land_name3 = @raw3, raw_land_name4 = @raw4 , raw_land_name5 = @raw5 


select isnull((select short_desc from hb_options o where ho.option_id = o.option_id),'Base')[OptionName],
OptionOrBase ,
ModelElvName ,
MajCode,
SubCode,
raw_land_Name1 ,
raw_land_Name2,
raw_land_Name3,
raw_land_Name4 ,
raw_land_Name5,
planning1,
cost1 ,
planning2,
cost2  ,
planning3  ,
cost3  ,
planning4  ,
cost4  ,
planning5  ,
cost5  from
#ModelElv_Comparison ho

delete working_hb_rankingJoin where username = @pcid


end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_report_modelElevationEstimate]') and xtype = 'P ')  
 drop Procedure sp_hb_report_modelElevationEstimate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_hb_report_modelElevationEstimate](
@pcid varchar(500),@TradePreference int,@date datetime,@includeOption char(1),@budgetOnly char(1),@byCostType char(1)
)
as
begin
--exec sp_hb_report_modelElevationEstimate 'gregtest',4,'12-12-07','Y','N','Y'

declare 
@groupBy varchar(8000),
@holding int,
@model  int,
@sqlIn varchar(8000),
@sqlWhere varchar(8000),
@AUTOID int,
@tablePrefix varchar(8000),
@costCompare varchar(8000)

select @AUTOID=autoid from hb_report_options where pcid=@PCID 
--needed to run functions correctly
exec sp_hb_rankingJoin @AUTOID,@pcid

-- Model / Elevation Estimage & RFQ Comparitive report for Homebuilder
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------


--setup parameters-------------------------------------------------------
--set @costCompare = ''
--set @sqlIn = ''
--select @sqlIn = (case when @sqlIn = '' then ''''+cost_type+'''' else ''''+cost_type+''',' + @sqlIn end) from working_cost_type where @pcid = pcid
--if @sqlIn <> ''
--	set @costCompare = 'and phs.cost_type in('+@sqlIn+')' 
--print @costCompare
set @sqlWhere = ''
--==========Raw_land_cd============
set @sqlIn = ''
select @sqlIn = (case when @sqlIn = '' then cast(RAW_LAND_CD as varchar(8000)) else (cast(RAW_LAND_CD as varchar(8000))+',' + @sqlIn)end) from working_holding where @pcid = pcid
if @sqlIn <> ''
begin 	set @sqlWhere = 'where m.raw_land_cd in ('+@sqlIn+')' end
--===end====Raw_land_cd====================
--reset parameter
set @sqlIn = ''
----==========model_ID======elevation======

select @sqlIn = (case when @sqlIn = '' then cast(model_id as varchar(8000)) else (cast(model_id as varchar(8000))+',' + @sqlIn)end) from working_model where @pcid = pcid
if @sqlIn <> ''
begin
	if @sqlWhere <> ''
	begin
		set @sqlWhere = @sqlWhere + ' and m.model_ID in ('+@sqlIn+')'
	end
	else
	begin
		set @sqlWhere ='where m.model_id in ('+@sqlIn+')'
	end 
end	
----===end====model_ID======elevation======
--reset parameter
set @sqlIn = ''
----==========model_name_ID======Model======
select @sqlIn = (case when @sqlIn = '' then cast(model_name_id as varchar(8000)) else (cast(model_name_id as varchar(8000))+',' + @sqlIn)end) from working_model_name where @pcid = pcid
if @sqlIn <> ''
begin
	if @sqlWhere <> ''
	begin
		set @sqlWhere = @sqlWhere + ' and m.model_name_id in ('+@sqlIn+')'
	end
	else
	begin
		set @sqlWhere ='where m.model_name_id in ('+@sqlIn+')'
	end 
end	
set @sqlIn = ''
select @sqlIn = (case when @sqlIn = '' then ''''+cost_type+'''' else ''''+cost_type+''',' + @sqlIn end) from working_cost_type where @pcid = pcid
if @sqlIn <> ''
begin
	if @sqlWhere <> ''
	begin
		set @sqlWhere = @sqlWhere +'and phs.cost_type in('+@sqlIn+')'
	end
	else
	begin
		set @sqlWhere ='where phs.cost_type in('+@sqlIn+')'
	end 
end
if @sqlWhere = '' begin set @sqlWhere = ' where 1=1 ' end


if @byCostType = 'Y'
begin set @groupBy = ' order by r.Cost_Type' end
else 
begin set @groupBy = '' end

----====end===model_name_ID======Model======
---======================================================================
--end of setup parameters------------------------------------------------

select @tablePrefix = dbo.fn_tableprefix(@AUTOID,'HR')


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#RFQ_Estimate_Comparitive'))
drop table #RFQ_Estimate_Comparitive 
create table #RFQ_Estimate_Comparitive(
footage money,
model_name_id int,
model_ID int,
model_style_id int,
raw_land_cd int,
option_id int,
phs_code char(5),
phs_desc varchar(30),
subp_code char(5),
subp_desc varchar(30),
cost_type varchar(5),
Planning money,
Cost_UOM money,
TRD_RFQ money,
TRD_UOM money,
MAT_RFQ money,
MAT_UOM money,
TOT_RFQ money,
TOT_UOM money,
VAR_TOT money,
VAR_UOM money
)


--update the values according to the badc changes
--====================================
--delete any values in the working table
delete working_hb_elevationModel_sp_source where username = @pcid

insert into working_hb_ElevationModel_SP_Source (username,model_id,raw_land_cd)
exec ('select distinct '''+@pcid+''',m.model_id,m.raw_land_cd from hb_model m
join hb_est e
on m.model_id = e.model_id
and m.Raw_land_Cd = e.Raw_land_cd
left join '+@tablePrefix+'subPhase sphs
on sphs.subp_code = e.subp_code 
left join '+@tablePrefix+'Phase phs
on phs.phs_code = e.phs_code left outer join hb_elv_opt eo on eo.model_id=m.model_id and eo.raw_land_cd=m.raw_land_cd and eo.option_id=e.option_id
left outer join hb_options o on o.option_id=e.option_id and o.is_structural=''Y'' 
'+ @sqlWhere + ' and e.option_id = -1') 
--pass -1 in as model_id to tell proc to work from the working table
exec sp_hb_getElevationModel_BADC @pcid,-1,null,'N'


insert into #RFQ_Estimate_Comparitive(footage,model_name_id,model_ID,model_style_id,raw_land_cd,option_id,phs_code,phs_desc,subp_code,subp_desc,cost_type,Planning,Cost_UOM)
exec('select m.footage,m.model_name_id,m.model_id,(select isnull(mn.modstyle_id,-1) from hb_model_name mn where mn.model_name_id = m.model_name_id and isnull(mn.is_option_package,0)<>1), m.Raw_land_Cd,-1[option_id],e.phs_code,phs.phs_desc,
e.subp_code,isnull(sphs.subp_desc,''''),isnull(phs.cost_type,''''),e.internal_est[Planning],case when isnull(m.Footage,0) = 0 then 0 else e.internal_est / m.Footage end 
from hb_model m 
join working_hb_ElevationModel_BADC e on
m.model_id = e.model_id
and m.Raw_land_Cd = e.Raw_land_cd
left join '+@tablePrefix+'subPhase sphs
on sphs.subp_code = e.subp_code 
join '+@tablePrefix+'Phase phs
on phs.phs_code = e.phs_code 
and e.username = '''+@pcid+''' 
'+ @sqlWhere +' and m.model_name_id not in (select model_name_id from hb_model_name where isnull(is_option_package,0) = 1 )')

--delete after running proc
delete working_hb_elevationModel_sp_source where username = @pcid
--====Now Insert The options================================
if @includeOption = 'Y'
begin
insert into #RFQ_Estimate_Comparitive(footage,model_name_id,model_ID,model_style_id,raw_land_cd,option_id,phs_code,phs_desc,subp_code,subp_desc,cost_type,Planning,Cost_UOM)
exec('select m.footage,m.model_name_id,m.model_id,(select isnull(mn.modstyle_id,-1) from hb_model_name mn where mn.model_name_id = m.model_name_id), m.Raw_land_Cd,isnull(e.Option_id,-1)[option_id],e.phs_code,phs.phs_desc,
e.subp_code,isnull(sphs.subp_desc,''''),isnull(phs.cost_type,''''),e.internal_est[Planning],case when isnull(m.Footage,0) = 0 then 0 else e.internal_est / m.Footage end 
from hb_model m
join hb_est e
on e.model_id=-1
and m.Raw_land_Cd = e.Raw_land_cd
left join '+@tablePrefix+'subPhase sphs
on sphs.subp_code = e.subp_code 
left join '+@tablePrefix+'Phase phs
on RTRIM(phs.phs_code)  = RTRIM(e.phs_code )
join hb_elv_opt eo on eo.model_id=m.model_id and eo.raw_land_cd=m.raw_land_cd and eo.option_id=e.option_id
join hb_options o on o.option_id=e.option_id and o.is_structural=''N'' 
' + @sqlWhere +'and e.option_id <> -1 ')


--now do structural
insert into #RFQ_Estimate_Comparitive(footage,model_name_id,model_ID,model_style_id,raw_land_cd,option_id,phs_code,phs_desc,subp_code,subp_desc,cost_type,Planning,Cost_UOM)
exec('select m.footage,m.model_name_id,m.model_id,(select isnull(mn.modstyle_id,-1) from hb_model_name mn where mn.model_name_id = m.model_name_id), m.Raw_land_Cd,isnull(e.Option_id,-1)[option_id],e.phs_code,phs.phs_desc,
e.subp_code,isnull(sphs.subp_desc,''''),isnull(phs.cost_type,''''),e.internal_est[Planning],case when isnull(m.Footage,0) = 0 then 0 else e.internal_est / m.Footage end 
from hb_model m
join hb_est e
on e.model_id= m.model_id
and m.Raw_land_Cd = e.Raw_land_cd
left join '+@tablePrefix+'subPhase sphs
on sphs.subp_code = e.subp_code 
left join '+@tablePrefix+'Phase phs
on RTRIM(phs.phs_code)  = RTRIM(e.phs_code )
join hb_elv_opt eo on eo.model_id=m.model_id and eo.raw_land_cd=m.raw_land_cd and eo.option_id=e.option_id
join hb_options o on o.option_id=e.option_id and o.is_structural=''Y'' 
' + @sqlWhere +'and e.option_id <> -1')

end



update #RFQ_Estimate_Comparitive set TRD_RFQ = (
select sum(dbo.fn_hb_calc_update_trd_amt(trd.model_id,trd.Raw_land_cd,trd.trade_id,@date,@TradePreference,@pcid))[Trades RFQ]
from hb_est_mat trd
where trd.model_id = s.model_id
and trd.raw_land_cd = s.raw_land_cd
and trd.option_id = s.option_id
and trd.phs_code = s.phs_code
and trd.subp_code = s.subp_code and trd.estimatelevel = 'E'),
TRD_UOM = (
select sum(case when isnull(mo.Footage,0) = 0 then 0 else dbo.fn_hb_calc_update_mat_amt(trd.model_id,trd.Raw_land_cd,trd.trade_id,@date,@TradePreference,@pcid) / mo.Footage end)
from hb_est_trd trd
join hb_model mo
on mo.model_id = trd.model_id
and mo.Raw_land_Cd = trd.Raw_land_cd
where trd.model_id = s.model_id
and trd.raw_land_cd = s.raw_land_cd
and trd.option_id = s.option_id
and trd.phs_code = s.phs_code
and trd.subp_code = s.subp_code and trd.estimatelevel = 'E')
from #RFQ_Estimate_Comparitive s where isnull(s.option_id,-1) = -1



update #RFQ_Estimate_Comparitive set MAT_RFQ = (
select sum(dbo.fn_hb_calc_update_mat_amt(ma.model_id,ma.Raw_land_cd,ma.material_id,@date,@TradePreference,@pcid))[Trades RFQ]
from hb_est_mat ma
where ma.model_id = s.model_id
and ma.raw_land_cd = s.raw_land_cd
and ma.option_id = s.option_id
and ma.phs_code = s.phs_code
and ma.subp_code = s.subp_code and ma.estimatelevel = 'E'),
MAT_UOM = (
select sum(case when isnull(mo.Footage,0) = 0 then 0 else dbo.fn_hb_calc_update_mat_amt(ma.model_id,ma.Raw_land_cd,ma.material_id,@date,@TradePreference,@pcid) / mo.Footage end)
from hb_est_mat ma
join hb_model mo
on mo.model_id = ma.model_id
and mo.Raw_land_Cd = ma.Raw_land_cd
where ma.model_id = s.model_id
and ma.raw_land_cd = s.raw_land_cd
and ma.option_id = s.option_id
and ma.phs_code = s.phs_code
and ma.subp_code = s.subp_code and ma.estimatelevel = 'E')
from #RFQ_Estimate_Comparitive s where isnull(s.option_id,-1) = -1



if @includeOption = 'Y'
begin

update #RFQ_Estimate_Comparitive set TRD_RFQ = isnull(
(select sum(dbo.fn_hb_calc_update_opt_amt(trd.model_id,trd.Raw_land_cd,trd.option_id,@date,@TradePreference,trd.option_id,'O',@pcid))[Trades RFQ]
from hb_est_mat trd
where trd.model_id = s.model_id
and trd.raw_land_cd = s.raw_land_cd
and trd.option_id = s.option_id
and trd.phs_code = s.phs_code
and trd.subp_code = s.subp_code and trd.estimatelevel = 'E'),0),
TRD_UOM = isnull(
(select sum(case when isnull(mo.Footage,0) = 0 then 0 else dbo.fn_hb_calc_update_opt_amt(trd.model_id,trd.Raw_land_cd,trd.option_id,@date,@TradePreference,trd.option_id,'O',@pcid) / mo.Footage end)
from hb_est_trd trd
join hb_model mo
on mo.model_id = trd.model_id
and mo.Raw_land_Cd = trd.Raw_land_cd
where trd.model_id = s.model_id
and trd.raw_land_cd = s.raw_land_cd
and trd.option_id = s.option_id
and trd.phs_code = s.phs_code
and trd.subp_code = s.subp_code and trd.estimatelevel = 'E'),0)
from #RFQ_Estimate_Comparitive s 



update #RFQ_Estimate_Comparitive set MAT_RFQ = isnull(
(select sum(dbo.fn_hb_calc_update_opt_amt(ma.model_id,ma.Raw_land_cd,ma.option_id,@date,@TradePreference,ma.option_id,'O',@pcid))[Trades RFQ]
from hb_est_mat ma
where ma.model_id = s.model_id
and ma.raw_land_cd = s.raw_land_cd
and ma.option_id = s.option_id
and ma.phs_code = s.phs_code
and ma.subp_code = s.subp_code and ma.estimatelevel = 'E'),0),
MAT_UOM = isnull(
(select sum(case when isnull(mo.Footage,0) = 0 then 0 else dbo.fn_hb_calc_update_mat_amt(ma.model_id,ma.Raw_land_cd,ma.material_id,@date,@TradePreference,@pcid) / mo.Footage end)
from hb_est_mat ma
join hb_model mo
on mo.model_id = ma.model_id
and mo.Raw_land_Cd = ma.Raw_land_cd
where ma.model_id = s.model_id
and ma.raw_land_cd = s.raw_land_cd
and ma.option_id = s.option_id
and ma.phs_code = s.phs_code
and ma.subp_code = s.subp_code and ma.estimatelevel = 'E'),0)
from #RFQ_Estimate_Comparitive s 


end




update #RFQ_Estimate_Comparitive set tot_rfq = (trd_rfq + mat_rfq) 
update #RFQ_Estimate_Comparitive set tot_uom = (case when isnull(footage,0) = 0 then 0 else tot_rfq / footage end)
update #RFQ_Estimate_Comparitive set var_tot = (planning - tot_rfq)
update #RFQ_Estimate_Comparitive set var_uom = (cost_uom - tot_uom) 

---space between each column
declare
@strDate varchar(100)


set @strDate= datename(month, @date)+' '+datename(day, @date)+' '+datename(year, @date)

set @sqlWhere = '
select case when r.option_id = -1 then ''B'' else ''O''end[OptionOrBase],

isnull((select o.short_desc from hb_options o where o.option_id = r.option_id),''base'')[OptionNameOrBase], 

isnull((select raw_land_desc from hb_raw_land h where h.raw_land_cd = r.raw_land_cd ),''Master Level'')[Holding],

(select Model_name from hb_model_name m where m.model_name_id = r.model_name_id and isnull(is_option_package,0) <> 1)[Model],

(select model_desc from hb_model m where r.model_name_id = m.model_name_id and m.model_id = r.model_id and raw_land_cd = r.raw_land_cd)[Elevation],

(select MODSTYLE_DESC from HB_MODEL_STYLE ms where ms.MODSTYLE_ID = r.MODel_STYLE_ID)[Style:],r.footage[Area:],

isnull((select top 1 isnull(price,0) from hb_modelpricehistory where raw_land_cd = r.raw_land_cd and model_id = r.model_id and expieryDate <= '''+ @strDate+''' Order By expieryDate desc),0)[Base Price],

isnull( (select sum(isnull(tot_rfq,0)) from #RFQ_Estimate_Comparitive s where r.raw_land_cd = s.raw_land_cd and r.model_id = s.model_id and r.phs_code = s.phs_code and option_id <> -1),0)[OptionTotal],

isnull((select top 1 isnull(price,0) from hb_modelpricehistory where raw_land_cd = r.raw_land_cd and model_id = r.model_id and expieryDate <= '''+ @strDate+''' Order By expieryDate desc),0) +
isnull( (select sum(isnull(tot_rfq,0)) from #RFQ_Estimate_Comparitive s where r.raw_land_cd = s.raw_land_cd and r.model_id = s.model_id and r.phs_code = s.phs_code and option_id <> -1),0)[Total Sell $:],

(case when isnull(footage,0) = 0 
then 0 else 
((isnull((select top 1 isnull(price,0) from hb_modelpricehistory where raw_land_cd = r.raw_land_cd and model_id = r.model_id and expieryDate <= '''+ @strDate+'''Order By expieryDate desc),0) +
	isnull( (select sum(isnull(tot_rfq,0)) from #RFQ_Estimate_Comparitive s where r.raw_land_cd = s.raw_land_cd and r.model_id = s.model_id and r.phs_code = s.phs_code and option_id <> -1),0))/r.footage) end)[Sell $ per/UOM],

isnull( (select isnull(cost_desc,'''') from hb_cost_type t where t.cost_type = r.cost_type) ,'''')[Cost Type],
--now the calculated fields from the temp table
r.phs_code[Major Code],r.phs_desc[Major Code Description],r.subp_code[Sub Code],r.subp_desc[Sub Code Description],

r.Planning[Planning],r.Cost_UOM[Cost/UOM],r.TRD_RFQ[Trades RFQ],r.TRD_UOM[Trades $/UOM],r.MAT_RFQ[Materials RFQ],r.MAT_UOM[Materials $/UOM],
r.TOT_RFQ[Total RFQ],r.TOT_UOM[Total $/UOM],r.VAR_TOT[Variance Total],r.VAR_UOM[Variance $/UOM],


case when r.option_id = -1 then
(isnull((select top 1 isnull(price,0) from hb_modelpricehistory where raw_land_cd = r.raw_land_cd and model_id = r.model_id and expieryDate <= '''+ @strDate+''' Order By expieryDate desc),0) - isnull(r.Planning,0) )
else
(isnull( (select sum(isnull(tot_rfq,0)) from #RFQ_Estimate_Comparitive s where r.raw_land_cd = s.raw_land_cd and r.model_id = s.model_id and r.phs_code = s.phs_code and option_id <> -1),0) - isnull(r.Planning,1) )
end [GM $],

--now do the  [GM %]
case when r.option_id = -1 then
case when isnull((  isnull((select top 1 isnull(price,0) from hb_modelpricehistory where raw_land_cd = r.raw_land_cd and model_id = r.model_id and expieryDate <= '''+ @strDate+''' Order By expieryDate desc),0)),0) = 0 then 0 
else (isnull((select top 1 isnull(price,0) from hb_modelpricehistory where raw_land_cd = r.raw_land_cd and model_id = r.model_id and expieryDate <= '''+ @strDate+''' Order By expieryDate desc),0) - isnull(r.Planning,0)  ) / 
      isnull((select top 1 isnull(price,0) from hb_modelpricehistory where raw_land_cd = r.raw_land_cd and model_id = r.model_id and expieryDate <= '''+ @strDate+''' Order By expieryDate desc),0)
end else
case when isnull( (select sum(isnull(tot_rfq,0)) from #RFQ_Estimate_Comparitive s where r.raw_land_cd = s.raw_land_cd and r.model_id = s.model_id and r.phs_code = s.phs_code and option_id <> -1),0) = 0 then 0
else (isnull( (select sum(isnull(tot_rfq,0)) from #RFQ_Estimate_Comparitive s where r.raw_land_cd = s.raw_land_cd and r.model_id = s.model_id and r.phs_code = s.phs_code and option_id <> -1),0) - isnull(r.Planning,0)) /
	  isnull( (select sum(isnull(tot_rfq,0)) from #RFQ_Estimate_Comparitive s where r.raw_land_cd = s.raw_land_cd and r.model_id = s.model_id and r.phs_code = s.phs_code and option_id <> -1),0)
end end [GM %]

from #RFQ_Estimate_Comparitive r
' + @groupBy

exec ( @sqlWhere )
print @sqlWhere
delete working_hb_rankingJoin where username = @pcid


end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_report_ModelListing]') and xtype = 'P ')  
 drop Procedure sp_hb_report_ModelListing
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE Procedure [dbo].[sp_hb_report_ModelListing](@PCID varchar(500), @PriceDate datetime)
AS

--Declare @PCID varchar(500), @PriceDate datetime
--Select @PCID = '2fccd04a-583f-40a3-b30a-213644ba8cbb', @PriceDate = '1/18/2008'
--exec sp_hb_report_ModelListing '40f3ba25-c4e4-440a-ac23-8b53fac47067', '1/31/2008'
--Select * from HB_ModelPriceHistory Select * from HB_Report_Options

Declare @sql_str varchar(8000), @sql_str2 varchar(8000), @sql_str3 varchar(8000), @sql_str4 varchar(8000),
		@holding varchar(8000), @Community varchar(8000),  @Project varchar(8000), @ModelName varchar(8000),
		@Model varchar(8000)
Select @holding = '', @Community = '', @Project = '', @ModelName = '', @Model = ''

If Exists (Select * from working_holding where PCID = @PCID)
Begin
	Select @holding = ' and m.Raw_Land_CD in (Select Raw_Land_CD From working_holding where PCID = ''' + @PCID + ''') '
End

If Exists (Select * from working_community where PCID = @PCID)
Begin
	Select @Community = 'and c.Community_Cd in (Select Community_CD From working_community where PCID = ''' + @PCID + ''') '
End

If Exists (Select * from working_project where PCID = @PCID)
Begin
	Select @Project = 'and p.Project_CD in (Select Project_CD from working_project where PCID = ''' + @PCID + ''') '
End

If Exists (Select * From working_model_name where PCID = @PCID)
Begin
	Select @ModelName = 'and m.Model_Name_ID in (Select Model_Name_ID from working_model_name where PCID = ''' + @PCID + ''') '
End

If Exists (Select * From working_model where PCID = @PCID)
Begin
	Select @Model = 'and m.Model_ID in (Select Model_ID from working_model where PCID = ''' + @PCID + ''') '
End

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ModelPricing'))  
drop table #ModelPricing
CREATE TABLE #ModelPricing(
	[Holding] [varchar](50) NOT NULL,
	[Community] [varchar](50) NOT NULL,
	[Project] [varchar](50) NULL,
	[Model_Code] [varchar](15) NULL,
	[Model] [varchar](44) NOT NULL,
	[Elevation] [varchar](5) NOT NULL,
	[Style] [varchar](30) NOT NULL,
	[Area] [money] NULL,
	[Garage_Size] [varchar](50) NOT NULL,
	[Reqd_Lot_Width] [money] NULL,
	[HouseWidth] [money] NULL,
	[SellingPrice] [money] NOT NULL,
	[Price_Per_Sq_Ft] [money] NULL,
	[Previous_Price] [money] NOT NULL
) 



Set @sql_str = '
    insert #ModelPricing(Holding, Community, Project, Model_Code, Model, Elevation, Style, Area, Garage_Size, Reqd_Lot_Width, HouseWidth, SellingPrice, Price_Per_Sq_Ft, Previous_Price)
    Select
	rl.Raw_Land_Desc [Holding], c.Community_Desc [Community], p.Project_Desc [Project],
	mn.Model_Code [Model_Code], mn.Model_Name  [Model],
	   Elevation, IsNull(ms.ModStyle_Desc,'''') [Style],
	   m.Footage [Area], IsNull(GarageSize,'''') [Garage_Size], ReqLotWidth [Reqd_Lot_Width], HouseWidth,  
	   IsNull((Select Top 1 Price From HB_ModelPriceHistory mp Where mp.ExpieryDate <= ''' + Convert(varchar(50),@PriceDate) + ''' and mp.Model_ID = m.Model_ID 
														  and mp.Project_CD = p.Project_CD and Level = ''P'' Order By mp.ExpieryDate desc),0) [SellingPrice],
	   Case When IsNull(m.Footage,0) = 0 Then 0 Else IsNull((Select Top 1 Price From HB_ModelPriceHistory mp 
														 Where mp.ExpieryDate <= ''' + Convert(varchar(50),@PriceDate) + ''' and mp.Model_ID = m.Model_ID 
														 and mp.Project_CD = p.Project_CD and Level = ''P'' Order By ExpieryDate desc),0) /m.Footage End [Price_Per_Sq_Ft],
	   IsNull((Select Top 1 Price From HB_ModelPriceHistory mph Where mph.ExpieryDate <= ''' + Convert(varchar(50),@PriceDate) + ''' and mph.Model_ID = m.Model_ID 
		and mph.Project_CD = p.Project_CD
		And ID not In (Select ID From HB_ModelPriceHistory mp 
		   Where mp.ExpieryDate = (Select Top 1 Max(c.ExpieryDate) From HB_ModelPriceHistory c 
								   Where c.ExpieryDate <= ''' + Convert(varchar(50),@PriceDate) + ''' and c.Model_ID = m.Model_ID 
								   and c.Project_CD = p.Project_CD Group By c.ExpieryDate Order By c.ExpieryDate desc)
		   and mp.Model_ID = m.Model_ID and mp.Project_CD = p.Project_CD) Order By mph.ExpieryDate desc),0) [Previous_Price] 
from HB_Raw_Land rl    
Inner Join HB_Communities c on c.Raw_Land_CD = rl.Raw_Land_CD    
Inner Join HB_Project p on p.Raw_Land_Cd = rl.Raw_Land_Cd and p.Community_CD = c.Community_Cd    
Inner Join HB_Proj_Model pm on pm.Project_Cd = p.Project_Cd    
Inner Join HB_Model m on m.Model_ID = pm.Model_ID and rl.Raw_Land_Cd = m.Raw_Land_CD    
Inner Join HB_Model_Name mn on mn.Model_Name_ID = m.Model_Name_ID    
Inner Join HB_Model_Style ms on ms.ModStyle_ID = mn.ModStyle_ID    
Where 1=1 ' + @holding + @Community + @Project + @ModelName + @Model + ' 

'
exec(@sql_str)
--set @sql_str = '
--insert #ModelPricing(Holding, Community, Project, Model_Code, Model, Elevation, Style, Area, Garage_Size, Reqd_Lot_Width, HouseWidth, SellingPrice, Price_Per_Sq_Ft, Previous_Price)    
--Select
--	rl.Raw_Land_Desc [Holding], c.Community_Desc [Community], '''' [Project],
--	mn.Model_Code [Model_Code], mn.Model_Name  [Model],
--	   Elevation, IsNull(ms.ModStyle_Desc,'''') [Style],
--	   m.Footage [Area], IsNull(GarageSize,'''') [Garage_Size], ReqLotWidth [Reqd_Lot_Width], HouseWidth,  
--	   IsNull((Select Top 1 Price From HB_ModelPriceHistory mp Where mp.ExpieryDate <= ''' + Convert(varchar(50),@PriceDate) + ''' and mp.Model_ID = m.Model_ID 
--														  and mp.Community_CD = c.Community_CD and Level = ''C'' Order By mp.ExpieryDate desc),0) [SellingPrice],
--	   Case When IsNull(m.Footage,0) = 0 Then 0 Else IsNull((Select Top 1 Price From HB_ModelPriceHistory mp 
--														 Where mp.ExpieryDate <= ''' + Convert(varchar(50),@PriceDate) + ''' and mp.Model_ID = m.Model_ID 
--														 and mp.Community_CD = c.Community_CD and Level = ''C'' Order By mp.ExpieryDate desc),0) /m.Footage End [Price_Per_Sq_Ft],
--	   IsNull((Select Top 1 Price From HB_ModelPriceHistory mph Where mph.ExpieryDate <= ''' + Convert(varchar(50),@PriceDate) + ''' and mph.Model_ID = m.Model_ID 
--		and mph.Community_CD = c.Community_CD and Level = ''C''
--		And ID not In (Select ID From HB_ModelPriceHistory mp 
--		   Where mp.ExpieryDate = (Select Top 1 Max(cmp.ExpieryDate) From HB_ModelPriceHistory cmp 
--								   Where cmp.ExpieryDate <= ''' + Convert(varchar(50),@PriceDate) + ''' and cmp.Model_ID = m.Model_ID 
--								   and cmp.Community_CD = C.Community_CD and Level = ''C'' Group By cmp.ExpieryDate Order By cmp.ExpieryDate desc)
--		   and mp.Model_ID = m.Model_ID and mp.Community_CD = c.Community_CD and Level = ''C'')Order By mph.ExpieryDate desc),0) [Previous_Price]
--from HB_Raw_Land rl    
--Inner Join HB_Communities c on c.Raw_Land_CD = rl.Raw_Land_CD    
--Inner Join HB_Comm_Model cm on cm.Community_Cd = c.Community_Cd    
--Inner Join HB_Model m on m.Model_ID = cm.Model_ID and rl.Raw_Land_Cd = m.Raw_Land_CD    
--Inner Join HB_Model_Name mn on mn.Model_Name_ID = m.Model_Name_ID    
--Inner Join HB_Model_Style ms on ms.ModStyle_ID = mn.ModStyle_ID
--Where 1=1 ' + @holding + @Community + @ModelName + @Model + ' 
--
--'
--exec(@sql_str)
--set @sql_str = '
--insert #ModelPricing(Holding, Community, Project, Model_Code, Model, Elevation, Style, Area, Garage_Size, Reqd_Lot_Width, HouseWidth, SellingPrice, Price_Per_Sq_Ft, Previous_Price)
--Select
--	rl.Raw_Land_Desc [Holding], '''' [Community], '''' [Project],
--	mn.Model_Code [Model_Code], mn.Model_Name  [Model],
--	   Elevation, IsNull(ms.ModStyle_Desc,'''') [Style],
--	   m.Footage [Area], IsNull(GarageSize,'''') [Garage_Size], ReqLotWidth [Reqd_Lot_Width], HouseWidth,  
--	   IsNull((Select Top 1 Price From HB_ModelPriceHistory mp Where mp.ExpieryDate <= ''' + Convert(varchar(50),@PriceDate) + ''' and mp.Model_ID = m.Model_ID 
--														  and mp.Raw_Land_CD = m.Raw_Land_CD and mp.Level = ''H'' Order By mp.ExpieryDate desc),0) [SellingPrice],
--	   Case When IsNull(m.Footage,0) = 0 Then 0 Else IsNull((Select Top 1 Price From HB_ModelPriceHistory mp 
--														 Where mp.ExpieryDate <= ''' + Convert(varchar(50),@PriceDate) + ''' and mp.Model_ID = m.Model_ID 
--														 and mp.Raw_Land_CD = m.Raw_Land_CD and mp.Level = ''H'' Order By mp.ExpieryDate desc),0) /m.Footage End [Price_Per_Sq_Ft],
--	   IsNull((Select Top 1 Price From HB_ModelPriceHistory mph Where mph.ExpieryDate <= ''' + Convert(varchar(50),@PriceDate) + ''' and mph.Model_ID = m.Model_ID 
--		and mph.Raw_Land_CD = m.Raw_Land_CD and mph.Level = ''H''
--		And ID not In (Select ID From HB_ModelPriceHistory mp 
--		   Where mp.ExpieryDate = (Select Top 1 Max(c.ExpieryDate) From HB_ModelPriceHistory c 
--								   Where c.ExpieryDate <= ''' + Convert(varchar(50),@PriceDate) + ''' and c.Model_ID = m.Model_ID 
--								   and c.Raw_Land_CD = m.Raw_Land_CD and c.Level = ''H'' Group By c.ExpieryDate Order By c.ExpieryDate desc)
--		   and mp.Model_ID = m.Model_ID and mp.Raw_Land_CD = m.Raw_Land_CD and mp.Level = ''H'')Order By mph.ExpieryDate desc),0) [Previous_Price]
--from HB_Raw_Land rl      
--Inner Join HB_Model m on rl.Raw_Land_Cd = m.Raw_Land_CD    
--Inner Join HB_Model_Name mn on mn.Model_Name_ID = m.Model_Name_ID    
--Inner Join HB_Model_Style ms on ms.ModStyle_ID = mn.ModStyle_ID
--Where 1=1 ' + @holding + @ModelName + @Model + '
--
--'
--exec(@sql_str)
-- 
--select @sql_str = ' 
--insert #ModelPricing(Holding, Community, Project, Model_Code, Model, Elevation, Style, Area, Garage_Size, Reqd_Lot_Width, HouseWidth, SellingPrice, Price_Per_Sq_Ft, Previous_Price)
--Select
--	'''' [Holding], '''' [Community], '''' [Project],
--	mn.Model_Code [Model_Code], mn.Model_Name  [Model],
--	   Elevation, IsNull(ms.ModStyle_Desc,'''') [Style],
--	   m.Footage [Area], IsNull(GarageSize,'''') [Garage_Size], ReqLotWidth [Reqd_Lot_Width], HouseWidth,  
--	   IsNull((Select Top 1 Price From HB_ModelPriceHistory mp Where mp.ExpieryDate <= ''' + Convert(varchar(50),@PriceDate) + ''' and mp.Model_ID = m.Model_ID 
--														  and mp.Raw_Land_CD = m.Raw_Land_CD and mp.Level = ''M'' Order By mp.ExpieryDate desc),0) [SellingPrice],
--	   Case When IsNull(m.Footage,0) = 0 Then 0 Else IsNull((Select Top 1 Price From HB_ModelPriceHistory mp 
--														 Where mp.ExpieryDate <= ''' + Convert(varchar(50),@PriceDate) + ''' and mp.Model_ID = m.Model_ID 
--														 and mp.Raw_Land_CD = m.Raw_Land_CD and mp.Level = ''M'' Order By mp.ExpieryDate desc),0) /m.Footage End [Price_Per_Sq_Ft],
--	   IsNull((Select Top 1 Price From HB_ModelPriceHistory mph Where mph.ExpieryDate <= ''' + Convert(varchar(50),@PriceDate) + ''' and mph.Model_ID = m.Model_ID 
--		and mph.Raw_Land_CD = m.Raw_Land_CD and mph.Level = ''M''
--		And ID not In (Select ID From HB_ModelPriceHistory mp 
--		   Where mp.ExpieryDate = (Select Top 1 Max(c.ExpieryDate) From HB_ModelPriceHistory c 
--								   Where c.ExpieryDate <= ''' + Convert(varchar(50),@PriceDate) + ''' and c.Model_ID = m.Model_ID 
--								   and Raw_Land_CD = m.Raw_Land_CD and c.Level = ''M'' Group By c.ExpieryDate Order By ExpieryDate desc)
--		   and mp.Model_ID = m.Model_ID and mp.Raw_Land_CD = m.Raw_Land_CD and mp.Level = ''M'') Order By mph.ExpieryDate desc),0) [Previous_Price]
--from HB_Model m
--Inner Join HB_Model_Name mn on mn.Model_Name_ID = m.Model_Name_ID    
--Inner Join HB_Model_Style ms on ms.ModStyle_ID = mn.ModStyle_ID
--Where m.Raw_Land_CD = -1 ' + @ModelName + @Model + '
--'
--exec(@sql_str)

select distinct Holding, Community, Project, Model_Code, Model, Elevation, Style, Area, Garage_Size, Reqd_Lot_Width, HouseWidth, SellingPrice, Price_Per_Sq_Ft, Previous_Price
from #ModelPricing



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_report_option_estimate_analysis]') and xtype = 'P ')  
 drop Procedure sp_hb_report_option_estimate_analysis
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec sp_hb_report_option_estimate_analysis '510f1aa0-faab-4f27-8e84-85fb9fb3167a', '01-04-2008', 2
CREATE proc [dbo].[sp_hb_report_option_estimate_analysis](
@pcid varchar(500), @date datetime, @TradePreference int
)
as
begin
declare 
@holding int,
@model  int,
@sqlIn varchar(8000),
@sqlWhere varchar(8000),
@AUTOID int,
@tablePrefix varchar(8000),
@costCompare varchar(8000)


select @AUTOID=autoid from hb_report_options where pcid=@PCID 

select @tablePrefix = dbo.fn_tableprefix(@AUTOID,'HR')

--needed to run functions correctly
exec sp_hb_rankingJoin @AUTOID,@pcid

-- Model / Elevation Estimage & RFQ Comparitive report for Homebuilder
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------


--setup parameters-------------------------------------------------------
set @sqlWhere = 'where 1 = 1 '

if exists( select * from working_Opt_Maj_Group where pcid=@pcid )
	set @sqlWhere = @sqlWhere + ' and o.maj_group_id in ( select maj_group_id from working_Opt_Maj_Group where pcid='''+@pcid+''' )'

if exists( select * from working_Opt_Sub_Group where pcid=@pcid )
	set @sqlWhere = @sqlWhere + ' and o.sub_group_id in ( select sub_group_id from working_Opt_Sub_Group where pcid='''+@pcid+''' )'

if exists( select * from working_Options where pcid=@pcid )
	set @sqlWhere = @sqlWhere + ' and o.option_id in ( select option_id from working_Options where pcid='''+@pcid+''' )'

---======================================================================
--end of setup parameters------------------------------------------------

select @tablePrefix = dbo.fn_tableprefix(@AUTOID,'HR')


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Option_Estimate_Analysis'))
drop table #Option_Estimate_Analysis 
create table #Option_Estimate_Analysis(
Footage money,
model_name_id int,
model_ID int,
raw_land_cd int,
option_id int,
phs_code char(5),
phs_desc varchar(30),
subp_code char(5),
subp_desc varchar(30),
Cost_UOM money,
TRD_RFQ money,
TRD_UOM money,
MAT_RFQ money,
MAT_UOM money,
TOT_RFQ money,
TOT_UOM money,
GMD money,
GMP money,
Sell_Price money,
Opt_Only_Cost money,
Allowance_Cost money,
option_group varchar(50),
option_sub_group varchar(50)
)


insert into #Option_Estimate_Analysis(footage,model_name_id,model_ID,raw_land_cd,option_id,phs_code,phs_desc,subp_code,subp_desc,option_group,
option_sub_group,sell_price,allowance_cost,opt_only_cost,Cost_UOM)
exec('select m.footage,m.model_name_id,m.model_id,m.Raw_land_Cd,isnull(e.Option_id,-1)[option_id],e.phs_code,phs.phs_desc,
e.subp_code,isnull(sphs.subp_desc,''''), omg.GROUP_DESC, osg.SUB_GROUP_DESC, eo.prc_sell, eo.allowance, eo.Opt_only_cost, case when isnull(m.footage,0) = 0 then 0 else isnull(eo.prc_sell,0) / m.footage end
from hb_model m
join hb_est e
on e.model_id=m.model_id
and m.Raw_land_Cd = e.Raw_land_cd
left join '+@tablePrefix+'subPhase sphs
on sphs.subp_code = e.subp_code 
left join '+@tablePrefix+'Phase phs
on RTRIM(phs.phs_code)  = RTRIM(e.phs_code )
join hb_elv_opt eo on eo.model_id=m.model_id and eo.raw_land_cd=m.raw_land_cd and eo.option_id=e.option_id
join hb_options o on o.option_id=e.option_id and o.is_structural=''Y'' 
join hb_opt_maj_group omg on omg.MAJ_GROUP_ID = o.MAJ_GROUP_ID
join hb_opt_sub_group osg on osg.SUB_GROUP_ID = o.SUB_GROUP_ID
' + @sqlWhere +'and e.option_id <> -1 and e.estimatelevel <> ''M''')

insert into #Option_Estimate_Analysis(footage,model_name_id,model_ID,raw_land_cd,option_id,phs_code,phs_desc,subp_code,subp_desc,option_group,
option_sub_group,sell_price,allowance_cost,opt_only_cost,Cost_UOM)
exec('select m.footage,m.model_name_id,m.model_id,m.Raw_land_Cd,isnull(e.Option_id,-1)[option_id],e.phs_code,phs.phs_desc,
e.subp_code,isnull(sphs.subp_desc,''''), omg.GROUP_DESC, osg.SUB_GROUP_DESC, eo.prc_sell, eo.allowance, eo.Opt_only_cost, case when isnull(m.footage,0) = 0 then 0 else isnull(eo.prc_sell,0) / m.footage end
from hb_model m
join hb_est e
on e.model_id=-1
and m.Raw_land_Cd = e.Raw_land_cd
left join '+@tablePrefix+'subPhase sphs
on sphs.subp_code = e.subp_code 
left join '+@tablePrefix+'Phase phs
on RTRIM(phs.phs_code)  = RTRIM(e.phs_code )
join hb_elv_opt eo on eo.model_id=m.model_id and eo.raw_land_cd=m.raw_land_cd and eo.option_id=e.option_id
join hb_options o on o.option_id=e.option_id and o.is_structural=''N'' 
join hb_opt_maj_group omg on omg.MAJ_GROUP_ID = o.MAJ_GROUP_ID
join hb_opt_sub_group osg on osg.SUB_GROUP_ID = o.SUB_GROUP_ID
' + @sqlWhere +'and e.option_id <> -1 and e.estimatelevel <> ''M''')

-----------------------------------

update #Option_Estimate_Analysis set TRD_RFQ = isnull(
(select sum(dbo.fn_hb_calc_update_opt_amt(trd.model_id,trd.Raw_land_cd,trd.option_id,@date,@TradePreference,trd.option_id,'O',@pcid))[Trades RFQ]
from hb_est_mat trd
where trd.model_id = s.model_id
and trd.raw_land_cd = s.raw_land_cd
and trd.option_id = s.option_id
and trd.phs_code = s.phs_code
and trd.subp_code = s.subp_code and trd.estimatelevel = 'E'),0),
TRD_UOM = isnull(
(select sum(case when isnull(mo.Footage,0) = 0 then 0 else dbo.fn_hb_calc_update_opt_amt(trd.model_id,trd.Raw_land_cd,trd.option_id,@date,@TradePreference,trd.option_id,'O',@pcid) / mo.Footage end)
from hb_est_trd trd
join hb_model mo
on mo.model_id = trd.model_id
and mo.Raw_land_Cd = trd.Raw_land_cd
where trd.model_id = s.model_id
and trd.raw_land_cd = s.raw_land_cd
and trd.option_id = s.option_id
and trd.phs_code = s.phs_code
and trd.subp_code = s.subp_code and trd.estimatelevel = 'E'),0)
from #Option_Estimate_Analysis s 



update #Option_Estimate_Analysis set MAT_RFQ = isnull(
(select sum(dbo.fn_hb_calc_update_opt_amt(ma.model_id,ma.Raw_land_cd,ma.option_id,@date,@TradePreference,ma.option_id,'O',@pcid))[Trades RFQ]
from hb_est_mat ma
where ma.model_id = s.model_id
and ma.raw_land_cd = s.raw_land_cd
and ma.option_id = s.option_id
and ma.phs_code = s.phs_code
and ma.subp_code = s.subp_code and ma.estimatelevel = 'E'),0),
MAT_UOM = isnull(
(select sum(case when isnull(mo.Footage,0) = 0 then 0 else dbo.fn_hb_calc_update_mat_amt(ma.model_id,ma.Raw_land_cd,ma.material_id,@date,@TradePreference,@pcid) / mo.Footage end)
from hb_est_mat ma
join hb_model mo
on mo.model_id = ma.model_id
and mo.Raw_land_Cd = ma.Raw_land_cd
where ma.model_id = s.model_id
and ma.raw_land_cd = s.raw_land_cd
and ma.option_id = s.option_id
and ma.phs_code = s.phs_code
and ma.subp_code = s.subp_code and ma.estimatelevel = 'E'),0)
from #Option_Estimate_Analysis s 


	



update #Option_Estimate_Analysis set tot_rfq = (trd_rfq + mat_rfq + Opt_Only_Cost) 
update #Option_Estimate_Analysis set tot_uom = (case when isnull(footage,0) = 0 then 0 else tot_rfq / footage end)
update #Option_Estimate_Analysis set GMD = (Sell_Price - tot_rfq)
update #Option_Estimate_Analysis set GMP = case when isnull(sell_price,0) = 0 then 0 else (GMD / Sell_Price) end

---space between each column
declare
@strDate varchar(100)


set @strDate= datename(month, @date)+' '+datename(day, @date)+' '+datename(year, @date)

set @sqlWhere = '
select distinct case when r.option_id = -1 then ''B'' else ''O''end[OptionOrBase],

isnull((select o.short_desc from hb_options o where o.option_id = r.option_id),''base'')[OptionNameOrBase], 
option_group [Option Group], option_sub_group [Option Sub Group],

isnull((select raw_land_desc from hb_raw_land h where h.raw_land_cd = r.raw_land_cd ),'''')[Holding],

(select Model_name from hb_model_name m where m.model_name_id = r.model_name_id and isnull(is_option_package,0) <> 1)[Model],

(select model_desc from hb_model m where r.model_name_id = m.model_name_id and m.model_id = r.model_id and raw_land_cd = r.raw_land_cd)[Elevation],

r.footage[Area:],

isnull((select top 1 isnull(price,0) from hb_modelpricehistory where raw_land_cd = r.raw_land_cd and model_id = r.model_id and expieryDate <= '''+ @strDate+''' order by expieryDate desc ),0)[Base Price],

isnull( (select sum(isnull(tot_rfq,0)) from #Option_Estimate_Analysis s where r.raw_land_cd = s.raw_land_cd and r.model_id = s.model_id and r.phs_code = s.phs_code and r.option_id = s.option_id),0)[OptionTotal],

isnull((select top 1 isnull(price,0) from hb_modelpricehistory where raw_land_cd = r.raw_land_cd and model_id = r.model_id and expieryDate <= '''+ @strDate+''' order by expieryDate desc ),0) +
isnull( (select sum(isnull(tot_rfq,0)) from #Option_Estimate_Analysis s where r.raw_land_cd = s.raw_land_cd and r.model_id = s.model_id and r.phs_code = s.phs_code and r.option_id = s.option_id),0)[Total Sell $:],

(case when isnull(footage,0) = 0 then 0 else (isnull((select top 1 isnull(price,0) from hb_modelpricehistory where raw_land_cd = r.raw_land_cd and model_id = r.model_id and expieryDate <= '''+ @strDate+''' order by expieryDate desc ),0) +
	isnull( (select sum(isnull(tot_rfq,0)) from #Option_Estimate_Analysis s where r.raw_land_cd = s.raw_land_cd and r.model_id = s.model_id and r.phs_code = s.phs_code and r.option_id = s.option_id),0)/r.footage) end)[Sell $ per/UOM],


--now the calculated fields from the temp table
r.phs_code[Major Code],r.phs_desc[Major Code Description],r.subp_code[Sub Code],r.subp_desc[Sub Code Description],
r.Allowance_Cost [Allowance],
r.Cost_UOM[Cost/UOM],r.TRD_RFQ[Trades RFQ],r.TRD_UOM[Trades $/UOM],r.MAT_RFQ[Materials RFQ],r.MAT_UOM[Materials $/UOM],
isnull(r.TOT_RFQ,0)[Total RFQ],isnull(r.TOT_UOM,0)[Total $/UOM],
isnull(GMD,0) [GM$], isnull(GMP,0) [GM%]

from #Option_Estimate_Analysis r'

exec ( @sqlWhere )

delete working_hb_rankingJoin where username = @pcid

end






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_report_option_price_listing]') and xtype = 'P ')  
 drop Procedure sp_hb_report_option_price_listing
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
-- exec sp_hb_report_option_price_listing 'gregstest', 'Master', 1, 1, 1, 1
--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


CREATE Procedure [dbo].[sp_hb_report_option_price_listing]
(@PCID varchar(500), @Level varchar(100), @Attached bit, @PrintCalc bit, @PrintAllowance bit, @Attributes bit )
as

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#OptionsList'))  
 drop table #OptionsList

create table #OptionsList
(
	Holding varchar(50) null,
	Model varchar(50) null,
	Elevation varchar(50) null,
	OptionGroup varchar(50) null,
	OptionSubGroup varchar(50) null,
	[Option] varchar(50) null,
	OptionLong varchar(7500) null,
	UOM varchar(5) null,
	SalesPrice money null,
	Allowance money null,
	Calculation varchar(20) null,
	RFQ money,
	Budget money,
	[GM $] money,
	[GM %] float,
	[Attribute Type] varchar(30), 
	[Attribute Values] varchar(8000)
)		

Declare @str varchar(8000), @Holding varchar(8000), @Model varchar(8000), @Elevation varchar(8000), @OptionGroup varchar(8000),
		@OptionSubGroup varchar(8000), @Option varchar(8000)

Select @Holding = '', @Model = '', @Elevation = '', @OptionGroup = '', @OptionSubGroup = '', @Option = ''

If Exists(Select * From working_holding Where PCID = @PCID)
	Set @Holding = ' AND ro.Raw_Land_CD in (Select Raw_Land_CD From working_holding where PCID = ''' + @PCID + ''') '
If Exists(Select * From working_model_name Where PCID = @PCID)	
	Set @Model = ' AND mo.Model_Name_ID in (Select Model_Name_ID From working_model_name where PCID = ''' + @PCID + ''') '
If Exists(Select * From working_model Where PCID = @PCID)
	Set @Elevation = ' AND eo.Model_ID in (Select Model_ID From working_model where PCID = ''' + @PCID + ''') '
If Exists(Select * From working_Opt_Maj_Group Where PCID = @PCID)
	Set @OptionGroup = ' AND m.Maj_Group_ID in (Select Maj_Group_ID From working_Opt_Maj_Group where PCID = ''' + @PCID + ''') '
If Exists(Select * From working_Opt_Sub_Group Where PCID = @PCID)
	Set @OptionSubGroup = ' AND s.Sub_Group_ID in (Select Sub_Group_ID From working_Opt_Sub_Group where PCID = ''' + @PCID + ''') '
If Exists(Select * From working_Options Where PCID = @PCID)
	Set @Option = ' AND o.Option_ID in (Select Option_ID From working_Options where PCID = ''' + @PCID + ''') '


If @Level = 'Model'
	Begin
		
		Set @Str = 'select distinct rl.raw_land_desc [Holding], Model_Name [Model], '''' [Elevation], GROUP_DESC [Option Group], SUB_GROUP_DESC [Option Subgroup], SHORT_DESC [Option], EXP_DESC,
					IsNull(UOM,'''') [UOM], isnull(mo.PRC_SELL,0) as [Sales Price], 
					Case When ' + Convert(varchar(10), @PrintAllowance) + ' = 1 then isnull(mo.ALLOWANCE,0) Else -1 End Allowance, case when isnull(mo.PRC_FM,'''') = ''F'' then ''Fixed price'' 
					when isnull(mo.PRC_FM,'''') = ''M'' then ''$'' + cast(Round(isnull(mo.PRC_FIXED,0),2) as varchar(50)) + '' at '' +
					cast(round(isnull(mo.PRC_MARKUP_PCT,0),2)  as varchar(50)) else ''Not selected'' end [Calculation], Case When  ' + Convert(varchar(10), @PrintCalc) + ' = 1 then isnull(mo.opt_only_cost,0) else -1 end, isnull(mo.cost_supl,0),oat.OATYP_DESC[Attribute Type], dbo.fn_Get_Option_Attr_Values(isnull(mo.raw_land_cd,-1),mo.model_name_id, -1, mo.option_id, oae.OATYP_ID, ''E'') [Attribute Values]
					from HB_MOD_OPT mo
					join hb_raw_land rl
					on rl.raw_land_cd = mo.raw_land_cd
					join HB_Model_Name mn
					on mn.Model_Name_ID = mo.Model_Name_ID
					join dbo.HB_OPTIONS o
					on o.Option_ID = mo.Option_ID
					join dbo.HB_OPT_MAJ_GROUP m
					on m.MAJ_GROUP_ID = o.MAJ_GROUP_ID
					join dbo.HB_OPT_SUB_GROUP s
					on s.SUB_GROUP_ID = o.SUB_GROUP_ID
					left outer join dbo.HB_OPT_ATTR_EVALUES oae on oae.Model_Name_ID = mo.Model_Name_ID and oae.Raw_Land_CD = mo.Raw_Land_CD 
                                                and oae.Option_ID = mo.Option_ID and Room_ID = -1 and oae.Model_ID = -1
					left outer join dbo.HB_OPT_ATTR_TYPE oat on oat.OATYP_ID = oae.OATYP_ID
					left outer join dbo.HB_OPT_ATTR_TVALUES oats on oats.OATYP_ID = oae.OATYP_ID and oats.OATVAL_ID = oae.OATVAL_ID
					Where mo.Raw_Land_CD <> -1 ' + @OptionGroup + @OptionSubGroup + @Option  + @Model
		
		Insert Into #OptionsList (Holding, Model, Elevation, OptionGroup,OptionSubGroup,[Option],OptionLong,UOM,SalesPrice,Allowance,Calculation,RFQ,Budget,[Attribute Type], [Attribute Values] )
		Exec(@str)
		
	End
Else If @Level = 'Elevation'
	Begin
		
		Set @Str = 'select distinct rl.raw_land_desc [Holding], hmn.model_name [Model], Model_Desc [Elevation], GROUP_DESC [Option Group], SUB_GROUP_DESC [Option Subgroup], SHORT_DESC [Option], EXP_DESC,
					IsNull(UOM,'''') [UOM], isnull(eo.PRC_SELL,0) as [Sales Price], 
					Case When ' + Convert(varchar(10), @PrintAllowance) + ' = 1 then isnull(eo.ALLOWANCE,0) Else -1 End Allowance, case when isnull(eo.PRC_FM,'''') = ''F'' then ''Fixed price'' 
					when isnull(eo.PRC_FM,'''') = ''M'' then ''$'' + cast(Round(isnull(eo.PRC_FIXED,0),2) as varchar(50)) + '' at '' +
					cast(round(isnull(eo.PRC_MARKUP_PCT,0),2)  as varchar(50)) else ''Not selected'' end [Calculation], Case When ' + Convert(varchar(10), @PrintCalc) + ' = 1 then isnull(eo.opt_only_cost,0) else -1 end, isnull(eo.cost_supl,0) ,oat.OATYP_DESC[Attribute Type], dbo.fn_Get_Option_Attr_Values(isnull(eo.raw_land_cd,-1),hbm.model_name_id, eo.model_id, eo.id, oae.OATYP_ID, ''E'') [Attribute Values]
					from HB_Elv_OPT eo					
					join hb_raw_land rl
					on rl.raw_land_cd = eo.raw_land_cd
					join HB_Model hbm
					on hbm.Model_ID = eo.Model_ID and eo.raw_land_cd=hbm.raw_land_cd
					join hb_model_name hmn
					on hmn.model_name_id = hbm.model_name_id
					join dbo.HB_OPTIONS o
					on o.Option_ID = eo.Option_ID
					join dbo.HB_OPT_MAJ_GROUP m
					on m.MAJ_GROUP_ID = o.MAJ_GROUP_ID
					join dbo.HB_OPT_SUB_GROUP s
					on s.SUB_GROUP_ID = o.SUB_GROUP_ID
					left outer join dbo.HB_OPT_ATTR_EVALUES oae on oae.Model_Name_ID = hbm.Model_Name_ID and oae.Raw_Land_CD = eo.Raw_Land_CD 
                                                and oae.Option_ID = eo.ID and Room_ID = -1 and oae.Model_ID = eo.Model_ID
					left outer join dbo.HB_OPT_ATTR_TYPE oat on oat.OATYP_ID = oae.OATYP_ID					
					Where eo.Raw_Land_CD <> -1 ' + @OptionGroup + @OptionSubGroup + @Option + @Elevation

		If @Attached = 1
			Set @str = @str + ' AND Attached_YN = ''Y'''
		print @Str
		Insert Into #OptionsList (Holding, Model, Elevation, OptionGroup,OptionSubGroup,[Option],OptionLong,UOM,SalesPrice,Allowance,Calculation,RFQ,Budget,[Attribute Type], [Attribute Values])
		Exec(@str)
		
	End
Else -- Master
	Begin
		
		Set @Str = 'select distinct Raw_Land_Desc [Holding], '''' [Model], '''' [Elevation], GROUP_DESC [Option Group], SUB_GROUP_DESC [Option Subgroup], SHORT_DESC [Option], EXP_DESC,
					IsNull(UOM,'''') [UOM], isnull(ro.PRC_SELL,0) as [Sales Price], 
					Case When ' + Convert(varchar(10), @PrintAllowance) + ' = 1 then isnull(ro.ALLOWANCE,0) Else -1 End Allowance, case when isnull(ro.PRC_FM,'''') = ''F'' then ''Fixed price'' 
					when isnull(ro.PRC_FM,'''') = ''M'' then ''$'' + cast(Round(isnull(ro.PRC_FIXED,0),2) as varchar(50)) + '' at '' +
					cast(round(isnull(ro.PRC_MARKUP_PCT,0),2)  as varchar(50)) else ''Not selected'' end [Calculation], Case When  ' + Convert(varchar(10), @PrintCalc) + ' = 1 then isnull(ro.opt_only_cost,0) else -1 end, isnull(ro.cost_supl,0),oat.OATYP_DESC[Attribute Type], dbo.fn_Get_Option_Attr_Values(isnull(ro.raw_land_cd,-1),-1, -1, ro.option_id, oae.OATYP_ID, ''E'') [Attribute Values]
					from HB_Raw_OPT ro
					join HB_Raw_Land r
					on r.Raw_Land_CD = ro.Raw_Land_CD
					join dbo.HB_OPTIONS o
					on o.Option_ID = ro.Option_ID
					join dbo.HB_OPT_MAJ_GROUP m
					on m.MAJ_GROUP_ID = o.MAJ_GROUP_ID
					join dbo.HB_OPT_SUB_GROUP s
					on s.SUB_GROUP_ID = o.SUB_GROUP_ID
					left outer join dbo.HB_OPT_ATTR_EVALUES oae on oae.Model_Name_ID = -1 and oae.Raw_Land_CD = ro.Raw_Land_CD 
																	and oae.Option_ID = ro.Option_ID and Room_ID = -1 and oae.Model_ID = -1
					left outer join dbo.HB_OPT_ATTR_TYPE oat on oat.OATYP_ID = oae.OATYP_ID
					left outer join dbo.HB_OPT_ATTR_TVALUES oats on oats.OATYP_ID = oae.OATYP_ID and oats.OATVAL_ID = oae.OATVAL_ID
					Where 1=1 ' + @OptionGroup + @OptionSubGroup + @Option + @Holding

		Insert Into #OptionsList (Holding, Model, Elevation, OptionGroup,OptionSubGroup,[Option],OptionLong,UOM,SalesPrice,Allowance,Calculation,RFQ,Budget,[Attribute Type], [Attribute Values])
		Exec(@str)

	End

update #OptionsList set [GM $]=(SalesPrice - RFQ)
update #OptionsList set [GM %]=case when SalesPrice > 0 then ([GM $] / SalesPrice) else 0 end	

Select Holding, Model, Elevation, OptionGroup [Option Group],OptionSubGroup [Option Subgroup],[Option], OptionLong as Description,[Attribute Type], 
	[Attribute Values],UOM,SalesPrice [Sales Price],isnull(RFQ,0) RFQ,Allowance,Calculation,Budget,[GM $],[GM %]
From #OptionsList order by Holding, Model, Elevation, [Option Group], [Attribute Type], [Attribute Values]



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_report_rfq_analysis]') and xtype = 'P ')  
 drop Procedure sp_hb_report_rfq_analysis
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--  exec sp_hb_report_rfq_analysis 'fe36775d-3899-4ed9-a9ae-06bfaa7db346', '1-31-2008', 'N','Y','D'
--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

CREATE proc [dbo].[sp_hb_report_rfq_analysis]
@pcid varchar(500), @date datetime, @includeOption char(1), @byCostType char(1), @SelectedMethod char(1)
as
begin

declare 
@holding int,
@model  int,
@sqlIn varchar(8000),
@sqlWhere varchar(8000),
@AUTOID int,
@tablePrefix varchar(8000),
@updateMethod int,
@sqlExec varchar(8000)

select @AUTOID=autoid from hb_report_options where pcid=@PCID 
--needed to run functions correctly
exec sp_hb_rankingJoin @AUTOID,@pcid

-- Model / Elevation Estimage & RFQ Comparitive report for Homebuilder
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------


--setup parameters-------------------------------------------------------
set @sqlWhere = ''
--==========Raw_land_cd============
set @sqlIn = ''
select @sqlIn = (case when @sqlIn = '' then cast(RAW_LAND_CD as varchar(8000)) else (cast(RAW_LAND_CD as varchar(8000))+',' + @sqlIn)end) from working_holding where @pcid = pcid
if @sqlIn <> ''
begin 	set @sqlWhere = 'where m.raw_land_cd in ('+@sqlIn+')' end
--===end====Raw_land_cd====================
--reset parameter
set @sqlIn = ''
----==========model_ID======elevation======

select @sqlIn = (case when @sqlIn = '' then cast(model_id as varchar(8000)) else (cast(model_id as varchar(8000))+',' + @sqlIn)end) from working_model where @pcid = pcid
if @sqlIn <> ''
begin
	if @sqlWhere <> ''
	begin
		set @sqlWhere = @sqlWhere + ' and m.model_ID in ('+@sqlIn+')'
	end
	else
	begin
		set @sqlWhere ='where m.model_id in ('+@sqlIn+')'
	end 
end	
----===end====model_ID======elevation======
--reset parameter
set @sqlIn = ''
----==========model_name_ID======Model======
select @sqlIn = (case when @sqlIn = '' then cast(model_name_id as varchar(8000)) else (cast(model_name_id as varchar(8000))+',' + @sqlIn)end) from working_model_name where @pcid = pcid
if @sqlIn <> ''
begin
	if @sqlWhere <> ''
	begin
		set @sqlWhere = @sqlWhere + ' and m.model_name_id in ('+@sqlIn+')'
	end
	else
	begin
		set @sqlWhere ='where m.model_name_id in ('+@sqlIn+')'
	end 
end	

set @sqlIn = ''
select @sqlIn = (case when @sqlIn = '' then ''''+cost_type+'''' else ''''+cost_type+''',' + @sqlIn end) from working_cost_type where @pcid = pcid
if @sqlIn <> ''
begin
	if @sqlWhere <> ''
	begin
		set @sqlWhere = @sqlWhere +'and phs.cost_type in('+@sqlIn+')'
	end
	else
	begin
		set @sqlWhere ='where phs.cost_type in('+@sqlIn+')'
	end 
end   


----====end===model_name_ID======Model======
---======================================================================
--end of setup parameters------------------------------------------------


select @tablePrefix = dbo.fn_tableprefix(@AUTOID,'HR')


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#RFQ_Analysis'))
drop table #RFQ_Analysis 
create table #RFQ_Analysis(
footage money,
model_name_id int,
model_ID int,
model_style_id int,
raw_land_cd int,
option_id int,
phs_code varchar(5),
phs_desc varchar(30),
subp_code varchar(5),
subp_desc varchar(30),
Planning money,
Cost_UOM money,
P_RFQ money,
P_UOM money,
L_UOM money,
L_RFQ money,
H_UOM money,
H_RFQ money,
S_UOM money,
S_RFQ money
)


--update the values according to the badc changes
--====================================
--delete any values in the working table
delete working_hb_elevationModel_sp_source where username = @pcid
 

insert into working_hb_ElevationModel_SP_Source (username,model_id,raw_land_cd)
exec ('select distinct '''+@pcid+''',m.model_id,m.raw_land_cd 
from hb_model m
join hb_est e
on m.model_id = e.model_id
and m.Raw_land_Cd = e.Raw_land_cd
left join '+@tablePrefix+'subPhase sphs
on sphs.subp_code = e.subp_code 
left join '+@tablePrefix+'Phase phs
on phs.phs_code = e.phs_code 
 '+ @sqlWhere + ' and e.option_id = -1') 


--pass -1 in as model_id to tell proc to work from the working table
exec sp_hb_getElevationModel_BADC @pcid,-1,null,'N'



insert into #RFQ_Analysis(footage,model_name_id,model_ID,model_style_id,raw_land_cd,option_id,phs_code,phs_desc,subp_code,subp_desc,Planning,Cost_UOM,P_RFQ,P_UOM, L_UOM, L_RFQ, H_UOM, H_RFQ, S_UOM, S_RFQ )
exec('select m.footage,m.model_name_id,m.model_id,(select isnull(mn.modstyle_id,-1) from hb_model_name mn where mn.model_name_id = m.model_name_id and isnull(mn.is_option_package,0)<>1) , m.Raw_land_Cd,-1 [option_id],ee.phs_code,phs.phs_desc,
ee.subp_code,isnull(sphs.subp_desc,''''),ee.internal_est[Planning],case when isnull(m.Footage,0) = 0 then 0 else ee.internal_est / m.Footage end,0,0,0,0,0,0,0,0 
from hb_model m
join working_hb_ElevationModel_BADC ee
on m.model_id = ee.model_id
and m.Raw_land_Cd = ee.Raw_land_cd 
left join '+@tablePrefix+'subPhase sphs
on sphs.subp_code = ee.subp_code 
left join '+@tablePrefix+'Phase phs
on phs.phs_code = ee.phs_code 
left outer join hb_elv_opt e
on e.model_id=m.model_id 
and e.raw_land_cd=m.raw_land_cd  
' + @sqlWhere )




--delete after running proc
delete working_hb_elevationModel_sp_source where username = @pcid
--====Now Insert The options================================
if @includeOption = 'Y'
begin



insert into #RFQ_Analysis
(footage,model_name_id,model_ID,model_style_id,raw_land_cd,option_id,phs_code,phs_desc,subp_code,subp_desc,
Planning,Cost_UOM, P_RFQ,P_UOM, L_UOM, L_RFQ, H_UOM, H_RFQ, S_UOM, S_RFQ )
exec('select m.footage,m.model_name_id,m.model_id,(select isnull(mn.modstyle_id,-1) from hb_model_name mn where mn.model_name_id = m.model_name_id and isnull(mn.is_option_package,0)<>1) , m.Raw_land_Cd,isnull(e.Option_id,-1)[option_id],e.phs_code,phs.phs_desc,
e.subp_code,isnull(sphs.subp_desc,''''),e.internal_est[Planning],case when isnull(m.Footage,0) = 0 then 0 else e.internal_est / m.Footage end,0,0,0,0,0,0,0,0 
from hb_model m
join hb_est e
on e.model_id= m.model_id
and m.Raw_land_Cd = e.Raw_land_cd
left join '+@tablePrefix+'subPhase sphs
on sphs.subp_code = e.subp_code 
left join '+@tablePrefix+'Phase phs
on RTRIM(phs.phs_code)  = RTRIM(e.phs_code )
join hb_elv_opt eo on eo.model_id=m.model_id and eo.raw_land_cd=m.raw_land_cd and eo.option_id=e.option_id
join hb_options o on o.option_id=e.option_id and o.is_structural=''Y'' 
' + @sqlWhere +'and e.option_id <> -1')


insert into #RFQ_Analysis(footage,model_name_id,model_ID,model_style_id,raw_land_cd,option_id,phs_code,phs_desc,subp_code,subp_desc,Planning,Cost_UOM,P_RFQ,P_UOM, L_UOM, L_RFQ, H_UOM, H_RFQ, S_UOM, S_RFQ )
exec('select m.footage,m.model_name_id,m.model_id,(select isnull(mn.modstyle_id,-1) from hb_model_name mn where mn.model_name_id = m.model_name_id and isnull(is_option_package, 0) <> 1), m.Raw_land_Cd,isnull(e.Option_id,-1)[option_id],e.phs_code,phs.phs_desc,
e.subp_code,isnull(sphs.subp_desc,''''),e.internal_est[Planning],case when isnull(m.Footage,0) = 0 then 0 else e.internal_est / m.Footage end,0,0,0,0,0,0,0,0 
from hb_model m
join hb_est e
on e.model_id=-1
and m.Raw_land_Cd = e.Raw_land_cd
left join '+@tablePrefix+'subPhase sphs
on sphs.subp_code = e.subp_code 
left join '+@tablePrefix+'Phase phs
on RTRIM(phs.phs_code)  = RTRIM(e.phs_code )
join hb_elv_opt eo on eo.model_id=m.model_id and eo.raw_land_cd=m.raw_land_cd and eo.option_id=e.option_id
join hb_options o on o.option_id=e.option_id and o.is_structural=''N'' 
' + @sqlWhere +'and e.option_id <> -1 ')

end

print @sqlWhere



--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--+++++++++++++++++++++++++++++++By Ranking Primary+++++++++++++++++++++++++++++++++++++
--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
select @updateMethod = id from hb_rfq_update_method where description = 'By Ranking Primary'
---------------------------------BASE-------------------------------------------
---****P_RFQ set this to 0 above in first insert( or check for isnull )
update #RFQ_Analysis set P_RFQ = isnull((
select sum(dbo.fn_hb_calc_update_trd_amt(trd.model_id,trd.Raw_land_cd,trd.trade_id,@date,@updateMethod,@pcid))[Trades RFQ]
from hb_est_mat trd
where trd.model_id = s.model_id
and trd.raw_land_cd = s.raw_land_cd
and trd.option_id = s.option_id
and trd.phs_code = s.phs_code
and trd.subp_code = s.subp_code and trd.estimatelevel = 'E'),0)
from #RFQ_Analysis s where isnull(s.option_id, -1) = -1
--add column to to get a total of trades and materials(**thier could be some trades only,materials only or both)
update #RFQ_Analysis set P_RFQ = isnull(P_RFQ,0) + isnull((
select sum(dbo.fn_hb_calc_update_mat_amt(ma.model_id,ma.Raw_land_cd,ma.material_id,@date,@updateMethod,@pcid))[Trades RFQ]
from hb_est_mat ma
where ma.model_id = s.model_id
and ma.raw_land_cd = s.raw_land_cd
and ma.option_id = s.option_id
and ma.phs_code = s.phs_code
and ma.subp_code = s.subp_code and ma.estimatelevel = 'E'),0)
from #RFQ_Analysis s where isnull(s.option_id, -1) = -1
---------------------------------OPTION-------------------------------------------
if @includeOption = 'Y'
begin
	update #RFQ_Analysis set P_RFQ = isnull((
	select sum(dbo.fn_hb_calc_update_opt_amt(trd.model_id,trd.Raw_land_cd,trd.option_id,@date,@updateMethod,trd.option_id,'O',@pcid))[Trades RFQ]
	from hb_est trd
	where trd.model_id = s.model_id
	and trd.raw_land_cd = s.raw_land_cd
	and trd.option_id = s.option_id
	and trd.phs_code = s.phs_code
	and trd.subp_code = s.subp_code and trd.estimatelevel = 'E'),0)
	from #RFQ_Analysis s where isnull(s.option_id, -1) <> -1
end
--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--+++++++++++++++++++++++++++++++By Lowest Price++++++++++++++++++++++++++++++++++++++++
--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
select @updateMethod = id from hb_rfq_update_method where description = 'By Lowest Price'

---****P_RFQ set this to 0 above in first insert( or check for isnull )
update #RFQ_Analysis set L_RFQ = isnull((
select sum(dbo.fn_hb_calc_update_trd_amt(trd.model_id,trd.Raw_land_cd,trd.trade_id,@date,@updateMethod,@pcid))[Trades RFQ]
from hb_est_mat trd
where trd.model_id = s.model_id
and trd.raw_land_cd = s.raw_land_cd
and trd.option_id = s.option_id
and trd.phs_code = s.phs_code
and trd.subp_code = s.subp_code and trd.estimatelevel = 'E'),0)
from #RFQ_Analysis s where isnull(s.option_id, -1) = -1
--add column to to get a total of trades and materials(**thier could be some trades only,materials only or both)
update #RFQ_Analysis set L_RFQ = isnull(L_RFQ,0) + isnull((
select sum(dbo.fn_hb_calc_update_mat_amt(ma.model_id,ma.Raw_land_cd,ma.material_id,@date,@updateMethod,@pcid))[Trades RFQ]
from hb_est_mat ma
where ma.model_id = s.model_id
and ma.raw_land_cd = s.raw_land_cd
and ma.option_id = s.option_id
and ma.phs_code = s.phs_code
and ma.subp_code = s.subp_code and ma.estimatelevel = 'E'),0)
from #RFQ_Analysis s where isnull(s.option_id, -1) = -1
---------------------------------OPTION-------------------------------------------
if @includeOption = 'Y'
begin
	update #RFQ_Analysis set L_RFQ = isnull((
	select sum(dbo.fn_hb_calc_update_opt_amt(trd.model_id,trd.Raw_land_cd,trd.option_id,@date,@updateMethod,trd.option_id,'O',@pcid))[Trades RFQ]
	from hb_est trd
	where trd.model_id = s.model_id
	and trd.raw_land_cd = s.raw_land_cd
	and trd.option_id = s.option_id
	and trd.phs_code = s.phs_code
	and trd.subp_code = s.subp_code and trd.estimatelevel = 'E'),0)
	from #RFQ_Analysis s where isnull(s.option_id, -1) <> -1
end
--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--+++++++++++++++++++++++++++++++By Highest Price++++++++++++++++++++++++++++++++++++++++
--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
select @updateMethod = id from hb_rfq_update_method where description = 'By Highest Price'

---****P_RFQ set this to 0 above in first insert( or check for isnull )
update #RFQ_Analysis set H_RFQ = isnull((
select sum(dbo.fn_hb_calc_update_trd_amt(trd.model_id,trd.Raw_land_cd,trd.trade_id,@date,@updateMethod,@pcid))[Trades RFQ]
from hb_est_mat trd
where trd.model_id = s.model_id
and trd.raw_land_cd = s.raw_land_cd
and trd.option_id = s.option_id
and trd.phs_code = s.phs_code
and trd.subp_code = s.subp_code and trd.estimatelevel = 'E'),0)
from #RFQ_Analysis s where isnull(s.option_id, -1) = -1
--add column to to get a total of trades and materials(**thier could be some trades only,materials only or both)
update #RFQ_Analysis set H_RFQ = isnull(H_RFQ,0) + isnull((
select sum(dbo.fn_hb_calc_update_mat_amt(ma.model_id,ma.Raw_land_cd,ma.material_id,@date,@updateMethod,@pcid))[Trades RFQ]
from hb_est_mat ma
where ma.model_id = s.model_id
and ma.raw_land_cd = s.raw_land_cd
and ma.option_id = s.option_id
and ma.phs_code = s.phs_code
and ma.subp_code = s.subp_code and ma.estimatelevel = 'E'),0)
from #RFQ_Analysis s where isnull(s.option_id, -1) = -1
---------------------------------OPTION-------------------------------------------
if @includeOption = 'Y'
begin
	update #RFQ_Analysis set H_RFQ = isnull((
	select sum(dbo.fn_hb_calc_update_opt_amt(trd.model_id,trd.Raw_land_cd,trd.option_id,@date,@updateMethod,trd.option_id,'O',@pcid))[Trades RFQ]
	from hb_est trd
	where trd.model_id = s.model_id
	and trd.raw_land_cd = s.raw_land_cd
	and trd.option_id = s.option_id
	and trd.phs_code = s.phs_code
	and trd.subp_code = s.subp_code and trd.estimatelevel = 'E'),0)
	from #RFQ_Analysis s where isnull(s.option_id, -1) <> -1
end
--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--+++++++++++++++++++++++++++++++By Selected Contract/Demand++++++++++++++++++++++++++++
--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if @SelectedMethod = 'C'	
	select @updateMethod = id from hb_rfq_update_method where description = 'By Selected Contract'
else if @SelectedMethod = 'D'
	select @updateMethod = id from hb_rfq_update_method where description = 'By Selected Demand'
---****P_RFQ set this to 0 above in first insert( or check for isnull )
update #RFQ_Analysis set S_RFQ = isnull((
select sum(dbo.fn_hb_calc_update_trd_amt(trd.model_id,trd.Raw_land_cd,trd.trade_id,@date,@updateMethod,@pcid))[Trades RFQ]
from hb_est_mat trd
where trd.model_id = s.model_id
and trd.raw_land_cd = s.raw_land_cd
and trd.option_id = s.option_id
and trd.phs_code = s.phs_code
and trd.subp_code = s.subp_code and trd.estimatelevel = 'E'),0)
from #RFQ_Analysis s where isnull(s.option_id, -1) = -1
--add column to to get a total of trades and materials(**thier could be some trades only,materials only or both)
update #RFQ_Analysis set S_RFQ = isnull(S_RFQ,0) + isnull((
select sum(dbo.fn_hb_calc_update_mat_amt(ma.model_id,ma.Raw_land_cd,ma.material_id,@date,@updateMethod,@pcid))[Trades RFQ]
from hb_est_mat ma
where ma.model_id = s.model_id
and ma.raw_land_cd = s.raw_land_cd
and ma.option_id = s.option_id
and ma.phs_code = s.phs_code
and ma.subp_code = s.subp_code and ma.estimatelevel = 'E'),0)
from #RFQ_Analysis s where isnull(s.option_id, -1) = -1
---------------------------------OPTION-------------------------------------------
if @includeOption = 'Y'
begin
	update #RFQ_Analysis set S_RFQ = isnull((
	select sum(dbo.fn_hb_calc_update_opt_amt(trd.model_id,trd.Raw_land_cd,trd.option_id,@date,@updateMethod,trd.option_id,'O',@pcid))[Trades RFQ]
	from hb_est trd
	where trd.model_id = s.model_id
	and trd.raw_land_cd = s.raw_land_cd
	and trd.option_id = s.option_id
	and trd.phs_code = s.phs_code
	and trd.subp_code = s.subp_code and trd.estimatelevel = 'E'),0)
	from #RFQ_Analysis s where isnull(s.option_id, -1) <> -1
end



----------------
update #RFQ_Analysis set P_UOM = (case when isnull(Footage,0) = 0 then 0 else isnull(P_RFQ,0) / Footage end), 
H_UOM = (case when isnull(Footage,0) = 0 then 0 else isnull(H_RFQ,0) / Footage end),
L_UOM = (case when isnull(Footage,0) = 0 then 0 else isnull(L_RFQ,0) / Footage end),
S_UOM = (case when isnull(Footage,0) = 0 then 0 else isnull(S_RFQ ,0)/ Footage end)


	--select * from #RFQ_Analysis


--table to return
set @sqlExec =
'select distinct
case when r.option_id = -1 then ''B'' else ''O''end[OptionOrBase],isnull((select o.short_desc from hb_options o where o.option_id = r.option_id),''base'')[OptionNameOrBase],
isnull((select raw_land_desc from hb_raw_land h where h.raw_land_cd = r.raw_land_cd ),''Master Level'')[Holding],
(select Model_name from hb_model_name m where m.model_name_id = r.model_name_id and isnull(is_option_package,0) <> 1)[Model],
(select model_desc from hb_model m where m.model_id = r.model_id and raw_land_cd = r.raw_land_cd and r.model_name_id = m.model_name_id 
 )[Elevation],
(select modstyle_desc from hb_model_style m where m.modstyle_id=r.model_style_id ) as [Style:],
r.footage[Area:],
isnull((select top 1 isnull(price,0) from hb_modelpricehistory where raw_land_cd = r.raw_land_cd and model_id = r.model_id and expieryDate <= '''+cast(@date as varchar(50))+''' order by expieryDate desc),0)[Base Price],


(select cost_desc from hb_cost_type c join '+@tablePrefix+'phase p on p.cost_type=c.cost_type where p.phs_code = r.phs_code ) as [Cost Type]
,r.phs_code[Major Code],r.phs_desc[Major Code Description],r.subp_code[Sub Code],r.subp_desc[Sub Code Description],
isnull(Planning,0) as Planning, isnull(Cost_uom,0) as [Cost/UOM], p_rfq as [Primary RFQ], p_uom as [Primary UOM], l_rfq as [Lowest RFQ], l_uom as [Lowest UOM], h_rfq as [Highest RFQ],
h_uom as [Highest UOM], s_rfq as [Selected RFQ], s_uom as [Selected UOM]


from #RFQ_Analysis r 
left outer join '+@tablePrefix+'phase p on p.phs_code = r.phs_code
left outer join hb_cost_type c on c.cost_type=p.cost_type'		

if @byCostType = 'Y'
	set @sqlExec = @sqlExec + ' order by [Cost Type]'

print @sqlExec
exec( @sqlExec )

delete working_hb_rankingjoin where username=@pcid

end

--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--  exec sp_hb_report_rfq_analysis 'GregTest', '12-12-2007', 'Y','Y','D'
--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_report_SupplierListing]') and xtype = 'P ')  
 drop Procedure sp_hb_report_SupplierListing
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE Procedure [dbo].[sp_hb_report_SupplierListing](@PCID varchar(500), @CompanyID int, @SupplierType varchar(2), 
											  @Ranking int, @Type varchar(2))

AS

--Selects only Primary Ranked Suppliers
--exec sp_hb_report_SupplierListing 'hm', 16, 'T', 1, 'D'
--Selects Only Primary Alternate Suppliers
--exec sp_hb_report_SupplierListing 'hm', 16, 'T', 2, 'D'
--Select Only Alternate Suppliers
--exec sp_hb_report_SupplierListing 'hm', 16, 'T', 3, 'D'
--Selects All Suppliers of All Ranks
--exec sp_hb_report_SupplierListing 'hm', 16, 'T', 4, 'D'

--Declare @PCID varchar(500), @CompanyID int, @SupplierType varchar(2), @Ranking int, @Type varchar(2)
--Select @PCID = 'MikeTest', @CompanyID = 16, @SupplierType = 'M', @Ranking = 1, @Type = 'D'

Declare @TRDB varchar(500)
Select @TRDB = TreasuryDBName From Companies Where AutoID = @CompanyID

Declare @Filter varchar(8000), @TMFilter varchar(8000), @MainFilter varchar(8000),
		@SupplierFilter varchar(8000), @TMFDetailFilter varchar(8000), @RunDescription varchar(255)

Select @Filter = '', @TMFilter = '', @MainFilter = '', @SupplierFilter = '', @TMFDetailFilter = ''

Select @RunDescription = Run_Description From hb_report_options Where PCID = @PCID


If exists (Select * from working_holding where PCID = @PCID) 
Begin
	Select @Filter = 'And hcps.TSUP_HCP_TYPE = ''H'' And hcps.TSUP_HCP_ID in (Select Raw_Land_CD from working_holding where PCID = ''' + @PCID + ''') '
End

If exists (Select * from working_community where PCID = @PCID) 
Begin
	Select @Filter = 'And hcps.TSUP_HCP_TYPE = ''C'' And hcps.TSUP_HCP_ID in (Select Community_CD from working_community where PCID = ''' + @PCID + ''') '
End

If exists (Select * from working_project where PCID = @PCID)
Begin
	Select @Filter = 'And hcps.TSUP_HCP_TYPE = ''P'' And hcps.TSUP_HCP_ID in (Select Project_CD from working_project where PCID = ''' + @PCID + ''') '
End

if @SupplierType <> 'B'
begin
	If @SupplierType = 'T' 
	Begin
		Select @Filter = @Filter + ' And tmo.TMO_Type = ''T'' '

		If exists (Select * from working_trades Where PCID = @PCID)
		Begin
			Select @Filter = @Filter + 'And tmo.TMO_ID in (Select Trade_ID From working_trades where PCID = ''' + @PCID + ''') '
		End
	End
	If @SupplierType = 'M'
	Begin
		Select @Filter = @Filter + ' And tmo.TMO_Type = ''M'' '

		If Exists (Select * from working_MaterialGroups where PCID = @PCID)
		Begin
			Select @Filter = @Filter + ' And tmo.TMO_ID in (Select MatGroup_ID From working_MaterialGroups where PCID = ''' + @PCID + ''') '
		End
	End
end
else --both
begin
		If exists (Select * from working_trades Where PCID = @PCID)
		Begin
			Select @Filter = @Filter + 'And ((tmo.TMO_Type = ''T'' and tmo.TMO_ID in (Select Trade_ID From working_trades where PCID = ''' + @PCID + ''')) '
			--Select @Filter = @Filter + 'And tmo.TMO_ID in (Select Trade_ID From working_trades where PCID = ''' + @PCID + ''') '
		End

		If Exists (Select * from working_MaterialGroups where PCID = @PCID)
		Begin
			Select @Filter = @Filter + ' or (tmo.TMO_Type = ''M'' and tmo.TMO_ID in (Select MatGroup_ID From working_MaterialGroups where PCID = ''' + @PCID + '''))) '
			--Select @Filter = @Filter + ' And tmo.TMO_ID in (Select MatGroup_ID From working_MaterialGroups where PCID = ''' + @PCID + ''') '
		End
end

If @Ranking = 1 Or @Ranking = 2 Or @Ranking = 3
Begin
	Select @Filter = @Filter + ' And tmo.Ranking = ' + Convert(varchar(20),@Ranking)
End

If Exists (Select * From tempdb..sysobjects Where id = object_id(N'tempdb..#SupplierList'))  
	Drop Table #SupplierList

Create Table #SupplierList
(
 Supplier_Code varchar(10) null,
 [Name] varchar(250) null,
 Phone varchar(20) null,
 Fax varchar(20) null,
 Email varchar(40) null,
 Trade_Code varchar(50) null,
 Material_Group varchar(50) null,
 RFQ_Method varchar(20) null,
 RFQ_Resp_Method varchar(20) null,
 Invoice_Method varchar(15) null,
 Ranking varchar(20) null
)

--Select @Filter

If @Type = 'D'
Begin
	--Declare @Filter varchar(8000) Set @Filter = ''
	Insert Into #SupplierList (Supplier_Code, [Name], Phone, Fax, Email, Trade_Code, Material_Group, RFQ_Method, RFQ_Resp_Method,
							   Invoice_Method, Ranking)
	exec('Select s.Supplier [Supplier_Code], 
			 rtrim([Name] + char(13) + char(10) + 
			 IsNull(PO_ADD1,'''') + '' '' + IsNull(PO_ADD2,'''') + '' '' + IsNull(PO_ADD3,'''') + '' '' + char(13) + char(10) +
			 IsNull(PO_City,'''') + '' '' + IsNull(PO_State,'''') + '' '' + IsNull(PO_Zip,'''')) [Name],
			 IsNull(Tel,'''') [Phone], IsNull(Fax,'''') [Fax], IsNull(Email,'''') [Email],
		Case When tmo.TMO_Type = ''T'' Then (Select Top 1 Trade_Desc From HB_Trades  Where Trade_ID =  TMO_ID)
			 Else '''' End [Trade_Code], 
		Case When tmo.TMO_Type = ''M'' Then (Select Top 1 Group_Desc From HB_MAT_GROUP Where MatGroup_ID = TMO_ID) 
			 Else '''' End [Material_Group],
		Case When RFQ_Method = ''EM'' Then ''Email''
			 When RFQ_Method = ''PH'' Then ''Phone''
			 When RFQ_Method = ''FA'' Then ''Fax''
			 When RFQ_Method = ''PD'' Then ''PDA''
			 When RFQ_Method = ''XM'' Then ''XML''
			 When RFQ_Method = ''IP'' Then ''Internet Posting'' 
			 When RFQ_Method = ''PU'' Then ''Pickup''
			 Else '''' End [RFQ_Method],
		Case When RFQ_Resp_Method = ''EM'' Then ''Email''
			 When RFQ_Resp_Method = ''PH'' Then ''Phone''
			 When RFQ_Resp_Method = ''FA'' Then ''Fax''
			 When RFQ_Resp_Method = ''PD'' Then ''PDA''
			 When RFQ_Resp_Method = ''XM'' Then ''XML''
			 When RFQ_Resp_Method = ''IP'' Then ''Internet Posting'' 
			 When RFQ_Resp_Method = ''PU'' Then ''Pickup''
			 Else '''' End [RFQ_Resp_Method],
		Case When Invoice_Method = ''I'' Then ''Invoice''
			 Else ''No Invoice'' End [Invoice_Method],
		Case When tmo.Ranking = 1 Then ''Primary''
			 When tmo.Ranking = 2 Then ''Primary Alternate''
			 Else ''Alternate'' End [Ranking]
		From ' + @TRDB + '..Supplier_Master s
		Inner Join ' + @TRDB + '..HB_HCP_SUPPLIERS hcps on hcps.Supplier = s.Supplier
		Inner Join ' + @TRDB + '..HB_SUPP_TMO tmo on tmo.Supplier = hcps.Supplier and
														tmo.TMO_Type = hcps.TSUP_TM_Type and
														tmo.TMO_ID = hcps.TSUP_TM_ID 
		Where 1=1 '+ @Filter +	' Order By s.Supplier asc, tmo.TMO_TYPE desc')
End

Else
Begin
	Insert Into #SupplierList (Supplier_Code, [Name], Phone, Fax, Email, Trade_Code, Material_Group, RFQ_Method, RFQ_Resp_Method,
							   Invoice_Method, Ranking)
	exec('Select s.Supplier [Supplier_Code], [Name],
			 IsNull(Tel,'''') [Phone], IsNull(Fax,'''') [Fax], IsNull(Email,'''') [Email],
		Case When Trade_Supp = ''T'' Then ''Y'' Else ''N'' End [Trade_Code], 
		Case When Mat_Supp = ''T'' Then ''Y'' Else ''N'' End [Material_Group],
		Case When RFQ_Method = ''EM'' Then ''Email''
			 When RFQ_Method = ''PH'' Then ''Phone''
			 When RFQ_Method = ''FA'' Then ''Fax''
			 When RFQ_Method = ''PD'' Then ''PDA''
			 When RFQ_Method = ''XM'' Then ''XML''
			 When RFQ_Method = ''IP'' Then ''Internet Posting'' 
			 When RFQ_Method = ''PU'' Then ''Pickup''
			 Else '''' End [RFQ_Method],
		Case When RFQ_Resp_Method = ''EM'' Then ''Email''
			 When RFQ_Resp_Method = ''PH'' Then ''Phone''
			 When RFQ_Resp_Method = ''FA'' Then ''Fax''
			 When RFQ_Resp_Method = ''PD'' Then ''PDA''
			 When RFQ_Resp_Method = ''XM'' Then ''XML''
			 When RFQ_Resp_Method = ''IP'' Then ''Internet Posting'' 
			 When RFQ_Resp_Method = ''PU'' Then ''Pickup''
			 Else '''' End [RFQ_Resp_Method],
		Case When Invoice_Method = ''I'' Then ''Invoice''
			 Else ''No Invoice'' End [Invoice_Method],
		Case When tmo.Ranking = 1 Then ''Primary''
			 When tmo.Ranking = 2 Then ''Primary Alternate''
			 Else ''Alternate'' End [Ranking]
		From ' + @TRDB + '..Supplier_Master s
		Inner Join ' + @TRDB + '..HB_HCP_SUPPLIERS hcps on hcps.Supplier = s.Supplier
		Inner Join ' + @TRDB + '..HB_SUPP_TMO tmo on tmo.Supplier = hcps.Supplier and
														tmo.TMO_Type = hcps.TSUP_TM_Type and
														tmo.TMO_ID = hcps.TSUP_TM_ID 
		Where 1=1 '+ @Filter +	' Order By s.Supplier asc, tmo.TMO_TYPE desc')
End

Select Distinct IsNull(@RunDescription,'Suppliers') [Run_Description], Supplier_Code, [Name], Phone, Fax, Email, Trade_Code, Material_Group, RFQ_Method, RFQ_Resp_Method,
	   Invoice_Method, Ranking 
from #SupplierList


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HB_ReportSalesCostPlanning]') and xtype = 'P ')  
 drop Procedure sp_HB_ReportSalesCostPlanning
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec sp_HB_ReportSalesCostPlanning 'Rob', '1/1/2008', 1, 1, 1, 1, 1
-- *** kevin - you need to populate this as the working table -> working_hb_ElevationModel_SP_Source

CREATE proc [dbo].[sp_HB_ReportSalesCostPlanning]
 @Pcid varchar(500),
 @AsAtDate datetime,
--following are passthrough parameters for Kevin to use in the Crystal Report
 @HardCosts bit,
 @SoftCosts bit,
 @LotCost bit,
 @AttachedOptions bit,
 @OptionDetail bit,
 @Username varchar(100)
as

--declare 
-- @Pcid varchar(500),
-- @AsAtDate datetime,
-- @CompanyID int, --use this to get the hr db name to obtain major / minor descriptions
----following are passthrough parameters for Kevin to use in the Crystal Report
-- @HardCosts bit,
-- @SoftCosts bit,
-- @LotCost bit,
-- @AttachedOptions bit,
-- @OptionDetail bit
--
--select @PCID = 'Rob', @AsAtDate = '1/1/2008'

--insert working_ReportDatabases(UserName, HumanDBName) select 'Rob', 'HR_KIHOMEBUILDER'
--insert working_hb_ElevationModel_SP_Source select 'rob', 47, 50006
--insert working_hb_ElevationModel_SP_Source select 'rob', 56, 50006
declare @HR varchar(500)
select @HR = HumanDBName
from working_ReportDatabases
where username = @Username

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Worksheet'))
drop table #Worksheet
create table #Worksheet(
 Raw_Land_CD int,
 MODEL_NAME_ID int,
 Model_ID int,
 Holding varchar(50),
 Model varchar(50), 
 Elevation varchar(50),
 [Plan] varchar(50),
 [BaseModel?] char(1),
 BaseModel_ID int, 
 Cost_Revenue char, --C or R
 Cost_Revenue_Type varchar(50), --Hard Cost, Soft Cost, Lot Cost, Attached Option or Selling Price
 CostSubType varchar(50), --costs from COST_DESC in HB_COST_TYPE 
 CostsDescription varchar(50), --Major / Minor Code with description or Option Description,
 Major varchar(20) null,
 Minor varchar(20) null,
 Amount money 
)

If not Exists(Select * from working_hb_ElevationModel_SP_Source where username = @PCID)    
Begin    
    insert working_hb_ElevationModel_SP_Source(username, model_id, raw_land_cd)
    select @PCID, model_id, raw_land_cd
    from hb_model 
End    

exec sp_hb_getElevationModel_BADC @PCID, -1, -1, 'N'
print 'made it'

--Add Model Estimate
insert #Worksheet(Raw_Land_CD, MODEL_NAME_ID, Model_ID, 
 Holding, Model, Elevation, [Plan], [BaseModel?], BaseModel_ID, Cost_Revenue, 
 Cost_Revenue_Type, CostSubType, CostsDescription, Major, Minor, Amount)
select isnull(r.RAW_LAND_CD,-1), isnull(m.MODEL_NAME_ID, -1), isnull(m.MODEL_ID,-1), 
 isnull(RAW_LAND_DESC,'Master Level'), MODEL_NAME, ELEVATION, PLAN_NUM, BASE_MODEL, null, 'C', 
case when [Type] = 'H' then 'Hard Cost' when [Type] = 'S' then 'Soft Cost' when [Type] = 'L' then 'Lot Cost' else 'N/A' end,
COST_DESC, ltrim(rtrim(isnull(e.phs_code,''))) + 
 case when ltrim(rtrim(isnull(e.subp_code,''))) <> '' then ' - ' + ltrim(rtrim(isnull(e.subp_code,''))) else '' end,
ltrim(rtrim(isnull(e.phs_code,''))), ltrim(rtrim(isnull(e.subp_code,''))), isnull(INTERNAL_EST,0)
from working_hb_ElevationModel_SP_Source mr
left outer join working_hb_ElevationModel_BADC e
on mr.Model_id = e.Model_id
and mr.Raw_LAnd_CD = e.Raw_LAnd_CD
and e.username = mr.username
left outer join HB_MAJMIN_COST_TYPE mct
on e.phs_code = mct.phs_code
and e.subp_code = mct.subp_code
left outer join HB_COST_TYPE ct
on mct.COST_TYPE = ct.COST_TYPE
left outer join HB_raw_land r
on r.Raw_LAnd_CD = e.Raw_LAnd_CD
left outer join HB_Model m
on m.Model_id = e.Model_id
and M.Raw_LAnd_CD = e.Raw_LAnd_CD
left outer join HB_MODEL_NAME mn
on mn.MODEL_NAME_ID = m.MODEL_NAME_ID
where mr.username = @Pcid

delete working_hb_ElevationModel_BADC
where username = @Pcid

exec('
update #Worksheet
set CostsDescription = CostsDescription + '' '' + case when isnull(Minor,'''') = '''' then (select phs_desc from ' + @HR + '..phase where phs_code = Major)
else (select subp_desc from ' + @HR + '..Subphase where subp_code = Minor) end
')

--Add options
insert #Worksheet(Raw_Land_CD, MODEL_NAME_ID, Model_ID, 
 Holding, Model, Elevation, [Plan], [BaseModel?], BaseModel_ID, Cost_Revenue, 
 Cost_Revenue_Type, CostSubType, CostsDescription, Major, Minor, Amount)
select isnull(r.RAW_LAND_CD,-1), isnull(m.MODEL_NAME_ID, -1), isnull(m.MODEL_ID,-1), 
 isnull(RAW_LAND_DESC,'Master Level'), MODEL_NAME, ELEVATION, PLAN_NUM, BASE_MODEL, null, 'C', 
 'Attached Option', 'N/A', isNull(SHORT_DESC,'N/A'), 'N/A', 'N/A', isnull(eo.COST_SUPL,0)
from working_hb_ElevationModel_SP_Source mr
left outer join hb_elv_opt eo
on mr.Model_id = eo.Model_id
and mr.Raw_Land_CD = eo.Raw_Land_CD
left outer join HB_raw_land r
on r.Raw_LAnd_CD = mr.Raw_LAnd_CD
left outer join HB_Model m
on m.Model_id = mr.Model_id
and M.Raw_LAnd_CD = mr.Raw_LAnd_CD
left outer join HB_MODEL_NAME mn
on mn.MODEL_NAME_ID = m.MODEL_NAME_ID
left outer join hb_options o
on o.Option_ID = eo.Option_ID
where username = @Pcid
and ATTACHED_YN = 'Y'
and PRC_EXTRA_YN = 'N'

--Add Revenue
--TODO: limit by max and expiry Date
insert #Worksheet(Raw_Land_CD, MODEL_NAME_ID, Model_ID, 
 Holding, Model, Elevation, [Plan], [BaseModel?], BaseModel_ID, Cost_Revenue, 
 Cost_Revenue_Type, CostSubType, CostsDescription, Major, Minor, Amount)
select isnull(r.RAW_LAND_CD,-1), isnull(m.MODEL_NAME_ID, -1), isnull(m.MODEL_ID,-1), 
 isnull(RAW_LAND_DESC,'Master Level'), MODEL_NAME, ELEVATION, PLAN_NUM, BASE_MODEL, null, 'R', 
 'Selling Price', 'N/A', 'N/A', 'N/A', 'N/A', 0--isnull(mph.Price,0)
from working_hb_ElevationModel_SP_Source mr
--left outer join HB_ModelPriceHistory mph
--on mr.Model_id = mph.Model_id
--and mr.Raw_Land_CD = mph.Raw_Land_CD
left outer join HB_raw_land r
on r.Raw_LAnd_CD = mr.Raw_LAnd_CD
left outer join HB_Model m
on m.Model_id = mr.Model_id
and M.Raw_LAnd_CD = mr.Raw_LAnd_CD
left outer join HB_MODEL_NAME mn
on mn.MODEL_NAME_ID = m.MODEL_NAME_ID
where username = @Pcid

update #Worksheet
set Amount = IsNull((Select Top 1 Price From HB_ModelPriceHistory mp Where mp.ExpieryDate < @AsAtDate
  and mp.Model_ID = #Worksheet.Model_ID and mp.Raw_Land_CD = #Worksheet.Raw_Land_CD order by mp.ExpieryDate desc),0)
where Cost_Revenue = 'R'



select * from #Worksheet



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_supplier]') and xtype = 'P ')  
 drop Procedure sp_hb_supplier
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--exec sp_hb_supplier '2f0c696b-0c2f-433f-8666-e772a8914aae'  
CREATE PROCEDURE sp_hb_supplier  @USERNAME varchar(500)    
 AS    
--declare @username varchar(500)    
--select @username = 'hm'    
declare @sql_str varchar(4096)    
    
declare @rep_type char(1),
 @supplier_reference integer,
 @AUTOID integer,
 @TR_DB varchar(50),
 @COMPANYNAME varchar(255)

select @AUTOID=autoid from hb_report_options where pcid=@USERNAME
select @TR_DB=TreasuryDBName from companies where autoid=@AUTOID
select @COMPANYNAME=Company_Name from companies where autoid=@AUTOID


select @supplier_reference=supplier_reference from hb_report_options where pcid=@USERNAME    
--update hb_report_options set supplier_reference=0 where pcid='2f0c696b-0c2f-433f-8666-e772a8914aae'
if @supplier_reference=0 -- Holding    
 set @rep_type='H' else    
if @supplier_reference=1 -- Communtiy    
 set @rep_type='C' else    
if @supplier_reference=2 -- Phase    
 set @rep_type='P'    

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempHoldings'))    
  drop table #TempHoldings    
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempCommunity'))    
  drop table #TempCommunity    
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempPhase'))    
  drop table #TempPhase    
    
if exists (select * from working_holding where pcid=@USERNAME)    
begin    
  set @sql_str='select rl.* into #TempHoldings from hb_raw_land rl, working_holding wrl    
  where wrl.pcid='''+@USERNAME+'''    
  and rl.raw_land_cd = wrl.raw_land_cd'    
end    
else    
begin    
  set @sql_str='select rl.* into #TempHoldings from hb_raw_land rl'    
end    
    
if exists (select * from working_community where pcid=@USERNAME)    
begin    
  set @sql_str=@sql_str+'    
select c.* into #TempCommunity from hb_communities c, working_community wc    
  where wc.pcid='''+@USERNAME+'''    
  and c.community_cd = wc.community_cd'    
end    
else    
begin    
  set @sql_str=@sql_str+'    
select c.* into #TempCommunity from hb_communities c'    
end    
  
if exists (select * from working_project where pcid=@USERNAME)    
begin    
  set @sql_str=@sql_str+'    
select p.* into #TempPhase from hb_project p, working_project wp    
  where wp.pcid='''+@USERNAME+'''    
  and p.project_cd = wp.project_cd'    
end    
else    
begin    
  set @sql_str=@sql_str+'    
select p.* into #TempPhase from hb_project p'    
end    
    
set @sql_str=@sql_str+'    
select ro.*, rl.*, tc.*, tp.*, hcp.*, t.*, s.*, '''+@COMPANYNAME+''' [COMPANY_NAME] from hb_report_options ro, #TempHoldings rl, #TempCommunity tc, #TempPhase tp,     
   '+@TR_DB+'..hb_hcp_suppliers hcp, hb_trades t, '+@TR_DB+'..supplier_master s    
where ro.pcid='''+@USERNAME+'''    
and rl.raw_land_cd=hcp.tsup_hcp_id    
and hcp.tsup_hcp_type='''+@rep_type+'''    
and hcp.tsup_tm_type=''T''    
and hcp.tsup_tm_id=t.trade_id    
and hcp.supplier=s.supplier    
and rl.raw_land_cd=tc.raw_land_cd    
and rl.raw_land_cd=tp.raw_land_cd    
and tc.community_cd=tp.community_cd'    
    
--print @sql_str    
exec(@sql_str)    
  
--select * from hb_raw_land    
--select * from hb_project    
--select * from hb_communities    
--select * from hb_hcp_suppliers    
--select * from hb_trades    
--select * from hb_material    
    
    
    
    
    
    
    
    
    
  



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_suppref]') and xtype = 'P ')  
 drop Procedure sp_hb_suppref
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go












--exec sp_hb_suppref 'hm','tr_test'
CREATE    PROCEDURE sp_hb_suppref 
@USERNAME varchar(10),
@TR_DB varchar(50) AS
--declare @username varchar(10)
--select @username = 'hm'
declare @sql_str varchar(4096)
declare @ranking integer
declare @reference integer

select @ranking=trade_preference from hb_report_options where username=@USERNAME
select @reference=supplier_reference from hb_report_options where username=@USERNAME  


---
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#count'))
  drop table #count
create table #count(
 countsupp  int null
)

declare @count int, @sqlStr   varchar(1000)

--DECLARE @TR_DB  VARCHAR(50),@USERNAME  varchar(50)

--select @tr_db= 'TR_test', @USERNAME = 'hm'


select @sqlStr = ' select count(*) from ' + @TR_DB+ '..hb_working_supplier  where username= '
                + ''''+@USERNAME+''''

--print @sqlstr
insert #count
exec (@sqlstr)




select @count = countsupp from #count

--select @count '@count'

--

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#TempSupplier'))
  drop table #TempSupplier

if @ranking=0
begin
  if isnull(@count,0) > 0  --exists (select * from hb_working_supplier where username=@USERNAME)
  begin
    set @sql_str='select s.* into #TempSupplier from ' + @TR_DB +'..supplier_master s, ' +
              @TR_DB+ '..hb_working_supplier ws
    where ws.username='''+@USERNAME+'''
    and s.supplier = ws.supplier'
  end
  else
  begin
    set @sql_str='select s.* into #TempSupplier from ' + @TR_DB+ '..supplier_master s'
  end
end
else
begin
  if  isnull(@count,0) > 0  -- exists (select * from hb_working_supplier where username=@USERNAME)
  begin
    set @sql_str='select s.* into #TempSupplier from ' + @TR_DB+ '..supplier_master s, ' +
              @TR_DB +'..hb_working_supplier ws
    where ws.username='''+@USERNAME+'''
    and s.supplier = ws.supplier
    and s.ranking ='+cast(@ranking as char)
  end
  else
  begin
    set @sql_str='select s.* into #TempSupplier from ' + @TR_DB +'..supplier_master s
    where s.ranking ='+cast(@ranking as char)
  end
end

set @sql_str=@sql_str+'
select ro.*, s.* from hb_report_options ro, #TempSupplier s
where ro.USERNAME='''+@USERNAME+'''
order by s.supplier'

exec(@sql_str)













Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_update_mat_method_amount]') and xtype = 'P ')  
 drop Procedure sp_hb_update_mat_method_amount
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_hb_update_mat_method_amount]
@username varchar(350),
@AsAtDate datetime,
@company_id int
as
begin
	update working_hb_material_selected set update_amt=
	case when option_id = -1 then
	dbo.fn_hb_calc_update_mat_amt( model_id, raw_land_cd, item, @AsAtDate, update_method, @username )  else
	dbo.fn_hb_calc_update_opt_amt( model_id, raw_land_cd, option_id, @AsAtDate, update_method, item, 'M', @username) end,

	supplier_id=
	case when option_id = -1 then
		case when update_method in (select id from hb_rfq_update_method  where description not in ('Manual', 'By Ranking Average Alternate', 'By Average Price'))
		then dbo.fn_hb_calc_update_mat_vendor(model_id, raw_land_cd, item, @AsAtDate, update_method, @username)
		else null end  
	else
		case when update_method in (select id from hb_rfq_update_method  where description not in ('Manual', 'By Ranking Average Alternate', 'By Average Price'))
		then dbo.fn_hb_calc_update_opt_vendor(model_id, raw_land_cd, option_id, @AsAtDate, update_method, item, 'M', @username)
		else null end 
	end
	where username=@username and selected='Y' and update_method not in (select id from hb_rfq_update_method where description = 'Manual' or description = 'Cherry Pick')

	update working_hb_material_selected set change_pct = case when estimate = 0 then update_amt else (cast(update_amt as float) / cast(estimate as float) * cast(100 as float)) - cast(100 as float) end, selected='N' where username=@username

end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_update_method_finish]') and xtype = 'P ')  
 drop Procedure sp_hb_update_method_finish
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
-- exec sp_hb_update_method_finish 'ken', -1
CREATE proc [dbo].[sp_hb_update_method_finish]
@username varchar(350),
@option_id_raw_land_cd int
as
begin
	declare
	@model_id int,
	@raw_land_cd int,
	@trade_id int,
	@material_id int,
	@minor_cd varchar(5),
	@major_cd varchar(5),
	@update_amt money,
	@ETRD_ID int,
	@EMAT_ID int,
	@phs_code varchar(5), 
	@subp_code varchar(5),
	@manual_yn_trd varchar(1), 
	@manual_yn_mat varchar(1), 
	@trade_est money, 
	@mat_est money,
	@calc_trd money,
	@calc_mat money,
	@option_id int,
	@use_retail_markup bit, 
	@sales_prc_rnd int,
	@round int

select @use_retail_markup=useretailmarkup, @sales_prc_rnd=salesprcrnd from system_ctrl

if @sales_prc_rnd = 0
	set @round = 2
else if @sales_prc_rnd = 1
	set @round = 0
else if @sales_prc_rnd = 10
	set @round = -1
else if @sales_prc_rnd = 100
	set @round = -2


if( @option_id_raw_land_cd = -1 )
begin

--====================================TRADE=============================================
	declare cur_trd cursor for
	select model_id, raw_land_cd, item, major_cd, minor_cd, update_amt 
	from working_hb_trade_selected where username=@username and update_method <> -1 and update_amt > 0 and option_id=-1

	open cur_trd
	fetch cur_trd into @model_id, @raw_land_cd, @trade_id, @major_cd, @minor_cd, @update_amt
	
	while @@fetch_status=0
	begin
		-------------------------back up record------------------------
		select @ETRD_ID=etrd_id from hb_est_trd 
		where model_id=@model_id and raw_land_cd=@raw_land_cd and trade_id=@trade_id and phs_code=@major_cd and subp_code=@minor_cd and option_id = -1
		
		insert into hb_est_trd_history	
		select @username, ETRD_ID, OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, BADC, SUPPLIER, EST_COST, EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, 
		Raw_Land_CD, UOM, EstimateLevel, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, HB_OrderPoint_ID, getdate()
		from hb_est_trd where etrd_id=@ETRD_ID
		---------------------------------------------------------------

		update hb_est_trd set est_cost=@update_amt 
		where model_id=@model_id and raw_land_cd=@raw_land_cd and trade_id=@trade_id and phs_code=@major_cd and subp_code=@minor_cd and option_id = -1

		fetch cur_trd into @model_id, @raw_land_cd, @trade_id, @major_cd, @minor_cd, @update_amt
	end
	close cur_trd
	deallocate cur_trd
--====================================MATERIAL=============================================
	declare cur_mat cursor for
	select model_id, raw_land_cd, item, update_amt 
	from working_hb_material_selected where username=@username and update_method <> -1 and update_amt > 0 and option_id=-1

	open cur_mat
	fetch cur_mat into @model_id, @raw_land_cd, @material_id, @update_amt
	
	while @@fetch_status=0
	begin		
		-------------------------back up record------------------------
		select @EMAT_ID=emat_id from hb_est_mat 
		where model_id=@model_id and raw_land_cd=@raw_land_cd and material_id=@material_id and option_id = -1
		
		insert into hb_est_mat_history	
		select @username, EMAT_ID, OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, MATERIAL_ID, BADC, qty, EST_COST, Raw_Land_CD, HB_Package_ID, 
		HB_OrderPoint_ID, EstimateLevel, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, getdate()
		from hb_est_mat where emat_id=@EMAT_ID
		---------------------------------------------------------------
	
		update hb_est_mat set est_cost=@update_amt 
		where model_id=@model_id and raw_land_cd=@raw_land_cd and material_id=@material_id and option_id = -1

		fetch cur_mat into @model_id, @raw_land_cd, @material_id, @update_amt
	end
	close cur_mat
	deallocate cur_mat
--====================================HB_EST=============================================

	declare cur_est cursor for
	select phs_code, subp_code, manual_yn_trd, manual_yn_mat, trade_est, mat_est, model_id, raw_land_cd
	from hb_est 
	where raw_land_cd in (select distinct raw_land_cd from working_hb_rfq_update where username=@username )  
	and option_id = -1 and model_id in ( select model_id from working_hb_rfq_update where username=@username )
	

	open cur_est
	fetch cur_est into @phs_code, @subp_code, @manual_yn_trd, @manual_yn_mat, @trade_est, @mat_est, @model_id, @raw_land_cd
	
	while @@fetch_status=0
	begin
		set @calc_trd = 0
		set @calc_mat = 0
		
		-------------------------back up record------------------------
		insert into hb_est_history	
		select @username, OPTION_ID, MODEL_ID, phs_code, subp_code, BADC, INTERNAL_EST, EXTERNAL_EST, FINAL_EST, HOURS, SEND_RFQ, MAT_EST, 
		TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, Raw_Land_CD, MAT_RFQ, TRADE_RFQ, EstimateLevel, getdate()
		from hb_est
		where raw_land_cd=@raw_land_cd and option_id = -1 and model_id=@model_id and phs_code=@phs_code and subp_code=@subp_code
		---------------------------------------------------------------
		
		if @manual_yn_trd = 'N'
		begin
			select @calc_trd=sum(isnull(est_cost,0)*est_hours) from hb_est_trd 
			where raw_land_cd=@raw_land_cd and option_id = -1 and model_id=@model_id and phs_code=@phs_code and subp_code=@subp_code
		end
		else
		begin
			set @calc_trd = @trade_est
		end

		if @manual_yn_mat = 'N'
		begin
			select @calc_mat=sum(isnull(m.est_cost,0)*qty) from hb_est_mat m
			join hb_est_trd t on t.trade_id = m.trade_id and m.raw_land_cd=t.raw_land_cd and m.model_id=t.model_id 
			where m.raw_land_cd=@raw_land_cd and m.option_id = -1 and t.option_id = -1 and m.model_id=@model_id 
			and m.phs_code=@phs_code and m.subp_code=@subp_code and t.est_sib = 'I'
		end
		else
		begin
			set @calc_mat = @mat_est
		end

	
		update hb_est set internal_est=isnull(@calc_mat,0)+isnull(@calc_trd,0)
		where raw_land_cd=@raw_land_cd and option_id = -1 and model_id=@model_id and phs_code=@phs_code and subp_code=@subp_code

		fetch cur_est into @phs_code, @subp_code, @manual_yn_trd, @manual_yn_mat, @trade_est, @mat_est, @model_id, @raw_land_cd
	end
	close cur_est
	deallocate cur_est
end
--====================================OPTIONS-TRADE=============================================
	declare cur_trd cursor for
	select model_id, raw_land_cd, item, major_cd, minor_cd, update_amt, option_id 
	from working_hb_trade_selected where username=@username and update_method <> -1 and update_amt > 0 and option_id <> -1

	open cur_trd
	fetch cur_trd into @model_id, @raw_land_cd, @trade_id, @major_cd, @minor_cd, @update_amt, @option_id
	
	while @@fetch_status=0
	begin
		-------------------------back up record------------------------
		select @ETRD_ID=etrd_id from hb_est_trd 
		where model_id=@model_id and raw_land_cd=@raw_land_cd and trade_id=@trade_id and phs_code=@major_cd and subp_code=@minor_cd and option_id = @option_id and EstimateLevel in ('E', 'H')
		
		insert into hb_est_trd_history	
		select @username, ETRD_ID, OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, BADC, SUPPLIER, EST_COST, EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, 
		Raw_Land_CD, UOM, EstimateLevel, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, HB_OrderPoint_ID, getdate()
		from hb_est_trd where etrd_id=@ETRD_ID
		---------------------------------------------------------------

		update hb_est_trd set est_cost=@update_amt 
		where model_id=@model_id and raw_land_cd=@raw_land_cd and trade_id=@trade_id and phs_code=@major_cd and subp_code=@minor_cd and option_id = @option_id
        and EstimateLevel in ('E', 'H')

		fetch cur_trd into @model_id, @raw_land_cd, @trade_id, @major_cd, @minor_cd, @update_amt, @option_id
	end
	close cur_trd
	deallocate cur_trd
--====================================OPTIONS-MATERIAL=============================================
	declare cur_mat cursor for
	select model_id, raw_land_cd, item, update_amt, option_id
	from working_hb_material_selected where username=@username and update_method <> -1 and update_amt > 0 and option_id <> -1

	open cur_mat
	fetch cur_mat into @model_id, @raw_land_cd, @material_id, @update_amt, @option_id
	
	while @@fetch_status=0
	begin		
		-------------------------back up record------------------------
		select @EMAT_ID=emat_id from hb_est_mat 
		where model_id=@model_id and raw_land_cd=@raw_land_cd and material_id=@material_id and option_id = @option_id and EstimateLevel in ('E', 'H')
		
		insert into hb_est_mat_history	
		select @username, EMAT_ID, OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, MATERIAL_ID, BADC, qty, EST_COST, Raw_Land_CD, HB_Package_ID, 
		HB_OrderPoint_ID, EstimateLevel, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, getdate()
		from hb_est_mat where emat_id=@EMAT_ID
		---------------------------------------------------------------
	
		update hb_est_mat set est_cost=@update_amt 
		where model_id=@model_id and raw_land_cd=@raw_land_cd and material_id=@material_id and option_id = @option_id
        and EstimateLevel in ('E', 'H')

		fetch cur_mat into @model_id, @raw_land_cd, @material_id, @update_amt, @option_id
	end
	close cur_mat
	deallocate cur_mat
--====================================OPTIONS-HB_EST=============================================
 

	declare cur_est cursor for
	select phs_code, subp_code, manual_yn_trd, manual_yn_mat, trade_est, mat_est, e.model_id, e.raw_land_cd, option_id
    from hb_est  e
    join working_hb_rfq_update u 
    on e.model_id = case when @option_id_raw_land_cd <> -1 then -1 else u.model_id end
    and e.raw_land_cd = case when  @option_id_raw_land_cd <> -1 then @option_id_raw_land_cd else  u.raw_land_cd end    
    where isnull(username,@username)=@username
	and option_id <> -1 
    and e.EstimateLevel in ('E', 'H')
--	
--	where raw_land_cd in (case when @option_id_raw_land_cd <> -1 then @option_id_raw_land_cd else (select distinct raw_land_cd from working_hb_rfq_update where username=@username ) end )
--	and option_id <> -1 and model_id in (case when @option_id_raw_land_cd <> -1 then -1 else  (select model_id from working_hb_rfq_update where username = @username ) end )
--		

	open cur_est
	fetch cur_est into @phs_code, @subp_code, @manual_yn_trd, @manual_yn_mat, @trade_est, @mat_est, @model_id, @raw_land_cd, @option_id
	
	while @@fetch_status=0
	begin
		set @calc_trd = 0
		set @calc_mat = 0
		
		-------------------------back up record------------------------
		insert into hb_est_history	
		select @username, OPTION_ID, MODEL_ID, phs_code, subp_code, BADC, INTERNAL_EST, EXTERNAL_EST, FINAL_EST, HOURS, SEND_RFQ, MAT_EST, 
		TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, Raw_Land_CD, MAT_RFQ, TRADE_RFQ, EstimateLevel, getdate()
		from hb_est
		where raw_land_cd=@raw_land_cd and option_id = @option_id and model_id=@model_id and phs_code=@phs_code and subp_code=@subp_code and EstimateLevel in ('E', 'H')
		---------------------------------------------------------------
		
		if @manual_yn_trd = 'N'
		begin
			select @calc_trd=sum(isnull(est_cost,0)*est_hours) from hb_est_trd 
			where raw_land_cd=@raw_land_cd and option_id = @option_id and model_id=@model_id and phs_code=@phs_code and subp_code=@subp_code and EstimateLevel in ('E', 'H')
		end
		else
		begin
			set @calc_trd = @trade_est
		end

		if @manual_yn_mat = 'N'
		begin
			select @calc_mat=sum(isnull(m.est_cost,0)*qty) from hb_est_mat m
			join hb_est_trd t on t.trade_id = m.trade_id and m.raw_land_cd=t.raw_land_cd and m.model_id=t.model_id 
			where m.raw_land_cd=@raw_land_cd and m.option_id = @option_id and t.option_id = @option_id and m.model_id=@model_id 
			and m.phs_code=@phs_code and m.subp_code=@subp_code and t.est_sib = 'I' and m.EstimateLevel in ('E', 'H')
		end
		else
		begin
			set @calc_mat = @mat_est
		end
		
	
		update hb_est set internal_est=isnull(@calc_mat,0)+isnull(@calc_trd,0)
		where raw_land_cd=@raw_land_cd and option_id = @option_id and model_id=@model_id and phs_code=@phs_code and subp_code=@subp_code and EstimateLevel in ('E', 'H')

		fetch cur_est into @phs_code, @subp_code, @manual_yn_trd, @manual_yn_mat, @trade_est, @mat_est, @model_id, @raw_land_cd, @option_id
	end
	close cur_est
	deallocate cur_est
--====================================OPTIONS-HB_OPTIONS=============================================
--====================================STRUCTURAL='Y'=================================================
	declare cur_opt_elv cursor for
	select o.option_id, model_id
	from hb_options o
	join hb_elv_opt e on o.option_id = e.option_id
	where o.is_structural = 'Y' and o.option_id <> -1 and e.raw_land_cd = @raw_land_cd
 
	open cur_opt_elv
	fetch cur_opt_elv into @option_id, @model_id
	
	while @@fetch_status=0
	begin
		-----------------------------backup record in hb_elv_opt----------------------
		insert into HB_ELV_OPT_HISTORY
		select @username, MODEL_ID, OPTION_ID, PRC_FM, PRC_MARKUP_PCT, PRC_FIXED, PRC_SELL, COST_SUPL, COST_INT, ALLOWANCE, ATTACHED_YN, QTY, PRC_EXTRA_YN, 
		id, Raw_Land_CD, ParentID, HB_Package_ID, HB_OrderPoint_ID, Parent_Model_Name_ID, Parent_Model_ID, ConfirmationDeadlineDays, HB_ConfirmationPoint_ID, 
		HB_ScheduleDeliveryPoint_ID, OveridePrice, Opt_only_cost, getdate()
		from hb_elv_opt
		where raw_land_cd=@raw_land_cd and option_id = @option_id
		------------------------------------------------------------------------------
		update hb_elv_opt set opt_only_cost = (select isnull(option_only_update_amt,0) from working_hb_option_selected 
		 where username=@username and option_id=@option_id and model_id=@model_id) 
        where option_id=@option_id and raw_land_cd=@raw_land_cd and model_id=@model_id

--select isnull(option_only_est,0) from working_hb_option_selected 
--		 where username=@username and option_id=@option_id and model_id=@model_id
--
--        select * from hb_elv_opt  where option_id=@option_id and raw_land_cd=@raw_land_cd and model_id=@model_id

		update hb_elv_opt set cost_supl=isnull(opt_only_cost,0)+isnull((select sum(isnull(internal_est,0)) from hb_est where raw_land_cd=@raw_land_cd 
        and estimatelevel = 'E' and option_id=@option_id and model_id=@model_id),0 )
		where option_id=@option_id and raw_land_cd=@raw_land_cd and model_id=@model_id

		if @use_retail_markup = 0
		begin
			update hb_elv_opt set prc_sell=round(
				case when prc_fm = 'M' then cost_supl*((prc_markup_pct*.01)+1)
				else prc_fixed end, @round )
				where option_id=@option_id and raw_land_cd=@raw_land_cd	and model_id=@model_id	
		end
		else
		begin
			update hb_elv_opt set prc_sell=round(
			case when prc_fm = 'M' then cost_supl / ((100-prc_markup_pct) / 100)
			else prc_fixed end, @round )
			where option_id=@option_id and raw_land_cd=@raw_land_cd	and model_id=@model_id
		end

		fetch cur_opt_elv into @option_id, @model_id
	end
	close cur_opt_elv
	deallocate cur_opt_elv
--====================================STRUCTURAL='N'=================================================
    select @raw_land_cd = @option_id_raw_land_cd
	declare cur_opt_raw cursor for
	select o.option_id
	from hb_options o
	join hb_raw_opt r on o.option_id = r.option_id
	where o.is_structural = 'N' and r.option_id <> -1 and r.raw_land_cd = @raw_land_cd

	open cur_opt_raw
	fetch cur_opt_raw into @option_id
	
	while @@fetch_status=0
	begin
		-----------------------------backup record in hb_raw_opt----------------------
		insert into HB_RAW_OPT_HISTORY
		select @username, RAW_LAND_CD, OPTION_ID, ALLOWANCE, PRC_FM, PRC_MARKUP_PCT, PRC_FIXED, PRC_SELL, COST_SUPL, COST_INT, HB_OrderPoint_ID, 
		HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, OveridePrice, Opt_only_cost, getdate()
		from hb_raw_opt
		where raw_land_cd=@raw_land_cd and option_id = @option_id
		------------------------------------------------------------------------------
		update hb_raw_opt set opt_only_cost = (select isnull(option_only_update_amt,0) from working_hb_option_selected 
        where username=@username and option_id=@option_id and model_id = -1) 
        where raw_land_cd=@raw_land_cd and option_id = @option_id 

		update hb_raw_opt set cost_supl=isnull(opt_only_cost,0)+isnull((select sum(isnull(internal_est,0)) from hb_est where model_id = -1 and raw_land_cd=@raw_land_cd and option_id=@option_id),0 )
		where option_id=@option_id and raw_land_cd=@raw_land_cd 

		if @use_retail_markup = 0
		begin
			update hb_raw_opt set prc_sell=round(
			case when prc_fm = 'M' then cost_supl*((prc_markup_pct*.01)+1)
			else prc_fixed end, @round )
			where option_id=@option_id and raw_land_cd=@raw_land_cd 
		end
		else
		begin
			update hb_raw_opt set prc_sell=round(
			case when prc_fm = 'M' then cost_supl / ((100-prc_markup_pct) / 100)
			else prc_fixed end, @round )
			where option_id=@option_id and raw_land_cd=@raw_land_cd 
		end

        --update all models / elv that have a stake in this new supply cost    
        declare @SupCostToUpdate money, @OptionOnlyCost money
        select @SupCostToUpdate = cost_supl, @OptionOnlyCost = Opt_only_cost
        from hb_Raw_Opt
		where option_id=@option_id and raw_land_cd=@raw_land_cd 

        exec sp_HBUpdateOptionSupplyCost @Option_ID, @Raw_Land_CD, @SupCostToUpdate, @OptionOnlyCost

		fetch cur_opt_raw into @option_id
	end
	close cur_opt_raw
	deallocate cur_opt_raw

end
select * from hb_Raw_Opt


select * from hb_est where raw_land_cd =50006




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_update_option_method_amount]') and xtype = 'P ')  
 drop Procedure sp_hb_update_option_method_amount
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_hb_update_option_method_amount]
@username varchar(350),
@AsAtDate datetime
as	
begin
	update working_hb_option_selected set option_only_update_amt=
	dbo.fn_hb_calc_update_opt_amt( model_id, raw_land_cd, option_id, @AsAtDate, update_method, -1, 'O', @username ),
	supplier_id=dbo.fn_hb_calc_update_opt_vendor( model_id, raw_land_cd, option_id, @AsAtDate, update_method, -1, 'O', @username )	
	where username=@username and selected='Y' and update_method not in (select id from hb_rfq_update_method where description = 'Manual' or description = 'Cherry Pick')

	update working_hb_option_selected set change_pct = 
		case when ( ( cast(isnull(total_update_amt,0) as float) / cast( (case when isnull(total_est,0) = 0 then (case when isnull(total_update_amt,0) = 0 then 1 else total_update_amt end) else total_est end) as float) * cast(100 as float)) - cast(100 as float)	) = -100 
		then 0 
		else ( cast(isnull(total_update_amt,0) as float) / cast( (case when isnull(total_est,0) = 0 then (case when isnull(total_update_amt,0) = 0 then 1 else total_update_amt end) else total_est end) as float) * cast(100 as float)) - cast(100 as float)	end,
		selected='N' where username=@username

end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_hb_update_trd_method_amount]') and xtype = 'P ')  
 drop Procedure sp_hb_update_trd_method_amount
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_hb_update_trd_method_amount]
@username varchar(350),
@AsAtDate datetime,
@company_id int
as
begin
	update working_hb_trade_selected set update_amt=
	case when option_id = -1 then
		dbo.fn_hb_calc_update_trd_amt( model_id, raw_land_cd, item, @AsAtDate, update_method, @username ) 	  
	else
		dbo.fn_hb_calc_update_opt_amt( model_id, raw_land_cd, option_id, @AsAtDate, update_method, item, 'T', @username) 
	end,
	supplier_id=
	case when option_id = -1 then
		case when update_method in (select id from hb_rfq_update_method  where description not in ('Manual', 'By Ranking Average Alternate', 'By Average Price'))
		then dbo.fn_hb_calc_update_trd_vendor(model_id, raw_land_cd, item, @AsAtDate, update_method, @username)
		else null end  
	else
		case when update_method in (select id from hb_rfq_update_method  where description not in ('Manual', 'By Ranking Average Alternate', 'By Average Price'))
		then dbo.fn_hb_calc_update_opt_vendor(model_id, raw_land_cd, option_id, @AsAtDate, update_method, item, 'T', @username)
		else null end 
	end
	where username=@username and selected='Y' and update_method not in (select id from hb_rfq_update_method where description = 'Manual' or description = 'Cherry Pick')

	update working_hb_trade_selected set change_pct = case when estimate = 0 then update_amt else (cast(update_amt as float) / cast(estimate as float) * cast(100 as float)) - cast(100 as float) end, selected='N' where username=@username

end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HB_UpdateOptionsFromAssistant]') and xtype = 'P ')  
 drop Procedure sp_HB_UpdateOptionsFromAssistant
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_HB_UpdateOptionsFromAssistant]
 @Option_id int,
 @Price bit,
 @Allowance bit,
 @SchedulePoints bit,
 @Attributes bit,
 @Level varchar(10), --All, SelH, SelC, SelP, Master
 @UpdateModelOptions bit,
 @RLH int,
 @Community int,
 @Project int
as

--declare
-- @Option_id int,
-- @Price bit,
-- @Allowance bit,
-- @SchedulePoints bit,
-- @Attributes bit,
-- @Level varchar(10), --All, SelH, SelC, SelP, Master
-- @UpdateModelOptions bit,
-- @RLH int,
-- @Community int,
-- @Project int
--
--select 
-- @Option_ID = 47,
-- @Price = 1,
-- @Allowance = 1,
-- @SchedulePoints = 1,
-- @Attributes = 1,
-- @Level = 'All', --All, SelH, SelC, SelP, Master
-- @UpdateModelOptions = 1,
-- @RLH = -1,
-- @Community = -1,
-- @Project = -1


declare @MarkupN money, @FixedN money, @AllowanceN money, @PRC_FM varchar(1), 
@OrderPoint int, @ConfirmPoint int, @SchedualPoint int, @ConfirmDays int, 
@RetailMarkup bit, @RoundBy int

select @RetailMarkup = UseRetailMarkup, @RoundBy = SalesPrcRnd 
from system_ctrl

if @RoundBy = 0 
 select @RoundBy = 4
else if @RoundBy = 1
 select @RoundBy = 0
else if @RoundBy = 10
 select @RoundBy = -1
else if @RoundBy = 100
 select @RoundBy = -2

--possibly update - hb_elv_opt, hb_mod_opt, hb_raw_opt, hb_comm_opt and hb_proj_opt
select @MarkupN = PRC_MARKUP_PCT, @FixedN = PRC_FIXED, @AllowanceN = ALLOWANCE, @PRC_FM = PRC_FM, 
@OrderPoint = HB_OrderPoint_ID, @ConfirmPoint = HB_ConfirmationPoint_ID, @SchedualPoint = HB_ScheduleDeliveryPoint_ID, 
@ConfirmDays = ConfirmationDeadlineDays
from hb_options
where option_id = @Option_ID

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#rlh'))
drop table #rlh
create Table #rlh(Raw_Land_Cd int)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#comm'))
drop table #comm
create Table #comm(COMMUNITY_CD int, Raw_Land_Cd int)
 
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#project'))
drop table #project
create Table #project(Project_Cd int, COMMUNITY_CD int, Raw_Land_Cd int) 

if @Level <> 'Master'
begin
 -- update rlh, comm & phase
 if @RLH = -1
  insert #rlh
  select Raw_Land_Cd from hb_raw_land
 else
  insert #rlh
  select @rlh

 if @Community = -1
  insert #comm
  select COMMUNITY_CD, Raw_Land_Cd from hb_communities where raw_land_cd in (select raw_land_cd from #rlh)
 else
  insert #comm
  select @Community, @RLH
 
 if @Project = -1
  insert #project
  select Project_Cd, Community_CD, Raw_LAnd_CD from hb_project where 
   raw_land_cd in (select raw_land_cd from #comm)
   and Community_CD in (select COMMUNITY_CD from #comm)
 else
  insert #project
  select @Project, @Community, @RLH

 update hb_raw_opt 
 set ALLOWANCE = case when @Allowance = 1 then @AllowanceN else ALLOWANCE end,
 PRC_FM = case when @Price = 1 then @PRC_FM else PRC_FM end,
 PRC_MARKUP_PCT = case when @Price = 1 then @MarkupN else PRC_MARKUP_PCT end,
 PRC_FIXED = case when @Price = 1 then @FixedN else PRC_FIXED end,
 PRC_SELL = case when isnull(OveridePrice,0) = 0 then Round(case when @Price = 1 then 
  case when @PRC_FM = 'F' then isNull(@FixedN,0) else 
   case when @RetailMarkup = 1 then isnull(COST_SUPL,0) / ((100-isNUll(@MarkupN,0))/100)
   else isNUll(@MarkupN+100,0)/100 * isnull(COST_SUPL,0) end
  end
  else 
   PRC_SELL 
  end,@RoundBy) else PRC_SELL end,
 HB_OrderPoint_ID = case when @SchedulePoints = 1 then @OrderPoint else HB_OrderPoint_ID end,
 HB_ConfirmationPoint_ID = case when @SchedulePoints = 1 then @ConfirmPoint else HB_ConfirmationPoint_ID end,
 HB_ScheduleDeliveryPoint_ID = case when @SchedulePoints = 1 then @SchedualPoint else HB_ScheduleDeliveryPoint_ID end,
 ConfirmationDeadlineDays = case when @SchedulePoints = 1 then @ConfirmDays else ConfirmationDeadlineDays end
 where option_id = @Option_ID
 and Raw_Land_CD in (select Raw_Land_Cd from #rlh) 

 update hb_comm_opt
 set ALLOWANCE = case when @Allowance = 1 then @AllowanceN else ALLOWANCE end,
 PRC_FM = case when @Price = 1 then @PRC_FM else PRC_FM end,
 PRC_MARKUP_PCT = case when @Price = 1 then @MarkupN else PRC_MARKUP_PCT end,
 PRC_FIXED = case when @Price = 1 then @FixedN else PRC_FIXED end,
 PRC_SELL = Round(case when @Price = 1 then 
  case when @PRC_FM = 'F' then isNull(@FixedN,0) else 
   case when @RetailMarkup = 1 then isnull(COST_SUPL,0) / ((100-isNUll(@MarkupN,0))/100)
   else isNUll(@MarkupN+100,0)/100 * isnull(COST_SUPL,0) end
  end
  else 
   PRC_SELL 
  end,@RoundBy),
 HB_OrderPoint_ID = case when @SchedulePoints = 1 then @OrderPoint else HB_OrderPoint_ID end,
 HB_ConfirmationPoint_ID = case when @SchedulePoints = 1 then @ConfirmPoint else HB_ConfirmationPoint_ID end,
 HB_ScheduleDeliveryPoint_ID = case when @SchedulePoints = 1 then @SchedualPoint else HB_ScheduleDeliveryPoint_ID end,
 ConfirmationDeadlineDays = case when @SchedulePoints = 1 then @ConfirmDays else ConfirmationDeadlineDays end
 where option_id = @Option_ID
 and Community_CD in (select Community_CD from #comm)


 update hb_proj_opt
 set ALLOWANCE = case when @Allowance = 1 then @AllowanceN else ALLOWANCE end,
 PRC_FM = case when @Price = 1 then @PRC_FM else PRC_FM end,
 PRC_MARKUP_PCT = case when @Price = 1 then @MarkupN else PRC_MARKUP_PCT end,
 PRC_FIXED = case when @Price = 1 then @FixedN else PRC_FIXED end,
 PRC_SELL = Round(case when @Price = 1 then 
  case when @PRC_FM = 'F' then isNull(@FixedN,0) else 
   case when @RetailMarkup = 1 then isnull(COST_SUPL,0) / ((100-isNUll(@MarkupN,0))/100)
   else isNUll(@MarkupN+100,0)/100 * isnull(COST_SUPL,0) end
  end
  else 
   PRC_SELL 
  end,@RoundBy),
 HB_OrderPoint_ID = case when @SchedulePoints = 1 then @OrderPoint else HB_OrderPoint_ID end,
 HB_ConfirmationPoint_ID = case when @SchedulePoints = 1 then @ConfirmPoint else HB_ConfirmationPoint_ID end,
 HB_ScheduleDeliveryPoint_ID = case when @SchedulePoints = 1 then @SchedualPoint else HB_ScheduleDeliveryPoint_ID end,
 ConfirmationDeadlineDays = case when @SchedulePoints = 1 then @ConfirmDays else ConfirmationDeadlineDays end
 where option_id = @Option_ID
 and Project_CD in (select Project_CD from #project)

 if @Attributes = 1
 begin
  --do attributes for rlh, comm and proj
  --delete existing attributes first

  print 'do attribute delete'

  delete HB_OPT_ATTR_EVALUES
  where Raw_Land_CD in (select Raw_Land_CD from #rlh)
  and OPTION_ID = @Option_id

  delete HB_OPT_ATTR_EVALUES
  where Community_CD in (select Community_CD from #comm)
  and OPTION_ID = @Option_id

  delete HB_OPT_ATTR_EVALUES
  where Project_CD in (select Project_CD from #project)
  and OPTION_ID = @Option_id

SELECT -1, @Option_ID, -1, OATYP_ID, OATVAL_ID, DEFAULT_TF, Raw_Land_CD, -1
  FROM HB_OPT_ATTR_OVALUES OV 
  join #rlh 
  on 1=1
  WHERE OV.OPTION_ID=@Option_ID


  -- insert
  insert HB_OPT_ATTR_EVALUES (MODEL_ID, OPTION_ID, ROOM_ID, OATYP_ID, OATVAL_ID, DEFAULT_TF, RAW_LAND_CD, MODEL_NAME_ID)
  SELECT -1, @Option_ID, -1, OATYP_ID, OATVAL_ID, DEFAULT_TF, Raw_Land_CD, -1
  FROM HB_OPT_ATTR_OVALUES OV 
  join #rlh 
  on 1=1
  WHERE OV.OPTION_ID=@Option_ID

  insert HB_OPT_ATTR_EVALUES (MODEL_ID, OPTION_ID, ROOM_ID, OATYP_ID, OATVAL_ID, DEFAULT_TF, Community_CD, MODEL_NAME_ID)
  SELECT -1, @Option_ID, -1, OATYP_ID, OATVAL_ID, DEFAULT_TF, Community_CD, -1
  FROM HB_OPT_ATTR_OVALUES OV 
  join #comm 
  on 1=1
  WHERE OV.OPTION_ID=@Option_ID

  insert HB_OPT_ATTR_EVALUES (MODEL_ID, OPTION_ID, ROOM_ID, OATYP_ID, OATVAL_ID, DEFAULT_TF, Project_CD, MODEL_NAME_ID)
  SELECT -1, @Option_ID, -1, OATYP_ID, OATVAL_ID, DEFAULT_TF, Project_CD, -1
  FROM HB_OPT_ATTR_OVALUES OV 
  join #project
  on 1=1
  WHERE OV.OPTION_ID=@Option_ID

 end

 if @UpdateModelOptions = 1
  goto Model_Specific
end
else
begin
  goto Model_Specific
end


return

--hb_mod_opt & hb_elv_opt
model_specific:
begin
 --will do model / elv specific at the rlh and master levels 
 --(if no rlhs are selected above, the #rlh table will be empty and no rlh updates will be done)
 insert #RLH
 select -1

 update hb_mod_opt 
 set ALLOWANCE = case when @Allowance = 1 then @AllowanceN else ALLOWANCE end,
 PRC_FM = case when @Price = 1 then @PRC_FM else PRC_FM end,
 PRC_MARKUP_PCT = case when @Price = 1 then @MarkupN else PRC_MARKUP_PCT end,
 PRC_FIXED = case when @Price = 1 then @FixedN else PRC_FIXED end,
 PRC_SELL = case when isnull(OveridePrice,0) = 0 then Round(case when @Price = 1 then 
  case when @PRC_FM = 'F' then isNull(@FixedN,0) else 
   case when @RetailMarkup = 1 then isnull(COST_SUPL,0) / ((100-isNUll(@MarkupN,0))/100)
   else isNUll(@MarkupN+100,0)/100 * isnull(COST_SUPL,0) end
  end
  else 
   PRC_SELL 
  end,@RoundBy) else PRC_SELL end,
 HB_OrderPoint_ID = case when @SchedulePoints = 1 then @OrderPoint else HB_OrderPoint_ID end,
 HB_ConfirmationPoint_ID = case when @SchedulePoints = 1 then @ConfirmPoint else HB_ConfirmationPoint_ID end,
 HB_ScheduleDeliveryPoint_ID = case when @SchedulePoints = 1 then @SchedualPoint else HB_ScheduleDeliveryPoint_ID end,
 ConfirmationDeadlineDays = case when @SchedulePoints = 1 then @ConfirmDays else ConfirmationDeadlineDays end
 where option_id = @Option_ID
 and Raw_Land_CD in (select Raw_Land_Cd from #rlh)

 update hb_elv_opt 
 set ALLOWANCE = case when @Allowance = 1 then @AllowanceN else ALLOWANCE end,
 PRC_FM = case when @Price = 1 then @PRC_FM else PRC_FM end,
 PRC_MARKUP_PCT = case when @Price = 1 then @MarkupN else PRC_MARKUP_PCT end,
 PRC_FIXED = case when @Price = 1 then @FixedN else PRC_FIXED end,
 PRC_SELL = case when isnull(OveridePrice,0) = 0 then Round(case when @Price = 1 then 
  case when @PRC_FM = 'F' then isNull(@FixedN,0) else 
   case when @RetailMarkup = 1 then isnull(COST_SUPL,0) / ((100-isNUll(@MarkupN,0))/100)
   else isNUll(@MarkupN+100,0)/100 * isnull(COST_SUPL,0) end
  end
  else 
   PRC_SELL 
  end,@RoundBy) else PRC_SELL end,
 HB_OrderPoint_ID = case when @SchedulePoints = 1 then @OrderPoint else HB_OrderPoint_ID end,
 HB_ConfirmationPoint_ID = case when @SchedulePoints = 1 then @ConfirmPoint else HB_ConfirmationPoint_ID end,
 HB_ScheduleDeliveryPoint_ID = case when @SchedulePoints = 1 then @SchedualPoint else HB_ScheduleDeliveryPoint_ID end,
 ConfirmationDeadlineDays = case when @SchedulePoints = 1 then @ConfirmDays else ConfirmationDeadlineDays end
 where option_id = @Option_ID
 and Raw_Land_CD in (select Raw_Land_Cd from #rlh)

 --do attributes
 delete HB_OPT_ATTR_EVALUES
 where Raw_Land_CD in (select Raw_Land_Cd from #rlh)
 and OPTION_ID = @Option_id
 and (MODEL_NAME_ID <> -1 or  MODEL_ID <> -1) -- only do for a model or elv

 delete HB_OPT_ATTR_EVALUES
 where Raw_Land_CD in (select Raw_Land_Cd from #rlh)
 and OPTION_ID in (select id from hb_elv_opt where option_id = @Option_id and Raw_land_CD in (select Raw_Land_Cd from #rlh))
 and (MODEL_NAME_ID <> -1 or  MODEL_ID <> -1) -- only do for a model or elv


 insert HB_OPT_ATTR_EVALUES (MODEL_ID, OPTION_ID, ROOM_ID, OATYP_ID, OATVAL_ID, DEFAULT_TF, RAW_LAND_CD, MODEL_NAME_ID)
 SELECT o.MODEL_ID, o.id, -1,   OATYP_ID, OATVAL_ID, DEFAULT_TF, Raw_Land_CD, -1 
 FROM HB_OPT_ATTR_OVALUES OV 
 join hb_elv_opt o
 on ov.OPTION_ID = o.option_id
 and o.raw_land_cd in (select raw_land_cd from #rlh)
 WHERE OV.OPTION_ID=@Option_ID


 insert HB_OPT_ATTR_EVALUES (MODEL_ID, OPTION_ID, ROOM_ID, OATYP_ID, OATVAL_ID, DEFAULT_TF, RAW_LAND_CD, MODEL_NAME_ID)
 SELECT -1, @Option_ID, -1,   OATYP_ID, OATVAL_ID, DEFAULT_TF, Raw_Land_CD, o.MODEL_NAME_ID 
 FROM HB_OPT_ATTR_OVALUES OV 
 join hb_mod_opt o
 on ov.OPTION_ID = o.option_id
 and o.raw_land_cd in (select raw_land_cd from #rlh)
 WHERE OV.OPTION_ID=@Option_ID


end
 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBAutoAddTrades]') and xtype = 'P ')  
 drop Procedure sp_HBAutoAddTrades
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_HBAutoAddTrades]
@Phs_Code varchar(50), @Subp_Code varchar(50), @Option_ID int, @Model_ID int, @Raw_Land_CD int, @EstimateLevel char
as

--exec sp_HBAutoAddTrades '3400', '', -1, 26, -1, 'E'

--declare @Phs_Code int, @Subp_Code int, @Option_ID int, @Model_ID int, @Raw_Land_CD int, @EstimateLevel char
--select @Phs_Code = 3700, @Subp_Code = '', @Option_ID = -1, @Model_ID = -1, @Raw_Land_CD = -1, @EstimateLevel = 'H'

declare @NEXT_HB_ETRD_ID int, @BADC char, @BaseHasPhaseSubPhase int, @BaseModelID int, @ModelNameID int

select @NEXT_HB_ETRD_ID = max(ETRD_ID) from hb_Est_Trd 

select @ModelNameID = Model_Name_ID, @BADC = case when BASE_MODEL = 'Y' then 'B' else 'A' end
from hb_model
where Model_id = @Model_id
and Raw_LAnd_CD = @Raw_LAnd_CD

if @BADC is null
 set @BADC = 'B'

 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#HB_EST_TRD'))
 drop table #HB_EST_TRD
CREATE TABLE #HB_EST_TRD(
	[ETRD_ID] [int] NOT NULL identity(1,1),
	[OPTION_ID] [int] NOT NULL,
	[MODEL_ID] [int] NOT NULL,
	[phs_code] [varchar](5) NOT NULL,
	[subp_code] [varchar](5) NOT NULL,
	[TRADE_ID] [int] NOT NULL,
	[BADC] [varchar](1) NOT NULL,
	[SUPPLIER] [varchar](10) NULL,
	[EST_COST] [money] NULL,
	[EST_SIB] [varchar](1) NULL,
	[EST_HOURS] [money] NULL,
	[EXPIRE_DATE] [datetime] NULL,
	[RFQC_ID] [int] NULL,
	[Raw_Land_CD] [int] NULL,
	[UOM] [varchar](5) NULL,
	[EstimateLevel] [varchar](1) NULL,
	[HB_ConfirmationPoint_ID] [int] NULL,
	[HB_ScheduleDeliveryPoint_ID] [int] NULL,
	[ConfirmationDeadlineDays] [int] NULL,
	[HB_OrderPoint_ID] [int] NULL
) 
insert #hb_est_trd(OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, BADC, EST_COST, 
EST_SIB, EST_HOURS, Raw_Land_CD, UOM, EstimateLevel, HB_ConfirmationPoint_ID, 
HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, HB_OrderPoint_ID)
select @OPTION_ID, @MODEL_ID, @Phs_Code, @Subp_Code, TRADE_ID, @BADC, 0,
EST_SIB, 1, @Raw_Land_CD, DefaultUOM, @EstimateLevel, HB_ConfirmationPoint_ID, 
HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, HB_OrderPoint_ID
from hb_trades
where TRADE_ID in
(select TMO_ID
from hb_tmo
where phs_code = @Phs_Code
and TMO_TYpe = 'T')

--need to determine if this is a re-add (default back to base... else add new trades)
select @BaseHasPhaseSubPhase = 0
if @BADC = 'A'
begin
 select @BaseModelID = Model_ID
 from hb_model
 where BASE_MODEL = 'Y'
 and Raw_Land_CD = @Raw_Land_CD
 and Model_Name_ID = @ModelNameID

 select @BaseHasPhaseSubPhase = count(*)
 from hb_est 
 where Phs_Code = @Phs_Code 
 and Subp_Code = @Subp_Code
 and Option_ID = @Option_ID
 and Model_ID = @BaseModelID
 and Raw_Land_CD = @Raw_Land_CD
 and EstimateLevel = @EstimateLevel 
end

if @BaseHasPhaseSubPhase = 0
begin
 insert hb_est_trd(ETRD_ID, OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, BADC, EST_COST, 
 EST_SIB, EST_HOURS, Raw_Land_CD, UOM, EstimateLevel, HB_ConfirmationPoint_ID, 
 HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, HB_OrderPoint_ID)
 select ETRD_ID + isnull(@NEXT_HB_ETRD_ID,0), OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, BADC, EST_COST, 
 EST_SIB, EST_HOURS, Raw_Land_CD, UOM, EstimateLevel, HB_ConfirmationPoint_ID, 
 HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, HB_OrderPoint_ID
 from #hb_est_trd
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBCopyEstFromStandardToRL]') and xtype = 'P ')  
 drop Procedure sp_HBCopyEstFromStandardToRL
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




-- exec sp_HBCopyEstFromStandardToRL -1, 50002, 43
 
CREATE proc [dbo].[sp_HBCopyEstFromStandardToRL]
 @SrcRAW_LAND_CD int,
 @RAW_LAND_CD int,
 @MODEL_ID int
as

-- declare 
--  @SrcRAW_LAND_CD int,
--  @RAW_LAND_CD int,
--  @MODEL_ID int 
--
-- select @SrcRAW_LAND_CD = -1, @RAW_LAND_CD = 50008, @MODEL_ID = 57

declare @Debug bit
set @Debug = 1

set @debug = 0

 declare @Model_Name_ID int
 select @Model_Name_ID = Model_Name_ID 
 from hb_model
 where model_id = @model_id

 declare @RetailMarkup bit, @RoundBy int

 select @RetailMarkup = UseRetailMarkup, @RoundBy = SalesPrcRnd 
 from system_ctrl

 if @RoundBy = 0 
  select @RoundBy = 4
 else if @RoundBy = 1
  select @RoundBy = 0
 else if @RoundBy = 10
  select @RoundBy = -1
 else if @RoundBy = 100
  select @RoundBy = -2



 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Material'))
 drop table #Material
 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Trade'))
 drop table #Trade

declare @MUID int
 select @MUID = id
 from hb_model
 where model_id = @Model_ID and 
 RAW_LAND_CD = @SrcRAW_LAND_CD

if @Debug = 0
begin
 print 'rlh model inserted'
 INSERT HB_RAW_MODEL (RAW_LAND_CD, MODEL_ID) 
 select @RAW_LAND_CD, @MODEL_ID

 
 print 'New model inserted'
 insert HB_MODEL
 (MODEL_ID, MODEL_NAME_ID, ELEVATION, PLAN_NUM, MODEL_SDESC, MODEL_DESC, FOOTAGE, BEDROOMS, BATH, HALF_BATH, 
 GARAGE, BASE_PRICE, RAW_LAND_CD, BASE_MODEL, MODEL_EXP_DESC, WEB_DESC, ISORT, IMG_FLOORPLAN, FOOTAGE_un_code, 
 SWING_OPTION_YN, PLANH_ID, TOTAL_PRICE, ExteriorFinish, GarageSize, ReqLotWidth, HouseWidth, LotAreaReq, SeriesID)
 select MODEL_ID, MODEL_NAME_ID, ELEVATION, PLAN_NUM, MODEL_SDESC, MODEL_DESC, FOOTAGE, BEDROOMS, BATH, HALF_BATH, 
 GARAGE, BASE_PRICE, @RAW_LAND_CD, BASE_MODEL, MODEL_EXP_DESC, WEB_DESC, ISORT, IMG_FLOORPLAN, FOOTAGE_un_code, 
 SWING_OPTION_YN, PLANH_ID, TOTAL_PRICE, ExteriorFinish, GarageSize, ReqLotWidth, HouseWidth, LotAreaReq, SeriesID
 from HB_MODEL
 where MODEL_ID = @MODEL_ID
 and Raw_Land_CD = @srcRaw_Land_CD
 AND isnull(PLANH_ID,'') <> '-1'

 insert HB_Model_Packages(HBModelID, Raw_Land_CD, HBPackageID)
 select HBModelID, @Raw_Land_CD, HBPackageID
 from HB_Model_Packages
 where HBModelID = @Model_ID
 and Raw_Land_CD = -1

 declare @ID int
 select @ID = @@identity 
 exec sp_hb_duplicate_hb_model @MUID, @ID, 'T'
 
 
 print 'New elevation estimate'
 insert HB_Est(OPTION_ID, MODEL_ID, phs_code, subp_code, BADC, INTERNAL_EST, EXTERNAL_EST, FINAL_EST, 
 HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, Raw_Land_CD, EstimateLevel)
 select OPTION_ID, MODEL_ID, phs_code, subp_code, BADC, INTERNAL_EST, EXTERNAL_EST, FINAL_EST, 
 HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, @Raw_Land_CD, EstimateLevel
 from HB_Est
 where RAW_LAND_CD = @SrcRAW_LAND_CD and MODEL_ID = @MODEL_ID
 and EstimateLevel = 'E'
 and Option_ID = -1
end
else
begin
 print 'rlh model inserted'
 select @RAW_LAND_CD, @MODEL_ID, @Model_Name_ID

 print 'New model inserted'
 select MODEL_ID, MODEL_NAME_ID, ELEVATION, PLAN_NUM, MODEL_SDESC, MODEL_DESC, FOOTAGE, BEDROOMS, BATH, HALF_BATH, 
 GARAGE, BASE_PRICE, @RAW_LAND_CD, BASE_MODEL, MODEL_EXP_DESC, WEB_DESC, ISORT, IMG_FLOORPLAN, FOOTAGE_un_code, 
 SWING_OPTION_YN, PLANH_ID, TOTAL_PRICE
 from HB_MODEL
 where MODEL_ID = @MODEL_ID
 and Raw_Land_CD = @srcRaw_Land_CD
 AND PLANH_ID <> '-1'

 print 'New elevation estimate'
 select OPTION_ID, MODEL_ID, phs_code, subp_code, BADC, INTERNAL_EST, EXTERNAL_EST, FINAL_EST, 
 HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, @Raw_Land_CD, EstimateLevel
 from HB_Est
 where RAW_LAND_CD = @SrcRAW_LAND_CD and MODEL_ID = @MODEL_ID
 and EstimateLevel = 'E'
 and Option_ID = -1
end

select identity(int,1,1) as EMAT_ID, OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, MATERIAL_ID, BADC, qty, EST_COST, @Raw_Land_CD Raw_Land_CD, EstimateLevel, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays
into #Material
from hb_Est_Mat
where RAW_LAND_CD = @SrcRAW_LAND_CD and MODEL_ID = @MODEL_ID and option_id = -1
and EstimateLevel = 'E'

--get option material estimates for the model level at the raw land level *** this is getting all of them ***
insert #Material(OPTION_ID, Model_ID, phs_code, subp_code, TRADE_ID, MATERIAL_ID, BADC, qty, EST_COST, 
 Raw_Land_CD, EstimateLevel, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays)
select OPTION_ID, @Model_Name_ID, phs_code, subp_code, TRADE_ID, MATERIAL_ID, BADC, qty, EST_COST, 
 @Raw_Land_CD, 'M', HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays
from hb_Est_Mat
where Model_ID = -1
and EstimateLevel = 'H'
and Raw_Land_cd = @Raw_Land_cd
and Option_ID <> -1

--get option material estimates for the elevation level at the raw land level *** this is getting all of them ***
insert #Material(OPTION_ID, Model_ID, phs_code, subp_code, TRADE_ID, MATERIAL_ID, BADC, qty, EST_COST, 
 Raw_Land_CD, EstimateLevel, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays)
select OPTION_ID, @Model_ID, phs_code, subp_code, TRADE_ID, MATERIAL_ID, BADC, qty, EST_COST, 
 @Raw_Land_CD, 'E', HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays
from hb_Est_Mat
where Model_ID = -1
and EstimateLevel = 'H'
and Raw_Land_cd = @Raw_Land_cd
and Option_ID <> -1


select identity(int,1,1) as ETRD_ID, OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, BADC, SUPPLIER, EST_COST, 
 EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, @Raw_Land_CD Raw_Land_CD, UOM, EstimateLevel,
 HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays
into #Trade
from hb_Est_Trd
where RAW_LAND_CD = @SrcRAW_LAND_CD and MODEL_ID = @MODEL_ID and option_id = -1
and EstimateLevel = 'E'

--get option trade estimates for the model level at the raw land level *** this is getting all of them ***
insert #Trade(OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, BADC, SUPPLIER, EST_COST, 
  EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, Raw_Land_CD, UOM, EstimateLevel,
  HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays)
select OPTION_ID, @Model_Name_ID, phs_code, subp_code, TRADE_ID, BADC, SUPPLIER, EST_COST, 
 EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, @Raw_Land_CD , UOM, 'M',
 HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays
from hb_Est_trd
where Model_ID = -1
and EstimateLevel = 'H'
and Raw_Land_cd = @Raw_Land_cd
and Option_ID <> -1


--get option trade estimates for the elevation level at the raw land level *** this is getting all of them ***
insert #Trade(OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, BADC, SUPPLIER, EST_COST, 
  EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, Raw_Land_CD, UOM, EstimateLevel,
  HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays)
select OPTION_ID, @Model_ID, phs_code, subp_code, TRADE_ID, BADC, SUPPLIER, EST_COST, 
 EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, @Raw_Land_CD , UOM, 'E',
 HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays
from hb_Est_trd
where Model_ID = -1
and EstimateLevel = 'H'
and Raw_Land_cd = @Raw_Land_cd
and Option_ID <> -1

if @Debug = 0
begin
 print 'materials for options and base'
 insert HB_Est_Mat(EMAT_ID, OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, MATERIAL_ID, BADC, qty, EST_COST, Raw_Land_CD, EstimateLevel, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays)
 select EMAT_ID + (select max(EMAT_ID) from hb_Est_Mat), OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, MATERIAL_ID, BADC, qty, EST_COST, Raw_Land_CD, EstimateLevel, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays
 from #Material

 print 'trades for options and base'
 insert hb_Est_Trd(ETRD_ID, OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, BADC, SUPPLIER, EST_COST, 
  EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, Raw_Land_CD, UOM, EstimateLevel, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays)
 select ETRD_ID + (select max(ETRD_ID) from hb_Est_Trd), OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, BADC, SUPPLIER, EST_COST, 
  EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, Raw_Land_CD, UOM, EstimateLevel, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays
 from #Trade
end
else
begin
 print 'materials for options and base'
 select EMAT_ID + (select max(EMAT_ID) from hb_Est_Mat), OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, MATERIAL_ID, BADC, qty, EST_COST, Raw_Land_CD, EstimateLevel, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays
 from #Material

 print 'trades for options and base'
 select ETRD_ID + (select max(ETRD_ID) from hb_Est_Trd), OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, BADC, SUPPLIER, EST_COST, 
  EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, Raw_Land_CD, UOM, EstimateLevel, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays
 from #Trade
end

--now include model available options (if not already transfered)

if @Debug = 0
begin

print 'option estimates'
  --now insert estimates based on raw_land structure & estimates (model level)
 insert HB_Est(OPTION_ID, MODEL_ID, phs_code, subp_code, BADC, INTERNAL_EST, EXTERNAL_EST, FINAL_EST, 
 HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, Raw_Land_CD, EstimateLevel)
 select OPTION_ID, @Model_Name_ID, phs_code, subp_code, BADC, INTERNAL_EST, EXTERNAL_EST, FINAL_EST, 
 HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, @Raw_Land_CD, 'M'
 from hb_est
 where Model_ID = -1
 and EstimateLevel = 'H'
 and Raw_Land_cd = @Raw_Land_cd
 and Option_ID <> -1
 and option_id not in (
  select option_id
  from hb_mod_opt
  where Model_Name_ID = @Model_Name_ID
  and Raw_Land_CD = @RAW_LAND_CD)

 -- copy model attributes
 print 'Copy option attributes'
 insert HB_OPT_ATTR_EVALUES (MODEL_ID, OPTION_ID, ROOM_ID, OATYP_ID, OATVAL_ID, DEFAULT_TF, RAW_LAND_CD, MODEL_NAME_ID)
 select MODEL_ID, OPTION_ID, ROOM_ID, OATYP_ID, OATVAL_ID, DEFAULT_TF, @RAW_LAND_CD, MODEL_NAME_ID
 from HB_OPT_ATTR_EVALUES
 where model_name_id = @Model_Name_ID
 and Raw_land_CD = -1
 and model_id = -1
 and option_id not in (
  select option_id
  from hb_mod_opt
  where Model_Name_ID = @Model_Name_ID
  and Raw_Land_CD = @RAW_LAND_CD) 

 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ModOpt'))
 drop table #ModOpt
 create table #ModOpt(
	[MODEL_NAME_ID] [int] NOT NULL,
	[OPTION_ID] [int] NOT NULL,
	[ALLOWANCE] [money] NULL,
	[PRC_FM] [varchar](1) NULL,
	[PRC_MARKUP_PCT] [money] NULL,
	[PRC_FIXED] [money] NULL,
	[PRC_SELL] [money] NULL,
	[COST_SUPL] [money] NULL,
	[COST_INT] [money] NULL,
	[Raw_land_Cd] [int] NULL,
	[HB_OrderPoint_ID] [int] NULL,
	[HB_ConfirmationPoint_ID] [int] NULL,
	[HB_ScheduleDeliveryPoint_ID] [int] NULL,
	[ConfirmationDeadlineDays] [int] NULL,
	[OveridePrice] [bit] NULL,
	[Opt_only_cost] [money] NULL
) 

 print 'mod options'
 insert #ModOpt(
 MODEL_NAME_ID, OPTION_ID, ALLOWANCE, PRC_FM, PRC_MARKUP_PCT, PRC_FIXED, PRC_SELL, COST_SUPL, COST_INT, Raw_land_Cd,
 HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays,
 OveridePrice, Opt_only_cost)
 select MODEL_NAME_ID, OPTION_ID, ALLOWANCE, PRC_FM, PRC_MARKUP_PCT, PRC_FIXED, PRC_SELL, COST_SUPL, 
 COST_INT, @Raw_land_Cd, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, 
 HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays,
 OveridePrice, Opt_only_cost
 from hb_mod_opt
 where Model_Name_ID = @Model_Name_ID
 and Raw_LAnd_CD = -1
 and option_id not in (
  select option_id
  from hb_mod_opt
  where Model_Name_ID = @Model_Name_ID
  and Raw_Land_CD = @RAW_LAND_CD)

update #ModOpt
set COST_SUPL = (select COST_SUPL from hb_raw_opt where Option_id = #ModOpt.Option_ID and Raw_Land_CD = #ModOpt.Raw_LAnd_CD),
Opt_only_cost = (select Opt_only_cost from hb_raw_opt where Option_id = #ModOpt.Option_ID and Raw_Land_CD = #ModOpt.Raw_LAnd_CD)

update #ModOpt
set PRC_SELL = case when isnull(OveridePrice,0) = 0 then Round(
  case when PRC_FM = 'F' then isNull(PRC_FIXED,0) else 
   case when @RetailMarkup = 1 then isnull(COST_SUPL,0) / ((100-isNUll(PRC_MARKUP_PCT,0))/100)
   else isNUll(PRC_MARKUP_PCT+100,0)/100 * isnull(COST_SUPL,0) end
  end,@RoundBy) else PRC_SELL end

 insert hb_mod_opt(
 MODEL_NAME_ID, OPTION_ID, ALLOWANCE, PRC_FM, PRC_MARKUP_PCT, PRC_FIXED, PRC_SELL, COST_SUPL, COST_INT, Raw_land_Cd,
 HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays,
 OveridePrice, Opt_only_cost)
 select MODEL_NAME_ID, OPTION_ID, ALLOWANCE, PRC_FM, PRC_MARKUP_PCT, PRC_FIXED, PRC_SELL, COST_SUPL, 
 COST_INT, @Raw_land_Cd, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, 
 HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays,
 OveridePrice, Opt_only_cost
 from #ModOpt

 

 --now do model alternates (if not already transfered)
 print 'Mod opt alts'
 insert hb_mod_optalt (MODEL_NAME_ID, OPALT_GROUP_ID, OPTION_ID, RAW_LAND_CD)
 select MODEL_NAME_ID, OPALT_GROUP_ID, OPTION_ID, @RAW_LAND_CD
 from hb_mod_optalt
 where 
 MODEL_NAME_ID = @MODEL_NAME_ID
 and RAW_LAND_CD = -1
 and OPTION_ID not in 
  (select Option_id
  from hb_mod_optalt
  where 
  MODEL_NAME_ID = @MODEL_NAME_ID
  and RAW_LAND_CD = @RAW_LAND_CD)
 
end
else

begin
 print 'option estimates'
  --now insert estimates based on raw_land structure & estimates (model level)
 select OPTION_ID, @Model_Name_ID, phs_code, subp_code, BADC, INTERNAL_EST, EXTERNAL_EST, FINAL_EST, 
 HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, @Raw_Land_CD, 'M'
 from hb_est
 where Model_ID = -1
 and EstimateLevel = 'H'
 and Raw_Land_cd = @Raw_Land_cd
 and Option_ID <> -1
 and option_id not in (
  select option_id
  from hb_mod_opt
  where Model_Name_ID = @Model_Name_ID
  and Raw_Land_CD = @RAW_LAND_CD)

-- copy model attributes
 print 'Copy option attributes'
 select MODEL_ID, OPTION_ID, ROOM_ID, OATYP_ID, OATVAL_ID, DEFAULT_TF, @RAW_LAND_CD, MODEL_NAME_ID
 from HB_OPT_ATTR_EVALUES
 where model_name_id = @Model_Name_ID
 and model_id = -1
 and Raw_land_CD = -1
 and option_id not in (
  select option_id
  from hb_mod_opt
  where Model_Name_ID = @Model_Name_ID
  and Raw_Land_CD = @RAW_LAND_CD) 

 print 'mod options'
 select MODEL_NAME_ID, OPTION_ID, ALLOWANCE, PRC_FM, PRC_MARKUP_PCT, PRC_FIXED, 
  PRC_SELL, COST_SUPL, COST_INT, @Raw_land_Cd, HB_OrderPoint_ID, 
  HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays,
  OveridePrice, Opt_only_cost
 from hb_mod_opt
 where Model_Name_ID = @Model_Name_ID
 and Raw_LAnd_CD = -1
 and option_id not in (
  select option_id
  from hb_mod_opt
  where Model_Name_ID = @Model_Name_ID
  and Raw_Land_CD = @RAW_LAND_CD)


 --now do model alternates (if not already transfered)
 print 'Mod opt alts'
 select MODEL_NAME_ID, OPALT_GROUP_ID, OPTION_ID, @RAW_LAND_CD
 from hb_mod_optalt
 where 
 MODEL_NAME_ID = @MODEL_NAME_ID
 and RAW_LAND_CD = -1
 and OPTION_ID not in 
  (select Option_id
  from hb_mod_optalt
  where 
  MODEL_NAME_ID = @MODEL_NAME_ID
  and RAW_LAND_CD = @RAW_LAND_CD)


end


--include elevation available options (by default includes attached options)
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ElvOpt'))
drop table #ElvOpt
create table #ElvOpt(
	[MODEL_ID] [int] NOT NULL,
	[OPTION_ID] [int] NOT NULL,
	[PRC_FM] [varchar](1) NULL,
	[PRC_MARKUP_PCT] [money] NULL,
	[PRC_FIXED] [money] NULL,
	[PRC_SELL] [money] NULL,
	[COST_SUPL] [money] NOT NULL,
	[COST_INT] [money] NULL,
	[ALLOWANCE] [money] NULL,
	[ATTACHED_YN] [varchar](1) NULL,
	[QTY] [money] NULL,
	[PRC_EXTRA_YN] [varchar](1) NULL,
	[id] [int] NULL,
	[Raw_Land_CD] [int] NULL,
	[ParentID] [int] NULL,
	[HB_Package_ID] [int] NULL,
	[HB_OrderPoint_ID] [int] NULL,
    HB_ConfirmationPoint_ID [int] NULL,
    HB_ScheduleDeliveryPoint_ID [int] NULL,
    ConfirmationDeadlineDays [int] NULL,
    OveridePrice bit,
    Opt_only_cost money null,
	[NewId] [int] IDENTITY(1,1) NOT NULL,
    [NewParentID] int) 


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ElvOpt2'))
drop table #ElvOpt2
create table #ElvOpt2(
	[MODEL_ID] [int] NOT NULL,
	[OPTION_ID] [int] NOT NULL,
	[PRC_FM] [varchar](1) NULL,
	[PRC_MARKUP_PCT] [money] NULL,
	[PRC_FIXED] [money] NULL,
	[PRC_SELL] [money] NULL,
	[COST_SUPL] [money] NOT NULL,
	[COST_INT] [money] NULL,
	[ALLOWANCE] [money] NULL,
	[ATTACHED_YN] [varchar](1) NULL,
	[QTY] [money] NULL,
	[PRC_EXTRA_YN] [varchar](1) NULL,
	[id] [int] NULL,
	[Raw_Land_CD] [int] NULL,
	[ParentID] [int] NULL,
	[HB_Package_ID] [int] NULL,
	[HB_OrderPoint_ID] [int] NULL,
    HB_ConfirmationPoint_ID [int] NULL,
    HB_ScheduleDeliveryPoint_ID [int] NULL,
    ConfirmationDeadlineDays [int] NULL,
    OveridePrice bit,
    Opt_only_cost money null,
	[NewId] [int] NULL,
    [NewParentID] int) 



insert #ElvOpt(MODEL_ID, OPTION_ID, PRC_FM, PRC_MARKUP_PCT, PRC_FIXED, PRC_SELL, 
COST_SUPL, COST_INT, ALLOWANCE, ATTACHED_YN, QTY, PRC_EXTRA_YN, id, 
Raw_Land_CD, ParentID, HB_Package_ID, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays,
OveridePrice, Opt_only_cost)
select MODEL_ID, OPTION_ID, PRC_FM, PRC_MARKUP_PCT, PRC_FIXED, PRC_SELL, 
COST_SUPL, COST_INT, ALLOWANCE, ATTACHED_YN, QTY, PRC_EXTRA_YN, id, 
@Raw_Land_CD, ParentID, HB_Package_ID, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays,
OveridePrice, Opt_only_cost
from hb_elv_opt
where MODEL_ID = @MODEL_ID
and RAW_LAND_CD = -1

insert #ElvOpt2
select * from #ElvOpt

update #ElvOpt
set #ElvOpt.[NewParentID] = nj.[NewID]
from #ElvOpt oj
join #ElvOpt2 nj
on oj.ParentID = nj.id

declare @MaxID int
select @MaxID = max(id)
from hb_elv_opt 

update #ElvOpt
set id = [newid] + @maxID, ParentID = NewParentID + @maxID

update #ElvOpt
set ParentID = isnull(ParentID,-1)


update #ElvOpt
set COST_SUPL = (select COST_SUPL from hb_raw_opt where Option_id = #ElvOpt.Option_ID and Raw_Land_CD = #ElvOpt.Raw_LAnd_CD),
Opt_only_cost = (select Opt_only_cost from hb_raw_opt where Option_id = #ElvOpt.Option_ID and Raw_Land_CD = #ElvOpt.Raw_LAnd_CD)

update #ElvOpt
set PRC_SELL = case when isnull(OveridePrice,0) = 0 then Round(
  case when PRC_FM = 'F' then isNull(PRC_FIXED,0) else 
   case when @RetailMarkup = 1 then isnull(COST_SUPL,0) / ((100-isNUll(PRC_MARKUP_PCT,0))/100)
   else isNUll(PRC_MARKUP_PCT+100,0)/100 * isnull(COST_SUPL,0) end
  end,@RoundBy) else PRC_SELL end
  

set identity_insert hb_elv_opt on

if @Debug = 0
begin
 print 'elv opts'

 insert hb_elv_opt(MODEL_ID, OPTION_ID, PRC_FM, PRC_MARKUP_PCT, PRC_FIXED, PRC_SELL, 
 COST_SUPL, COST_INT, ALLOWANCE, ATTACHED_YN, QTY, PRC_EXTRA_YN, id, 
 Raw_Land_CD, ParentID, HB_Package_ID, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays)
 select MODEL_ID, OPTION_ID, PRC_FM, PRC_MARKUP_PCT, PRC_FIXED, PRC_SELL, 
 COST_SUPL, COST_INT, ALLOWANCE, ATTACHED_YN, QTY, PRC_EXTRA_YN, id, 
 Raw_Land_CD, ParentID, HB_Package_ID, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays
 from #ElvOpt

 -- copy elv attributes
 print 'Copy option attributes'
 insert HB_OPT_ATTR_EVALUES(MODEL_ID, OPTION_ID, ROOM_ID, OATYP_ID, OATVAL_ID, DEFAULT_TF, RAW_LAND_CD, MODEL_NAME_ID)
 select MODEL_ID, 
 (select ID from #ElvOpt where OPTION_ID in (select OPTION_ID from hb_elv_opt where hb_elv_opt.id = HB_OPT_ATTR_EVALUES.Option_id)), 
ROOM_ID, OATYP_ID, OATVAL_ID, DEFAULT_TF, @RAW_LAND_CD, MODEL_NAME_ID
 from HB_OPT_ATTR_EVALUES
 where --model_name_id = @Model_Name_ID and 
 model_id = @Model_id
 and Raw_land_cd = -1
--
--select @Model_id, @RAW_LAND_CD
--select * from #ElvOpt
--select * from hb_elv_opt o where model_id = 57 and Raw_land_cd = 50008
--select * from HB_OPT_ATTR_EVALUES where model_id = 57 and Raw_land_cd = 50008
--
-- update HB_OPT_ATTR_EVALUES
-- set Option_id = (select id from hb_elv_opt o where o.option_id = HB_OPT_ATTR_EVALUES.Option_id and model_id = @Model_id and Raw_land_cd = @RAW_LAND_CD)
-- where --model_name_id = @Model_Name_ID and 
-- model_id = @Model_id
-- and Raw_land_cd = @RAW_LAND_CD

 insert HB_OPTION_DESIGNATIONS(ElvOpt_ID, Qty, OATYP_ID1, OATVAL_ID1, OATYP_ID2, OATVAL_ID2, OATYP_ID3, OATVAL_ID3, OATYP_ID4, OATVAL_ID4, OATYP_ID5, OATVAL_ID5, OATYP_ID6, OATVAL_ID6, OATYP_ID7, OATVAL_ID7, OATYP_ID8, OATVAL_ID8, OATYP_ID9, OATVAL_ID9, OATYP_ID10, OATVAL_ID10, MODROOM_ID, RoomName)
 select b.ID, d.Qty, OATYP_ID1, OATVAL_ID1, OATYP_ID2, OATVAL_ID2, OATYP_ID3, OATVAL_ID3, OATYP_ID4, OATVAL_ID4, OATYP_ID5, OATVAL_ID5, OATYP_ID6, OATVAL_ID6, OATYP_ID7, OATVAL_ID7, OATYP_ID8, OATVAL_ID8, OATYP_ID9, OATVAL_ID9, OATYP_ID10, OATVAL_ID10, d.MODROOM_ID, d.RoomName
 from HB_OPTION_DESIGNATIONS d
 join HB_Elv_opt a
 on a.id = d.ElvOpt_ID
 and a.raw_land_cd = -1
 join hb_elv_opt b
 on a.OPTION_ID = b.OPTION_ID
 and a.Model_id = b.Model_id
 and b.raw_land_cd = @Raw_Land_CD
 where a.id in (select id from hb_elv_opt where MODEL_ID = @MODEL_ID and Raw_land_cd = -1)

   --now insert estimates based on raw_land structure & estimates (elv level)
 insert HB_Est(OPTION_ID, MODEL_ID, phs_code, subp_code, BADC, INTERNAL_EST, EXTERNAL_EST, FINAL_EST, 
 HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, Raw_Land_CD, EstimateLevel)
 select OPTION_ID, @Model_ID, phs_code, subp_code, BADC, INTERNAL_EST, EXTERNAL_EST, FINAL_EST, 
 HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, @Raw_Land_CD, 'E'
 from hb_est
 where Model_ID = -1
 and EstimateLevel = 'H'
 and Raw_Land_cd = @Raw_Land_cd
 and Option_ID <> -1
end
else
begin
 print 'elv opts'
 select MODEL_ID, OPTION_ID, PRC_FM, PRC_MARKUP_PCT, PRC_FIXED, PRC_SELL, 
 COST_SUPL, COST_INT, ALLOWANCE, ATTACHED_YN, QTY, PRC_EXTRA_YN, id, 
 Raw_Land_CD, ParentID, HB_Package_ID, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays
 from #ElvOpt

-- copy elv attributes
 print 'Copy option attributes'
 select MODEL_ID, OPTION_ID, ROOM_ID, OATYP_ID, OATVAL_ID, DEFAULT_TF, @RAW_LAND_CD, MODEL_NAME_ID
 from HB_OPT_ATTR_EVALUES ev
 where model_name_id = @Model_Name_ID
 and model_id = @Model_id
 and Raw_land_cd = -1


 select OPTION_ID, @Model_ID, phs_code, subp_code, BADC, INTERNAL_EST, EXTERNAL_EST, FINAL_EST, 
 HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, @Raw_Land_CD, 'E'
 from hb_est
 where Model_ID = -1
 and EstimateLevel = 'H'
 and Raw_Land_cd = @Raw_Land_cd
 and Option_ID <> -1
end
set identity_insert hb_elv_opt off












Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBCopyModelOptToElevation]') and xtype = 'P ')  
 drop Procedure sp_HBCopyModelOptToElevation
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[sp_HBCopyModelOptToElevation]
 @OptionID int, 
 @UOpID int,
 @Model int,
 @Elv int,
 @RLH int
 
as

--declare @OptionID int, @Model int, @Elv int
--select @OptionID = 372, @Model = 43, @Elv = 97

insert hb_est
(OPTION_ID, MODEL_ID, phs_code, subp_code, BADC, INTERNAL_EST, EXTERNAL_EST, 
 FINAL_EST, HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, 
 Raw_Land_CD, MAT_RFQ, TRADE_RFQ, EstimateLevel)
 select OPTION_ID, @Elv, phs_code, subp_code, BADC, INTERNAL_EST, EXTERNAL_EST, 
 FINAL_EST, HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, 
 Raw_Land_CD, MAT_RFQ, TRADE_RFQ, 'E'
from hb_est
where OPTION_ID = @OptionID
and Raw_Land_CD = @RLH
and MODEL_ID = @Model
and EstimateLevel = 'M'

insert hb_est_trd(ETRD_ID, OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, 
 BADC, SUPPLIER, EST_COST, EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, 
 Raw_Land_CD, UOM, EstimateLevel, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, HB_OrderPoint_ID)
select ETRD_ID, OPTION_ID, @Elv, phs_code, subp_code, TRADE_ID, 
 BADC, SUPPLIER, EST_COST, EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, 
 Raw_Land_CD, UOM, 'E', HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, HB_OrderPoint_ID
from hb_est_trd
where OPTION_ID = @OptionID
and Raw_Land_CD = @RLH
and MODEL_ID = @Model
and EstimateLevel = 'M'

insert hb_est_mat
(EMAT_ID, OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, 
MATERIAL_ID, BADC, qty, EST_COST, Raw_Land_CD, HB_Package_ID, HB_OrderPoint_ID, EstimateLevel,
HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays)
select EMAT_ID, OPTION_ID, @Elv, phs_code, subp_code, TRADE_ID, 
MATERIAL_ID, BADC, qty, EST_COST, Raw_Land_CD, HB_Package_ID, HB_OrderPoint_ID, 'E',
HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays
from hb_est_mat
where OPTION_ID = @OptionID
and Raw_Land_CD = @RLH
and MODEL_ID = @Model
and EstimateLevel = 'M'



--do attributes
insert HB_OPT_ATTR_EVALUES 
 (MODEL_ID, OPTION_ID, ROOM_ID, OATYP_ID, OATVAL_ID, DEFAULT_TF, RAW_LAND_CD, MODEL_NAME_ID)
SELECT @Elv, @UOpID, -1, OATYP_ID, OATVAL_ID, DEFAULT_TF, @RLH, @Model
FROM HB_OPT_ATTR_EVALUES 
WHERE OPTION_ID = @OptionID
 and MODEL_NAME_ID = @Model
 and RAW_LAND_CD = @RLH 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBCopyModelToRLHModel]') and xtype = 'P ')  
 drop Procedure sp_HBCopyModelToRLHModel
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_HBCopyModelToRLHModel]
 @Model int,
 @RLH int
as

--declare @RLH int, @Model int
--select @RLH = 50009, @Model = 43

/*
 This proc is designed to copy model options and their alternates
*/
insert hb_mod_opt(MODEL_NAME_ID, OPTION_ID, ALLOWANCE, PRC_FM, PRC_MARKUP_PCT, 
PRC_FIXED, PRC_SELL, COST_SUPL, COST_INT, Raw_land_Cd)
select MODEL_NAME_ID, OPTION_ID, ALLOWANCE, PRC_FM, PRC_MARKUP_PCT, 
PRC_FIXED, PRC_SELL, COST_SUPL, COST_INT, @RLH
from hb_mod_opt
where Model_name_id = @Model
and Raw_land_Cd = -1

--changed alternates here

insert hb_est
(OPTION_ID, MODEL_ID, phs_code, subp_code, BADC, INTERNAL_EST, EXTERNAL_EST, 
 FINAL_EST, HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, 
 Raw_Land_CD, MAT_RFQ, TRADE_RFQ, EstimateLevel)
 select OPTION_ID, @Model, phs_code, subp_code, BADC, INTERNAL_EST, EXTERNAL_EST, 
 FINAL_EST, HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, 
 Raw_Land_CD, MAT_RFQ, TRADE_RFQ, 'M'
from hb_est
where Raw_Land_CD = -1
and MODEL_ID = @Model
and EstimateLevel = 'M'

insert hb_est_trd(ETRD_ID, OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, 
 BADC, SUPPLIER, EST_COST, EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, 
 Raw_Land_CD, UOM, EstimateLevel)
select ETRD_ID, OPTION_ID, @Model, phs_code, subp_code, TRADE_ID, 
 BADC, SUPPLIER, EST_COST, EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, 
 Raw_Land_CD, UOM, 'M'
from hb_est_trd
where Raw_Land_CD = -1
and MODEL_ID = @Model
and EstimateLevel = 'M'

insert hb_est_mat
(EMAT_ID, OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, 
MATERIAL_ID, BADC, qty, EST_COST, Raw_Land_CD, HB_Package_ID, HB_OrderPoint_ID, EstimateLevel)
select EMAT_ID, OPTION_ID, @Model, phs_code, subp_code, TRADE_ID, 
MATERIAL_ID, BADC, qty, EST_COST, Raw_Land_CD, HB_Package_ID, HB_OrderPoint_ID, 'M'
from hb_est_mat
where Raw_Land_CD = -1
and MODEL_ID = @Model
and EstimateLevel = 'M'



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBCopyOptToComm]') and xtype = 'P ')  
 drop Procedure sp_HBCopyOptToComm
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_HBCopyOptToComm]
 @OptionID int, 
 @Community_CD int
as
--do attributes
declare @RLH int, @OptOnlyCost money

select @RLH = Raw_Land_CD
from hb_Communities
where Community_CD = @Community_cd

select @OptOnlyCost = Opt_only_cost
from hb_raw_opt
where Option_ID = @OptionID
and Raw_Land_CD = @RLH 

update hb_comm_opt
set Opt_only_cost = @OptOnlyCost
where Option_ID = @OptionID
and Community_CD = @Community_cd

insert HB_OPT_ATTR_EVALUES (MODEL_ID, OPTION_ID, ROOM_ID, OATYP_ID, OATVAL_ID, DEFAULT_TF, Community_CD, MODEL_NAME_ID)
SELECT -1, @OptionID, -1, OATYP_ID, OATVAL_ID, DEFAULT_TF, @Community_cd, -1
FROM HB_OPT_ATTR_EVALUES OV 
WHERE OV.OPTION_ID=@optionid
and ov.Raw_Land_cd = @rlh
and MODEL_NAME_ID = -1




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBCopyOptToModel]') and xtype = 'P ')  
 drop Procedure sp_HBCopyOptToModel
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[sp_HBCopyOptToModel]
 @OptionID int, 
 @Model int,
 @RLH int
as

--declare @OptionID int, @RLH int, @Model  int
--select @OptionID = 33, @RLH = 50002, @Model = 13

insert hb_est
(OPTION_ID, MODEL_ID, phs_code, subp_code, BADC, INTERNAL_EST, EXTERNAL_EST, 
 FINAL_EST, HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, 
 Raw_Land_CD, MAT_RFQ, TRADE_RFQ, EstimateLevel)
 select OPTION_ID, @Model, phs_code, subp_code, BADC, INTERNAL_EST, EXTERNAL_EST, 
 FINAL_EST, HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, 
 @RLH, MAT_RFQ, TRADE_RFQ, 'M'
from hb_est
where OPTION_ID = @OptionID
and Raw_Land_CD = @RLH
and MODEL_ID = -1

insert hb_est_trd(ETRD_ID, OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, 
 BADC, SUPPLIER, EST_COST, EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, 
 Raw_Land_CD, UOM, EstimateLevel, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, HB_OrderPoint_ID)
select ETRD_ID, OPTION_ID, @Model, phs_code, subp_code, TRADE_ID, 
 BADC, SUPPLIER, EST_COST, EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, 
 @RLH, UOM, 'M', HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, HB_OrderPoint_ID
from hb_est_trd
where OPTION_ID = @OptionID
and Raw_Land_CD = @RLH
and MODEL_ID = -1

insert hb_est_mat
(EMAT_ID, OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, 
MATERIAL_ID, BADC, qty, EST_COST, Raw_Land_CD, HB_Package_ID, HB_OrderPoint_ID, EstimateLevel,
HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays)
select EMAT_ID, OPTION_ID, @Model, phs_code, subp_code, TRADE_ID, 
MATERIAL_ID, BADC, qty, EST_COST, @RLH, HB_Package_ID, HB_OrderPoint_ID, 'M',
HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays
from hb_est_mat
where OPTION_ID = @OptionID
and Raw_Land_CD = @RLH
and MODEL_ID = -1


--do attributes
if @RLH <> -1
begin--pull from the master model (pulling form rlh is now deprecated)
/* 
insert HB_OPT_ATTR_EVALUES (MODEL_ID, OPTION_ID, ROOM_ID, OATYP_ID, OATVAL_ID, DEFAULT_TF, RAW_LAND_CD, MODEL_NAME_ID)
 SELECT -1, @OptionID, -1, OATYP_ID, OATVAL_ID, DEFAULT_TF, @RLH, @Model
 FROM HB_OPT_ATTR_EVALUES OV 
 WHERE OV.OPTION_ID=@OptionID
 and Raw_Land_CD = @RLH
 and MODEL_ID = -1
*/

 insert HB_OPT_ATTR_EVALUES (MODEL_ID, OPTION_ID, ROOM_ID, OATYP_ID, OATVAL_ID, DEFAULT_TF, RAW_LAND_CD, MODEL_NAME_ID)
 SELECT -1, @OptionID, -1, OATYP_ID, OATVAL_ID, DEFAULT_TF, @RLH, @Model
 FROM HB_OPT_ATTR_EVALUES OV 
 WHERE OV.OPTION_ID=@OptionID
 and MODEL_ID = -1
 and Model_Name_ID = @Model 
end
else
begin
 insert HB_OPT_ATTR_EVALUES (MODEL_ID, OPTION_ID, ROOM_ID, OATYP_ID, OATVAL_ID, DEFAULT_TF, RAW_LAND_CD, MODEL_NAME_ID)
 SELECT -1, @OptionID, -1, OATYP_ID, OATVAL_ID, DEFAULT_TF, @RLH, @Model
 FROM HB_OPT_ATTR_OVALUES OV 
 WHERE OV.OPTION_ID=@OptionID
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBCopyOptToProj]') and xtype = 'P ')  
 drop Procedure sp_HBCopyOptToProj
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_HBCopyOptToProj]
 @OptionID int, 
 @Project_CD int
as
--do attributes
declare @Community_CD int, @OptOnlyCost money

select @Community_CD = Community_CD
from hb_Project
where Project_CD = @Project_CD

select @OptOnlyCost = Opt_only_cost
from hb_comm_opt
where Option_ID = @OptionID
and Community_CD = @Community_CD

update hb_proj_opt
set Opt_only_cost = @OptOnlyCost
where Option_ID = @OptionID
and Project_CD = @Project_CD


insert HB_OPT_ATTR_EVALUES (MODEL_ID, OPTION_ID, ROOM_ID, OATYP_ID, OATVAL_ID, DEFAULT_TF, Project_CD, MODEL_NAME_ID)
SELECT -1, @OptionID, -1, OATYP_ID, OATVAL_ID, DEFAULT_TF, @Project_CD, -1
FROM HB_OPT_ATTR_EVALUES OV 
WHERE OV.OPTION_ID=@OptionID
and ov.Community_CD = @Community_CD
and MODEL_NAME_ID = -1




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBCopyOptToRLH]') and xtype = 'P ')  
 drop Procedure sp_HBCopyOptToRLH
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[sp_HBCopyOptToRLH]
 @OptionID int, 
 @RLH int
as

--declare @OptionID int, @RLH int
--select @OptionID = 371, @RLH = 50009

insert hb_est
(OPTION_ID, MODEL_ID, phs_code, subp_code, BADC, INTERNAL_EST, EXTERNAL_EST, 
 FINAL_EST, HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, 
 Raw_Land_CD, MAT_RFQ, TRADE_RFQ, EstimateLevel)
 select OPTION_ID, MODEL_ID, phs_code, subp_code, BADC, INTERNAL_EST, EXTERNAL_EST, 
 FINAL_EST, HOURS, SEND_RFQ, MAT_EST, TRADE_EST, MANUAL_YN_TRD, MANUAL_YN_MAT, 
 @RLH, MAT_RFQ, TRADE_RFQ, 'H'
from hb_est
where OPTION_ID = @OptionID
and Raw_Land_CD = -1
and MODEL_ID = -1


insert hb_est_trd(ETRD_ID, OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, 
 BADC, SUPPLIER, EST_COST, EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, 
 Raw_Land_CD, UOM, EstimateLevel, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, HB_OrderPoint_ID)
select ETRD_ID, OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, 
 BADC, SUPPLIER, EST_COST, EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, 
 @RLH, UOM, 'H', HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, HB_OrderPoint_ID
from hb_est_trd
where OPTION_ID = @OptionID
and Raw_Land_CD = -1
and MODEL_ID = -1

insert hb_est_mat
(EMAT_ID, OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, 
MATERIAL_ID, BADC, qty, EST_COST, Raw_Land_CD, HB_Package_ID, EstimateLevel, 
HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, HB_OrderPoint_ID)
select EMAT_ID, OPTION_ID, MODEL_ID, phs_code, subp_code, TRADE_ID, 
MATERIAL_ID, BADC, qty, EST_COST, @RLH, HB_Package_ID, 'H', 
HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays, HB_OrderPoint_ID
from hb_est_mat
where OPTION_ID = @OptionID
and Raw_Land_CD = -1
and MODEL_ID = -1

--do attributes
insert HB_OPT_ATTR_EVALUES (MODEL_ID, OPTION_ID, ROOM_ID, OATYP_ID, OATVAL_ID, DEFAULT_TF, RAW_LAND_CD, MODEL_NAME_ID)
SELECT -1, @OptionID, -1, OATYP_ID, OATVAL_ID, DEFAULT_TF, @RLH, -1
FROM HB_OPT_ATTR_OVALUES OV 
WHERE OV.OPTION_ID=@OptionID




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBDeleteOptFromComm]') and xtype = 'P ')  
 drop Procedure sp_HBDeleteOptFromComm
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc [dbo].[sp_HBDeleteOptFromComm]
 @Option_ID int,
 @Community int
as

delete HB_OPT_ATTR_EVALUES
WHERE MODEL_ID = -1
and MODEL_NAME_ID = -1
and OPTION_ID=@Option_ID
and Community_cd = @Community



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBDeleteOptFromElv]') and xtype = 'P ')  
 drop Procedure sp_HBDeleteOptFromElv
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_HBDeleteOptFromElv]
 @Option_ID int,
 @ModelID int,
 @RLH int
as


delete hb_est
where option_id = @Option_id
and Raw_Land_CD = @RLH
and model_id = @ModelID
and EstimateLevel = 'E'

delete hb_est_trd
where option_id = @Option_id
and Raw_Land_CD = @RLH
and model_id = @ModelID
and EstimateLevel = 'E'


delete hb_est_mat
where option_id = @Option_id
and Raw_Land_CD = @RLH
and model_id = @ModelID
and EstimateLevel = 'E'



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBDeleteOptFromModel]') and xtype = 'P ')  
 drop Procedure sp_HBDeleteOptFromModel
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_HBDeleteOptFromModel]
 @Option_ID int,
 @ModelID int,
 @RLH int
as


delete hb_est
where option_id = @Option_id
and Raw_Land_CD = @RLH
and model_id = @ModelID
and EstimateLevel = 'M'

delete hb_est_trd
where option_id = @Option_id
and Raw_Land_CD = @RLH
and model_id = @ModelID
and EstimateLevel = 'M'


delete hb_est_mat
where option_id = @Option_id
and Raw_Land_CD = @RLH
and model_id = @ModelID
and EstimateLevel = 'M'

delete HB_OPT_ATTR_EVALUES
WHERE MODEL_ID = -1
and MODEL_NAME_ID = @ModelID
and OPTION_ID=@Option_ID
and RAW_LAND_CD = @RLH 






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBDeleteOptFromProj]') and xtype = 'P ')  
 drop Procedure sp_HBDeleteOptFromProj
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc [dbo].[sp_HBDeleteOptFromProj]
 @Option_ID int,
 @Project int
as

delete HB_OPT_ATTR_EVALUES
WHERE MODEL_ID = -1
and MODEL_NAME_ID = -1
and OPTION_ID=@Option_ID
and Project_cd = @Project



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBDeleteOptFromRLH]') and xtype = 'P ')  
 drop Procedure sp_HBDeleteOptFromRLH
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_HBDeleteOptFromRLH]
 @Option_ID int,
 @RLH int
as


delete hb_est
where option_id = @Option_id
and Raw_Land_CD = @RLH
and model_id = -1
and EstimateLevel = 'H'

delete hb_est_trd
where option_id = @Option_id
and Raw_Land_CD = @RLH
and model_id = -1
and EstimateLevel = 'H'

delete hb_est_mat
where option_id = @Option_id
and Raw_Land_CD = @RLH
and model_id = -1
and EstimateLevel = 'H'

delete HB_OPT_ATTR_EVALUES
WHERE MODEL_ID = -1
and MODEL_NAME_ID = -1
and OPTION_ID=@Option_ID
and RAW_LAND_CD = @RLH 



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBDeleteRLEst]') and xtype = 'P ')  
 drop Procedure sp_HBDeleteRLEst
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE proc [dbo].[sp_HBDeleteRLEst]
 @RAW_LAND_CD int,
 @MODEL_ID int
as


delete HB_Est
where RAW_LAND_CD = @RAW_LAND_CD and MODEL_ID = @MODEL_ID and EstimateLevel <> 'M'

delete hb_Est_Mat
where RAW_LAND_CD = @RAW_LAND_CD and MODEL_ID = @MODEL_ID and EstimateLevel <> 'M'

delete hb_Est_Trd
where RAW_LAND_CD = @RAW_LAND_CD and MODEL_ID = @MODEL_ID and EstimateLevel <> 'M'

delete HB_Model_Packages
where HBModelID = @Model_ID
and Raw_Land_CD = @Raw_Land_CD

delete hb_model
where model_id = @Model_id
and Raw_Land_CD = @Raw_Land_CD

delete HB_OPTION_DESIGNATIONS
where ElvOpt_ID in 
(select id from hb_elv_opt
where MODEL_ID = @MODEL_ID
and Raw_Land_CD = @Raw_Land_CD)


delete hb_elv_opt
where MODEL_ID = @MODEL_ID
and Raw_Land_CD = @Raw_Land_CD

delete HB_OPT_ATTR_EVALUES
where MODEL_ID = @MODEL_ID
and Raw_Land_CD = @Raw_Land_CD

declare
 @model_name_id int, @Count int

 select @Model_name_id = Model_name_id
 from hb_model
 where model_id = @Model_id

 select @Count = count(*)
 from hb_model
 where Model_name_id = @Model_name_id
 and Raw_Land_CD = @Raw_Land_CD

 if isnull(@Count,0) = 0
 begin
  delete hb_mod_opt
  where MODEL_NAME_ID = @MODEL_NAME_ID
  and Raw_Land_CD = @Raw_Land_CD

  delete HB_Est
  where RAW_LAND_CD = @RAW_LAND_CD and MODEL_ID = @MODEL_NAME_ID and EstimateLevel = 'M'

  delete hb_Est_Mat
  where RAW_LAND_CD = @RAW_LAND_CD and MODEL_ID = @MODEL_NAME_ID and EstimateLevel = 'M'

  delete hb_Est_Trd
  where RAW_LAND_CD = @RAW_LAND_CD and MODEL_ID = @MODEL_NAME_ID and EstimateLevel = 'M'

  delete HB_OPT_ATTR_EVALUES
  where MODEL_NAME_ID = @MODEL_NAME_ID 
  and Raw_Land_CD = @Raw_Land_CD

 end
 







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBQuoteGrossMargin]') and xtype = 'P ')  
 drop Procedure sp_HBQuoteGrossMargin
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--exec sp_HBQuoteGrossMargin 1174, 'rob'
CREATE proc [dbo].[sp_HBQuoteGrossMargin]
@QuoteID int, @PCID varchar(500)
as

--declare @QuoteID int, @PCID varchar(500)
--select @QuoteID = 1174, @PCID = 'Rob'
---- generate high level gross margin

delete hb_working_GrossMargin
where pcid = @PCid
-- selling price line
declare @SellingPrice money
select @SellingPrice = FinalPrice
from scQuote
where id = @Quoteid
select @SellingPrice  = isnull(@SellingPrice ,0)

insert hb_working_GrossMargin([Description], Seq, SpecialID, Revenue, Cost, [Margin$], [Margin%], PCID)
select 'Selling Price', 1, 'XGM', @SellingPrice, null, null, null, @PCID

-- Selling Price WO taxes
declare @Taxes money
select @Taxes = gsttotal
from scQuote
where id = @Quoteid
select @Taxes = isnull(@Taxes,0)

insert hb_working_GrossMargin([Description], Seq, SpecialID, Revenue, Cost, [Margin$], [Margin%], PCID)
select 'Pre-Tax Selling Price', 2, 'XGM', @SellingPrice - @Taxes, null, null, null, @PCID

-- Lot price / cost (same) / Margin $ / magin %
declare @ProjectID int, @HoldingID int, @LotPrice money, @LotCost money
select @ProjectID = ProjectID, @HoldingID = HoldingID
from scQuote where id = @QuoteID

select @LotPrice = isnull(Price,0) + isnull(Lot_Premium,0)
from hb_lots
where PROJECT_CD = @ProjectID


select @LotPrice = isnull(@LotPrice,0), @LotCost = isnull(@LotPrice,0)

insert hb_working_GrossMargin([Description], Seq, SpecialID, Revenue, Cost, [Margin$], [Margin%], PCID)
select 'Lot Price', 3, 'GM', @LotPrice, @LotCost, @LotPrice - @LotCost, (@LotPrice - @LotCost) / @LotPrice , @PCID


-- House Base Price / cost / Margin $ / magin %
declare @BasePrice money, @BaseCost money

select @BasePrice = Base_Price
from scQuote sq
join hb_model m
on m.MODEL_ID = sq.ModelID
and m.RAW_LAND_CD = sq.HoldingID
where sq.id = @QuoteID

select @BaseCost = sum(INTERNAL_EST)
from scQuote sq
join hb_model m
on m.MODEL_ID = sq.ModelID
and m.RAW_LAND_CD = sq.HoldingID
join hb_est e
on e.model_id = m.model_id
and e.raw_land_cd = m.RAW_LAND_CD
where
 e.option_id = -1
 and sq.id = @Quoteid

insert hb_working_GrossMargin([Description], Seq, SpecialID, Revenue, Cost, [Margin$], [Margin%], PCID)
select 'Home Base Price', 4, 'GM', @BasePrice, @BaseCost, @BasePrice - @BaseCost, (@BasePrice - @BaseCost) / @BasePrice , @PCID

-- extras 
declare @OptionsSellingPrice money, @OptionCost money
select @OptionsSellingPrice = sum(isnull(PayableTotal,0) - (isnull(Adjustments,0) + isNull(AttributeCost,0)))
from scQuoteOptions qo
join hb_opt_maj_group mg
on qo.Major_ID = mg.MAJ_GROUP_ID
join HB_OPT_SUB_GROUP sg
on qo.Sub_ID = sg.SUB_GROUP_ID
join hb_options o
on o.option_id = qo.option_id
join hb_elv_opt eo
on eo.id = qo.HB_Elv_Opt_Id
where quoteid = @quoteid 
and removed <> 1

declare @EstCosts table (id int not null identity(1,1), hb_elv_opt_id int, Cost money)

insert @EstCosts
select eo.id, 0
from scQuoteOptions qo
join hb_opt_maj_group mg
on qo.Major_ID = mg.MAJ_GROUP_ID
join HB_OPT_SUB_GROUP sg
on qo.Sub_ID = sg.SUB_GROUP_ID
join hb_options o
on o.option_id = qo.option_id
join hb_elv_opt eo
on eo.id = qo.HB_Elv_Opt_Id
where quoteid = @quoteid
and Removed = 0

declare @HB_Elv_Opt_ID int

    declare PrincCursor cursor
    read_only
    for
    select HB_Elv_Opt_ID from @EstCosts
  
    open PrincCursor
    fetch next from PrincCursor into @HB_Elv_Opt_ID
    while (@@fetch_status <> -1)
    begin
     if (@@fetch_status <> -2)
     begin

		--then get attached option costs
		select @OptionCost = sum(INTERNAL_EST)
        from hb_elv_opt eo
		join hb_est e
		on e.model_id = eo.model_id
		and e.raw_land_cd = eo.RAW_LAND_CD
		and e.option_id = eo.option_id
		where
         eo.id = @HB_Elv_Opt_ID
    
		update @EstCosts
        set Cost = @OptionCost
        where HB_Elv_Opt_ID = @HB_Elv_Opt_ID
     end
    fetch next from PrincCursor into @HB_Elv_Opt_ID
    end

    close PrincCursor
    deallocate PrincCursor

select @OptionCost = sum(Cost) from @EstCosts
insert hb_working_GrossMargin([Description], Seq, SpecialID, Revenue, Cost, [Margin$], [Margin%], PCID)
select 'Options Price', 5, 'GM', @OptionsSellingPrice, @OptionCost, @OptionsSellingPrice - @OptionCost, (@OptionsSellingPrice - @OptionCost) / @OptionsSellingPrice , @PCID


-- Option Atributes / Adjustments

-- extras 
declare @OptionsAttributePrice money
select @OptionsAttributePrice = sum((isnull(Adjustments,0) + isNull(AttributeCost,0)))
from scQuoteOptions qo
join hb_opt_maj_group mg
on qo.Major_ID = mg.MAJ_GROUP_ID
join HB_OPT_SUB_GROUP sg
on qo.Sub_ID = sg.SUB_GROUP_ID
join hb_options o
on o.option_id = qo.option_id
join hb_elv_opt eo
on eo.id = qo.HB_Elv_Opt_Id
where quoteid = @quoteid 
and removed <> 1

insert hb_working_GrossMargin([Description], Seq, SpecialID, Revenue, Cost, [Margin$], [Margin%], PCID)
select 'Opt. Adjs. / Attribute Costs', 6, 'GM', @OptionsAttributePrice, @OptionsAttributePrice, 0, 0, @PCID



-- total base price
declare @BaseRevenue money, @BaseMargin money
select @BaseRevenue  = sum(Revenue), @BaseCost = sum(cost), @BaseMargin = sum([Margin$])
from hb_working_GrossMargin where seq in (6,5,4)

insert hb_working_GrossMargin([Description], Seq, SpecialID, Revenue, Cost, [Margin$], [Margin%], PCID)
select 'House Price', 7, 'GM', @BaseRevenue, @BaseCost, @BaseMargin, (@BaseRevenue - @BaseCost) / @BaseRevenue , @PCID


-- house and lot
declare @Revenue money, @Margin money, @Cost money
select @Revenue  = sum(Revenue), @Cost = sum(cost), @Margin = sum([Margin$])
from hb_working_GrossMargin where seq in (7,3)

insert hb_working_GrossMargin([Description], Seq, SpecialID, Revenue, Cost, [Margin$], [Margin%], PCID)
select 'House And Lot Price', 8, 'GM', @Revenue, @Cost, @Margin, (@Revenue - @Cost) / @Revenue , @PCID



-- commission calculation
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Comm'))
  drop table #Comm
create table #Comm ([Sale Amount] money, Salesperson varchar(50), Commission money, RangeLow money,
RangeHigh money, [Commission Percent] float, [Commission Flat Amount] money, SalesType varchar(50),
Sequence int, Paid bit, Voucher varchar(20))

insert #Comm
exec [sp_scGetCommissions] @Quoteid

declare @Commission money
select @Commission = sum(commission) from #Comm

insert hb_working_GrossMargin([Description], Seq, SpecialID, Revenue, Cost, [Margin$], [Margin%], PCID)
select 'Combined Commissions', 9, 'GMX', @Revenue, @Commission, null, null, @PCID


-- sub total


-- os sales


-- other adjustments?


-- total

select *
from hb_working_GrossMargin



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBReportListingMaterials]') and xtype = 'P ')  
 drop Procedure sp_HBReportListingMaterials
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure [dbo].[sp_HBReportListingMaterials] (@PCID varchar(500))

AS

-- exec sp_HBReportListingMaterials 'hm'

Declare @str varchar(8000), @Filter varchar(8000)

Set @Filter = ''

if Exists(Select * from working_MaterialGroups Where PCID = @PCID)
	Set @Filter = @Filter + ' AND mg.MatGroup_ID in (Select MatGroup_ID From working_MaterialGroups Where PCID = ''' + @PCID + ''') '
if Exists(Select * from working_Materials Where PCID = @PCID)
	Set @Filter = @Filter + ' AND m.Material_ID in (Select Material_ID From working_Materials Where PCID = ''' + @PCID + ''') '

Set @str = 'Select mg.MatGroup_ID, mg.Group_Desc, m.Material_ID, m.Mat_Code, m.Mat_Short_Desc, Convert(varchar(8000),m.EXP_Desc) ExtendedDescription, uom.Description
					from HB_Material m 
					Inner Join HB_Mat_Group mg on mg.MatGroup_ID = m.MatGroup_ID
					left outer Join UNITS_OF_MEASURE uom on uom.Unit_Of_Measure_Code = m.UOM Where 1=1 '  + @Filter

exec(@Str)


--Declare @PCID varchar(500), @PrintPrice bit, @RFQTYPE varchar(2), @ShowAll varchar(2), @Date datetime
--Select @PCID = '1d5s8-dds84-s8qe6', @PrintPrice = 1, @RFQTYPE = 'S', @ShowAll = 'F', @Date = '5/1/2007'

--if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Materials'))  
-- drop table #Materials
--
--Create Table #Materials
--(
--	ID int identity(1,1) not null,
--	MatGroup_ID int null,
--	MaterialGroup varchar(50) null,
--	Material_ID int null,
--	MaterialCode varchar(30) null,
--	[Description] varchar(50) null,
--	ExtendedDescription text null,
--	Supplier varchar(50) null,
--	UOM varchar(30) null,
--	Price money null
--)

--	End
--if @ShowAll = 'F'
--	Begin
--		Set @str = 'Select Distinct mg.MatGroup_ID, mg.Group_Desc, m.Material_ID, m.Mat_Code, m.Mat_Short_Desc, Convert(varchar(8000),m.EXP_Desc), uom.Description
--					from HB_Material m
--					Inner Join HB_Mat_Group mg on mg.MatGroup_ID = m.MatGroup_ID
--					Inner Join RFQ_Cost rc on rc.Material_ID = m.Material_ID
--					Inner Join UNITS_OF_MEASURE uom on uom.Unit_Of_Measure_Code = m.UOM
--					Where IsNull(rc.RFQC_Type_MOE,''M'') = ''M'' ' + @Filter
--	End
--Else
--	Begin
--		Set @str = 'Select mg.MatGroup_ID, mg.Group_Desc, m.Material_ID, m.Mat_Code, m.Mat_Short_Desc, Convert(varchar(8000),m.EXP_Desc), uom.Description
--					from HB_Material m 
--					Inner Join HB_Mat_Group mg on mg.MatGroup_ID = m.MatGroup_ID
--					Inner Join UNITS_OF_MEASURE uom on uom.Unit_Of_Measure_Code = m.UOM Where 1=1 '  + @Filter
--	End
--
--Insert Into #Materials (MatGroup_ID, MaterialGroup, Material_ID, MaterialCode, [Description], ExtendedDescription, UOM)
--Exec (@str)
--
--Declare @ID int, @MatGroup_ID int, @Material_ID int, @Supplier varchar(50), @Price money
--
--Declare aMaterials Cursor for
--
--Select ID, MatGroup_ID, Material_ID From #Materials
--
--Open aMaterials
--
--Fetch Next From aMaterials Into @ID, @MatGroup_ID, @Material_ID
--
--While @@FETCH_STATUS = 0
--	Begin
--		
--		If @RFQTYPE = 'B'
--			Begin
--				
--				Select Top 1 @Supplier = Supplier_Name, @Price = min(Cost) From RFQ_Cost
--				Where RFQC_TYPE_MOE = 'M' and DATE_EXPIRE >= @Date and BudgetSelected = 'T' and Material_ID = @Material_ID
--				Group By Cost, Supplier_Name
--				Order By Cost
--
--				If @Supplier is null
--					Set @Supplier = '**No Supplier Selected**'
--				
--			End
--		Else if @RFQTYPE = 'S'
--			Begin
--				
--				Select Top 1 @Supplier = Supplier_Name, @Price = min(Cost) From RFQ_Cost
--				Where RFQC_TYPE_MOE = 'M' and DATE_EXPIRE >= @Date and Def = 'T' and Material_ID = @Material_ID
--				Group By Cost, Supplier_Name
--				Order By Cost
--				
--				If @Supplier is null
--					Set @Supplier = '**No Supplier Selected**'
--			End
--		Else
--			Begin
--				
--				Select Top 1 @Supplier = Supplier_Name, @Price = min(Cost) From RFQ_Cost
--				Where RFQC_TYPE_MOE = 'M' and DATE_EXPIRE >= @Date and Material_ID = @Material_ID
--				Group By Cost, Supplier_Name
--				Order By Cost
--				
--				If @Supplier is null
--					Set @Supplier = '**Not RFQ''d**'
--			End
--
--		If @PrintPrice = 0
--			Begin
--				Set @Price = null
--			End
--
--		If @ShowAll <> 'F'
--			Begin
--				If (Select Count(*) from RFQ_Cost Where RFQC_TYPE_MOE = 'M' and DATE_EXPIRE >= @Date and Material_ID = @Material_ID) = 0
--					Begin
--						Set @Supplier = '**Not RFQ''d**'
--					End
--			End
--
--		Update #Materials
--		Set Supplier = @Supplier, Price = @Price
--		Where ID = @ID
--		
--		Select @Supplier = null, @Price = null
--
--		Fetch Next From aMaterials Into @ID, @MatGroup_ID, @Material_ID
--		
--	End
--
--Close aMaterials
--DeAllocate aMaterials
--
--Select MaterialGroup, MaterialCode, [Description], ExtendedDescription, Supplier, UOM, Price From #Materials



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBReportListingModelElevation]') and xtype = 'P ')  
 drop Procedure sp_HBReportListingModelElevation
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--exec sp_HBReportListingModelElevation '4725b820-c7e9-4d18-ac78-2bb86edecab8','M'  

--Holding, Community, Phase
--exec sp_HBReportListingModelElevation 'hm','HCP'
--Master Level
--exec sp_HBReportListingModelElevation 'hm','M'
CREATE Procedure [dbo].[sp_HBReportListingModelElevation] (@PCID varchar(500), @Style varchar(3))    
    
AS    
    
----Style Types    
-- 'HCP' Holding,Community,Phase    
-- 'M' Master Level    
    
--Declare @PCID varchar(500), @Style varchar(3)    
--Select @PCID = '4a3dab7c-d9be-4c50-bf3f-3716526803b3', @Style = 'M'    
    
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ModelElevationListing'))      
 drop table #ModelElevationListing    
    
create table #ModelElevationListing    
(    
 Holding varchar(50) null,    
 Community varchar(50) null,    
 Phase varchar(50) null,    
 Model varchar(44) null,    
 Elevation varchar(50) null,    
 [Plan] int null,    
 [Description] text null,    
 Style varchar(30) null,    
 Area money null,    
 Rooms varchar(7000) null,    
 Model_ID int null,
 Model_code varchar(15) null,
 UOM varchar(5) null    
)    
    
Declare @Filter varchar(8000), @str varchar(5000)    
Set @Filter = ''    
    
if Exists(Select * from working_holding where PCID = @PCID)    
 Set @Filter = @Filter + ' AND rl.Raw_Land_CD in (Select Raw_Land_CD from working_holding where PCID = ''' + @PCID + ''') '    
if Exists(Select * from working_community where PCID = @PCID)    
 Set @Filter = @Filter + ' AND c.Community_CD in (Select Community_CD from working_community where PCID = ''' + @PCID + ''') '    
if Exists(Select * from working_project where PCID = @PCID)    
 Set @Filter = @Filter + ' AND p.Project_CD in (Select Project_CD from working_project where PCID = ''' + @PCID + ''') '    
if Exists(Select * from working_model where PCID = @PCID)    
 Set @Filter = @Filter + ' AND m.Model_ID in (Select Model_ID from working_model where PCID = ''' + @PCID + ''') '    
if Exists(Select * from working_model_name where PCID = @PCID)    
 Set @Filter = @Filter + ' AND mn.Model_Name_ID in (Select Model_Name_ID from working_model_name where PCID = ''' + @PCID + ''') '    
    
If @Style = 'HCP'    
 Begin    
  Set @str = 'Select rl.Raw_Land_Desc, c.Community_Desc, p.Project_Desc, mn.Model_Name, m.Model_Desc, m.Plan_Num, m.Model_Exp_Desc,    
      ms.ModStyle_desc, m.Footage,'''', m.Model_ID, mn.Model_Code, m.FOOTAGE_un_code    
  from HB_Raw_Land rl    
  Inner Join HB_Communities c on c.Raw_Land_CD = rl.Raw_Land_CD    
  Inner Join HB_Project p on p.Raw_Land_Cd = rl.Raw_Land_Cd and p.Community_CD = c.Community_Cd    
  Inner Join HB_Proj_Model pm on pm.Project_Cd = p.Project_Cd    
  Inner Join HB_Model m on m.Model_ID = pm.Model_ID and rl.Raw_Land_Cd = m.Raw_Land_CD    
  Inner Join HB_Model_Name mn on mn.Model_Name_ID = m.Model_Name_ID    
  Inner Join HB_Model_Style ms on ms.ModStyle_ID = mn.ModStyle_ID    
  Where m.Raw_Land_CD != -1 ' + @Filter + '    
  Order By rl.Raw_Land_CD, c.Community_CD, p.Project_CD, mn.Model_Name_ID, m.Model_ID'    
    
  Insert Into #ModelElevationListing (Holding,Community,Phase,Model,Elevation,[Plan],[Description],Style,Area,Rooms, Model_ID, Model_code, UOM)
  Exec(@str)    
 End    
Else -- 'M' Master Level    
 Begin    
  Set @str = 'Select null, null, null, mn.Model_Name, m.Model_Desc, m.Plan_Num, m.Model_Exp_Desc,    
      ms.ModStyle_desc, m.Footage,'''', m.Model_ID, mn.Model_Code, m.FOOTAGE_un_code        
  from HB_Model m   
  Inner Join HB_Model_Name mn on mn.Model_Name_ID = m.Model_Name_ID    
  Inner Join HB_Model_Style ms on ms.ModStyle_ID = mn.ModStyle_ID    
  Where m.Raw_Land_CD = -1    
  Order By mn.Model_Name_ID, m.Model_ID'    
      
  Insert Into #ModelElevationListing (Holding,Community,Phase,Model,Elevation,[Plan],[Description],Style,Area,Rooms, Model_ID, Model_code, UOM)    
  Exec(@str)    
 End    
    
    
Declare @Model_ID int, @RoomType_ID int, @Description varchar(7000)    
    
Set @Description = ''    
    
Declare aModels Cursor For    
    
Select Distinct Model_ID from #ModelElevationListing    
    
Open aModels    
    
Fetch Next From aModels into @Model_ID    
    
While @@FETCH_STATUS = 0    
    
 Begin    
      
  Declare aRooms Cursor For    
      
  Select RoomType_ID from HB_Room_Type    
  Order By ISort    
    
  Open aRooms    
      
  Fetch Next From aRooms into @RoomType_ID    
      
  While @@FETCH_STATUS = 0    
   Begin    
        
    Select  @Description = @Description + rt.RoomType_Desc + '(' + Convert(varchar(30),Count (rt.RoomType_ID)) + '), '    
    From HB_Room_Type rt    
    Inner Join HB_Rooms r on r.RoomType_ID = rt.RoomType_ID    
    Inner Join HB_Model_Rooms mr on mr.Room_ID = r.Room_ID    
    Where mr.Model_ID = @Model_ID and rt.RoomType_ID = @RoomType_ID and mr.Model_Or_Elev = 'E'    
    Group By rt.RoomType_ID, rt.RoomType_Desc    
        
    Fetch Next From aRooms into @RoomType_ID    
   End    
    
  Close aRooms    
      
  DeAllocate aRooms    
    
  If(@Description <> '')    
   Begin    
    Select @Description = SubString(@Description,0,(Len(@Description)))    
    
    Update #ModelElevationListing    
    Set Rooms = @Description    
    Where Model_ID = @Model_ID    
    
    Set @Description = ''    
   End    
      
  Fetch Next From aModels into @Model_ID    
      
 End    
    
Close aModels    
DeAllocate aModels    
    
    
Select Holding,Community,Phase,Model,Elevation,[Plan],[Description],Style,Area,UOM,Model_Code,Rooms, ro.* from #ModelElevationListing mel  
left outer join hb_report_options ro on ro.pcid=@PCID  
    
    
    
  



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBReportListingOptions]') and xtype = 'P ')  
 drop Procedure sp_HBReportListingOptions
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE Procedure [dbo].[sp_HBReportListingOptions] (@PCID varchar(500), @PrintCalc bit)  
AS  
  
--Print Costs  
--exec sp_HBReportListingOptions 'a36a6e5e-7b31-4c6a-a773-d9a23b860913', 1  
--No Costs  
--exec sp_HBReportListingOptions 'hm', 0  
  
--Declare @PCID varchar(500), @PrintCalc bit  
--Select @PCID = 'ken', @PrintCalc = 1  
  
  
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#OptionsList'))    
 drop table #OptionsList  
  
create table #OptionsList  
(  
 OptionGroup varchar(50) null,  
 OptionSubGroup varchar(50) null,  
 [Option] varchar(50) null,  
 [Option Description] text null,  
 [Attribute Type] varchar(30) null,  
 [Attribute Values] text null,  
 UOM varchar(30) null,  
 Pricing varchar(20) null,  
 Cost money null,  
 [Selling Price] money null  
)  
  
Declare @str varchar(8000), @OptionGroup varchar(8000), @OptionSubGroup varchar(8000), @Option varchar(8000)  
  
Select @OptionGroup = '', @OptionSubGroup = '', @Option = ''  
  
If Exists(Select * From working_Opt_Maj_Group Where PCID = @PCID)  
 Set @OptionGroup = ' AND omg.Maj_Group_ID in (Select Maj_Group_ID From working_Opt_Maj_Group where PCID = ''' + @PCID + ''') '  
If Exists(Select * From working_Opt_Sub_Group Where PCID = @PCID)  
 Set @OptionSubGroup = ' AND osg.Sub_Group_ID in (Select Sub_Group_ID From working_Opt_Sub_Group where PCID = ''' + @PCID + ''') '  
If Exists(Select * From working_Options Where PCID = @PCID)  
 Set @Option = ' AND o.Option_ID in (Select Option_ID From working_Options where PCID = ''' + @PCID + ''') '  
  
  
  
  
Set @str = 'select Distinct GROUP_DESC [Option Group], SUB_GROUP_DESC [Option Subgroup], SHORT_DESC [Option],   
EXP_Desc [Option Description], IsNull(oat.oatyp_desc,'''') [Attribute Type],   
dbo.fn_Get_Option_Attr_Values(-1,-1,-1,o.Option_ID,oao.oatyp_id,''M'') [Attribute Values],  
uom.Description [UOM],  
Case When PRC_FM = ''M'' Then Convert(varchar(50),IsNull(PRC_MARKUP_PCT,0)) + ''%''   
  Else Convert(varchar(50),IsNull(Prc_Fixed,0)) + ''$'' End [Pricing],  
Case When  ' + Convert(varchar(10), @PrintCalc) + ' = 1 then IsNull(Cost_Supl,0) Else -1 End [Cost],   
IsNull(Prc_Sell,0) [Selling Price]  
from dbo.HB_OPTIONS o  
join dbo.HB_OPT_MAJ_GROUP omg  
on omg.MAJ_GROUP_ID = o.MAJ_GROUP_ID  
join dbo.HB_OPT_SUB_GROUP osg  
on osg.SUB_GROUP_ID = o.SUB_GROUP_ID   
join dbo.Units_Of_Measure uom on uom.Unit_Of_Measure_Code = o.UOM  
left outer join dbo.HB_Opt_Attr_Ovalues oao on oao.Option_ID = o.Option_ID  
left outer join dbo.HB_Opt_Attr_Type oat on oat.oatyp_id = oao.oatyp_id  
Where 1=1 ' + @OptionGroup + @OptionSubGroup + @Option  
  
Insert Into #OptionsList(OptionGroup, OptionSubGroup, [Option], [Option Description], [Attribute Type], [Attribute Values],  
       UOM, Pricing, Cost, [Selling Price])  
Exec(@str)  
  
Select * From #OptionsList




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBReportListingTradeCodes]') and xtype = 'P ')  
 drop Procedure sp_HBReportListingTradeCodes
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure [dbo].[sp_HBReportListingTradeCodes] (@PCID varchar(500), @ShowPayPoints bit)

AS

--With Pay Points
--exec sp_HBReportListingTradeCodes 'hm', 1
--Without Pay Points
--exec sp_HBReportListingTradeCodes 'hm', 0

--Declare @PCID varchar(500), @ShowPayPoints bit
--Select @PCID = 'hm', @ShowPayPoints = 0


If Exists (Select * From tempdb..sysobjects Where id = object_id(N'tempdb..#HB_TradeCodeListing'))      
 Drop Table #HB_TradeCodeListing

Create Table #HB_TradeCodeListing
(
	Trade varchar(50) null,
	Trade_Code varchar(15) null,
	Seq varchar(10) null,
	PayPoint_Desc varchar(30) null,
	PayPoint_Percent int null
)

Declare @sql_str varchar(8000)

If (@ShowPayPoints = 1)
	Begin
		Set @sql_str =  'Select t.Trade_Desc, Trade_CD, tp.PPNT_PayCode, tp.PPNT_Desc, tp.PPNT_Percent From HB_Trades t ' +
						'Inner Join HB_Trades_Paypoints tp on tp.Trade_ID = t.Trade_ID '
	End
Else
	Begin
		Set @sql_str =  'Select t.Trade_Desc, Trade_CD, null, null, null From HB_Trades t '
	End

If (Select count(*) from working_Trades Where PCID = @PCID) > 0
	Begin
		Select @sql_str = @sql_str + 'Inner Join working_Trades wt on wt.Trade_ID = t.Trade_ID ' +
									 'Where wt.PCID = ''' + @PCID + ''' '
	End

Select @sql_str = @sql_str + 'Order By t.Trade_Desc'

Insert Into #HB_TradeCodeListing (Trade, Trade_Code, Seq, PayPoint_Desc, PayPoint_Percent)
exec(@sql_str)

Select Trade_Code as 'Trade Code', Trade as 'Trade Description', Seq, PayPoint_Desc as 'Pay Point Description', 
PayPoint_Percent as 'Pay Point Percentage' From #HB_TradeCodeListing


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBReportModelElevationEstimateMasterList]') and xtype = 'P ')  
 drop Procedure sp_HBReportModelElevationEstimateMasterList
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--exec sp_HBReportModelElevationEstimateMasterList '077daefa-fdaa-460f-9d75-08253efc803d', 'Ken', 'Global', 1    
CREATE Procedure [dbo].[sp_HBReportModelElevationEstimateMasterList] (@PCID varchar(500), @UserName varchar(100), @Area varchar(10),    
                 @ShowOptions bit)    
    
AS    
    
--Declare @PCID varchar(500), @UserName varchar(100), @Area varchar(10), @ShowOptions bit    
--Select @PCID = '077daefa-fdaa-460f-9d75-08253efc803d', @UserName = 'Ken', @Area = 'Global', @ShowOptions = 1    
    
Declare @HRDB varchar(500), @str varchar(8000), @Filter varchar(8000), @HoldingFilter varchar(500)    
Select @HRDB = HumanDBName From working_ReportDatabases Where UserName = @UserName    
Set @Filter = ''    
    
if @Area = 'Global'    
 Begin    
  Delete working_holding Where PCID = @PCID    
  Insert Into working_holding (PCID,Raw_Land_CD) Select @PCID, -1    
 End    
    
if Exists(Select * From working_holding Where PCID = @PCID)    
  Set @Filter = @Filter + ' AND m.Raw_Land_CD in (Select Raw_Land_CD From working_holding Where PCID = ''' + @PCID + ''')'    
if Exists(Select * From working_model_name Where PCID = @PCID)    
  Set @Filter = @Filter + ' AND mn.Model_Name_ID in (Select Model_Name_ID From working_model_name Where PCID = ''' + @PCID + ''')'    
if Exists(Select * From working_model Where PCID = @PCID)    
  Set @Filter = @Filter + ' AND m.Model_ID in (Select Model_ID From working_model Where PCID = ''' + @PCID + ''')'    
if Exists(Select * From working_MajorCodes Where PCID = @PCID)    
  Set @Filter = @Filter + ' AND et.phs_code in (Select MajorCode From working_MajorCodes Where PCID = ''' + @PCID + ''')'    
if Exists(Select * From working_MinorCodes Where PCID = @PCID)    
  Set @Filter = @Filter + ' AND et.subp_code in (Select MinorCode From working_MinorCodes Where PCID = ''' + @PCID + ''')'    
if @Area <> 'Global'    
  Set @Filter = @Filter + ' AND IsNull(rl.Raw_Land_CD,-1) <> -1 '    
    
    
If Exists (Select * From tempdb..sysobjects Where id = object_id(N'tempdb..#BaseElevationTrades'))      
 Drop Table #BaseElevationTrades    
    
Create Table #BaseElevationTrades    
(    
 ID int identity(1,1) not null primary key,    
 HoldingID int null,    
 Holding varchar(50) null,    
 Model_ID int null,    
 Model varchar(44) null,    
 Elevation_ID int null,    
 Elevation varchar(50) null,    
 [Plan] int null,    
 Style varchar(30) null,    
 Area money null,    
 BasePrice money null,    
 Type_BO varchar(10) null,    
 MajorCode varchar(5) null,    
 MajorCodeDesc varchar(30) null,    
 MinorCode varchar(5) null,    
 MinorCodeDesc varchar(30) null,    
 CostType varchar(10) null,    
 Trade_ID int null,    
 Trade varchar(50) null,    
 Option_ID int null,    
 [Option] varchar(50) null,    
 Planning money null,    
 CostPerUOM money null,    
 UOM varchar(30) null,    
 AreaCost money null    
)    
    
If Exists (Select * From tempdb..sysobjects Where id = object_id(N'tempdb..#BaseElevationMaterials'))      
 Drop Table #BaseElevationMaterials    
    
Create Table #BaseElevationMaterials    
(    
 ID int identity(1,1) not null primary key,    
 HoldingID int null,    
 Holding varchar(50) null,    
 Model_ID int null,    
 Model varchar(44) null,    
 Elevation_ID int null,    
 Elevation varchar(50) null,    
 [Plan] int null,    
 Style varchar(30) null,    
 Area money null,    
 BasePrice money null,    
 Type_BO varchar(10) null,    
 MajorCode varchar(5) null,    
 MajorCodeDesc varchar(30) null,    
 MinorCode varchar(5) null,    
 MinorCodeDesc varchar(30) null,    
 CostType varchar(10) null,    
 Trade_ID int null,    
 Trade varchar(50) null,    
 Option_ID int null,    
 [Option] varchar(50) null,    
 Planning money null,    
 CostPerUOM money null,    
 UOM varchar(30) null,    
 AreaCost money null,    
 Est_Hours money null --Qty of Trade    
)    
    
--Loads Base Trades    
    
Insert Into #BaseElevationTrades(HoldingID, Holding, Model_ID, Model, Elevation_ID, Elevation, [Plan], Style, Area, BasePrice,    
         Type_BO, MajorCode, MinorCode, CostType, Trade_ID, Trade, Option_ID, [Option], Planning,     
         CostPerUOM, UOM, AreaCost)    
    
Exec('Select IsNull(rl.Raw_Land_CD,-1), IsNull(rl.Raw_Land_Desc,'''') Raw_Land_Desc, mn.Model_Name_ID, mn.Model_Name,     
m.Model_ID, m.Model_Desc, m.Plan_Num,    
ms.ModStyle_desc, m.Footage, IsNull(m.Base_Price,0) Base_Price, Case When et.Option_ID <> -1 Then ''Option'' Else ''Base'' End,     
et.phs_code, et.subp_code, ''Trade'' CostType, t.Trade_ID, t.Trade_Desc, et.Option_ID, o.Short_Desc,    
IsNull((et.Est_Cost * Est_Hours),0) Planning, IsNull(et.Est_Hours,0) CostPerUOM, uom.Description [UnitOfMeasure],    
IsNull((et.Est_Cost * Est_Hours),0) / IsNull(m.Footage,1) AreaCost    
from HB_Raw_Land rl    
Right Outer Join HB_Model m on rl.Raw_Land_Cd = m.Raw_Land_CD    
Inner Join HB_Model_Name mn on mn.Model_Name_ID = m.Model_Name_ID    
Inner Join HB_Model_Style ms on ms.ModStyle_ID = mn.ModStyle_ID    
Inner Join HB_Est_Trd et on et.Raw_Land_CD = m.Raw_Land_CD and et.Model_ID = m.Model_ID    
Inner Join HB_Trades t on t.Trade_ID = et.Trade_ID    
Inner Join Units_Of_Measure uom on uom.Unit_Of_Measure_Code = et.UOM    
Left Outer Join HB_Options o on o.option_id = et.option_ID    
Where m.Base_Model = ''Y'' And EstimateLevel = ''E''' + @Filter + '    
Order By rl.Raw_Land_CD, mn.Model_Name_ID, m.Model_ID')    
    
--Loads Base Materials for Trades    
    
Insert Into #BaseElevationMaterials(HoldingID, Holding, Model_ID, Model, Elevation_ID, Elevation, [Plan], Style, Area, BasePrice,    
            Type_BO, MajorCode, MinorCode, CostType, Trade_ID, Trade, Option_ID, [Option], Planning,     
            CostPerUOM, UOM, AreaCost,Est_Hours)    
    
Exec('Select Distinct IsNull(rl.Raw_Land_CD,-1) Raw_Land_CD, IsNull(rl.Raw_Land_Desc,'''') Raw_Land_Desc, mn.Model_Name_ID, mn.Model_Name,     
m.Model_ID, m.Model_Desc, m.Plan_Num, ms.ModStyle_desc, m.Footage, IsNull(m.Base_Price,0) Base_Price, Case When et.Option_ID <> -1 Then ''Option'' Else ''Base'' End,     
et.phs_code, et.subp_code,''Material'' CostType, t.Trade_ID, t.Trade_Desc, et.Option_ID, o.Short_Desc,    
0 Planning, 0 CostPerUOM, uom.Description [UnitOfMeasure], 0 AreaCost, IsNull(et.Est_Hours,1)    
From HB_Raw_Land rl    
Right Outer Join HB_Model m on rl.Raw_Land_Cd = m.Raw_Land_CD    
Inner Join HB_Model_Name mn on mn.Model_Name_ID = m.Model_Name_ID    
Inner Join HB_Model_Style ms on ms.ModStyle_ID = mn.ModStyle_ID    
Inner Join HB_Est_Trd et on et.Raw_Land_CD = m.Raw_Land_CD and et.Model_ID = m.Model_ID    
Inner Join HB_Trades t on t.Trade_ID = et.Trade_ID    
Inner Join Units_Of_Measure uom on uom.Unit_Of_Measure_Code = et.UOM    
Left Outer Join HB_Options o on o.option_id = et.option_ID    
Where m.Base_Model = ''Y'' And et.EstimateLevel = ''E''     
And et.Trade_ID in (Select em.Trade_ID from HB_Est_Mat em Where em.Raw_Land_CD = et.Raw_Land_CD and em.Model_ID = et.Model_ID and em.phs_code = et.phs_code and    
       em.subp_code = et.subp_code and em.Option_ID = et.Option_ID and EstimateLevel = ''E'') ' + @Filter + '    
Order By rl.Raw_Land_CD, mn.Model_Name_ID, m.Model_ID')    
    
--Updates Trades Materials Costs    
    
Update #BaseElevationMaterials    
Set Planning = IsNull((Select sum(IsNull(Est_Cost,0) * IsNull(qty,0))  From HB_Est_Mat     
    Where Model_ID = Elevation_ID And phs_code = MajorCode And Subp_Code = MinorCode    
    And Trade_ID = Trade_ID And Raw_land_CD = HoldingID),0),    
 CostPerUOM = IsNull(((Select sum(IsNull(Est_Cost,0) * IsNull(qty,0)) From HB_Est_Mat     
     Where Model_ID = Elevation_ID And phs_code = MajorCode And Subp_Code = MinorCode     
     And Trade_ID = Trade_ID And Raw_land_CD = HoldingID)/isnull(Est_Hours,1)),0),    
 AreaCost = IsNull((Select sum(IsNull(Est_Cost,0) * IsNull(qty,0)) From HB_Est_Mat     
    Where Model_ID = Elevation_ID And phs_code = MajorCode And Subp_Code = MinorCode     
    And Trade_ID = Trade_ID And Raw_land_CD = HoldingID) / IsNull(Area,1),0)    
    
-----    
    
If Exists (Select * From tempdb..sysobjects Where id = object_id(N'tempdb..#ElevationTrades'))      
 Drop Table #ElevationTrades    
    
Create Table #ElevationTrades    
(    
 ID int identity(1,1) not null primary key,    
 HoldingID int null,    
 Holding varchar(50) null,    
 Model_ID int null,    
 Model varchar(44) null,    
 Elevation_ID int null,    
 Elevation varchar(50) null,    
 [Plan] int null,    
 Style varchar(30) null,    
 Area money null,    
 BasePrice money null,    
 Type_BO varchar(10) null,    
 MajorCode varchar(5) null,    
 MajorCodeDesc varchar(30) null,    
 MinorCode varchar(5) null,    
 MinorCodeDesc varchar(30) null,    
 CostType varchar(10) null,    
 Trade_ID int null,    
 Trade varchar(50) null,    
 Option_ID int null,    
 [Option] varchar(50) null,    
 Planning money null,    
 CostPerUOM money null,    
 UOM varchar(30) null,    
 AreaCost money null,    
 BADC varchar(1) null    
)    
    
If Exists (Select * From tempdb..sysobjects Where id = object_id(N'tempdb..#ElevationMaterials'))      
 Drop Table #ElevationMaterials    
    
Create Table #ElevationMaterials    
(    
 ID int identity(1,1) not null primary key,    
 HoldingID int null,    
 Holding varchar(50) null,    
 Model_ID int null,    
 Model varchar(44) null,    
 Elevation_ID int null,    
 Elevation varchar(50) null,    
 [Plan] int null,    
 Style varchar(30) null,    
 Area money null,    
 BasePrice money null,    
 Type_BO varchar(10) null,    
 MajorCode varchar(5) null,    
 MajorCodeDesc varchar(30) null,    
 MinorCode varchar(5) null,    
 MinorCodeDesc varchar(30) null,    
 CostType varchar(10) null,    
 Trade_ID int null,    
 Trade varchar(50) null,    
 Option_ID int null,    
 [Option] varchar(50) null,    
 Planning money null,    
 CostPerUOM money null,    
 UOM varchar(30) null,    
 AreaCost money null,    
 Est_Hours money null, --Qty of Trade    
 BADC varchar(1) null    
)    
    
--Loads Elevations Trades    
    
Insert Into #ElevationTrades(HoldingID, Holding, Model_ID, Model, Elevation_ID, Elevation, [Plan], Style, Area, BasePrice,    
         Type_BO, MajorCode, MinorCode, CostType, Trade_ID, Trade, Option_ID, [Option], Planning,     
         CostPerUOM, UOM, AreaCost,BADC)    
    
Exec('Select IsNull(rl.Raw_Land_CD,-1), IsNull(rl.Raw_Land_Desc,'''') Raw_Land_Desc, mn.Model_Name_ID, mn.Model_Name,     
m.Model_ID, m.Model_Desc, m.Plan_Num,    
ms.ModStyle_desc, m.Footage, IsNull(m.Base_Price,0) Base_Price, Case When et.Option_ID <> -1 Then ''Option'' Else ''Base'' End,     
et.phs_code, et.subp_code, ''Trade'' CostType, t.Trade_ID, t.Trade_Desc, et.Option_ID, o.Short_Desc,    
IsNull((et.Est_Cost * et.Est_Hours),0) Planning, IsNull(et.Est_Hours,0) CostPerUOM, uom.Description [UnitOfMeasure],    
IsNull((et.Est_Cost * et.Est_Hours),0) / IsNull(m.Footage,1) AreaCost, et.BADC    
from HB_Raw_Land rl    
Right Outer Join HB_Model m on rl.Raw_Land_Cd = m.Raw_Land_CD    
Inner Join HB_Model_Name mn on mn.Model_Name_ID = m.Model_Name_ID    
Inner Join HB_Model_Style ms on ms.ModStyle_ID = mn.ModStyle_ID    
Inner Join HB_Est_Trd et on et.Raw_Land_CD = m.Raw_Land_CD and et.Model_ID = m.Model_ID    
Inner Join HB_Trades t on t.Trade_ID = et.Trade_ID    
Inner Join Units_Of_Measure uom on uom.Unit_Of_Measure_Code = et.UOM    
Left Outer Join HB_Options o on o.option_id = et.option_ID    
Where m.Base_Model = ''N'' And EstimateLevel = ''E'' ' + @Filter + '    
Order By rl.Raw_Land_CD, mn.Model_Name_ID, m.Model_ID')    
    
--Loads Elevation Materials    
    
Insert Into #ElevationMaterials(HoldingID, Holding, Model_ID, Model, Elevation_ID, Elevation, [Plan], Style, Area, BasePrice,    
            Type_BO, MajorCode, MinorCode, CostType, Trade_ID, Trade, Option_ID, [Option], Planning,     
            CostPerUOM, UOM, AreaCost,Est_Hours, BADC)    
    
Exec('Select Distinct IsNull(rl.Raw_Land_CD,-1) Raw_Land_CD, IsNull(rl.Raw_Land_Desc,'''') Raw_Land_Desc, mn.Model_Name_ID, mn.Model_Name,     
m.Model_ID, m.Model_Desc, m.Plan_Num, ms.ModStyle_desc, m.Footage, IsNull(m.Base_Price,0) Base_Price, Case When et.Option_ID <> -1 Then ''Option'' Else ''Base'' End,     
et.phs_code, et.subp_code,''Material'' CostType, t.Trade_ID, t.Trade_Desc, et.Option_ID, o.Short_Desc,    
0 Planning, 0 CostPerUOM, uom.Description [UnitOfMeasure], 0 AreaCost, IsNull(et.Est_Hours,1), et.BADC    
From HB_Raw_Land rl    
Right Outer Join HB_Model m on rl.Raw_Land_Cd = m.Raw_Land_CD    
Inner Join HB_Model_Name mn on mn.Model_Name_ID = m.Model_Name_ID    
Inner Join HB_Model_Style ms on ms.ModStyle_ID = mn.ModStyle_ID    
Inner Join HB_Est_Trd et on et.Raw_Land_CD = m.Raw_Land_CD and et.Model_ID = m.Model_ID    
Inner Join HB_Trades t on t.Trade_ID = et.Trade_ID    
Inner Join Units_Of_Measure uom on uom.Unit_Of_Measure_Code = et.UOM    
Left Outer Join HB_Options o on o.option_id = et.option_ID    
Where m.Base_Model = ''N'' And et.EstimateLevel = ''E'' --And (o.Option_ID = 376 or et.Option_ID = -1)    
And et.Trade_ID in (Select em.Trade_ID from HB_Est_Mat em Where em.Raw_Land_CD = et.Raw_Land_CD and em.Model_ID = et.Model_ID and em.phs_code = et.phs_code and    
       em.subp_code = et.subp_code and em.Option_ID = et.Option_ID and EstimateLevel = ''E'') ' + @Filter + '    
Order By rl.Raw_Land_CD, mn.Model_Name_ID, m.Model_ID')    
    
--Updates Trades Materials Costs    
    
Update #ElevationMaterials    
Set Planning = IsNull((Select sum(IsNull(Est_Cost,0) * IsNull(qty,0))  From HB_Est_Mat     
    Where Model_ID = Elevation_ID And phs_code = MajorCode And Subp_Code = MinorCode    
    And Trade_ID = Trade_ID And Raw_land_CD = HoldingID),-99),    
 CostPerUOM = IsNull(((Select sum(IsNull(Est_Cost,0) * IsNull(qty,0)) From HB_Est_Mat     
     Where Model_ID = Elevation_ID And phs_code = MajorCode And Subp_Code = MinorCode     
     And Trade_ID = Trade_ID And Raw_land_CD = HoldingID)/ Isnull(Est_Hours,1)),-99),    
 AreaCost = IsNull((Select sum(IsNull(Est_Cost,0) * IsNull(qty,0)) From HB_Est_Mat     
    Where Model_ID = Elevation_ID And phs_code = MajorCode And Subp_Code = MinorCode     
    And Trade_ID = Trade_ID And Raw_land_CD = HoldingID) / IsNull(Area,1),-99)    
------    
    
If exists (Select * From tempdb..sysobjects Where id = object_id(N'tempdb..#ModelElevationMasterList'))      
 Drop Table #ModelElevationMasterList    
    
Create Table #ModelElevationMasterList    
(    
 id int identity(1,1) not null primary key,    
 HoldingID int null,    
 Holding varchar(50) null,    
 Model_ID int null,    
 Model varchar(44) null,    
 Elevation_ID int null,    
 Elevation varchar(50) null,    
 [Plan] int null,    
 Style varchar(30) null,    
 Area money null,    
 BasePrice money null,    
 Type_BO varchar(10) null,    
 MajorCode varchar(5) null,    
 MajorCodeDesc varchar(30) null,    
 MinorCode varchar(5) null,    
 MinorCodeDesc varchar(30) null,    
 CostType varchar(10) null,    
 Trade_ID int null,    
 Trade varchar(50) null,    
 Option_ID int null,    
 [Option] varchar(50) null,    
 Planning money null,    
 CostPerUOM money null,    
 UOM varchar(30) null,    
 AreaCost money null    
)    
    
-- Loads Final Table with Bases before mregeing them with Elevations    
    
 --Loads Base Trades    
 Insert Into #ModelElevationMasterList(HoldingID, Holding, Model_ID, Model, Elevation_ID, Elevation, [Plan], Style, Area, BasePrice, Type_BO,     
            MajorCode, MajorCodeDesc, MinorCode, MinorCodeDesc, CostType, Trade_ID, Trade, Option_ID, [Option],    
            Planning, CostPerUOM, UOM, AreaCost)    
 Select HoldingID, Holding, Model_ID, Model, Elevation_ID, Elevation, [Plan], Style, Area, BasePrice, Type_BO,     
     MajorCode, MajorCodeDesc, MinorCode, MinorCodeDesc, CostType, Trade_ID, Trade, Option_ID, [Option],    
     Planning, CostPerUOM, UOM, AreaCost    
 From #BaseElevationTrades    
    
 --Loads Base Materials    
 Insert Into #ModelElevationMasterList(HoldingID, Holding, Model_ID, Model, Elevation_ID, Elevation, [Plan], Style, Area, BasePrice, Type_BO,     
            MajorCode, MajorCodeDesc, MinorCode, MinorCodeDesc, CostType, Trade_ID, Trade, Option_ID, [Option],    
            Planning, CostPerUOM, UOM, AreaCost)     Select HoldingID, Holding, Model_ID, Model, Elevation_ID, Elevation, [Plan], Style, Area, BasePrice, Type_BO,     
     MajorCode, MajorCodeDesc, MinorCode, MinorCodeDesc, CostType, Trade_ID, Trade, Option_ID, [Option],    
     Planning, CostPerUOM, UOM, AreaCost    
 From #BaseElevationMaterials    
     
    
-- Merges Bases Elevations with Elevations    
    
--Inserts Base Elevation Info for Non-Base Elevations    
    
Insert Into #ModelElevationMasterList(HoldingID, Holding, Model_ID, Model, Elevation_ID, Elevation, [Plan], Style, Area, BasePrice, Type_BO,     
            MajorCode, MajorCodeDesc, MinorCode, MinorCodeDesc, CostType, Trade_ID, Trade, Option_ID, [Option],    
            Planning, CostPerUOM, UOM, AreaCost)    
    
Select bet.HoldingID, bet.Holding, bet.Model_ID, bet.Model, et.Elevation_ID, et.Elevation, bet.[Plan], bet.Style, bet.Area, bet.BasePrice, bet.Type_BO,     
    bet.MajorCode, bet.MajorCodeDesc, bet.MinorCode, bet.MinorCodeDesc, bet.CostType, bet.Trade_ID, bet.Trade, bet.Option_ID, bet.[Option],    
    bet.Planning, bet.CostPerUOM, bet.UOM, bet.AreaCost    
From #ElevationTrades et    
Inner Join #BaseElevationTrades bet on et.model_Id = bet.model_ID and et.HoldingID = bet.HoldingID    
Order by bet.HoldingID, et.Model_ID, et.Elevation_ID    
    
--Inserts Additons to Seperate Elevations    
    
Insert Into #ModelElevationMasterList(HoldingID, Holding, Model_ID, Model, Elevation_ID, Elevation, [Plan], Style, Area, BasePrice, Type_BO,     
            MajorCode, MajorCodeDesc, MinorCode, MinorCodeDesc, CostType, Trade_ID, Trade, Option_ID, [Option],    
            Planning, CostPerUOM, UOM, AreaCost)    
    
Select HoldingID, Holding, Model_ID, Model, Elevation_ID, Elevation, [Plan], Style, Area, BasePrice, Type_BO,     
    MajorCode, MajorCodeDesc, MinorCode, MinorCodeDesc, CostType, Trade_ID, Trade, Option_ID, [Option],    
    Planning, CostPerUOM, UOM, AreaCost    
From #ElevationTrades    
Where BADC = 'A'    
    
Insert Into #ModelElevationMasterList(HoldingID, Holding, Model_ID, Model, Elevation_ID, Elevation, [Plan], Style, Area, BasePrice, Type_BO,     
            MajorCode, MajorCodeDesc, MinorCode, MinorCodeDesc, CostType, Trade_ID, Trade, Option_ID, [Option],    
            Planning, CostPerUOM, UOM, AreaCost)    
    
Select HoldingID, Holding, Model_ID, Model, Elevation_ID, Elevation, [Plan], Style, Area, BasePrice, Type_BO,     
    MajorCode, MajorCodeDesc, MinorCode, MinorCodeDesc, CostType, Trade_ID, Trade, Option_ID, [Option],    
    Planning, CostPerUOM, UOM, AreaCost    
From #ElevationMaterials    
Where BADC = 'A'    
    
--Updates the Changes for the alternate Elevations     
    
Update #ModelElevationMasterList    
Set Planning = (Case When Exists(Select * From #ElevationTrades et Where et.HoldingID = HoldingID And et.Model_ID = Model_ID And    
        et.MajorCode = MajorCode And et.MinorCode = MinorCode And et.Trade_ID = Trade_ID     
        And et.Option_ID = Option_ID And et.BADC = 'C') Then    
        (Select Planning From #ElevationTrades et Where et.HoldingID = HoldingID And et.Model_ID = Model_ID And    
        et.MajorCode = MajorCode And et.MinorCode = MinorCode And et.Trade_ID = Trade_ID     
        And et.Option_ID = Option_ID And et.BADC = 'C') Else Planning End),    
 CostPerUOM = (Case When Exists(Select * From #ElevationTrades et Where et.HoldingID = HoldingID And et.Model_ID = Model_ID And    
        et.MajorCode = MajorCode And et.MinorCode = MinorCode And et.Trade_ID = Trade_ID     
        And et.Option_ID = Option_ID And et.BADC = 'C') Then    
        (Select CostPerUOM From #ElevationTrades et Where et.HoldingID = HoldingID And et.Model_ID = Model_ID And    
        et.MajorCode = MajorCode And et.MinorCode = MinorCode And et.Trade_ID = Trade_ID     
        And et.Option_ID = Option_ID And et.BADC = 'C') Else Planning End),    
 AreaCost = (Case When Exists(Select * From #ElevationTrades et Where et.HoldingID = HoldingID And et.Model_ID = Model_ID And    
        et.MajorCode = MajorCode And et.MinorCode = MinorCode And et.Trade_ID = Trade_ID     
        And et.Option_ID = Option_ID And et.BADC = 'C') Then    
        (Select AreaCost From #ElevationTrades et Where et.HoldingID = HoldingID And et.Model_ID = Model_ID And    
        et.MajorCode = MajorCode And et.MinorCode = MinorCode And et.Trade_ID = Trade_ID     
        And et.Option_ID = Option_ID And et.BADC = 'C') Else Planning End)    
Where CostType = 'Trade'    
    
    
Update #ModelElevationMasterList    
Set Planning = (Case When Exists(Select * From #ElevationMaterials et Where et.HoldingID = HoldingID And et.Model_ID = Model_ID And    
        et.MajorCode = MajorCode And et.MinorCode = MinorCode And et.Trade_ID = Trade_ID     
        And et.Option_ID = Option_ID And et.BADC = 'C') Then    
        (Select Planning From #ElevationMaterials et Where et.HoldingID = HoldingID And et.Model_ID = Model_ID And    
        et.MajorCode = MajorCode And et.MinorCode = MinorCode And et.Trade_ID = Trade_ID     
        And et.Option_ID = Option_ID And et.BADC = 'C') Else Planning End),    
 CostPerUOM = (Case When Exists(Select * From #ElevationMaterials et Where et.HoldingID = HoldingID And et.Model_ID = Model_ID And    
        et.MajorCode = MajorCode And et.MinorCode = MinorCode And et.Trade_ID = Trade_ID     
        And et.Option_ID = Option_ID And et.BADC = 'C') Then    
        (Select CostPerUOM From #ElevationMaterials et Where et.HoldingID = HoldingID And et.Model_ID = Model_ID And    
        et.MajorCode = MajorCode And et.MinorCode = MinorCode And et.Trade_ID = Trade_ID     
        And et.Option_ID = Option_ID And et.BADC = 'C') Else Planning End),    
 AreaCost = (Case When Exists(Select * From #ElevationMaterials et Where et.HoldingID = HoldingID And et.Model_ID = Model_ID And    
        et.MajorCode = MajorCode And et.MinorCode = MinorCode And et.Trade_ID = Trade_ID     
        And et.Option_ID = Option_ID And et.BADC = 'C') Then    
        (Select AreaCost From #ElevationMaterials et Where et.HoldingID = HoldingID And et.Model_ID = Model_ID And    
        et.MajorCode = MajorCode And et.MinorCode = MinorCode And et.Trade_ID = Trade_ID     
        And et.Option_ID = Option_ID And et.BADC = 'C') Else Planning End)    
Where CostType = 'Material'    
--Deletes the differences from the Elevations    
    
Delete #ModelElevationMasterList    
From #ModelElevationMasterList meml    
Join #ElevationTrades et on et.HoldingID = meml.HoldingID And et.Model_ID = meml.Model_ID And    
        et.MajorCode = meml.MajorCode And et.MinorCode = meml.MinorCode And et.Trade_ID = meml.Trade_ID     
        And et.Option_ID = meml.Option_ID    
Where et.BADC = 'D' And meml.CostType = 'Trade'    
    
Delete #ModelElevationMasterList    
From #ModelElevationMasterList meml    
Join #ElevationMaterials em on em.HoldingID = meml.HoldingID And em.Model_ID = meml.Model_ID And    
        em.MajorCode = meml.MajorCode And em.MinorCode = meml.MinorCode And em.Trade_ID = meml.Trade_ID     
        And em.Option_ID = meml.Option_ID    
Where em.BADC = 'D' And meml.CostType = 'Material'    
    
    
Select Holding, Model, Elevation, [Plan], Style, Area, BasePrice, Type_BO [Type], MajorCode, MinorCode, CostType, Trade,     
    [Option], Planning, CostPerUOM, UOM, AreaCost, ro.*  
From #ModelElevationMasterList  mel  
left outer join hb_report_options ro on ro.pcid=@PCID  
    
--Select * From #ModelElevationMasterList    
--    
--Select * from #ElevationTrades et    
--Inner Join #BaseElevationTrades bet on et.model_Id = bet.model_ID and et.HoldingID = bet.HoldingID    
--Where et.HoldingID in (50012,50011) --and et.Option_ID = bet.Option_ID and et.MajorCode = bet.MajorCode and et.MinorCode = bet.MinorCode and et.BADC = 'B'    
--Order by bet.HoldingID, et.Model_ID, et.Elevation_ID    
    
  



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBUpdateEstimates]') and xtype = 'P ')  
 drop Procedure sp_HBUpdateEstimates
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure [dbo].[sp_HBUpdateEstimates]
(@Option_ID int, @Model_ID int, @Raw_Land_CD int, 
 @EstimateLevel varchar(2), @UserName varchar(50),
 @OptionOnly money, @CostSupl money)

AS

--Declare @Option_ID int, @Model_ID int, @Raw_Land_CD int, @EstimateLevel varchar(2), @UserName varchar(50), @OptionOnly money, @CostSupl money
--Select @Option_ID = 46, @Model_ID = -1, @Raw_Land_CD = -1, @EstimateLevel = 'O', @UserName = 'ken', @OptionOnly = 11000, @CostSupl = 24800

Declare @Counter int, @RecordCount int


--Collect Current HB_EST Values
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#working_HB_EST'))
	Drop Table #working_HB_EST
Create Table #working_HB_EST(
	[ID] [int] Identity(1,1) NOT NULL,
	[OPTION_ID] [int] NOT NULL,
	[MODEL_ID] [int] NOT NULL,
	[phs_code] [varchar](5) NOT NULL,
	[subp_code] [varchar](5) NOT NULL,
	[BADC] [varchar](1) NOT NULL,
	[INTERNAL_EST] [money] NULL,
	[EXTERNAL_EST] [money] NULL,
	[FINAL_EST] [money] NULL,
	[HOURS] [money] NULL,
	[SEND_RFQ] [varchar](1) NULL,
	[MAT_EST] [money] NULL,
	[TRADE_EST] [money] NULL,
	[MANUAL_YN_TRD] [varchar](1) NULL,
	[MANUAL_YN_MAT] [varchar](1) NULL,
	[Raw_Land_CD] [int] NULL,
	[MAT_RFQ] [money] NULL,
	[TRADE_RFQ] [money] NULL,
	[EstimateLevel] [varchar](1) NULL
)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#working_HB_EST_TRD_TMP'))
	Drop Table #working_HB_EST_TRD_TMP
Create Table #working_HB_EST_TRD_TMP(
 [ID] [int] identity(1,1) NOT NULL,
 [ETRD_ID] [int] NOT NULL,
 [OPTION_ID] [int] NOT NULL,
 [MODEL_ID] [int] NOT NULL,
 [phs_code] [varchar](5) NOT NULL,
 [subp_code] [varchar](5) NOT NULL,
 [TRADE_ID] [int] NOT NULL,
 [BADC] [varchar](1) NOT NULL,
 [SUPPLIER] [varchar](10) NULL,
 [EST_COST] [money] NULL,
 [EST_SIB] [varchar](1) NULL,
 [EST_HOURS] [money] NULL,
 [EXPIRE_DATE] [datetime] NULL,
 [RFQC_ID] [int] NULL,
 [Raw_Land_CD] [int] NULL,
 [UOM] [varchar](5) NULL,
 [EstimateLevel] [varchar](1) NULL,
 [HB_ConfirmationPoint_ID] [int] NULL,
 [HB_ScheduleDeliveryPoint_ID] [int] NULL,
 [ConfirmationDeadlineDays] [int] NULL,
 [HB_OrderPoint_ID] [int] NULL
)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#working_HB_EST_MAT_TMP'))
	Drop Table #working_HB_EST_MAT_TMP
Create Table #working_HB_EST_MAT_TMP(
	[ID] [int] Identity(1,1) NOT NULL,
	[EMAT_ID] [int] NOT NULL,
	[OPTION_ID] [int] NOT NULL,
	[MODEL_ID] [int] NOT NULL,
	[phs_code] [varchar](5) NOT NULL,
	[subp_code] [varchar](5) NOT NULL,
	[TRADE_ID] [int] NOT NULL,
	[MATERIAL_ID] [int] NOT NULL,
	[BADC] [varchar](1) NULL,
	[qty] [money] NULL,
	[EST_COST] [money] NULL,
	[Raw_Land_CD] [int] NULL,
	[HB_Package_ID] [int] NULL,
	[HB_OrderPoint_ID] [int] NULL,
	[EstimateLevel] [varchar](1) NULL,
	[HB_ConfirmationPoint_ID] [int] NULL,
	[HB_ScheduleDeliveryPoint_ID] [int] NULL,
	[ConfirmationDeadlineDays] [int] NULL
)

Insert Into #working_HB_EST (Option_ID, Model_ID, Phs_Code, Subp_code, BADC, Internal_Est, External_Est, Final_Est, 
							 Hours, Send_RFQ, Mat_Est, Trade_Est, Manual_YN_TRD, Manual_YN_MAT, Raw_Land_CD, Mat_RFQ,
							 Trade_RFQ, EstimateLevel)
Select Option_ID, Model_ID, Phs_Code, Subp_code, BADC, Internal_Est, External_Est, Final_Est, 
							 Hours, Send_RFQ, Mat_Est, Trade_Est, Manual_YN_TRD, Manual_YN_MAT, Raw_Land_CD, Mat_RFQ,
							 Trade_RFQ, EstimateLevel from HB_EST
Where Option_ID = @Option_ID and Raw_Land_CD = @Raw_Land_CD and Model_ID = @Model_ID and EstimateLevel = @EstimateLevel

--Collect Current HB_EST_TRD Values

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#working_HB_EST_TRD'))
	Drop Table #working_HB_EST_TRD
Create Table #working_HB_EST_TRD(
	[ID] [int] identity(1,1) NOT NULL,
	[ETRD_ID] [int] NOT NULL,
	[OPTION_ID] [int] NOT NULL,
	[MODEL_ID] [int] NOT NULL,
	[phs_code] [varchar](5) NOT NULL,
	[subp_code] [varchar](5) NOT NULL,
	[TRADE_ID] [int] NOT NULL,
	[BADC] [varchar](1) NOT NULL,
	[SUPPLIER] [varchar](10) NULL,
	[EST_COST] [money] NULL,
	[EST_SIB] [varchar](1) NULL,
	[EST_HOURS] [money] NULL,
	[EXPIRE_DATE] [datetime] NULL,
	[RFQC_ID] [int] NULL,
	[Raw_Land_CD] [int] NULL,
	[UOM] [varchar](5) NULL,
	[EstimateLevel] [varchar](1) NULL,
	[HB_ConfirmationPoint_ID] [int] NULL,
	[HB_ScheduleDeliveryPoint_ID] [int] NULL,
	[ConfirmationDeadlineDays] [int] NULL,
	[HB_OrderPoint_ID] [int] NULL
)

Insert Into #working_HB_EST_TRD (ETRD_ID, Option_ID, Model_ID, Phs_Code, Subp_Code, Trade_ID, BADC, Supplier, Est_Cost,
								 EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, RAW_LAND_CD, UOM, EstimateLevel,
								 HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays,
								 HB_OrderPoint_ID)
Select ETRD_ID, Option_ID, Model_ID, Phs_Code, Subp_Code, Trade_ID, BADC, Supplier, Est_Cost,
								 EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, RAW_LAND_CD, UOM, EstimateLevel,
								 HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays,
								 HB_OrderPoint_ID From HB_EST_TRD
Where Option_ID = @Option_ID and Raw_Land_CD = @Raw_Land_CD and Model_ID = @Model_ID and EstimateLevel = @EstimateLevel


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#working_HB_EST_MAT'))
	Drop Table #working_HB_EST_MAT
Create Table #working_HB_EST_MAT(
	[ID] [int] Identity(1,1) NOT NULL,
	[EMAT_ID] [int] NOT NULL,
	[OPTION_ID] [int] NOT NULL,
	[MODEL_ID] [int] NOT NULL,
	[phs_code] [varchar](5) NOT NULL,
	[subp_code] [varchar](5) NOT NULL,
	[TRADE_ID] [int] NOT NULL,
	[MATERIAL_ID] [int] NOT NULL,
	[BADC] [varchar](1) NULL,
	[qty] [money] NULL,
	[EST_COST] [money] NULL,
	[Raw_Land_CD] [int] NULL,
	[HB_Package_ID] [int] NULL,
	[HB_OrderPoint_ID] [int] NULL,
	[EstimateLevel] [varchar](1) NULL,
	[HB_ConfirmationPoint_ID] [int] NULL,
	[HB_ScheduleDeliveryPoint_ID] [int] NULL,
	[ConfirmationDeadlineDays] [int] NULL
)

Insert Into #working_HB_EST_MAT (EMAT_ID, OPTION_ID, MODEL_ID, Phs_Code, Subp_Code, Trade_ID, Material_ID, BADC, qty,
								 EST_COST, Raw_Land_CD, HB_Package_ID, HB_OrderPoint_ID, EstimateLevel,
								 HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays)

Select EMAT_ID, OPTION_ID, MODEL_ID, Phs_Code, Subp_Code, Trade_ID, Material_ID, BADC, qty,
								 EST_COST, Raw_Land_CD, HB_Package_ID, HB_OrderPoint_ID, EstimateLevel,
								 HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays
From HB_EST_MAT
Where Option_ID = @Option_ID and Raw_Land_CD = @Raw_Land_CD and Model_ID = @Model_ID and EstimateLevel = @EstimateLevel

If @Option_ID <> -1 
	Begin	

--------------------------------HB_EST Changes-------------------------------------------------------------------------

		Delete HB_EST
		--Select * From HB_EST
		Where Option_ID = @Option_ID
			  And Raw_Land_CD in (Select Raw_Land_CD from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1 And Model_ID <> -1)
			  And Model_ID in (Select Model_ID from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1 And Model_ID <> -1)
			  And EstimateLevel = 'E'
	
		Delete HB_EST
		--Select * From HB_EST
		Where Option_ID = @Option_ID
			  And Raw_Land_CD in (Select Raw_Land_CD from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1 And Model_ID = -1)
			  And Model_ID in (Select Model_Name_ID from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1 And Model_ID = -1)
			  And EstimateLevel = 'M'
		
		Delete HB_EST
		--Select * From HB_EST
		Where Option_ID = @Option_ID
			  And Raw_Land_CD in (Select Raw_Land_CD from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1 And Model_ID = -1 AND Model_Name_ID = -1)
			  And Model_ID = -1
			  And EstimateLevel = 'H'

---------------------------------HB_EST_TRD Changes-------------------------------------------------------------------

		Delete HB_EST_TRD
		--Select * From HB_EST_TRD
		Where Option_ID = @Option_ID
			  And Raw_Land_CD in (Select Raw_Land_CD from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1  And Model_ID <> -1)
			  And Model_ID in (Select Model_ID from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1  And Model_ID <> -1)
			  And EstimateLevel = 'E'

		Delete HB_EST_TRD
		--Select * From HB_EST_TRD
		Where Option_ID = @Option_ID
			  And Raw_Land_CD in (Select Raw_Land_CD from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1 And Model_ID = -1)
			  And Model_ID in (Select Model_Name_ID from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1 And Model_ID = -1)
			  And EstimateLevel = 'M'
		
		Delete HB_EST_TRD
		--Select * From HB_EST_TRD
		Where Option_ID = @Option_ID
			  And Raw_Land_CD in (Select Raw_Land_CD from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1 And Model_ID = -1 AND Model_Name_ID = -1)
			  And Model_ID = -1
			  And EstimateLevel = 'H'

-------------------------------HB_EST_MAT Changes---------------------------------------------------------------------

		Delete HB_EST_MAT
		--Select * From HB_EST_MAT
		Where Option_ID = @Option_ID
			  And Raw_Land_CD in (Select Raw_Land_CD from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1 And Model_ID <> -1)
			  And Model_ID in (Select Model_ID from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1 And Model_ID <> -1)
			  And EstimateLevel = 'E'
	
		Delete HB_EST_MAT
		--Select * from HB_EST_MAT
		Where Option_ID = @Option_ID
			  And Raw_Land_CD in (Select Raw_Land_CD from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1 And Model_ID = -1)
			  And Model_ID in (Select Model_Name_ID from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1 And Model_ID = -1)
			  And EstimateLevel = 'M'

		Delete HB_EST_MAT
		--Select * From HB_EST_MAT
		Where Option_ID = @Option_ID
			  And Raw_Land_CD in (Select Raw_Land_CD from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1 And Model_ID = -1 AND Model_Name_ID = -1)
			  And Model_ID = -1
			  And EstimateLevel = 'H'

-------------------------------HB_EST Insert--------------------------------------------------------------------------

		Insert Into HB_EST (Option_ID, Model_ID, phs_code, subp_code, BADC, Internal_Est, External_Est, Final_Est, Hours,
						    Send_RFQ, MAT_EST, Trade_EST, Manual_YN_TRD, Manual_YN_MAT, Raw_Land_CD, MAT_RFQ, TRADE_RFQ,
							EstimateLevel)
		Select Option_ID, Case When isNull(cf.Model_ID,-1) = -1 and isNull(cf.Model_Name_ID,-1) = -1 Then -1
							   When isNull(cf.Model_ID,-1) = -1 and isNull(cf.Model_Name_ID,-1) <> -1 Then isNull(cf.Model_Name_ID,-1)
							   Else isNull(cf.Model_ID,-1) End [Model_ID],
			   phs_code, subp_code, BADC, Internal_Est, External_Est, Final_Est, Hours,
			   Send_RFQ, Mat_Est, Trade_Est, Manual_YN_TRD, Manual_YN_MAT, isNull(cf.Raw_Land_CD,-1), Mat_RFQ, Trade_RFQ, 
			   Case When isNull(cf.Raw_Land_CD,-1) = -1 and isNull(cf.Model_Name_ID,-1) = -1 and isNull(cf.Model_ID,-1) = -1 Then 'O'
					When isNull(cf.Raw_Land_CD,-1) = -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) = -1 Then 'M'
					When isNull(cf.Raw_Land_CD,-1) = -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) <> -1 Then 'E'
				    When isNull(cf.Raw_Land_CD,-1) <> -1 and isNull(cf.Model_Name_ID,-1) = -1 and isNull(cf.Model_ID,-1) = -1 Then 'H'
					When isNull(cf.Raw_Land_CD,-1) <> -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) = -1 Then 'M'
					When isNull(cf.Raw_Land_CD,-1) <> -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) <> -1 Then 'E'
					Else 'N' End [EstimateLevel]
		from #working_HB_EST e, working_HBEstimateChangeFlow cf
		Where cf.UserName = @UserName and cf.Selected = 1

-------------------------------HB_EST_TRD Insert----------------------------------------------------------------------

	if exists (Select * from #working_HB_EST_TRD)
		Begin

			Insert Into #working_HB_EST_TRD_TMP(ETRD_ID, Option_ID, Model_ID, Phs_Code, Subp_Code, Trade_ID, BADC, Supplier, Est_Cost,
												EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, RAW_LAND_CD, UOM, EstimateLevel,
												HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays,
												HB_OrderPoint_ID)
			Select -1, Option_ID,
				   Case When isNull(cf.Model_ID,-1) = -1 and isNull(cf.Model_Name_ID,-1) = -1 Then -1
									   When isNull(cf.Model_ID,-1) = -1 and isNull(cf.Model_Name_ID,-1) <> -1 Then isNull(cf.Model_Name_ID,-1)
									   Else isNull(cf.Model_ID,-1) End [Model_ID],
				   Phs_Code, Subp_Code, Trade_ID, BADC, Supplier, Est_Cost,
				   EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, isNull(cf.Raw_Land_CD,-1), UOM, 
				   Case When isNull(cf.Raw_Land_CD,-1) = -1 and isNull(cf.Model_Name_ID,-1) = -1 and isNull(cf.Model_ID,-1) = -1 Then 'O'
						When isNull(cf.Raw_Land_CD,-1) = -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) = -1 Then 'M'
						When isNull(cf.Raw_Land_CD,-1) = -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) <> -1 Then 'E'
						When isNull(cf.Raw_Land_CD,-1) <> -1 and isNull(cf.Model_Name_ID,-1) = -1 and isNull(cf.Model_ID,-1) = -1 Then 'H'
						When isNull(cf.Raw_Land_CD,-1) <> -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) = -1 Then 'M'
						When isNull(cf.Raw_Land_CD,-1) <> -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) <> -1 Then 'E'
						Else 'N' End [EstimateLevel],
				   HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays,
				   HB_OrderPoint_ID 
			From #working_HB_EST_TRD e, working_HBEstimateChangeFlow cf
			Where cf.UserName = @UserName and cf.Selected = 1	

			Select @Counter = 1, @RecordCount =  (Select Count(*) From #working_HB_EST_TRD_TMP)

			While @Counter <= @RecordCount and @RecordCount <> 0
				Begin
					Declare @Next int
					Select @Next = Max(IsNull(ETRD_ID,0)) + 1 From HB_EST_TRD

					Insert Into HB_EST_TRD (ETRD_ID, Option_ID, Model_ID, Phs_Code, Subp_Code, Trade_ID, BADC, Supplier, Est_Cost,
											        EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, RAW_LAND_CD, UOM, EstimateLevel,
											        HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays,
											        HB_OrderPoint_ID)
					Select @Next [ETRD_ID], Option_ID, Model_ID, Phs_Code, Subp_Code, Trade_ID, BADC, Supplier, Est_Cost,
						   EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, RAW_LAND_CD, UOM, EstimateLevel,
						   HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays,
						   HB_OrderPoint_ID
					From #working_HB_EST_TRD_TMP Where ID = @Counter

					Select @Counter = @Counter + 1
					
				End
		End
-------------------------------HB_EST_MAT Insert----------------------------------------------------------------------

	If Exists (Select * from #working_HB_EST_MAT)
		Begin

			Insert Into #working_HB_EST_MAT_TMP (EMAT_ID, OPTION_ID, MODEL_ID, Phs_Code, Subp_Code, Trade_ID, Material_ID, BADC, qty,
												 EST_COST, Raw_Land_CD, HB_Package_ID, HB_OrderPoint_ID, EstimateLevel,
												 HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays)
			Select -1, OPTION_ID, 
				   Case When isNull(cf.Model_ID,-1) = -1 and isNull(cf.Model_Name_ID,-1) = -1 Then -1
						When isNull(cf.Model_ID,-1) = -1 and isNull(cf.Model_Name_ID,-1) <> -1 Then isNull(cf.Model_Name_ID,-1)
						Else isNull(cf.Model_ID,-1) End [Model_ID], 
				   Phs_Code, Subp_Code, Trade_ID, Material_ID, BADC, qty,
				   EST_COST, isNull(cf.Raw_Land_CD,-1), HB_Package_ID, HB_OrderPoint_ID, 
				   Case When isNull(cf.Raw_Land_CD,-1) = -1 and isNull(cf.Model_Name_ID,-1) = -1 and isNull(cf.Model_ID,-1) = -1 Then 'O'
						When isNull(cf.Raw_Land_CD,-1) = -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) = -1 Then 'M'
						When isNull(cf.Raw_Land_CD,-1) = -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) <> -1 Then 'E'
						When isNull(cf.Raw_Land_CD,-1) <> -1 and isNull(cf.Model_Name_ID,-1) = -1 and isNull(cf.Model_ID,-1) = -1 Then 'H'
						When isNull(cf.Raw_Land_CD,-1) <> -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) = -1 Then 'M'
						When isNull(cf.Raw_Land_CD,-1) <> -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) <> -1 Then 'E'
						Else 'N' End [EstimateLevel],
				   HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays
			From #working_HB_EST_MAT e, working_HBEstimateChangeFlow cf
			Where cf.UserName = @UserName and cf.Selected = 1	
			
			Select @Counter = 1, @RecordCount =  (Select Count(*) From #working_HB_EST_MAT_TMP)

			While @Counter <= @RecordCount
				Begin
					Select @Next = Max(IsNull(EMAT_ID,0)) + 1 From HB_EST_MAT

					Insert Into HB_EST_MAT (EMAT_ID, OPTION_ID, MODEL_ID, Phs_Code, Subp_Code, Trade_ID, Material_ID, BADC, qty,
											EST_COST, Raw_Land_CD, HB_Package_ID, HB_OrderPoint_ID, EstimateLevel,
											HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays)
					Select @Next [EMAT_ID], OPTION_ID, MODEL_ID, Phs_Code, Subp_Code, Trade_ID, Material_ID, BADC, qty,
												 EST_COST, Raw_Land_CD, HB_Package_ID, HB_OrderPoint_ID, EstimateLevel,
												 HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays
					From #working_HB_EST_MAT_TMP Where ID = @Counter
					
					Select @Counter = @Counter + 1
					
				End
		End

	 declare @RetailMarkup bit, @RoundBy int

	 select @RetailMarkup = UseRetailMarkup, @RoundBy = SalesPrcRnd 
	 from system_ctrl

	 if @RoundBy = 0 
	  select @RoundBy = 4
	 else if @RoundBy = 1
	  select @RoundBy = 0
	 else if @RoundBy = 10
	  select @RoundBy = -1
	 else if @RoundBy = 100
	  select @RoundBy = -2


     update hb_raw_opt 
     set Opt_only_cost = @OptionOnly,
     cost_supl = case when isnull(OveridePrice,0) = 0 then @CostSupl else cost_supl end, 
     PRC_SELL = case when isnull(OveridePrice,0) = 0 then Round(
      case when PRC_FM = 'F' then isNull(PRC_FIXED,0) else 
       case when @RetailMarkup = 1 then isnull(@CostSupl,0) / ((100-isNUll(PRC_MARKUP_PCT,0))/100)
       else isNUll(PRC_MARKUP_PCT+100,0)/100 * isnull(@CostSupl,0) end
      end,@RoundBy) else PRC_SELL end
     where raw_land_cd in 
       (select raw_land_CD from working_HBEstimateChangeFlow 
       where UserName = @Username
       and isnull(Selected,0) = 1
       and isnull(Raw_Land_CD,-1) <> -1
       and isnull(Model_Name_ID,-1) = -1
       and isnull(Model_ID,-1) = -1)
     and Option_ID = @Option_ID

     update hb_mod_opt 
     set Opt_only_cost = @OptionOnly,
     cost_supl = case when isnull(OveridePrice,0) = 0 then @CostSupl else cost_supl end, 
     PRC_SELL = case when isnull(OveridePrice,0) = 0 then Round(
      case when PRC_FM = 'F' then isNull(PRC_FIXED,0) else 
       case when @RetailMarkup = 1 then isnull(@CostSupl,0) / ((100-isNUll(PRC_MARKUP_PCT,0))/100)
       else isNUll(PRC_MARKUP_PCT+100,0)/100 * isnull(@CostSupl,0) end
      end,@RoundBy) else PRC_SELL end
     where raw_land_cd in 
       (select raw_land_CD from working_HBEstimateChangeFlow 
       where UserName = @Username
       and isnull(Model_Name_ID,-1) = hb_mod_opt.MODEL_NAME_ID
       and isnull(Selected,0) = 1
       and isnull(Model_ID,-1) = -1)
     and Model_Name_ID in 
       (select Model_Name_ID from working_HBEstimateChangeFlow 
       where UserName = @Username
       and isnull(Model_Name_ID,-1) = hb_mod_opt.MODEL_NAME_ID
       and isnull(Selected,0) = 1
 and isnull(Model_ID,-1) = -1)
     and Option_ID = @Option_ID     

     update hb_elv_opt 
     set Opt_only_cost = @OptionOnly,
     cost_supl = case when isnull(OveridePrice,0) = 0 then @CostSupl else cost_supl end, 
     PRC_SELL = case when isnull(OveridePrice,0) = 0 then Round(
      case when PRC_FM = 'F' then isNull(PRC_FIXED,0) else 
       case when @RetailMarkup = 1 then isnull(@CostSupl,0) / ((100-isNUll(PRC_MARKUP_PCT,0))/100)
       else isNUll(PRC_MARKUP_PCT+100,0)/100 * isnull(@CostSupl,0) end
      end,@RoundBy) else PRC_SELL end
     where raw_land_cd in 
       (select raw_land_CD from working_HBEstimateChangeFlow 
       where UserName = @Username
       and isnull(Model_ID,-1) = hb_elv_opt.MODEL_ID
       and isnull(Selected,0) = 1)
     and Model_ID in 
       (select Model_ID from working_HBEstimateChangeFlow 
       where UserName = @Username
       and isnull(Model_ID,-1) = hb_elv_opt.MODEL_ID
       and isnull(Selected,0) = 1)
     and Option_ID = @Option_ID

	End


    ------------------------------------------------------------------------------------------------------------------
Else
	Begin

--------------------------------HB_EST Changes-------------------------------------------------------------------------

		Delete HB_EST
		--Select * From HB_EST
		Where Option_ID = @Option_ID
			  And Raw_Land_CD in (Select Raw_Land_CD from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1)
			  And Model_ID in (Select Model_ID from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1)
			  And EstimateLevel = 'E'

---------------------------------HB_EST_TRD Changes-------------------------------------------------------------------

		Delete HB_EST_TRD
		--Select * From HB_EST_TRD
		Where Option_ID = @Option_ID
			  And Raw_Land_CD in (Select Raw_Land_CD from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1)
			  And Model_ID in (Select Model_ID from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1)
			  And EstimateLevel = 'E'

-------------------------------HB_EST_MAT Changes---------------------------------------------------------------------

		Delete HB_EST_MAT
		--Select * From HB_EST_MAT
		Where Option_ID = @Option_ID
			  And Raw_Land_CD in (Select Raw_Land_CD from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1)
			  And Model_ID in (Select Model_ID from working_HBEstimateChangeFlow where UserName = @UserName and Selected = 1)
			  And EstimateLevel = 'E'

-------------------------------HB_EST Insert--------------------------------------------------------------------------

		Insert Into HB_EST (Option_ID, Model_ID, phs_code, subp_code, BADC, Internal_Est, External_Est, Final_Est, Hours,
						    Send_RFQ, MAT_EST, Trade_EST, Manual_YN_TRD, Manual_YN_MAT, Raw_Land_CD, MAT_RFQ, TRADE_RFQ,
							EstimateLevel)
		Select Option_ID, Case When isNull(cf.Model_ID,-1) = -1 and isNull(cf.Model_Name_ID,-1) = -1 Then -1
							   When isNull(cf.Model_ID,-1) = -1 and isNull(cf.Model_Name_ID,-1) <> -1 Then isNull(cf.Model_ID,-1)
							   Else isNull(cf.Model_ID,-1) End [Model_ID],
			   phs_code, subp_code, BADC, Internal_Est, External_Est, Final_Est, Hours,
			   Send_RFQ, Mat_Est, Trade_Est, Manual_YN_TRD, Manual_YN_MAT, isNull(cf.Raw_Land_CD,-1), Mat_RFQ, Trade_RFQ, 
			   Case When isNull(cf.Raw_Land_CD,-1) = -1 and isNull(cf.Model_Name_ID,-1) = -1 and isNull(cf.Model_ID,-1) = -1 Then 'O'
					When isNull(cf.Raw_Land_CD,-1) = -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) = -1 Then 'M'
					When isNull(cf.Raw_Land_CD,-1) = -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) <> -1 Then 'E'
				    When isNull(cf.Raw_Land_CD,-1) <> -1 and isNull(cf.Model_Name_ID,-1) = -1 and isNull(cf.Model_ID,-1) = -1 Then 'H'
					When isNull(cf.Raw_Land_CD,-1) <> -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) = -1 Then 'M'
					When isNull(cf.Raw_Land_CD,-1) <> -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) <> -1 Then 'E'
					Else 'N' End [EstimateLevel]
		from #working_HB_EST e, working_HBEstimateChangeFlow cf
		Where cf.UserName = @UserName and cf.Selected = 1
		
-------------------------------HB_EST_TRD Insert----------------------------------------------------------------------

		if exists (Select * from #working_HB_EST_TRD)
			Begin

				Insert Into #working_HB_EST_TRD_TMP(ETRD_ID, Option_ID, Model_ID, Phs_Code, Subp_Code, Trade_ID, BADC, Supplier, Est_Cost,
													EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, RAW_LAND_CD, UOM, EstimateLevel,
													HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays,
													HB_OrderPoint_ID)
				Select -1, Option_ID,
					   Case When isNull(cf.Model_ID,-1) = -1 and isNull(cf.Model_Name_ID,-1) = -1 Then -1
										   When isNull(cf.Model_ID,-1) = -1 and isNull(cf.Model_Name_ID,-1) <> -1 Then isNull(cf.Model_Name_ID,-1)
										   Else isNull(cf.Model_ID,-1) End [Model_ID],
					   Phs_Code, Subp_Code, Trade_ID, BADC, Supplier, Est_Cost,
					   EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, isNull(cf.Raw_Land_CD,-1), UOM, 
					   Case When isNull(cf.Raw_Land_CD,-1) = -1 and isNull(cf.Model_Name_ID,-1) = -1 and isNull(cf.Model_ID,-1) = -1 Then 'O'
							When isNull(cf.Raw_Land_CD,-1) = -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) = -1 Then 'M'
							When isNull(cf.Raw_Land_CD,-1) = -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) <> -1 Then 'E'
							When isNull(cf.Raw_Land_CD,-1) <> -1 and isNull(cf.Model_Name_ID,-1) = -1 and isNull(cf.Model_ID,-1) = -1 Then 'H'
							When isNull(cf.Raw_Land_CD,-1) <> -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) = -1 Then 'M'
							When isNull(cf.Raw_Land_CD,-1) <> -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) <> -1 Then 'E'
							Else 'N' End [EstimateLevel],
					   HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays,
					   HB_OrderPoint_ID 
				From #working_HB_EST_TRD e, working_HBEstimateChangeFlow cf
				Where cf.UserName = @UserName and cf.Selected = 1	

				Select @Counter = 1, @RecordCount =  (Select Count(*) From #working_HB_EST_TRD_TMP)

				While @Counter <= @RecordCount and @RecordCount <> 0
					Begin
						Select @Next = Max(IsNull(ETRD_ID,0)) + 1 From HB_EST_TRD

						Insert Into HB_EST_TRD (ETRD_ID, Option_ID, Model_ID, Phs_Code, Subp_Code, Trade_ID, BADC, Supplier, Est_Cost,
												        EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, RAW_LAND_CD, UOM, EstimateLevel,
												        HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays,
												        HB_OrderPoint_ID)
						Select @Next [ETRD_ID], Option_ID, Model_ID, Phs_Code, Subp_Code, Trade_ID, BADC, Supplier, Est_Cost,
							   EST_SIB, EST_HOURS, EXPIRE_DATE, RFQC_ID, RAW_LAND_CD, UOM, EstimateLevel,
							   HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays,
							   HB_OrderPoint_ID
						From #working_HB_EST_TRD_TMP Where ID = @Counter

						Select @Counter = @Counter + 1
						
					End
			End
	-------------------------------HB_EST_MAT Insert----------------------------------------------------------------------

		If Exists (Select * from #working_HB_EST_MAT)
			Begin

				Insert Into #working_HB_EST_MAT_TMP (EMAT_ID, OPTION_ID, MODEL_ID, Phs_Code, Subp_Code, Trade_ID, Material_ID, BADC, qty,
													 EST_COST, Raw_Land_CD, HB_Package_ID, HB_OrderPoint_ID, EstimateLevel,
													 HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays)
				Select -1, OPTION_ID, 
					   Case When isNull(cf.Model_ID,-1) = -1 and isNull(cf.Model_Name_ID,-1) = -1 Then -1
							When isNull(cf.Model_ID,-1) = -1 and isNull(cf.Model_Name_ID,-1) <> -1 Then isNull(cf.Model_Name_ID,-1)
							Else isNull(cf.Model_ID,-1) End [Model_ID], 
					   Phs_Code, Subp_Code, Trade_ID, Material_ID, BADC, qty,
					   EST_COST, isNull(cf.Raw_Land_CD,-1), HB_Package_ID, HB_OrderPoint_ID, 
					   Case When isNull(cf.Raw_Land_CD,-1) = -1 and isNull(cf.Model_Name_ID,-1) = -1 and isNull(cf.Model_ID,-1) = -1 Then 'O'
							When isNull(cf.Raw_Land_CD,-1) = -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) = -1 Then 'M'
							When isNull(cf.Raw_Land_CD,-1) = -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) <> -1 Then 'E'
							When isNull(cf.Raw_Land_CD,-1) <> -1 and isNull(cf.Model_Name_ID,-1) = -1 and isNull(cf.Model_ID,-1) = -1 Then 'H'
							When isNull(cf.Raw_Land_CD,-1) <> -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) = -1 Then 'M'
							When isNull(cf.Raw_Land_CD,-1) <> -1 and isNull(cf.Model_Name_ID,-1) <> -1 and isNull(cf.Model_ID,-1) <> -1 Then 'E'
							Else 'N' End [EstimateLevel],
					   HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays
				From #working_HB_EST_MAT e, working_HBEstimateChangeFlow cf
				Where cf.UserName = @UserName and cf.Selected = 1	

				Select @Counter = 1, @RecordCount =  (Select Count(*) From #working_HB_EST_TRD_TMP)

				While @Counter <= @RecordCount
					Begin
						Select @Next = Max(IsNull(EMAT_ID,0)) + 1 From HB_EST_MAT

						Insert Into HB_EST_MAT (EMAT_ID, OPTION_ID, MODEL_ID, Phs_Code, Subp_Code, Trade_ID, Material_ID, BADC, qty,
												EST_COST, Raw_Land_CD, HB_Package_ID, HB_OrderPoint_ID, EstimateLevel,
												HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays)
						Select @Next [EMAT_ID], OPTION_ID, MODEL_ID, Phs_Code, Subp_Code, Trade_ID, Material_ID, BADC, qty,
													 EST_COST, Raw_Land_CD, HB_Package_ID, HB_OrderPoint_ID, EstimateLevel,
													 HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID, ConfirmationDeadlineDays
						From #working_HB_EST_MAT_TMP Where ID = @Counter
						
						Select @Counter = @Counter + 1
						
					End
			End
	End




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBUpdateOptionSupplyCost]') and xtype = 'P ')  
 drop Procedure sp_HBUpdateOptionSupplyCost
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE Procedure [dbo].[sp_HBUpdateOptionSupplyCost]
@Option_ID int, @Raw_Land_CD int, @CostSupl money, @OptionOnlyPrice money
AS
--declare @Option_ID int, @Raw_Land_CD int,  @EstimateLevel varchar(2),  @CostSupl money
--select @Option_ID = 46, @Raw_Land_CD = 50006,  @EstimateLevel = 'H',  @CostSupl = 44.44


 declare @RetailMarkup bit, @RoundBy int

 select @RetailMarkup = UseRetailMarkup, @RoundBy = SalesPrcRnd 
 from system_ctrl

 if @RoundBy = 0 
  select @RoundBy = 4
 else if @RoundBy = 1
  select @RoundBy = 0
 else if @RoundBy = 10
  select @RoundBy = -1
 else if @RoundBy = 100
  select @RoundBy = -2

 update hb_mod_opt
  set cost_supl = case when isnull(OveridePrice,0) = 0 then @costSupl else cost_supl end, 
  Opt_only_cost = @OptionOnlyPrice,
  PRC_SELL = case when isnull(OveridePrice,0) = 0 then Round(
  case when PRC_FM = 'F' then isNull(PRC_FIXED,0) else 
   case when @RetailMarkup = 1 then isnull(@CostSupl,0) / ((100-isNUll(PRC_MARKUP_PCT,0))/100)
   else isNUll(PRC_MARKUP_PCT+100,0)/100 * isnull(@CostSupl,0) end
  end,@RoundBy) else PRC_SELL end
  where option_id = @Option_id
  and raw_land_cd = @raw_land_cd

 update hb_elv_opt
  set cost_supl = case when isnull(OveridePrice,0) = 0 then @costSupl else cost_supl end, 
  Opt_only_cost = @OptionOnlyPrice,
  PRC_SELL = case when isnull(OveridePrice,0) = 0 then Round(
  case when PRC_FM = 'F' then isNull(PRC_FIXED,0) else 
   case when @RetailMarkup = 1 then isnull(@CostSupl,0) / ((100-isNUll(PRC_MARKUP_PCT,0))/100)
   else isNUll(PRC_MARKUP_PCT+100,0)/100 * isnull(@CostSupl,0) end
  end,@RoundBy) else PRC_SELL end
  where option_id = @Option_id
  and raw_land_cd = @raw_land_cd



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_HBUpdateOptionSupplyCostAndOptionPriceAllLevels]') and xtype = 'P ')  
 drop Procedure sp_HBUpdateOptionSupplyCostAndOptionPriceAllLevels
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create Procedure [dbo].[sp_HBUpdateOptionSupplyCostAndOptionPriceAllLevels]
@Option_ID int, @Raw_Land_CD int, @CostSupl money, @OptionOnlyPrice money
AS
--declare @Option_ID int, @Raw_Land_CD int,  @EstimateLevel varchar(2),  @CostSupl money
--select @Option_ID = 46, @Raw_Land_CD = 50006,  @EstimateLevel = 'H',  @CostSupl = 44.44


 declare @RetailMarkup bit, @RoundBy int

 select @RetailMarkup = UseRetailMarkup, @RoundBy = SalesPrcRnd 
 from system_ctrl

 if @RoundBy = 0 
  select @RoundBy = 4
 else if @RoundBy = 1
  select @RoundBy = 0
 else if @RoundBy = 10
  select @RoundBy = -1
 else if @RoundBy = 100
  select @RoundBy = -2
 
 if @Raw_Land_CD = -1 
 begin --do master level
  update hb_options
  set cost_supl = case when isnull(OveridePrice,0) = 0 then @costSupl else cost_supl end, 
  Opt_only_cost = @OptionOnlyPrice,
  PRC_SELL = case when isnull(OveridePrice,0) = 0 then Round(
  case when PRC_FM = 'F' then isNull(PRC_FIXED,0) else 
   case when @RetailMarkup = 1 then isnull(@CostSupl,0) / ((100-isNUll(PRC_MARKUP_PCT,0))/100)
   else isNUll(PRC_MARKUP_PCT+100,0)/100 * isnull(@CostSupl,0) end
  end,@RoundBy) else PRC_SELL end
  where option_id = @Option_id
 end
 else
 begin --do rlh level
  update hb_raw_opt 
  set cost_supl = case when isnull(OveridePrice,0) = 0 then @costSupl else cost_supl end, 
  Opt_only_cost = @OptionOnlyPrice,
  PRC_SELL = case when isnull(OveridePrice,0) = 0 then Round(
  case when PRC_FM = 'F' then isNull(PRC_FIXED,0) else 
   case when @RetailMarkup = 1 then isnull(@CostSupl,0) / ((100-isNUll(PRC_MARKUP_PCT,0))/100)
   else isNUll(PRC_MARKUP_PCT+100,0)/100 * isnull(@CostSupl,0) end
  end,@RoundBy) else PRC_SELL end
  where option_id = @Option_id
  and raw_land_cd = @raw_land_cd
 end

 update hb_mod_opt 
  set cost_supl = case when isnull(OveridePrice,0) = 0 then @costSupl else cost_supl end, 
  Opt_only_cost = @OptionOnlyPrice,
  PRC_SELL = case when isnull(OveridePrice,0) = 0 then Round(
  case when PRC_FM = 'F' then isNull(PRC_FIXED,0) else 
   case when @RetailMarkup = 1 then isnull(@CostSupl,0) / ((100-isNUll(PRC_MARKUP_PCT,0))/100)
   else isNUll(PRC_MARKUP_PCT+100,0)/100 * isnull(@CostSupl,0) end
  end,@RoundBy) else PRC_SELL end
  where option_id = @Option_id
  and raw_land_cd = @raw_land_cd

 update hb_elv_opt
  set cost_supl = case when isnull(OveridePrice,0) = 0 then @costSupl else cost_supl end, 
  Opt_only_cost = @OptionOnlyPrice,
  PRC_SELL = case when isnull(OveridePrice,0) = 0 then Round(
  case when PRC_FM = 'F' then isNull(PRC_FIXED,0) else 
   case when @RetailMarkup = 1 then isnull(@CostSupl,0) / ((100-isNUll(PRC_MARKUP_PCT,0))/100)
   else isNUll(PRC_MARKUP_PCT+100,0)/100 * isnull(@CostSupl,0) end
  end,@RoundBy) else PRC_SELL end
  where option_id = @Option_id
  and raw_land_cd = @raw_land_cd



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_helpdiagramdefinition]') and xtype = 'P ')  
 drop Procedure sp_helpdiagramdefinition
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

	CREATE PROCEDURE dbo.sp_helpdiagramdefinition
	(
		@diagramname 	sysname,
		@owner_id	int	= null 		
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		set nocount on

		declare @theId 		int
		declare @IsDbo 		int
		declare @DiagId		int
		declare @UIDFound	int
	
		if(@diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner');
		if(@owner_id is null)
			select @owner_id = @theId;
		revert; 
	
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname;
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId ))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);
			return -3
		end

		select version, definition FROM dbo.sysdiagrams where diagram_id = @DiagId ; 
		return 0
	END
	

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_helpdiagrams]') and xtype = 'P ')  
 drop Procedure sp_helpdiagrams
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

	CREATE PROCEDURE dbo.sp_helpdiagrams
	(
		@diagramname sysname = NULL,
		@owner_id int = NULL
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		DECLARE @user sysname
		DECLARE @dboLogin bit
		EXECUTE AS CALLER;
			SET @user = USER_NAME();
			SET @dboLogin = CONVERT(bit,IS_MEMBER('db_owner'));
		REVERT;
		SELECT
			[Database] = DB_NAME(),
			[Name] = name,
			[ID] = diagram_id,
			[Owner] = USER_NAME(principal_id),
			[OwnerID] = principal_id
		FROM
			sysdiagrams
		WHERE
			(@dboLogin = 1 OR USER_NAME(principal_id) = @user) AND
			(@diagramname IS NULL OR name = @diagramname) AND
			(@owner_id IS NULL OR principal_id = @owner_id)
		ORDER BY
			4, 5, 1
	END
	

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_InsertFilter]') and xtype = 'P ')  
 drop Procedure sp_InsertFilter
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





create proc sp_InsertFilter
 @Guid varchar(100), 
 @GridNamePage varchar(500), 
 @FieldName varchar(500), 
 @DisplayName varchar(500), 
 @Filter varchar(500)
as
insert session_filter_selections(Guid, GridNamePage, FieldName, DisplayName, Filter)
select @Guid, @GridNamePage, @FieldName, @DisplayName, @Filter







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_InsertListboxSelection]') and xtype = 'P ')  
 drop Procedure sp_InsertListboxSelection
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





create proc sp_InsertListboxSelection
 @Guid varchar(100),
 @ReportID int,
 @ReportControlID int,
 @ValueItem varchar(500)
as

insert session_listbox_selections(Guid, ReportID, ReportControlID, ValueItem)
select @Guid, @ReportID, @ReportControlID, @ValueItem







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_InsertMSPTASKChecker]') and xtype = 'P ')  
 drop Procedure sp_InsertMSPTASKChecker
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go







CREATE   proc sp_InsertMSPTASKChecker
AS 

-- this routine "finds" any msp tasks that were entered at the time the "copy" over occurred
-- will be called manually from the project delete trigger if a copy over occurred
BEGIN	
 --find parent if this occurred outside of the dashboard (also find out if it's even dashboard relevant
 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#NewMSPTasks'))
 drop table #NewMSPTasks
 create table #NewMSPTasks(
 Proj_ID int,
 Task_UID int,
 TASK_OUTLINE_NUM varchar(255),
 PARENT_TASK_OUTLINE_NUM varchar(255) null,
 IsDone bit,
 Link_ID int null,
 Dashboard_TaskGroupID int null,
 TaskType varchar(50) null,
 SourceFlavour varchar(50) null,
 CodeType char(1) null)

 insert tracker select 'int'


 insert #NewMSPTasks(Proj_ID, Task_UID, TASK_OUTLINE_NUM, PARENT_TASK_OUTLINE_NUM, IsDone)
 select t.Proj_ID, t.Task_UID, TASK_OUTLINE_NUM, TASK_OUTLINE_NUM, 0
 from MSP_Tasks t
 left outer join msp_dashboard_tasks d
 on t.Proj_id = d.Proj_id
 and t.Task_UID = d.Task_UID
 where d.Task_UID is null
 and isNUll(t.Task_UID,-1) > 0
 and t.Proj_ID not in (select Proj_ID from Working_InsertStatus)

 declare @Count int
 select @Count = count(*)
 from #NewMSPTasks
 where IsDone = 0

 while @Count > 0 
 begin 
  update #NewMSPTasks
  set PARENT_TASK_OUTLINE_NUM = substring(PARENT_TASK_OUTLINE_NUM, 1, len(PARENT_TASK_OUTLINE_NUM) - 1)
  where IsDone = 0

  update #NewMSPTasks
  set IsDone = case 
  when substring(PARENT_TASK_OUTLINE_NUM, len(PARENT_TASK_OUTLINE_NUM), len(PARENT_TASK_OUTLINE_NUM)) = '.' then 1 else 0 end,
  PARENT_TASK_OUTLINE_NUM = case 
  when substring(PARENT_TASK_OUTLINE_NUM, len(PARENT_TASK_OUTLINE_NUM), len(PARENT_TASK_OUTLINE_NUM)) = '.' then 
  substring(PARENT_TASK_OUTLINE_NUM, 1, len(PARENT_TASK_OUTLINE_NUM)-1) else PARENT_TASK_OUTLINE_NUM end
  where IsDone = 0

  update #NewMSPTasks
  set IsDone = case 
  when len(PARENT_TASK_OUTLINE_NUM) = 0 then 1 else 0 end
  where IsDone = 0  

  --now check to see if parent has dashboard info (could be a child of a new child)
  update #NewMSPTasks
  set Link_ID = d.Link_ID,
  Dashboard_TaskGroupID = d.Dashboard_TaskGroupID,
  TaskType = d.TaskType,
  SourceFlavour = d.SourceFlavour,
  CodeType = case 
   when d.CodeType = 'C' then 
    case when d.SourceFlavour = 'nbgInternal' then 'T' else 'P'  end
			when d.CodeType = 'P' then 'P' 
			when d.CodeType = 'M' then 'T'
   when d.CodeType = 'T' then 'T'
   else 'T' end
  from #NewMSPTasks t
  join MSP_Tasks mt
  on t.PARENT_TASK_OUTLINE_NUM = mt.TASK_OUTLINE_NUM
  join msp_dashboard_tasks d
  on mt.Proj_id = d.Proj_id
  and mt.Task_UID = d.Task_UID
  where isNUll(t.Task_UID,-1) > 0
  

  select @Count = count(*)
  from #NewMSPTasks
  where IsDone = 0  
 end

insert msp_dashboard_tasks(PROJ_ID, Link_ID, Dashboard_TaskGroupID,
  TASK_UID, TaskType, SourceFlavour, CodeType)
select Proj_ID, Link_ID, Dashboard_TaskGroupID, Task_UID, TaskType, 
SourceFlavour, CodeType
from #NewMSPTasks


 
end


























Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_InsertSingleValueSelection]') and xtype = 'P ')  
 drop Procedure sp_InsertSingleValueSelection
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go






create proc sp_InsertSingleValueSelection
 @Guid varchar(100),
 @ReportID int,
 @ReportControlID int,
 @ValueItem varchar(500)
as

delete session_listbox_selections
where Guid = @Guid
and ReportID = @ReportID
and ReportControlID = @ReportControlID

insert session_listbox_selections(Guid, ReportID, ReportControlID, ValueItem)
select @Guid, @ReportID, @ReportControlID, @ValueItem








Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_INV_NRVRouting]') and xtype = 'P ')  
 drop Procedure sp_INV_NRVRouting
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create    proc [dbo].[sp_INV_NRVRouting]
@ID int,
@Status char(1)
as

--declare 
--@ID int,
--@Status char(1)
--
--select @id =23


begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@modref varchar(100),
	@stat varchar(50)

    
	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @modref=module_reference_id, @stat=status from approvals_requested where id=@id

	if( @stat = 'declined' )
	begin
		
        set @sql ='update '+@tr_db+'..INV_NRV_head set STATUS=''D''  where BATCH_ID='+@modref
	    exec( @sql )		
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..INV_NRV_head set STATUS=''V''  where BATCH_ID='+@modref
        
		exec( @sql )
	end

	

end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_INV_Routing_InventoryCreate]') and xtype = 'P ')  
 drop Procedure sp_INV_Routing_InventoryCreate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE   proc [dbo].[sp_INV_Routing_InventoryCreate]
@ID int,
@Status char(1)
as

--declare 
--@ID int,
--@Status char(1)
--
--select @id = 7


begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@modref varchar(100),
	@stat varchar(50)

    
	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @modref=module_reference_id, @stat=status from approvals_requested where id=@id

	if( @stat = 'declined' )
	begin
		--set @sql ='delete '+@tr_db+'..inventory  where inv_id='+@modref
        set @sql ='update '+@tr_db+'..inventory set PENDING=''D''  where inv_id='+@modref
	    exec( @sql )		
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..inventory set PENDING=''F''  where inv_id='+@modref
        
		exec( @sql )
	end

	

end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_kbi_createNew]') and xtype = 'P ')  
 drop Procedure sp_kbi_createNew
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--/****** Object:  StoredProcedure [dbo].[sp_kbi_createNew]    Script Date: 7/22/2017 2:04:43 AM ******/
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER OFF
--GO

CREATE proc [dbo].[sp_kbi_createNew] @skbii_id int, @latency int, @todate char(1), @range int, @rangeScale char(1), @gap int, @gapScale char(1), @description varchar(50),
@username varchar(100), @company_id int, @copySchedule char(1), @target varchar(100), @targetType varchar(50) as
/*
begin tran
declare @skbii_id int, @latency int, @todate char(1), @range int, @rangeScale char(1), @gap int, @gapScale char(1), @description varchar(50),
@username varchar(100), @company_id int, @copySchedule char(1), @target varchar(100), @targetType varchar(50)
select
			@skbii_id = 120,
			@latency = 60,
			@todate = N'T',
			@range = 1,
			@rangeScale = N'M',
			@gap = 2,
			@gapScale = N'M',
			@description = N'wt555f',
			@username = N'hms',
			@company_id = 12,
			@copySchedule = N'F',
			@target = N'Rob',
			@targetType = N'User'
*/

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#s_instance'))
drop table #s_instance 
create table #s_instance (
	[id] [int] NOT NULL,
	[SQ_ID] [int] NULL,
	[Target] [varchar](100) NULL,
	[TargetType] [varchar](50) NULL,
	[Source] [varchar](100) NULL,
	[CompanyID] [int] NULL,
	[Active] [bit] NULL,
	[isWidget] [bit] NULL,
	[TargetDesc] [varchar](50) NULL,inewID [int])

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#s_Widget'))
drop table #s_Widget 
CREATE TABLE #s_Widget(
	[SQ_ID] [int] NULL,
	[SI_ID] [int] NULL,
	[Stock] [bit] NULL,
	[Type] [varchar](20) NULL,
	[Parent] [varchar](100) NULL,
	[SQLQuery] [text] NULL,
	[WidgetName] [varchar](100) NULL,
	[StockGUID] [varchar](50) NULL,
	[id] [int] not null,inewID [int])

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#s_Limit'))
drop table #s_Limit 
create table #s_Limit(
	[id] [int] NOT NULL,
	[SI_ID] [int] NULL,
	[ColumnName] [varchar](100) NULL,
	[LimitType] [varchar](10) NULL,
	[caption] [varchar](100) NULL,
	[value_member] [varchar](30) NULL,inewID [int])


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#S_Widget_Chart'))
drop table #S_Widget_Chart	   
CREATE TABLE #S_Widget_Chart(
	[id] [int] NOT NULL,
	[SW_ID] [int] NULL,
	[ChartType] [varchar](20) NULL,
	[BaseFieldName] [varchar](100) NULL,
	[BaseTitle] [varchar](100) NULL,
	[verticalTitle] [varchar](100) NULL,inewID [int])


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#S_Widget_Gauge'))
drop table #S_Widget_Gauge
CREATE TABLE #S_Widget_Gauge(
	[id] [int]NOT NULL,
	[SW_ID] [int] NULL,
	[GaugeType] [varchar](20) NULL,
	[FieldName] [varchar](100) NULL,
	[AggregationType] [varchar](100) NULL,
	[FormatSpecifier] [varchar](20) NULL,inewID [int])


declare 
@newSKBII_ID int,
@instanceID int,
@idnt int,
@counter int,
@tmpID int,
@KBI_ID int,
@tr_db varchar(500),
@SQL varchar(8000)
--create temp tables to be working with

select @tr_db=TreasuryDBName from companies where autoid=@company_id

	 
if(@@Error <> 0)
	print 'Error dropping and creating temp tables error#'+cast(@@Error as varchar(100))


--copy security_kbi_instance where id = @skbii_id   --update @latency,@todate,@range,@rangeScale,@gap,@gapScale,@description, source = @username,target = @username,targettype = 'User'  ===save new ID to return
insert into security_kbi_instance (SKBI_ID, Target, TargetType, Scheduled, CompanySpecific, TimeOut, Latency, [Todate?], Range, RangeScale, Gap, GapScale, source, Description, Restricted)
select SKBI_ID, @target,@targetType,case when @copySchedule = 'F' then 'F' else  Scheduled end, CompanySpecific, TimeOut,@latency,@todate,@Range, @RangeScale, @Gap, @GapScale, @username, @description, 
case when Restricted = 1 then 1 else case when Source != @target then 1 else 0 end end Restricted

from security_kbi_instance 
where id = @skbii_id
select @newSKBII_ID = @@Identity

if(@copySchedule = 'T')
begin
	insert into security_kbi_company_schedule(SKBII_ID, CompanyID, StartDateTime, RecurrancePeriod, LastRunDateTime, LastRunError, RecurranceValue)
	select @newSKBII_ID, CompanyID, StartDateTime, RecurrancePeriod, LastRunDateTime, ' ', RecurranceValue 
	from security_kbi_company_schedule 
	where skbii_id = @skbii_id
end
--copy each security_instance where source = @skbii_id   <get [target] = @widgetID>   --update source = @skbii_id 

insert into #s_instance(id,SQ_ID, Target, TargetType, source, CompanyID, Active, isWidget, TargetDesc)
select i.id,i.SQ_ID, i.Target, i.TargetType, i.source, i.CompanyID, i.Active, i.isWidget, i.TargetDesc 
from security_instance i
join security_widget sw on i.id = sw.si_id and isnull(stock,0) = 0
where cast(@skbii_id as varchar(100)) = i.source order by i.id asc

insert into #s_instance(id,SQ_ID, Target, TargetType, source, CompanyID, Active, isWidget, TargetDesc)
select i.id,i.SQ_ID, i.Target, i.TargetType, i.source, i.CompanyID, i.Active, i.isWidget, i.TargetDesc 
from security_instance i
where cast(@skbii_id as varchar(100)) = i.source and i.targettype = 'kbi' order by i.id asc

--by default set the source to the user(which is the kbi_instance ID
--keep the old source so the user cannot change the security that has been assigned to them
insert into security_instance(SQ_ID, Target, TargetType, Source, CompanyID, Active, isWidget, TargetDesc)
select SQ_ID,target , TargetType, cast(@newSKBII_ID as varchar(100)), CompanyID, Active, isWidget, TargetDesc 
from security_instance
where cast(@skbii_id as varchar(100)) = source order by id asc

set @idnt = @@identity


--after inserts update the temp table with the new values
set @counter = 0
set @tmpID = -1
select top 1 @tmpID = id from #s_instance where source = cast(@skbii_id as varchar(100)) and inewID is null order by id desc
while (@tmpID <> -1)
begin
	print cast(@tmpID as varchar(50)) + ' rec 1'
	update #s_instance set inewID = (@idnt - @counter) where id in (select top 1 id from #s_instance where source = cast(@skbii_id as varchar(100)) and (inewID is null) order by id desc)
	set @counter = @counter + 1
	set @tmpID = -1
	select top 1 @tmpID = id from #s_instance where source = cast(@skbii_id as varchar(100)) and (inewID is null) order by id desc
end
select * from #s_instance--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Helps Debug

insert into #s_Widget(SQ_ID, SI_ID, Stock, Type, Parent, SQLQuery, WidgetName, StockGUID, id)
select SQ_ID, SI_ID, Stock, Type, Parent, SQLQuery, WidgetName, StockGUID, id 
from security_widget 
where id in((select isnull(target,'-1')[target] from #s_instance)) order by id asc

insert into security_widget(SQ_ID, SI_ID, Stock, Type, Parent, SQLQuery, WidgetName, StockGUID)
select SQ_ID, (select i.inewID from #s_instance i where i.target = w.id and i.source = @skbii_id), Stock, Type, Parent, SQLQuery, WidgetName, StockGUID 
from security_widget w
where id in(select cast(isnull(target,'-1') as varchar(100))[target] from #s_instance) order by id asc
set @idnt = @@identity

--after inserts update the temp table with the new values
set @counter = 0
set @tmpID = -1
select top 1 @tmpID = id from #s_Widget where id in(select cast(isnull(target,'-1') as varchar(100))[target] from #s_instance) and inewID is null  order by id desc
while (@tmpID <> -1)
begin
	print cast(@tmpID as varchar(50)) + ' rec 2'
	update #s_Widget set inewID = (@idnt - @counter) where id = (select top 1 id from #s_Widget where id in(select cast(isnull(target,'-1') as varchar(100))[target] from #s_instance) and inewID is null  order by id desc)
	set @counter = @counter + 1
	set @tmpID = -1
select top 1 @tmpID = id from #s_Widget where id in(select cast(isnull(target,'-1') as varchar(100))[target] from #s_instance) and inewID is null  order by id desc
end

--update the instance to update the target for widgets
update security_instance set target = w.inewID 
from Security_Instance i 
inner join #s_instance si on si.inewID = i.id
inner join #s_Widget w on si.id = w.si_id
--update the instance to update the target for KBI
update security_instance set target = @newSKBII_ID, source = si.source
from Security_Instance i 
inner join #s_instance si on si.inewID = i.id and i.targettype = 'kbi'


insert into #s_widget_chart(ID,SW_ID, ChartType, BaseFieldName, BaseTitle, verticalTitle)
select c.id,s.inewID, c.ChartType, c.BaseFieldName, c.BaseTitle, c.verticalTitle 
from #s_Widget s 
inner join security_widget_chart c  
on s.id = c.sw_id order by c.id asc

insert into security_widget_chart(SW_ID, ChartType, BaseFieldName, BaseTitle, verticalTitle)
select s.inewID, c.ChartType, c.BaseFieldName, c.BaseTitle, c.verticalTitle 
from #s_Widget s 
inner join security_widget_chart c on s.id = c.sw_id order by c.id asc
set @idnt = @@identity


--after inserts update the temp table with the new values
set @counter = 0
set @tmpID = -1
select top 1 @tmpID = c.id from #s_widget_chart c inner join #s_Widget s  on s.inewID = c.sw_id and c.inewID is null order by c.id desc
while (@tmpID <> -1)
begin
	print cast(@tmpID as varchar(50)) + ' rec 3'
	update #s_widget_chart set inewID = (@idnt - @counter) where id = (select top 1 c.id from #s_widget_chart c 
	inner join #s_Widget s  on s.inewID = c.sw_id and c.inewID is null order by c.id desc)
	set @counter = @counter + 1
	set @tmpID = -1
	select top 1 @tmpID = c.id from #s_widget_chart c inner join #s_Widget s  on s.inewID = c.sw_id and c.inewID is null order by c.id desc
end
select * from #s_widget_chart

insert into security_widget_chart_series(swc_id, seriesFieldName, AggFunction, seriesName, seriesType, showValues)
select c.inewID, s.seriesFieldName, s.AggFunction, s.seriesName, s.seriesType, s.showValues 
from #s_widget_chart c
join security_widget_chart_series s
on c.id = s.swc_id
	 
insert into security_widget_users(sw_id, parentLocation, target, source, targettype, companyId)
select c.inewID, u.parentLocation,@newSKBII_ID, u.source, u.targettype, u.companyId 
from #s_widget c 
join security_widget_users u
on c.id = u.sw_id

insert into #s_limit(id, SI_ID, ColumnName, LimitType, caption, value_member)
select l.id, s.inewID, l.ColumnName, l.LimitType, l.caption, l.value_member 
from #s_instance s  
inner join security_limit l 
on s.id = l.si_id order by l.id asc

insert into security_limit(SI_ID, ColumnName, LimitType, caption, value_member)
select s.inewID, l.ColumnName, l.LimitType, l.caption, l.value_member 
from #s_instance s  
inner join security_limit l on s.id = l.si_id order by l.id asc
set @idnt = @@identity


--after inserts update the temp table with the new values
set @counter = 0
set @tmpID = -1
select top 1 @tmpID = l.id from #s_limit l inner join #s_instance s  on s.inewID = l.si_id and l.inewID is null order by l.id desc
while (@tmpID <> -1)
begin

	print cast(@tmpID as varchar(50)) + ' rec 4'
	update #s_limit set inewID = (@idnt - @counter) where id = (select top 1 l.id from #s_limit l 
	inner join #s_instance s  on s.inewID = l.si_id and l.inewID is null order by l.id desc)
	set @counter = @counter + 1
	set @tmpID = -1
	select top 1 @tmpID = l.id from #s_limit l inner join #s_instance s  on s.inewID = l.si_id and l.inewID is null order by l.id desc
end

select * from #s_limit

insert into security_Values (SL_ID, Value)
select s.inewID, v.value 
from #s_limit s 
inner join security_values v on v.sl_id = s.id


insert into security_columns (SI_ID, ColumnName, caption)
select s.inewID,c.columnName,c.caption from #s_instance s
inner join security_columns c on c.si_id = s.id

--add Security_KBI_Instance_Restricted_Columns (new dashboard requires an entry into this table to determine column eligibility within each dashboard)
insert Security_KBI_Instance_Restricted_Columns(Security_KBI_Instance_ID, Security_Query_Columns_ID)
select Security_KBI_Instance_ID, Security_Query_Columns_ID
from working_Security_Query_Columns
where username = @Username and Selected = 1
	

insert into security_kbi_summary(KBI_Instance_ID, Company_ID, Updated_Date, KBI, Period, [Current], [Target Value], Previous, Direction, Change, [Target Change], [Status], sq_id)
select top 1 @newSKBII_ID, Company_ID, Updated_Date, @description, Period, [Current], 0,0, Direction,0,0, [Status], sq_id from security_kbi_summary where kbi_instance_ID = @skbii_id
	
--%%Adam Added Oct01-2010 New KBI Properties%%--

select @KBI_ID=SKBI_ID from security_kbi_instance where id=@skbii_id
if( @KBI_ID in (44, 45, 46, 47, 48, 64, 65, 66, 67, 68, 69) ) -- Ratio KBI's in Corp Financial KBI's
begin
	insert into KBI_INSTANCE_COMPANY_SETUP (KBI_COMPANY_SETUP_ID, KBII_ID) 
    select KBI_COMPANY_SETUP_ID, @newSKBII_ID
    from KBI_INSTANCE_COMPANY_SETUP 
    where KBII_ID=@skbii_id
        
    insert into KBI_GL_GROUP_SELECTED (KBI_ID, GL_GROUP_ID, KBII_ID, IS_MASTER) 
    select KBI_ID, GL_GROUP_ID, @newSKBII_ID, 'F' 
    from KBI_GL_GROUP_SELECTED 
    where KBII_ID=@skbii_id and isnull(IS_MASTER,'F')='F' 
        
    insert into KBI_INSTANCE_GL_GROUP_IE_DET (GL_GROUP_IE_ID, KBII_ID) 
    select GL_GROUP_IE_ID, @newSKBII_ID
    from KBI_INSTANCE_GL_GROUP_IE_DET 
    where KBII_ID=@skbii_id
        
    exec sp_kbi_goals @newSKBII_ID, -99, @username
        
    insert into KBI_RATIO_GROUP ( KBI_RATIO_TYPE_ID, GL_GROUP_ID, KBI_ID, KBII_ID, IS_MASTER ) 
    select KBI_RATIO_TYPE_ID, GL_GROUP_ID, KBI_ID, @newSKBII_ID, 'F' 
	from KBI_RATIO_GROUP 
	where KBII_ID=@skbii_id and isnull(IS_MASTER,'F')='F'
end
else if( @KBI_ID in (49, 50) ) -- Bid / Win WO Costing KBI's
begin
	set @SQL =
		'insert into '+@tr_db+'..KBI_WO_ESTIMATOR_SELECTED (KBI_ID, KBII_ID, IS_MASTER, ESTIMATOR) 
		select KBI_ID, '+cast(@newSKBII_ID as varchar)+', ''F'', ESTIMATOR 
		from '+@tr_db+'..KBI_WO_ESTIMATOR_SELECTED 
		where KBII_ID='+cast(@skbii_id as varchar)+' and IS_MASTER=''F''
	        
		insert into '+@tr_db+'..KBI_WO_TYPE_SELECTED (KBI_ID, KBII_ID, IS_MASTER, ESTIMATE_TYPE_ID) 
		select KBI_ID, '+cast(@newSKBII_ID as varchar)+', ''F'', ESTIMATE_TYPE_ID 
		from '+@tr_db+'..KBI_WO_TYPE_SELECTED 
		where KBII_ID='+cast(@skbii_id as varchar)+' and IS_MASTER=''F'''
	exec( @SQL )
end
else if( @KBI_ID in (51) ) -- Bid / Win WO Costing KBI's
begin
	set @SQL =
		'insert into '+@tr_db+'..KBI_WO_MANAGER_SELECTED (KBI_ID, KBII_ID, IS_MASTER, MANAGER) 
		select KBI_ID, '+cast(@newSKBII_ID as varchar)+', ''F'', MANAGER 
		from '+@tr_db+'..KBI_WO_MANAGER_SELECTED 
		where KBII_ID='+cast(@skbii_id as varchar)+' and IS_MASTER=''F''
	        
		insert into '+@tr_db+'..KBI_WO_TYPE_SELECTED (KBI_ID, KBII_ID, IS_MASTER, ESTIMATE_TYPE_ID) 
		select KBI_ID, '+cast(@newSKBII_ID as varchar)+', ''F'', ESTIMATE_TYPE_ID 
		from '+@tr_db+'..KBI_WO_TYPE_SELECTED 
		where KBII_ID='+cast(@skbii_id as varchar)+' and IS_MASTER=''F'''
	exec( @SQL )
end
else if( @KBI_ID in (70, 71) ) -- Bookings / BackLogs
begin
	insert into KBI_CF_BookingBacklog_Properties (KBII_ID, CalcType, SalesPersonType, CustomerType, BasedOnInvCust, ActualDollars, UseGMPrice)
	select @skbii_id, 'C', 'O', 'H', 'I', 'T', 'T'		
end
else if( @KBI_ID in (72,73,74) ) -- Shipments & Outstanding Quotes
begin
	insert into KBI_CF_Shipment_Properties (KBII_ID, CalcType)
	select @skbii_id, 'A'
end

select @newSKBII_ID

--rollback tran
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_CurrentRatio_Calc]') and xtype = 'P ')  
 drop Procedure sp_KBI_CurrentRatio_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec sp_KBI_CurrentRatio_Calc 'web_strike_test', 12, 'adam', '01-01-2012', '10-12-2012', '01-01-2011', '12-31-2011', 7
CREATE proc [dbo].[sp_KBI_CurrentRatio_Calc] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	declare 
	@AssetC money,
	@AssetP money,
	@LiabilityC money,	
	@LiabilityP money,	
	@Current money,
	@Previous money,
	@sqlstr varchar(8000)

	select @AssetC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=1
	select @AssetP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=1

	select @LiabilityC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=2
	select @LiabilityP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=2

	select @AssetC=ABS(@AssetC)
	select @AssetP=ABS(@AssetP)
	select @LiabilityC=ABS(@LiabilityC)
	select @LiabilityP=ABS(@LiabilityP)	

	if( @LiabilityC = 0 )
		select @Current = 0
	else
		select @Current = @AssetC / @LiabilityC 

	if( @LiabilityP = 0 )
		select @Previous = 0
	else
		select @Previous = @AssetP / @LiabilityP 
	
	set @sqlstr = @webdb+'..sp_KBI_Fill_Summary '+cast(@skbii_id as varchar(15))+', '+cast(@companyid as varchar(15))+', '+cast(@Current as varchar(15))+', '+cast(@Previous as varchar(15))
	exec (@sqlstr)
	print 'Current:'+cast(@Current as varchar(15))
	print 'Previous:'+cast(@Previous as varchar(15))
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_CurrentRatio_Fill]') and xtype = 'P ')  
 drop Procedure sp_KBI_CurrentRatio_Fill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


--exec sp_KBI_CurrentRatio_Fill 'web_strike_test', 12, 'adam', '01-01-2012', '10-12-2012', '01-01-2011', '12-31-2011', 7
CREATE proc [dbo].[sp_KBI_CurrentRatio_Fill] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 1
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 2

	delete from working_KBI_ACCOUNT_BALANCE where username=@skbii_id

	insert into working_KBI_ACCOUNT_BALANCE (USERNAME, KBII_ID, COMPANY_ID, COMPANY_NAME, ACCOUNT_NUMBER, ACCOUNT_DESC, SEG_1, SEG_2, SEG_3, 
		SEG_4, SEG_5, SEG_6, ACCT_TYPE, ACCT_TYPE_DESC, RATIO_TYPE_ID)
	select distinct @skbii_id, @skbii_id, k.COMPANY_ID, c.company_name, k.ACCOUNT_NUMBER, k.ACCOUNT_DESC, k.SEG_1, k.SEG_2, k.SEG_3, k.SEG_4, k.SEG_5, 
		k.SEG_6, k.ACCT_TYPE, k.ACCT_TYPE_DESC, k.RATIO_TYPE_ID
	from KBI_YEARLY_ACCOUNT_BALANCE k
	join companies c on c.autoid=k.company_id
	where k.username=cast(@skbii_id as varchar) and k.ratio_type_id in (1,2)
	
	exec KBI_CF_UpdateGLBalanceAmt @CS, @CE, @PS, @PE, @skbii_id 
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_DebtEquityRatio_Calc]') and xtype = 'P ')  
 drop Procedure sp_KBI_DebtEquityRatio_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[sp_KBI_DebtEquityRatio_Calc] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	declare 
	@DebtC money,
	@DebtP money,
	@LeasesC money,
	@LeasesP money,
	@EquityC money,	
	@EquityP money,	
	@Current money,
	@Previous money,
	@sqlstr varchar(8000)

	select @DebtC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=5
	select @DebtP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=5

	select @LeasesC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=6
	select @LeasesP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=6

	select @EquityC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=7
	select @EquityP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=7

	select @DebtC=ABS(@DebtC)
	select @DebtP=ABS(@DebtP)
	select @LeasesC=ABS(@LeasesC)
	select @LeasesP=ABS(@LeasesP)
	select @EquityC=ABS(@EquityC)
	select @EquityP=ABS(@EquityP)

	if( @EquityC = 0 )
		select @Current = 0
	else
		select @Current = (@DebtC + @LeasesC) / @EquityC

	if( @EquityP = 0 )
		select @Previous = 0
	else
		select @Previous = (@DebtP + @LeasesP) / @EquityP
	

	set @sqlstr = @webdb+'..sp_KBI_Fill_Summary '+cast(@skbii_id as varchar(15))+', '+cast(@companyid as varchar(15))+', '+cast(@Current as varchar(15))+', '+cast(@Previous as varchar(15))
	exec (@sqlstr)
	print 'Current:'+cast(@Current as varchar(15))
	print 'Previous:'+cast(@Previous as varchar(15))
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_DebtEquityRatio_Fill]') and xtype = 'P ')  
 drop Procedure sp_KBI_DebtEquityRatio_Fill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_KBI_DebtEquityRatio_Fill] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 5
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 6
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 7

	delete from working_KBI_ACCOUNT_BALANCE where username=@skbii_id

	insert into working_KBI_ACCOUNT_BALANCE (USERNAME, KBII_ID, COMPANY_ID, COMPANY_NAME, ACCOUNT_NUMBER, ACCOUNT_DESC, SEG_1, SEG_2, SEG_3, 
		SEG_4, SEG_5, SEG_6, ACCT_TYPE, ACCT_TYPE_DESC, RATIO_TYPE_ID)
	select distinct @skbii_id, @skbii_id, k.COMPANY_ID, c.company_name, k.ACCOUNT_NUMBER, k.ACCOUNT_DESC, k.SEG_1, k.SEG_2, k.SEG_3, k.SEG_4, k.SEG_5, 
		k.SEG_6, k.ACCT_TYPE, k.ACCT_TYPE_DESC, k.RATIO_TYPE_ID
	from KBI_YEARLY_ACCOUNT_BALANCE k
	join companies c on c.autoid=k.company_id
	where k.username=cast(@skbii_id as varchar) and k.ratio_type_id in (5, 6, 7)
	
	exec KBI_CF_UpdateGLBalanceAmt @CS, @CE, @PS, @PE, @skbii_id  
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_DebtRatio_Calc]') and xtype = 'P ')  
 drop Procedure sp_KBI_DebtRatio_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[sp_KBI_DebtRatio_Calc] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	declare 
	@AssetC money,
	@AssetP money,
	@LiabilityC money,	
	@LiabilityP money,	
	@Current money,
	@Previous money,
	@sqlstr varchar(8000)

	select @AssetC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=4
	select @AssetP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=4

	select @LiabilityC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=3
	select @LiabilityP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=3

	select @AssetC=ABS(@AssetC)
	select @AssetP=ABS(@AssetP)
	select @LiabilityC=ABS(@LiabilityC)
	select @LiabilityP=ABS(@LiabilityP)

	if( @AssetC = 0 )
		select @Current = 0
	else
		select @Current = @LiabilityC / @AssetC

	if( @AssetP = 0 )
		select @Previous = 0
	else
		select @Previous = @LiabilityP / @AssetP	

	set @sqlstr = @webdb+'..sp_KBI_Fill_Summary '+cast(@skbii_id as varchar(15))+', '+cast(@companyid as varchar(15))+', '+cast(@Current as varchar(15))+', '+cast(@Previous as varchar(15))
	exec (@sqlstr)
	print 'Current:'+cast(@Current as varchar(15))
	print 'Previous:'+cast(@Previous as varchar(15))
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_DebtRatio_Fill]') and xtype = 'P ')  
 drop Procedure sp_KBI_DebtRatio_Fill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_KBI_DebtRatio_Fill] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 3
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 4

	delete from working_KBI_ACCOUNT_BALANCE where username=@skbii_id

	insert into working_KBI_ACCOUNT_BALANCE (USERNAME, KBII_ID, COMPANY_ID, COMPANY_NAME, ACCOUNT_NUMBER, ACCOUNT_DESC, SEG_1, SEG_2, SEG_3, 
		SEG_4, SEG_5, SEG_6, ACCT_TYPE, ACCT_TYPE_DESC, RATIO_TYPE_ID)
	select distinct @skbii_id, @skbii_id, k.COMPANY_ID, c.company_name, k.ACCOUNT_NUMBER, k.ACCOUNT_DESC, k.SEG_1, k.SEG_2, k.SEG_3, k.SEG_4, k.SEG_5, 
		k.SEG_6, k.ACCT_TYPE, k.ACCT_TYPE_DESC, k.RATIO_TYPE_ID
	from KBI_YEARLY_ACCOUNT_BALANCE k
	join companies c on c.autoid=k.company_id
	where k.username=cast(@skbii_id as varchar) and k.ratio_type_id in (3,4)
	
	exec KBI_CF_UpdateGLBalanceAmt @CS, @CE, @PS, @PE, @skbii_id
end






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_fill_GL_GROUP_SELECTED]') and xtype = 'P ')  
 drop Procedure sp_KBI_fill_GL_GROUP_SELECTED
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc sp_KBI_fill_GL_GROUP_SELECTED @username varchar(50), @KBI_ID int, @KBII_ID int, @MasterFill varchar(1)
as
begin
	delete from working_KBI_GL_GROUP_SELECTED where username=@username

	if( @MasterFill = 'T' )
	begin
		insert into working_KBI_GL_GROUP_SELECTED (username, kbi_id, group_id, group_name, group_description, selected )
		select @username, @KBI_ID, ID, GROUP_NAME, GROUP_DESCRIPTION, 'F'
		from KBI_GL_GROUP 

		update w
		set selected='T' 
		from working_KBI_GL_GROUP_SELECTED w
		join KBI_GL_GROUP_SELECTED k on k.kbi_id=w.kbi_id and k.GL_GROUP_ID=w.group_id
		where w.username=@username and isnull(k.is_master,'F')='T'
	end
	else
	begin
		insert into working_KBI_GL_GROUP_SELECTED (username, kbi_id, group_id, group_name, group_description, selected )
		select @username, @KBI_ID, g.ID, GROUP_NAME, GROUP_DESCRIPTION, 'F'
		from KBI_GL_GROUP g
		join KBI_GL_GROUP_SELECTED s on s.GL_GROUP_ID=g.ID
		where isnull(s.IS_MASTER,'F') = 'T' and s.KBI_ID=@KBI_ID

		update w
		set selected='T' 
		from working_KBI_GL_GROUP_SELECTED w
		join KBI_GL_GROUP_SELECTED k on k.kbi_id=w.kbi_id and k.GL_GROUP_ID=w.group_id
		where w.username=@username and isnull(k.is_master,'F')='F' and k.KBII_ID = @KBII_ID
	end
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_fill_INSTANCE_COMPANY_SELECTED]') and xtype = 'P ')  
 drop Procedure sp_KBI_fill_INSTANCE_COMPANY_SELECTED
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc sp_KBI_fill_INSTANCE_COMPANY_SELECTED @username varchar(50), @KBII_ID int
as
begin
	declare @KBI_ID int
	select @KBI_ID=SKBI_ID from Security_KBI_Instance where ID=@KBII_ID

	delete from working_KBI_INSTANCE_COMPANY_SELECTED where username=@username

	insert into working_KBI_INSTANCE_COMPANY_SELECTED (username, KBI_ID, KBI_COMPANY_SETUP_ID, KBII_ID, COMPANY_NAME, PERCENTAGE, EXCHANGE_RATE, SELECTED )
	select @username, s.KBI_ID, s.ID, @KBII_ID, c.company_name, s.PERCENTAGE, s.EXCHANGE_RATE, 'F'
	from KBI_COMPANY_SETUP s
	join companies c on c.autoid=s.company_id 
	where s.kbi_id = @KBI_ID

	update w
	set selected='T' 
	from working_KBI_INSTANCE_COMPANY_SELECTED w
	join KBI_INSTANCE_COMPANY_SETUP k on k.KBII_ID=w.KBII_ID and k.KBI_COMPANY_SETUP_ID=w.KBI_COMPANY_SETUP_ID
	where w.username=@username 
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_fill_security_columns]') and xtype = 'P ')  
 drop Procedure sp_KBI_fill_security_columns
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_KBI_fill_security_columns] @KBII_ID int, @sq_id int, @si_id int
as
begin
	delete from working_security_columns where loginname=cast(@KBII_ID as varchar)
	insert into working_security_columns (loginname, columnname, columncaption, si_id )
	select @KBII_ID, fieldname, caption, @si_id
	from Security_Query_Columns where sq_id=@sq_id	
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_Fill_Summary]') and xtype = 'P ')  
 drop Procedure sp_KBI_Fill_Summary
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[sp_KBI_Fill_Summary]
@KBI_Ins_ID int, @CompanyID int, @Current money, @Previous money
as
declare
@count int,
@direction char(1),
@change money,
@col_Period varchar(500),
@col_Updated_Date datetime,
@col_KBI varchar(50),
@col_Target_Value money,
@col_Direction char(1),
@col_Change float,
@col_Target_Change float,
@col_Status varchar(50),
@col_SQ_ID int,
@todate char(1), 
@range int, 
@rangescale char(1), 
@gap int, 
@gapscale char(1),
@KBI_ID int


select @todate=[todate?], @range=range, @rangescale=rangescale, @gap=gap, @gapscale=gapscale from security_kbi_instance where id=@KBI_Ins_ID

delete from security_kbi_summary where kbi_instance_id=@KBI_Ins_ID
---Column Period
select @col_Period=dbo.fn_Get_Period(@todate, @range, @rangescale, @gap, @gapscale)
---Column Updated Date
set @col_Updated_Date = GETDATE()
---Column KBI
select @col_KBI=Description from security_kbi_instance where id=@KBI_Ins_ID
---Column Target Value
select @count=count(*) from security_kbi_goals where start <= GETDATE() and [end] >= GETDATE() and skbii_id=@KBI_Ins_ID and targettype='C'
if @Previous = 0
		set @change = 1
	else
		set @change = @Previous
if @count > 0
begin
	select @col_Target_Value=target from security_kbi_goals where start <= GETDATE() and [end] >= GETDATE() and skbii_id=@KBI_Ins_ID and targettype='C'
	set @col_Target_Change = round(@col_Target_Value / @change * 100,2)
end
else
	set @col_Target_Value=@Previous
---Column Target Change
if @Previous = 0
		set @change = 1
	else
		set @change = @Previous
if @count = 0
begin
	select @count=count(*) from security_kbi_goals where start <= GETDATE() and [end] >= GETDATE() and skbii_id=@KBI_Ins_ID and targettype='P'
	if @count > 0
	begin
		select @col_Target_Change=target from security_kbi_goals where start <= GETDATE() and [end] >= GETDATE() and skbii_id=@KBI_Ins_ID and targettype='P'
		set @col_Target_Value = round(@col_Target_Change * @change / 100,2)
	end
	else
		set @col_Target_Change = 0
end
---Column Direction
select @direction=direction from security_kbis sk join security_kbi_instance ski on ski.skbi_id = sk.id where ski.id=@KBI_Ins_ID
if @Current = @Previous 
begin
	set @col_Direction='E'
end
else if @Current > @Previous 
begin	
	if @direction = 'u'
		set @col_Direction = 'U'
	else
		set @col_Direction = 'u'	
end
else if @Current < @Previous 
begin
	if @direction = 'd'
		set @col_Direction = 'D'
	else
		set @col_Direction = 'd'	
end
---Column Change
if @direction = 'u' or @direction = 'U'
begin
	if @Current = 0
		set @change = 1
	else
		set @change = @Current
	set @col_Change = round(@Previous / @change * 100,2)
end
else 
begin
	if @Previous = 0
		set @change = 1
	else
		set @change = @Previous
	set @col_Change = round(@Current / @change * 100,2)
end
---Column Status
set @col_Status = ''
---Column SQ ID
select @col_SQ_ID=sq_id, @KBI_ID=sk.id from security_kbis sk join security_kbi_instance ski on ski.skbi_id = sk.id where ski.id=@KBI_Ins_ID

if( @KBI_ID = 51 ) --WO WIP Analysis
begin
	set @col_Period = 'Work In Progress'
end
----------INSERT ALL OF THE VALUES--------------------------

insert into security_kbi_summary (kbi_instance_id, company_id, updated_date, kbi, period, [current], [target value], previous, direction, 
	change, [target change], [status], sq_id)
values ( @KBI_Ins_ID, @CompanyID, @col_Updated_Date, @col_KBI, @col_Period, @Current, @col_Target_Value, @Previous, @col_Direction, 
	@col_Change, @col_Target_Change, @col_Status, @col_SQ_ID)



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_GetValidSegments]') and xtype = 'P ')  
 drop Procedure sp_KBI_GetValidSegments
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc sp_KBI_GetValidSegments @USERNAME varchar(50), @KBII_ID int
as
begin
	declare @GL_GROUP_ID int, @CNT int, @SEG int, @SQL varchar(8000)
	
	delete from working_KBI_GL_SEG where username=@USERNAME
	
	declare tr_cur cursor for	
	select distinct GL_GROUP_ID from KBI_GL_GROUP_SELECTED where KBII_ID=@KBII_ID

	select @SEG=2

	open tr_cur fetch tr_cur into @GL_GROUP_ID
	while @@fetch_status=0
	begin	
		while( @SEG < 7 )
		begin
			select @CNT=count(*)
			from KBI_GL_GROUP_IE_DET d
			join KBI_INSTANCE_GL_GROUP_IE_DET i on i.GL_GROUP_IE_ID=d.ID 
			where i.KBII_ID=@KBII_ID and d.GL_GROUP_ID=@GL_GROUP_ID and d.SEG=@SEG

			if( @CNT =  0 )
			begin
				select @SQL =
				'insert into working_KBI_GL_SEG (USERNAME, GL_GROUP_ID, SEG_'+cast(@SEG as varchar)+')
				select '''+@USERNAME+''', '+cast(@GL_GROUP_ID as varchar)+', SEGMENT_VALUE
				from GL_SEGMENT_CONSOLIDATED 
				where SEGMENT_NUMBER='+cast(@SEG as varchar)
				exec( @SQL )
			end
			else
			begin
				select @SQL =
				'insert into working_KBI_GL_SEG (USERNAME, GL_GROUP_ID, SEG_'+cast(@SEG as varchar)+')
				select '''+@USERNAME+''', '+cast(@GL_GROUP_ID as varchar)+', d.SEG_VALUE 
				from KBI_GL_GROUP_IE_DET d
				join KBI_INSTANCE_GL_GROUP_IE_DET i on i.GL_GROUP_IE_ID=d.ID 
				where i.KBII_ID='+cast(@KBII_ID as varchar)+' and d.GL_GROUP_ID='+cast(@GL_GROUP_ID as varchar)+' and d.IE_TYPE=''I'' and d.SEG='+cast(@SEG as varchar)
				exec( @SQL )
			end

			select @SQL =
			'delete w 
			from working_KBI_GL_SEG w 
			join KBI_GL_GROUP_IE_DET d on d.GL_GROUP_ID=w.GL_GROUP_ID and w.SEG_'+cast(@SEG as varchar)+'=d.SEG_VALUE
			join KBI_INSTANCE_GL_GROUP_IE_DET i on i.GL_GROUP_IE_ID=d.ID 
			where w.username='''+@USERNAME+''' and d.SEG='+cast(@SEG as varchar)+' and d.GL_GROUP_ID='+cast(@GL_GROUP_ID as varchar)+' and d.IE_TYPE=''E'''
			exec( @SQL )

			select @SEG=@SEG+1
		end

		select @SEG = 2

	fetch tr_cur into @GL_GROUP_ID
	end			
	close tr_cur
	deallocate tr_cur	

end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_GL_ACCOUNT_CALCULATION]') and xtype = 'P ')  
 drop Procedure sp_KBI_GL_ACCOUNT_CALCULATION
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc sp_KBI_GL_ACCOUNT_CALCULATION
@USERNAME varchar(50), @KBII_ID int
as
begin
	declare @SQL varchar(8000)
	exec sp_KBI_GetValidSegments @USERNAME, @KBII_ID

	select @SQL =
	'delete from KBI_ACCOUNT_BALANCE where username='''+@USERNAME+'''
	insert into KBI_ACCOUNT_BALANCE (username, company_id, account_number, account_desc, seg_1, seg_2, seg_3, seg_4, seg_5, seg_6, acct_type,
		acct_type_desc, previous_year, current_year, previous_balance, current_balance)
	select distinct '''+@USERNAME+''', k.company_id, k.account_number, k.account_desc, k.seg_1, k.seg_2, k.seg_3, k.seg_4, k.seg_5, k.seg_6, k.acct_type,
		k.acct_type_desc, k.previous_year, k.current_year, k.previous_balance, k.current_balance
	from KBI_ACCOUNT_BALANCE k
	join KBI_COMPANY_SETUP cs on cs.COMPANY_ID=k.COMPANY_ID
	join KBI_INSTANCE_COMPANY_SETUP ics on ics.KBI_COMPANY_SETUP_ID=cs.ID and ics.KBII_ID='''+cast(@KBII_ID as varchar)+'''	
	join KBI_GL_GROUP_SELECTED gl on gl.KBII_ID='''+cast(@KBII_ID as varchar)+'''
	join KBI_GL_GROUP_CODE gc on gc.GL_GROUP_ID=gl.GL_GROUP_ID and gc.SEG_1=k.SEG_1	'
	if exists (select * from working_KBI_GL_SEG where username=@USERNAME and SEG_2 is not null)
	begin
		select @SQL = @SQL +
		' join working_KBI_GL_SEG s2 on s2.GL_GROUP_ID=gc.GL_GROUP_ID and s2.SEG_2=k.SEG_2 and s2.USERNAME='''+@USERNAME+''' '
	end
	if exists (select * from working_KBI_GL_SEG where username=@USERNAME and SEG_3 is not null)
	begin
		select @SQL = @SQL +
		' join working_KBI_GL_SEG s3 on s3.GL_GROUP_ID=gc.GL_GROUP_ID and s3.SEG_3=k.SEG_3 and s3.USERNAME='''+@USERNAME+''' '
	end
	if exists (select * from working_KBI_GL_SEG where username=@USERNAME and SEG_4 is not null)
	begin
		select @SQL = @SQL +
		' join working_KBI_GL_SEG s4 on s4.GL_GROUP_ID=gc.GL_GROUP_ID and s4.SEG_4=k.SEG_4 and s4.USERNAME='''+@USERNAME+''' '
	end
	if exists (select * from working_KBI_GL_SEG where username=@USERNAME and SEG_5 is not null)
	begin
		select @SQL = @SQL +
		' join working_KBI_GL_SEG s5 on s5.GL_GROUP_ID=gc.GL_GROUP_ID and s5.SEG_5=k.SEG_5 and s5.USERNAME='''+@USERNAME+''' '
	end
	if exists (select * from working_KBI_GL_SEG where username=@USERNAME and SEG_6 is not null)
	begin
		select @SQL = @SQL +
		' join working_KBI_GL_SEG s6 on s6.GL_GROUP_ID=gc.GL_GROUP_ID and s6.SEG_6=k.SEG_2 and s6.USERNAME='''+@USERNAME+''' '
	end
	select @SQL = @SQL +
	'where k.username=''KBISERVICE''
	order by k.ACCOUNT_NUMBER'
	exec( @SQL )
	
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_kbi_goals]') and xtype = 'P ')  
 drop Procedure sp_kbi_goals
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

 
CREATE proc [dbo].[sp_kbi_goals] 
@kbi_i_id int,
@currentPeriod int,
@username varchar(100),
@CompanyID int = -1 
as
begin

	--exec sp_kbi_goals 1, -1


	declare
	@createNew int = 0,
	@StartOfFiscalYear datetime,
	@TR_DB varchar(500),
	@nSql nvarchar(500)


	select @TR_DB = TreasuryDBName from COMPANIES where AutoID = @CompanyID

	if( @TR_DB != '')
	begin
		select @nSql = 'select @StartOfFiscalYear = DATEADD(dd,-DATEPART(dd,end_date)+1,END_DATE) from '+@TR_DB+'.dbo.GL_PERIODS where PERIOD = 1 and DATEPART(YEAR,END_DATE) = DATEPART(YEAR,GETDATE())'
		exec sp_executesql @nSql, N'@StartOfFiscalYear datetime OUT', @StartOfFiscalYear OUT
	end
	else
	begin 	
		set @StartOfFiscalYear = cast('01/01/'+cast(DATEPART(YEAR,GETDATE()) as varchar(4)) as datetime)
	end


	if exists (select id from security_kbi_goals where skbii_id = @kbi_i_id)
	begin
		if not exists (select id from security_kbi_goals where  skbii_id = @kbi_i_id and getdate() between Start and [End])
		begin
			set @createNew = 1
		end
			
	end
		else
	begin
		set @createNew = 1
	end


	if(@createNew = 1)
	begin
		declare 
		@targetType varchar(60),
		@todate char(1),
		@range int,
		@gap  int,
		@rangeScale char(1),
		@gapScale char(1),
		@start Datetime,
		@end datetime,
		@source varchar(100)
		

		select @source = source,@targetType = targettype,@todate = [Todate?],@range = Range,@rangeScale = RangeScale,@gap = Gap,@gapScale = GapScale from Security_KBI_Instance where ID = @kbi_i_id

		if(@todate = 'T' )
		begin
			set @start = dbo.fn_Get_KBI_Date (@todate,@range,@rangeScale,@gap,@gapscale,'cs', @currentPeriod,@StartOfFiscalYear)
			
			if (@rangeScale = 'D') begin set @end = dateadd(d,@range,@start) end
			else if  (@rangeScale = 'W') begin set @end = dateadd(ww,@range,@start) end
			else if  (@rangeScale = 'M') begin set @end = dateadd(m,@range,@start) end
			else if  (@rangeScale = 'Q') begin set @end = dateadd(q,@range,@start) end
			else if  (@rangeScale = 'Y') begin set @end = dateadd(yyyy,@range,@start) end
			else begin set @end = dateadd(ww,@range,@start) end
			print @range
			if( (@targetType = 'Department' and @source = @username) or @targetType <> 'Department')
			begin
				set @end = dateAdd(d,-1,@end)
				insert into Security_KBI_Goals ([SKBII_ID], [START], [END], [TARGET], [TARGETTYPE])
				values( @kbi_i_id,@start,@end,0,'C')
			end
		end



	end


end







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_GrossMargin_Calc]') and xtype = 'P ')  
 drop Procedure sp_KBI_GrossMargin_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_KBI_GrossMargin_Calc] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	declare 
	@NetSalesC money,	
	@NetSalesP money,	
	@COGSC money,	
	@COGSP money,
	@Current money,
	@Previous money,
	@sqlstr varchar(8000)

	select @NetSalesC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=9
	select @NetSalesP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=9

	select @COGSC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=10
	select @COGSP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=10
	
	select @NetSalesC=ABS(@NetSalesC)
	select @NetSalesP=ABS(@NetSalesP)
	select @COGSC=ABS(@COGSC)
	select @COGSP=ABS(@COGSP)

	if( @NetSalesC = 0 )
		select @Current = 0
	else
		select @Current = (@NetSalesC - @COGSC) / @NetSalesC

	if( @NetSalesP = 0 )
		select @Previous = 0
	else
		select @Previous = (@NetSalesP - @COGSP) / @NetSalesP
	

	set @sqlstr = @webdb+'..sp_KBI_Fill_Summary '+cast(@skbii_id as varchar(15))+', '+cast(@companyid as varchar(15))+', '+cast(@Current as varchar(15))+', '+cast(@Previous as varchar(15))
	exec (@sqlstr)
	print 'Current:'+cast(@Current as varchar(15))
	print 'Previous:'+cast(@Previous as varchar(15))
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_GrossMargin_Fill]') and xtype = 'P ')  
 drop Procedure sp_KBI_GrossMargin_Fill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_KBI_GrossMargin_Fill] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 9
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 10

	delete from working_KBI_ACCOUNT_BALANCE where username=@skbii_id

	insert into working_KBI_ACCOUNT_BALANCE (USERNAME, KBII_ID, COMPANY_ID, COMPANY_NAME, ACCOUNT_NUMBER, ACCOUNT_DESC, SEG_1, SEG_2, SEG_3, 
		SEG_4, SEG_5, SEG_6, ACCT_TYPE, ACCT_TYPE_DESC, RATIO_TYPE_ID)
	select distinct @skbii_id, @skbii_id, k.COMPANY_ID, c.company_name, k.ACCOUNT_NUMBER, k.ACCOUNT_DESC, k.SEG_1, k.SEG_2, k.SEG_3, k.SEG_4, k.SEG_5, 
		k.SEG_6, k.ACCT_TYPE, k.ACCT_TYPE_DESC, k.RATIO_TYPE_ID
	from KBI_YEARLY_ACCOUNT_BALANCE k
	join companies c on c.autoid=k.company_id
	where k.username=cast(@skbii_id as varchar) and k.ratio_type_id in (9,10)
	
	exec KBI_CF_UpdateGLBalanceAmt @CS, @CE, @PS, @PE, @skbii_id 
end





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_GrossMarginAmt_Calc]') and xtype = 'P ')  
 drop Procedure sp_KBI_GrossMarginAmt_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_KBI_GrossMarginAmt_Calc] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	declare 
	@NetSalesC money,	
	@NetSalesP money,	
	@COGSC money,	
	@COGSP money,
	@Current money,
	@Previous money,
	@sqlstr varchar(8000)

	select @NetSalesC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=9
	select @NetSalesP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=9

	select @COGSC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=10
	select @COGSP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=10
	
	select @NetSalesC=ABS(@NetSalesC)
	select @NetSalesP=ABS(@NetSalesP)
	select @COGSC=ABS(@COGSC)
	select @COGSP=ABS(@COGSP)

	select @Current = (@NetSalesC - @COGSC) 

	select @Previous = (@NetSalesP - @COGSP) 
	

	set @sqlstr = @webdb+'..sp_KBI_Fill_Summary '+cast(@skbii_id as varchar(15))+', '+cast(@companyid as varchar(15))+', '+cast(@Current as varchar(15))+', '+cast(@Previous as varchar(15))
	exec (@sqlstr)
	print 'Current:'+cast(@Current as varchar(15))
	print 'Previous:'+cast(@Previous as varchar(15))
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_MASTER_GL_ACCOUNT_CALCULATION]') and xtype = 'P ')  
 drop Procedure sp_KBI_MASTER_GL_ACCOUNT_CALCULATION
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_KBI_MASTER_GL_ACCOUNT_CALCULATION]
as
begin

	declare @trdb varchar(500), @Company_ID int, @sql varchar(max), @ServiceUsername varchar(50),
	@CurrentYear int, @PreviousYear int, @YearBefore int, @TreasuryDBName varchar(500)

	select @ServiceUsername='KBISERVICE', @CurrentYear=datepart(yyyy,getdate()), @PreviousYear=datepart(yyyy,getdate())-1, @YearBefore=datepart(yyyy,getdate())-2

	
	declare tr_cur cursor for	
	select treasurydbname, AutoID from companies where isnull(active,0) = 1

	delete from KBI_YEARLY_ACCOUNT_BALANCE where username=@ServiceUsername

	open tr_cur fetch tr_cur into @trdb, @Company_ID
	while @@fetch_status=0
	begin
		set @sql =
		'
		declare @CurrentYear int, @PreviousYear int, @YearBefore int
		
		select top 1 @CurrentYear=gl_year 
		from '+@trdb+'.dbo.gl_periods 
		where end_date >= cast(getdate() as date) 
		order by end_date
		
		select @PreviousYear=@CurrentYear - 1, @YearBefore=@CurrentYear -2
		
		insert KBI_YEARLY_ACCOUNT_BALANCE (ACCOUNT_NUMBER, SEG_1, SEG_2, SEG_3, SEG_4, SEG_5, SEG_6, GL_YEAR, OPENING_BALANCE, PER1, PER2, PER3, PER4, PER5, PER6, PER7, PER8, PER9, PER10, PER11, PER12, ACCT_TYPE)
		exec '+@trdb+'..KBI_GLAccountBalances @CurrentYear, ''%''
				
		insert KBI_YEARLY_ACCOUNT_BALANCE (ACCOUNT_NUMBER, SEG_1, SEG_2, SEG_3, SEG_4, SEG_5, SEG_6, GL_YEAR, OPENING_BALANCE, PER1, PER2, PER3, PER4, PER5, PER6, PER7, PER8, PER9, PER10, PER11, PER12, ACCT_TYPE)
		exec '+@trdb+'..KBI_GLAccountBalances @PreviousYear, ''%''
		
		insert KBI_YEARLY_ACCOUNT_BALANCE (ACCOUNT_NUMBER, SEG_1, SEG_2, SEG_3, SEG_4, SEG_5, SEG_6, GL_YEAR, OPENING_BALANCE, PER1, PER2, PER3, PER4, PER5, PER6, PER7, PER8, PER9, PER10, PER11, PER12, ACCT_TYPE)
		exec '+@trdb+'..KBI_GLAccountBalances @YearBefore, ''%''				
		'
		exec(@sql)
		
		update KBI_YEARLY_ACCOUNT_BALANCE 
		set COMPANY_ID=@Company_ID, USERNAME=@ServiceUsername
		where USERNAME is null
				
		fetch tr_cur into @trdb, @Company_ID
	end			
	close tr_cur
	deallocate tr_cur
	
	update b 
	set b.ACCOUNT_DESC=g.DESCRIPTION, b.ACCT_TYPE_DESC=g.ACCT_TYPE
	from KBI_YEARLY_ACCOUNT_BALANCE b
	join GL_MASTER_CONSOLIDATED g on g.SEG_1=b.SEG_1
	where b.USERNAME = @ServiceUsername

	--OLD CALCULATION
	--declare tr_cur cursor for	
	--select treasurydbname, AutoID from companies where isnull(active,0) = 1

	--delete from KBI_ACCOUNT_BALANCE where username=@ServiceUsername

	--open tr_cur fetch tr_cur into @trdb, @Company_ID
	--while @@fetch_status=0
	--begin
	--	set @sql =
	--	'delete from '+@trdb+'..gl_report_options where username='''+@ServiceUsername+'''
	--	insert into '+@trdb+'..gl_report_options (username, last_closed_year, gl_year, from_period, to_period, YTD, suppress_zero_balance,
	--	FROM_SEG_1, FROM_SEG_2, FROM_SEG_3, FROM_SEG_4, FROM_SEG_5, FROM_SEG_6,
	--	TO_SEG_1, TO_SEG_2, TO_SEG_3, TO_SEG_4, TO_SEG_5, TO_SEG_6)
	--	select '''+@ServiceUsername+''', '+cast(@PreviousYear as varchar)+', '+cast(@CurrentYear as varchar)+', 1, 12, ''F'', ''T'',
	--	'''', '''', '''', '''', '''', '''',
	--	'''', '''', '''', '''', '''', ''''

	--	exec '+@trdb+'..sp_gl_reports '''+@ServiceUsername+''', '''', '''', ''T'''	
	--	exec(@sql)


	--	set @sql =
	--	'insert into KBI_ACCOUNT_BALANCE (USERNAME, COMPANY_ID, ACCOUNT_NUMBER, SEG_1, SEG_2, SEG_3, SEG_4, SEG_5, SEG_6,
	--	ACCT_TYPE, ACCT_TYPE_DESC, PREVIOUS_YEAR, CURRENT_YEAR, PREVIOUS_BALANCE, CURRENT_BALANCE)
	--	select '''+@ServiceUsername+''', '+cast(@Company_ID as varchar)+', a.ACCOUNT_NUMBER, a.SEG_1, a.SEG_2, a.SEG_3, a.SEG_4, a.SEG_5, a.SEG_6, 
	--	a.ACCT_TYPE, t.DESCRIPTION, '+cast(@PreviousYear as varchar)+', '+cast(@CurrentYear as varchar)+', 
	--	round(isnull(a.prior_ytd_opening_balance,0)+isnull(a.mtd_prior_actual,0),2) [Previous Balance], 
	--	round(isnull(a.opening_balance,0) + isnull(a.transaction_amount,0),2) [Current Balance]
	--	from '+@trdb+'..GL_REPORT_ACCOUNTS a
	--	left outer join '+@trdb+'..GL_ACCT_TYPES t on t.ACCT_TYPE=a.ACCT_TYPE
	--	where a.username='''+@ServiceUsername+''''
	--	exec(@sql)

	--	delete from KBI_ACCOUNT_BALANCE where username=@ServiceUsername and previous_balance=0 and current_balance=0
		
	--	fetch tr_cur into @trdb, @Company_ID
	--end			
	--close tr_cur
	--deallocate tr_cur

	--update b 
	--set b.ACCOUNT_DESC=g.DESCRIPTION
	--from KBI_ACCOUNT_BALANCE b
	--join GL_MASTER_CONSOLIDATED g on g.SEG_1=b.SEG_1
	--where b.USERNAME = @ServiceUsername
	
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_ProfitMargin_Calc]') and xtype = 'P ')  
 drop Procedure sp_KBI_ProfitMargin_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_KBI_ProfitMargin_Calc] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	declare 
	@ExpC money,
	@ExpP money,
	@NSC money,	
	@NSP money,	
	@Current money,
	@Previous money,
	@sqlstr varchar(8000)

	select @ExpC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=11
	select @ExpP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=11

	select @NSC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=9
	select @NSP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=9

	select @ExpC=ABS(@ExpC)
	select @ExpP=ABS(@ExpP)
	select @NSC=ABS(@NSC)
	select @NSP=ABS(@NSP)

	if( @NSC = 0 )
		select @Current = 0
	else
		select @Current = (@NSC - @ExpC) / @NSC

	if( @NSP = 0 )
		select @Previous = 0
	else
		select @Previous = (@NSP - @ExpP) / @NSP
	

	set @sqlstr = @webdb+'..sp_KBI_Fill_Summary '+cast(@skbii_id as varchar(15))+', '+cast(@companyid as varchar(15))+', '+cast(@Current as varchar(15))+', '+cast(@Previous as varchar(15))
	exec (@sqlstr)
	print 'Current:'+cast(@Current as varchar(15))
	print 'Previous:'+cast(@Previous as varchar(15))
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_ProfitMargin_Fill]') and xtype = 'P ')  
 drop Procedure sp_KBI_ProfitMargin_Fill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_KBI_ProfitMargin_Fill] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 11
	exec sp_KBI_RatioType_CalcYearly @username, @skbii_id, 9

	delete from working_KBI_ACCOUNT_BALANCE where username=@skbii_id

	insert into working_KBI_ACCOUNT_BALANCE (USERNAME, KBII_ID, COMPANY_ID, COMPANY_NAME, ACCOUNT_NUMBER, ACCOUNT_DESC, SEG_1, SEG_2, SEG_3, 
		SEG_4, SEG_5, SEG_6, ACCT_TYPE, ACCT_TYPE_DESC, RATIO_TYPE_ID)
	select distinct @skbii_id, @skbii_id, k.COMPANY_ID, c.company_name, k.ACCOUNT_NUMBER, k.ACCOUNT_DESC, k.SEG_1, k.SEG_2, k.SEG_3, k.SEG_4, k.SEG_5, 
		k.SEG_6, k.ACCT_TYPE, k.ACCT_TYPE_DESC, k.RATIO_TYPE_ID
	from KBI_YEARLY_ACCOUNT_BALANCE k
	join companies c on c.autoid=k.company_id
	where k.username=cast(@skbii_id as varchar) and k.ratio_type_id in (9,11)
	
	exec KBI_CF_UpdateGLBalanceAmt @CS, @CE, @PS, @PE, @skbii_id 
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_ProfitMarginAmt_Calc]') and xtype = 'P ')  
 drop Procedure sp_KBI_ProfitMarginAmt_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[sp_KBI_ProfitMarginAmt_Calc] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin
	declare 
	@ExpC money,
	@ExpP money,
	@NSC money,	
	@NSP money,	
	@Current money,
	@Previous money,
	@sqlstr varchar(8000)

	select @ExpC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=11
	select @ExpP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=11

	select @NSC=isnull(sum(current_balance),0) from working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=9
	select @NSP=isnull(sum(previous_balance),0) from  working_KBI_ACCOUNT_BALANCE where username = @skbii_id and RATIO_TYPE_ID=9

	select @ExpC=ABS(@ExpC)
	select @ExpP=ABS(@ExpP)
	select @NSC=ABS(@NSC)
	select @NSP=ABS(@NSP)

	select @Current = (@NSC - @ExpC) 

	select @Previous = (@NSP - @ExpP) 
	

	set @sqlstr = @webdb+'..sp_KBI_Fill_Summary '+cast(@skbii_id as varchar(15))+', '+cast(@companyid as varchar(15))+', '+cast(@Current as varchar(15))+', '+cast(@Previous as varchar(15))
	exec (@sqlstr)
	print 'Current:'+cast(@Current as varchar(15))
	print 'Previous:'+cast(@Previous as varchar(15))
end





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_RatioType_Calc]') and xtype = 'P ')  
 drop Procedure sp_KBI_RatioType_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_KBI_RatioType_Calc]
@USERNAME varchar(50), @KBII_ID int, @RATIO_TYPE_ID int
as
begin
	declare @SQL varchar(8000), @CompanyID int, @trdb varchar(500), @SecurityEnabled varchar(1), @SecuritySQL varchar(8000), @ClearSeg int
	
	--88888888888888888888888888888888888888888888888888888888888888888888888888888888888888
	--8888888888888888888888888888--SECURITY START--8888888888888888888888888888888888888888
	select @CompanyID=company_id from Security_KBI_SUMMARY where kbi_instance_id=@KBII_ID
	select @trdb=TreasuryDBName from companies where autoID=@CompanyID
	set @SecurityEnabled = 'F'

	if exists (select * from tempdb..sysobjects Where id = object_id(N'tempdb..#Security'))  
		drop table #Security
	
	create table #Security 
	(
	  SecurityEnabled varchar(1)
	)

	set @SQL =
	'declare 
	@ClearReq varchar(1),
	@ClearSeg int,
	@WSCnt int,
	@CorpSecurity varchar(1),
	@SecurityEnabled varchar(1)

	select @SecurityEnabled=''F''

	select @CorpSecurity=isnull(use_corp_kbi_security,''F'') from '+@trdb+'..mluser where name='''+@username+'''
	if( @CorpSecurity = ''F'' )
	begin
		exec '+@trdb+'..sp_fill_mluser_supervisor '''+@username+''', '''+@username+''', 1

		select @ClearReq=isnull(clear_req,''F''), @ClearSeg=clear_seg from '+@trdb+'..gl_setup
		if( @ClearReq = ''T'' )
		begin
			select @WSCnt=count(*) 
			from '+@trdb+'..working_mluser_supervisor wms 
			left outer join '+@trdb+'..warehouse_security ws on wms.mluser=ws.mluser 
			where wms.username='''+@username+''' and ws_id is null

			if( @WSCnt = 0 )
			begin
				select @SecurityEnabled = ''T''				
			end
		end
	end
	select @SecurityEnabled'
	insert into #Security(SecurityEnabled)
	exec(@SQL)

	select @SecurityEnabled=SecurityEnabled from #Security			

	if( @SecurityEnabled = 'T' )
	begin
		if exists (select * from tempdb..sysobjects Where id = object_id(N'tempdb..#Clearing'))  
		drop table #Clearing
	
		create table #Clearing 
		(
		  ClearSeg varchar(1)
		)
		
		set @SQL = 'select clear_seg from '+@trdb+'..gl_setup'
		insert into #Clearing(ClearSeg)
		exec(@SQL)	

		select @ClearSeg=ClearSeg from #Clearing

		set @SecuritySQL =
			' and k.seg_'+cast(@ClearSeg as varchar)+' in (
			select w.whse_div
			from '+@trdb+'..warehouse w 
			join '+@trdb+'..warehouse_security ws on ws.whse_id=w.whse_id 
			join '+@trdb+'..mluser m on m.name = ws.mluser 
			join '+@trdb+'..working_mluser_supervisor s ON s.mluser = m.name 
			where s.username = '''+@username+''') '
	end

	--8888888888888888888888888888--SECURITY END--**8888888888888888888888888888888888888888
	--88888888888888888888888888888888888888888888888888888888888888888888888888888888888888

	exec sp_KBI_GetValidSegments @USERNAME, @KBII_ID

	select @SQL =
	'delete from KBI_ACCOUNT_BALANCE where username='''+@USERNAME+''' and RATIO_TYPE_ID='+cast(@RATIO_TYPE_ID as varchar)+'
	insert into KBI_ACCOUNT_BALANCE (username, company_id, account_number, account_desc, seg_1, seg_2, seg_3, seg_4, seg_5, seg_6, acct_type,
		acct_type_desc, previous_year, current_year, previous_balance, current_balance, RATIO_TYPE_ID)
	select distinct '''+@USERNAME+''', k.company_id, k.account_number, k.account_desc, k.seg_1, k.seg_2, k.seg_3, k.seg_4, k.seg_5, k.seg_6, k.acct_type,
		k.acct_type_desc, k.previous_year, k.current_year, k.previous_balance, k.current_balance, '+cast(@RATIO_TYPE_ID as varchar)+'
	from KBI_ACCOUNT_BALANCE k
	join KBI_COMPANY_SETUP cs on cs.COMPANY_ID=k.COMPANY_ID
	join KBI_INSTANCE_COMPANY_SETUP ics on ics.KBI_COMPANY_SETUP_ID=cs.ID and ics.KBII_ID='+cast(@KBII_ID as varchar)+'	
	join KBI_GL_GROUP_SELECTED gl on gl.KBII_ID='+cast(@KBII_ID as varchar)+'
	join KBI_GL_GROUP_CODE gc on gc.GL_GROUP_ID=gl.GL_GROUP_ID and gc.SEG_1=k.SEG_1	'
	if exists (select * from working_KBI_GL_SEG where username=@USERNAME and SEG_2 is not null)
	begin
		select @SQL = @SQL +
		' join working_KBI_GL_SEG s2 on s2.GL_GROUP_ID=gc.GL_GROUP_ID and s2.SEG_2=k.SEG_2 and s2.USERNAME='''+@USERNAME+''' '
	end
	if exists (select * from working_KBI_GL_SEG where username=@USERNAME and SEG_3 is not null)
	begin
		select @SQL = @SQL +
		' join working_KBI_GL_SEG s3 on s3.GL_GROUP_ID=gc.GL_GROUP_ID and s3.SEG_3=k.SEG_3 and s3.USERNAME='''+@USERNAME+''' '
	end
	if exists (select * from working_KBI_GL_SEG where username=@USERNAME and SEG_4 is not null)
	begin
		select @SQL = @SQL +
		' join working_KBI_GL_SEG s4 on s4.GL_GROUP_ID=gc.GL_GROUP_ID and s4.SEG_4=k.SEG_4 and s4.USERNAME='''+@USERNAME+''' '
	end
	if exists (select * from working_KBI_GL_SEG where username=@USERNAME and SEG_5 is not null)
	begin
		select @SQL = @SQL +
		' join working_KBI_GL_SEG s5 on s5.GL_GROUP_ID=gc.GL_GROUP_ID and s5.SEG_5=k.SEG_5 and s5.USERNAME='''+@USERNAME+''' '
	end
	if exists (select * from working_KBI_GL_SEG where username=@USERNAME and SEG_6 is not null)
	begin
		select @SQL = @SQL +
		' join working_KBI_GL_SEG s6 on s6.GL_GROUP_ID=gc.GL_GROUP_ID and s6.SEG_6=k.SEG_6 and s6.USERNAME='''+@USERNAME+''' '
	end
	select @SQL = @SQL +
	' join KBI_RATIO_GROUP krg on krg.GL_GROUP_ID=gc.GL_GROUP_ID
	where k.username=''KBISERVICE'' and isnull(krg.IS_MASTER,''F'')=''F'' and krg.KBII_ID='+cast(@KBII_ID as varchar)+' and krg.KBI_RATIO_TYPE_ID='+cast(@RATIO_TYPE_ID as varchar)+' '
--		and gc.GL_GROUP_ID in 
--		(select GL_GROUP_ID from KBI_RATIO_GROUP where isnull(IS_MASTER,''F'')=''F'' and KBII_ID='+cast(@KBII_ID as varchar)+' and KBI_RATIO_TYPE_ID='+cast(@RATIO_TYPE_ID as varchar)+') '
	if( @SecurityEnabled = 'T' )
	begin
		set @SQL = @SQL + @SecuritySQL
	end
	set @SQL = @SQL +
	'order by k.ACCOUNT_NUMBER'
	--print @sql
	exec( @SQL )
	
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_RatioType_CalcYearly]') and xtype = 'P ')  
 drop Procedure sp_KBI_RatioType_CalcYearly
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_KBI_RatioType_CalcYearly]
@USERNAME varchar(50), @KBII_ID int, @RATIO_TYPE_ID int
as
begin
	declare @SQL varchar(8000), @ClearSeg int
	
	exec sp_KBI_GetValidSegments @USERNAME, @KBII_ID

	select @SQL =
	'delete from KBI_YEARLY_ACCOUNT_BALANCE where username='''+cast(@KBII_ID as varchar)+''' and RATIO_TYPE_ID='+cast(@RATIO_TYPE_ID as varchar)+'
	insert into KBI_YEARLY_ACCOUNT_BALANCE (username, company_id, account_number, account_desc, gl_year, seg_1, seg_2, seg_3, seg_4, seg_5, seg_6, acct_type_desc,
		opening_balance, per1, per2, per3, per4, per5, per6, per7, per8, per9, per10, per11, per12, RATIO_TYPE_ID, acct_type)
	select distinct '''+cast(@KBII_ID as varchar)+''', k.company_id, k.account_number, k.account_desc, k.gl_year, k.seg_1, k.seg_2, k.seg_3, k.seg_4, k.seg_5, k.seg_6, k.acct_type_desc,
		k.opening_balance, k.per1, k.per2, k.per3, k.per4, k.per5, k.per6, k.per7, k.per8, k.per9, k.per10, k.per11, k.per12, '+cast(@RATIO_TYPE_ID as varchar)+', k.acct_type
	from KBI_YEARLY_ACCOUNT_BALANCE k
	join KBI_COMPANY_SETUP cs on cs.COMPANY_ID=k.COMPANY_ID
	join KBI_INSTANCE_COMPANY_SETUP ics on ics.KBI_COMPANY_SETUP_ID=cs.ID and ics.KBII_ID='+cast(@KBII_ID as varchar)+'	
	join KBI_GL_GROUP_SELECTED gl on gl.KBII_ID='+cast(@KBII_ID as varchar)+'
	join KBI_GL_GROUP_CODE gc on gc.GL_GROUP_ID=gl.GL_GROUP_ID and gc.SEG_1=k.SEG_1	'
	if exists (select * from working_KBI_GL_SEG where username=@USERNAME and SEG_2 is not null)
	begin
		select @SQL = @SQL +
		' join working_KBI_GL_SEG s2 on s2.GL_GROUP_ID=gc.GL_GROUP_ID and s2.SEG_2=k.SEG_2 and s2.USERNAME='''+@USERNAME+''' '
	end
	if exists (select * from working_KBI_GL_SEG where username=@USERNAME and SEG_3 is not null)
	begin
		select @SQL = @SQL +
		' join working_KBI_GL_SEG s3 on s3.GL_GROUP_ID=gc.GL_GROUP_ID and s3.SEG_3=k.SEG_3 and s3.USERNAME='''+@USERNAME+''' '
	end
	if exists (select * from working_KBI_GL_SEG where username=@USERNAME and SEG_4 is not null)
	begin
		select @SQL = @SQL +
		' join working_KBI_GL_SEG s4 on s4.GL_GROUP_ID=gc.GL_GROUP_ID and s4.SEG_4=k.SEG_4 and s4.USERNAME='''+@USERNAME+''' '
	end
	if exists (select * from working_KBI_GL_SEG where username=@USERNAME and SEG_5 is not null)
	begin
		select @SQL = @SQL +
		' join working_KBI_GL_SEG s5 on s5.GL_GROUP_ID=gc.GL_GROUP_ID and s5.SEG_5=k.SEG_5 and s5.USERNAME='''+@USERNAME+''' '
	end
	if exists (select * from working_KBI_GL_SEG where username=@USERNAME and SEG_6 is not null)
	begin
		select @SQL = @SQL +
		' join working_KBI_GL_SEG s6 on s6.GL_GROUP_ID=gc.GL_GROUP_ID and s6.SEG_6=k.SEG_6 and s6.USERNAME='''+@USERNAME+''' '
	end
	select @SQL = @SQL +
	' join KBI_RATIO_GROUP krg on krg.GL_GROUP_ID=gc.GL_GROUP_ID
	where k.username=''KBISERVICE'' and isnull(krg.IS_MASTER,''F'')=''F'' and krg.KBII_ID='+cast(@KBII_ID as varchar)+' and krg.KBI_RATIO_TYPE_ID='+cast(@RATIO_TYPE_ID as varchar)+' '
	
	set @SQL = @SQL +
	'order by k.ACCOUNT_NUMBER'
	--print @sql
	exec( @SQL )
	
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_RE_AVG_SQFT_AC_Calc]') and xtype = 'P ')  
 drop Procedure sp_KBI_RE_AVG_SQFT_AC_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc [dbo].[sp_KBI_RE_AVG_SQFT_AC_Calc] 
@webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as 
begin
	declare @Current money,
	@Previous money,
	@sqlstr varchar(8000)
	select @Current=isnull(sum([TOTAL_WITH_DISCOUNTS]),0) from WORKING_KBI_RE_AVG_SQFT_FILL where username = cast(@skbii_id as varchar(500)) and [TRANS_DATE] >=@CS and [TRANS_DATE] <=@CE
	select @Previous=isnull(sum([TOTAL_WITH_DISCOUNTS]),0) from  WORKING_KBI_RE_AVG_SQFT_FILL where username = cast(@skbii_id as varchar(500)) and [TRANS_DATE] >=@PS and [TRANS_DATE] <=@PE

	set @sqlstr = @webdb+'..sp_KBI_Fill_Summary '+cast(@skbii_id as varchar(15))+', '+cast(@companyid as varchar(15))+', '+cast(@Current as varchar(15))+', '+cast(@Previous as varchar(15))
	exec (@sqlstr)
	--print 'Current:'+cast(@Current as varchar(15))
	--print 'Previous:'+cast(@Previous as varchar(15))
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_RE_AVG_SQFT_BR_Calc]') and xtype = 'P ')  
 drop Procedure sp_KBI_RE_AVG_SQFT_BR_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc [dbo].[sp_KBI_RE_AVG_SQFT_BR_Calc] 
@webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as 
begin
	declare @Current money,
	@Previous money,
	@sqlstr varchar(8000)
	select @Current=isnull(sum([BASE_RENT]),0) from WORKING_KBI_RE_AVG_SQFT_FILL where username = cast(@skbii_id as varchar(500)) and [TRANS_DATE] >=@CS and [TRANS_DATE] <=@CE
	select @Previous=isnull(sum([BASE_RENT]),0) from  WORKING_KBI_RE_AVG_SQFT_FILL where username = cast(@skbii_id as varchar(500)) and [TRANS_DATE] >=@PS and [TRANS_DATE] <=@PE

	set @sqlstr = @webdb+'..sp_KBI_Fill_Summary '+cast(@skbii_id as varchar(15))+', '+cast(@companyid as varchar(15))+', '+cast(@Current as varchar(15))+', '+cast(@Previous as varchar(15))
	exec (@sqlstr)
	--print 'Current:'+cast(@Current as varchar(15))
	--print 'Previous:'+cast(@Previous as varchar(15))
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_RE_AVG_SQFT_COM_Fill]') and xtype = 'P ')  
 drop Procedure sp_KBI_RE_AVG_SQFT_COM_Fill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE proc [dbo].[sp_KBI_RE_AVG_SQFT_COM_Fill] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin	
	declare @SQL varchar(8000), @trdb varchar(500)
	select @trdb=TreasuryDBName from companies where autoID=@CompanyID

	delete from WORKING_KBI_RE_AVG_SQFT_FILL where username=@skbii_id

	set @SQL =
	'insert into WORKING_KBI_RE_AVG_SQFT_FILL ( USERNAME, KBII_ID, COMPANY_ID, COMPANY_NAME, ACCT_YEAR, 
		ACCT_PERIOD, TRANS_DATE, PROPERTY_CODE, PROPERTY_DESC, UNIT, LEASE, TENANT, UNIT_AREA, 
		PER_SQ_FT, INVOICENO, CHARGE_GROUP, CHARGE_CODE, 
		CHARGE_DESC, 
		BASE_RENT, 
		OTHER_CHARGES, 
		VACANCY_LOSS, ADDITIONAL_FEES, DISCOUNTS, TOTAL, TOTAL_WITH_DISCOUNTS, UNIT_TYPE )
	select '''+cast(@skbii_id as varchar)+''', '+cast(@skbii_id as varchar)+', '+cast(@companyid as varchar)+', c.company_name, h.acct_year, 
		h.acct_period, h.invoice_date, ph.propertycode, ph.propertydescription, psu.unitnumber, lh.lease, rt.tenant, psu.unitarea, 
		0 [per_sq_ft], h.re_invoiceno, isnull(cg.charge_group,''Other'') [charge_group], isnull(ct.short_code,''Other'') [charge_code], 
		isnull(ct.charge_type,isnull(d.description,''Other'')) [charge_desc], 
		case when isnull(ct.baserent,0)=1 then isnull(d.total,0) else 0 end [base_rent],
		case when ct.short_code is null then isnull(d.total,0) else 0 end [other_charges],
		0 [vacancy_loss], 0 [addtional_fees], 0 [discounts], 0 [total], 0 [total_with_dicounts],
		st.space_type
	from '+@trdb+'..re_trn_hdr h
	join '+@trdb+'..re_trn_detail d on d.re_trn_id=h.re_trn_id
	join '+@trdb+'..re_property_head ph on ph.propertyhead_id=h.property_head_id
	join '+@trdb+'..re_tenant rt on h.tenant_id=rt.tenant_id
	join '+@trdb+'..re_lease_head lh on h.lease_head_id=lh.lease_head_id
	left outer join '+@trdb+'..re_chargetype ct on ct.chargetype_id=d.re_chargetype_id
	left outer join '+@trdb+'..re_chargegroups cg on cg.chargegroup_id=ct.chargegroup_id
	left outer join '+@trdb+'..re_propertyspaceunits psu on d.propertyspaceunits_id=psu.propertyspaceunits_id
	left outer join '+@trdb+'..re_spacetypes st on st.spacetype_id=psu.spacetype_id	
	join companies c on c.autoid='+cast(@companyid as varchar)+'
	where h.rc=''C'' and 
	((h.invoice_date >= '''+cast(@CS as varchar(25))+''' and h.invoice_date <= '''+cast(@CE as varchar(25))+''') 
	or (h.invoice_date >= '''+cast(@PS as varchar(25))+''' and h.invoice_date <= '''+cast(@PE as varchar(25))+'''))

	update WORKING_KBI_RE_AVG_SQFT_FILL set 
	TOTAL=isnull(BASE_RENT,0)+isnull(OTHER_CHARGES,0)+isnull(VACANCY_LOSS,0)+isnull(ADDITIONAL_FEES,0), 
	TOTAL_WITH_DISCOUNTS=isnull(BASE_RENT,0)+isnull(OTHER_CHARGES,0)+isnull(VACANCY_LOSS,0)+isnull(ADDITIONAL_FEES,0)+isnull(DISCOUNTS,0),
	PER_SQ_FT=case when isnull(UNIT_AREA,0) = 0 then 0 
		else round(isnull(BASE_RENT,0)+isnull(OTHER_CHARGES,0)+isnull(VACANCY_LOSS,0)+isnull(ADDITIONAL_FEES,0)+isnull(DISCOUNTS,0)/unit_area,2) end
	where username='''+cast(@skbii_id as varchar)+'''
	
	update WORKING_KBI_RE_AVG_SQFT_FILL set run_period=''Current'' where username='''+cast(@skbii_id as varchar)+''' and trans_date between '''+cast(@CS as varchar(25))+''' and '''+cast(@CE as varchar(25))+'''
	
	update WORKING_KBI_RE_AVG_SQFT_FILL set run_period=''Previous'' where username='''+cast(@skbii_id as varchar)+''' and trans_date between '''+cast(@PS as varchar(25))+''' and '''+cast(@PE as varchar(25))+'''
	'
	exec(@SQL)

end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_RE_AVG_SQFT_RES_Fill]') and xtype = 'P ')  
 drop Procedure sp_KBI_RE_AVG_SQFT_RES_Fill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[sp_KBI_RE_AVG_SQFT_RES_Fill] @webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as
begin	
	declare @SQL varchar(8000), @trdb varchar(500)
	select @trdb=TreasuryDBName from companies where autoID=@CompanyID

	delete from WORKING_KBI_RE_AVG_SQFT_FILL where username=@skbii_id

	set @SQL =
	'insert into WORKING_KBI_RE_AVG_SQFT_FILL ( USERNAME, KBII_ID, COMPANY_ID, COMPANY_NAME, ACCT_YEAR, 
		ACCT_PERIOD, TRANS_DATE, PROPERTY_CODE, PROPERTY_DESC, UNIT, LEASE, TENANT, UNIT_AREA, 
		PER_SQ_FT, INVOICENO, CHARGE_GROUP, CHARGE_CODE, 
		CHARGE_DESC, 
		BASE_RENT, 
		OTHER_CHARGES, 
		VACANCY_LOSS, ADDITIONAL_FEES, DISCOUNTS, TOTAL, TOTAL_WITH_DISCOUNTS, UNIT_TYPE )
	select '''+cast(@skbii_id as varchar)+''', '+cast(@skbii_id as varchar)+', '+cast(@companyid as varchar)+', c.company_name, h.acct_year, 
		h.acct_period, h.invoice_date, ph.propertycode, ph.propertydescription, psu.unitnumber, lh.lease, rt.tenant, psu.unitarea, 
		0 [per_sq_ft], h.re_invoiceno, isnull(cg.charge_group,''Other'') [charge_group], isnull(ct.short_code,''Other'') [charge_code], 
		isnull(ct.charge_type,isnull(d.description,''Other'')) [charge_desc], 
		case when isnull(ct.baserent,0)=1 then isnull(d.total,0) else 0 end [base_rent],
		case when ct.short_code is null then isnull(d.total,0) else 0 end [other_charges],
		0 [vacancy_loss], 0 [addtional_fees], 0 [discounts], 0 [total], 0 [total_with_dicounts],
		st.space_type
	from '+@trdb+'..re_trn_hdr h
	join '+@trdb+'..re_trn_detail d on d.re_trn_id=h.re_trn_id
	join '+@trdb+'..re_property_head ph on ph.propertyhead_id=h.property_head_id
	join '+@trdb+'..re_tenant rt on h.tenant_id=rt.tenant_id
	join '+@trdb+'..re_lease_head lh on h.lease_head_id=lh.lease_head_id
	left outer join '+@trdb+'..re_chargetype ct on ct.chargetype_id=d.re_chargetype_id
	left outer join '+@trdb+'..re_chargegroups cg on cg.chargegroup_id=ct.chargegroup_id
	left outer join '+@trdb+'..re_propertyspaceunits psu on d.propertyspaceunits_id=psu.propertyspaceunits_id
	left outer join '+@trdb+'..re_spacetypes st on st.spacetype_id=psu.spacetype_id		
	join companies c on c.autoid='+cast(@companyid as varchar)+'
	where h.rc=''R'' and 
	((h.invoice_date >= '''+cast(@CS as varchar(25))+''' and h.invoice_date <= '''+cast(@CE as varchar(25))+''') 
	or (h.invoice_date >= '''+cast(@PS as varchar(25))+''' and h.invoice_date <= '''+cast(@PE as varchar(25))+'''))

	update WORKING_KBI_RE_AVG_SQFT_FILL set 
	TOTAL=isnull(BASE_RENT,0)+isnull(OTHER_CHARGES,0)+isnull(VACANCY_LOSS,0)+isnull(ADDITIONAL_FEES,0), 
	TOTAL_WITH_DISCOUNTS=isnull(BASE_RENT,0)+isnull(OTHER_CHARGES,0)+isnull(VACANCY_LOSS,0)+isnull(ADDITIONAL_FEES,0)+isnull(DISCOUNTS,0),
	PER_SQ_FT=case when isnull(UNIT_AREA,0) = 0 then 0 
		else round(isnull(BASE_RENT,0)+isnull(OTHER_CHARGES,0)+isnull(VACANCY_LOSS,0)+isnull(ADDITIONAL_FEES,0)+isnull(DISCOUNTS,0)/unit_area,2) end
	where username='''+cast(@skbii_id as varchar)+'''
	
	update WORKING_KBI_RE_AVG_SQFT_FILL set run_period=''Current'' where username='''+cast(@skbii_id as varchar)+''' and trans_date between '''+cast(@CS as varchar(25))+''' and '''+cast(@CE as varchar(25))+'''
	
	update WORKING_KBI_RE_AVG_SQFT_FILL set run_period=''Previous'' where username='''+cast(@skbii_id as varchar)+''' and trans_date between '''+cast(@PS as varchar(25))+''' and '''+cast(@PE as varchar(25))+'''	
	'

	exec(@SQL)

end





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_KBI_RE_AVG_SQFT_V_Calc]') and xtype = 'P ')  
 drop Procedure sp_KBI_RE_AVG_SQFT_V_Calc
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc [dbo].[sp_KBI_RE_AVG_SQFT_V_Calc] 
@webdb varchar(50), @companyid int, @username varchar(300), @CS datetime, @CE datetime, @PS datetime, @PE datetime, @skbii_id int
as 
begin
	declare @Current money,
	@Previous money,
	@sqlstr varchar(8000)
	select @Current=isnull(sum([VACANCY_LOSS]),0) from WORKING_KBI_RE_AVG_SQFT_FILL where username = cast(@skbii_id as varchar(500)) and [TRANS_DATE] >=@CS and [TRANS_DATE] <=@CE
	select @Previous=isnull(sum([VACANCY_LOSS]),0) from  WORKING_KBI_RE_AVG_SQFT_FILL where username = cast(@skbii_id as varchar(500)) and [TRANS_DATE] >=@PS and [TRANS_DATE] <=@PE

	set @sqlstr = @webdb+'..sp_KBI_Fill_Summary '+cast(@skbii_id as varchar(15))+', '+cast(@companyid as varchar(15))+', '+cast(@Current as varchar(15))+', '+cast(@Previous as varchar(15))
	exec (@sqlstr)
	--print 'Current:'+cast(@Current as varchar(15))
	--print 'Previous:'+cast(@Previous as varchar(15))
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Ledger_LoadAvailableCompanies]') and xtype = 'P ')  
 drop Procedure sp_Ledger_LoadAvailableCompanies
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure [dbo].[sp_Ledger_LoadAvailableCompanies] (@UserName varchar(30), @Type varchar(5))

AS

--Declare @UserName varchar(30)
--Set @UserName = 'ken'

Declare @Company_Name varchar(50), @CompanyServerName varchar(500), @TreasuryDBName varchar(500)

Delete working_AvailableLedgerCompanies Where UserName = @UserName

Declare aCompanies Cursor For

Select Company_Name, CompanyServerName, TreasuryDBName From Companies

Open aCompanies 
Fetch aCompanies into @Company_Name, @CompanyServerName, @TreasuryDBName

While @@Fetch_Status = 0
Begin


	
		if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Result'))  		drop table #Result
		Create Table #Result
		(
		  Result bit null
		)

		Declare @str varchar(8000)

		If(@Type = 'GL')
			Begin
				Set @str = 'Select Case When Count(Name) >= 1 then 1 else 0 end From ['+ @CompanyServerName+ '].' + @TreasuryDBName + '.dbo.MLUser m
							Inner join [' + @CompanyServerName+ '].' + @TreasuryDBName + '.dbo.Security s on s.Department = m.Department and s.Function_ID in(114,216,9927,9954)
							Where Name = ''' + @UserName + ''''
			End
		Else If(@Type = 'SL')
			Begin
				Set @str = 'Select Case When Count(Name) >= 1 then 1 else 0 end From ['+ @CompanyServerName+ '].' + @TreasuryDBName + '.dbo.MLUser m
							Inner join [' + @CompanyServerName+ '].' + @TreasuryDBName + '.dbo.Security s on s.Department = m.Department and s.Function_ID in(216,9927,9954)
							Where Name = ''' + @UserName + ''''
			End

		Insert Into #Result
		Exec (@str)

		If Exists(Select Result from #Result where Result = 1)
			Begin

				Insert Into working_AvailableLedgerCompanies(Company_Name,CompanyServerName,TreasuryDBName,UserName)
				Values(@Company_Name,@CompanyServerName,@TreasuryDBName,@UserName)

			End
		
		Delete #Result
	

	Fetch aCompanies into @Company_Name, @CompanyServerName, @TreasuryDBName

End

Close aCompanies
DeAllocate aCompanies


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_LoadSalespersonProjectAccess]') and xtype = 'P ')  
 drop Procedure sp_LoadSalespersonProjectAccess
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- declare
create procedure sp_LoadSalespersonProjectAccess
@user_id int
as
-- set @user_id=571


declare
@hr_db varchar(50),
@company_id int,
@sql varchar(4000)

declare cur cursor for
select humandbname, autoid from companies
open cur
fetch cur into @hr_db, @company_id
while @@fetch_status=0
begin
	set @sql='
	declare @pri_num int, @pri_proj_id int, @pri_name varchar(50)
	declare cur'+cast(@company_id as varchar)+' cursor for select pri_num, pri_proj_id, pri_name from '+@hr_db+'..proj_id where pri_bill_option=''U''
	open cur'+cast(@company_id as varchar)+'
	fetch cur'+cast(@company_id as varchar)+' into @pri_num, @pri_proj_id, @pri_name
	while @@fetch_status=0
	begin
		if not exists (select * from salesperson_project_access where userid='+cast(@user_id as varchar)+' and company_id='+cast(@company_id as varchar)+'
		and pri_num=@pri_num)
		begin
			insert salesperson_project_access(userid, company_id, pri_num, pri_proj_id, pri_name, access)
			select '+cast(@user_id as varchar)+', '+cast(@company_id as varchar)+', @pri_num, @pri_proj_id, @pri_name, ''F''
		end

		fetch cur'+cast(@company_id as varchar)+' into @pri_num, @pri_proj_id, @pri_name
	end
	close cur'+cast(@company_id as varchar)+'
	deallocate cur'+cast(@company_id as varchar)+''

	exec(@sql)

	fetch cur into @hr_db, @company_id
end
close cur
deallocate cur



select * from salesperson_project_access where userid=@user_id



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_LoadWorkingCustomers]') and xtype = 'P ')  
 drop Procedure sp_LoadWorkingCustomers
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go







CREATE      procedure sp_LoadWorkingCustomers
@CompanyID varchar(50),
@username varchar(100)
as

-- declare 
-- @CompanyID varchar(50),
-- @username varchar(100)
-- set @companyid='CW'
-- set @username='1'

declare
@Execs varchar(4000),
@ServerName varchar(500),
@TR_Name varchar(500),
@HR_Name varchar(500),
@AutoID int

select @ServerName=companyservername, @tr_name=treasurydbname, @hr_name=humandbname, @AutoID=autoid from companies where company_id=@companyid


 select @Execs = '
 declare @CompanyName varchar(100)
 select @CompanyName = CompanyName
 from ['+@servername+'].' + @TR_Name + '.dbo.company

/*
 insert working_Customers( 
 [Customer Code], [Customer Name], City, [State/Province], [Customer ID], [Territory], [ParentID],
UserName, TR_Name, HR_Name, ServerName, CompanyID, [Company Name])
 select 
 null, @CompanyName, null, null, ' + '-' + cast(@AutoID as varchar) + ', null, null,
''' + @Username + ''', ''' +  @TR_Name + ''', ''' + @HR_Name + ''', ''' + @ServerName + ''', ' + cast(@AutoID as varchar) + ', @CompanyName
*/

 insert working_Customers( 
 [Customer Code], [Customer Name], City, [State/Province], [Customer ID], [Territory], [ParentID],
UserName, TR_Name, HR_Name, ServerName, CompanyID, [Company Name])
 select 
 CUSTOMER_CODE, [name], BILL_CITY, BILL_STATE, CUSTOMER_ID,
 TERRITORY_DESC, case when ho_customer_id is null then ' + '-' + cast(@AutoID as varchar) + ' else ho_customer_id end,
''' + @Username + ''', ''' +  @TR_Name + ''', ''' + @HR_Name + ''', ''' + @ServerName + ''', ' + cast(@AutoID as varchar) + ', @CompanyName
 from ['+@servername+'].' + @TR_Name + '.dbo.Customers c
left outer join ['+@servername+'].' + @TR_Name + '.dbo.territory t
on c.territory_id = t.territory_id
where Active = ''T'''

print @Execs
exec(@Execs)










Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_LoadWorkingSCItems]') and xtype = 'P ')  
 drop Procedure sp_LoadWorkingSCItems
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



-- declare
CREATE  procedure [dbo].[sp_LoadWorkingSCItems]
@contact_id int, @original_contact_id int
as

declare
@user_level char(1)

delete working_sc_items where original_contact_id=@original_contact_id

select @user_level=isnull(userlevel,'X') from v_users where contact_id=@contact_id

if @user_level='M'  --salesperson
begin
	--select only the leads and processes owned by this contact
	insert working_sc_items
	(original_contact_id, contact_id, item_id, item_type)
	select @original_contact_id, @contact_id, l.id, 'L' from sclead l join contact c on l.contact_id = c.id where c.owner_id=@contact_id

	insert working_sc_items
	(original_contact_id, contact_id, item_id, item_type)
	select @original_contact_id, @contact_id, p.id, 'P' from scprocess p where salesmanid=@contact_id
end
else if @user_level='A'  --assistant
begin
	print 'do nothing'
	--this should never happen because if they are an assistant, then they are forced to pick either a salesperson or a supervisor to delegate for
end
else if @user_level='S' --supervisor
begin
	--need to get all the leads and processes for this contact, as well as any subordinates (supervisors and salespersons)
	
	insert working_sc_items
	(original_contact_id, contact_id, item_id, item_type)
	select @original_contact_id, @contact_id, l.id, 'L' from sclead l join contact c on l.contact_id = c.id where c.owner_id=@contact_id

	insert working_sc_items
	(original_contact_id, contact_id, item_id, item_type)
	select @original_contact_id, @contact_id, p.id, 'P' from scprocess p where salesmanid=@contact_id

	--recursively load the subordinate leads and processes
	exec sp_LoadWorkingSCItemsRecursive @contact_id, @original_contact_id

end
else if @user_level='C' --New Special Admin
begin
	--need to get all the leads and processes for this contact, as well as any subordinates (supervisors and salespersons)
	
	insert working_sc_items
	(original_contact_id, contact_id, item_id, item_type)
	select @original_contact_id, @contact_id, l.id, 'L' from sclead l join contact c on l.contact_id = c.id

	insert working_sc_items
	(original_contact_id, contact_id, item_id, item_type)
	select @original_contact_id, @contact_id, p.id, 'P' from scprocess p
end






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_LoadWorkingSCItemsRecursive]') and xtype = 'P ')  
 drop Procedure sp_LoadWorkingSCItemsRecursive
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



-- declare 
-- drop procedure sp_LoadWorkingSCItemsRecursive
CREATE procedure [dbo].[sp_LoadWorkingSCItemsRecursive]
@owner_id int, @super_owner_id int
as

--declare @owner_id int, @super_owner_id int
--Select @owner_id = 4, @super_owner_id = 4

declare
@sql varchar(4000)

set @sql='
declare @user_id int
declare cur'+cast(@owner_id as varchar)+' cursor for select userid from user_owners where ownerid='+cast(@owner_id as varchar)+'
open cur'+cast(@owner_id as varchar)+' fetch cur'+cast(@owner_id as varchar)+' into @user_id
while @@fetch_status=0
begin
	print cast(@user_id as varchar)+'' user''
	delete working_sc_items where contact_id=@user_id

	insert working_sc_items
	(original_contact_id, contact_id, item_id, item_type)
	select '+cast(@super_owner_id as varchar)+', @user_id, l.id, ''L'' from sclead l 
	where Contact_ID in (Select ID from Contact Where Owner_ID = @user_id)

	insert working_sc_items
	(original_contact_id, contact_id, item_id, item_type)
	select '+cast(@super_owner_id as varchar)+', @user_id, p.id, ''P'' from scprocess p where salesmanid=@user_id

	exec sp_LoadWorkingSCItemsRecursive @user_id, '+cast(@super_owner_id as varchar)+'

	fetch cur'+cast(@owner_id as varchar)+' into @user_id
end
close cur'+cast(@owner_id as varchar)+'
deallocate cur'+cast(@owner_id as varchar)
--print @sql
exec(@sql)





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_LogIt]') and xtype = 'P ')  
 drop Procedure sp_LogIt
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





CREATE proc sp_LogIt
 @String varchar(100)
as
begin
 delete __LogitFile
 where dateadd(day, -1, getdate()) > Stamped

 insert __LogitFile
 select @String, getdate()
end







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_MM_CreateTransByCompany]') and xtype = 'P ')  
 drop Procedure sp_MM_CreateTransByCompany
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_MM_CreateTransByCompany]
 
 @username varchar(50),@type  varchar (5),@year int, @period   int
 
 as
----
--declare @username varchar(50),@type  varchar(5) ,@year int, @period   int
--select  @username ='hm',@type  = 'X',@year = 2007,@period = 1


-- @type = 'Y' (buyins),@type = 'X'  (branch transfer:Demand Transfer  ), @type= 'BX' ((branch transfer:Stock repleniment  )

declare @sqlStr  varchar(3000)

declare @treasuryDBName varchar(500),@ServerName varchar(500),@so_no int,@so_line_id int,
        @EstimatedCost money,@Supplier varchar(20),@deliveryDate datetime




if @type = 'Y' 

        declare cur_po cursor for

	select  distinct treasuryDBName,ServerName
	-- select * 
	from Working_MM_Orders
	where selected = 'T'  and username = @username and sourcetype in ( 'Y')
else if @type ='BX' or @type ='X' or  @type ='BXR'

        declare cur_po cursor for

        select  distinct c.treasuryDBName,c.CompanyserverName  -- From's company and server
	from Working_MM_Orders  w 
        join companies c on w.fromCompany_id = c.autoid
	where selected = 'T'  and username = @username and sourcetype in ('BX', 'X')

open cur_po
fetch cur_po into @treasuryDBName,@ServerName
while @@fetch_status=0
begin
	
    set @sqlStr = ' delete [' + @ServerName + '].'+ @treasuryDBName +'.dbo.working_so_master_det where username = ' +
                  ''''+@username+''''
  
     --print @sqlStr
    exec( @sqlStr)

   
    if @type = 'Y'
    begin
          set @sqlStr = ' insert [' + @ServerName + '].'+ @treasuryDBName +'.dbo.working_so_master_det (' + 
                        ' username, SO_ID, SO_NO, SO_LINE_ID, Supplier, EstimatedCost, DeliveryDate ,SuppContact, ' +
                        ' ShipFlag, PO,SLS_ID )' +
                        ' select username, SO_ID, SO_NO, SO_LINE_ID, Supplier, EstimatedCost, DeliveryDate,SuppContact ' +
                        ' ,ShipFlag, PO,SLS_ID   ' +
                        ' from Working_MM_Orders where selected = ''t''' + ' and username= ' + ''''+@username+'''' +
                        '  and treasuryDBName = ' + ''''+@treasuryDBName+'''' + ' and ServerName = ' + ''''+@ServerName+'''' +
                        ' and sourcetype = ''Y'''

           --print  @sqlStr
           exec (@sqlStr )

           set @sqlStr = ' exec [' +  @ServerName+ '].' + @TreasuryDBName + '.dbo.sp_MM_CreatePO ' +
                   ''''+@username+''','  +convert(varchar(20),@year) + ',' +convert(varchar(20),@period)
           --print @sqlStr
           exec( @sqlStr)
     end

     else if @type = 'X'
     begin
       
          set @sqlStr = ' insert [' + @ServerName + '].'+ @treasuryDBName +'.dbo.working_so_master_det (' + 
                        ' username, SO_ID, SO_NO, SO_LINE_ID, Supplier, EstimatedCost, DeliveryDate ,SuppContact, ' +
                        ' ShipFlag, PO,SLS_ID,FromWhse_ID,WhseID,inv_id ,TreasuryDBName,ServerName,qty_Picked,Part_Number)' +
                        ' select username, SO_ID, SO_NO, SO_LINE_ID, Supplier, EstimatedCost, DeliveryDate,SuppContact ' +
                        ' ,ShipFlag, PO,SLS_ID,FromWhse_ID,WhseID,i.inv_id ,TreasuryDBName,ServerName,qty_Picked,w.Part_Number   ' +
                        ' from Working_MM_Orders w join [' +  @ServerName + '].'+ @treasuryDBName +'.dbo.inventory i on w.part_number = i.part_number' + 
                         ' where selected = ''t''' + ' and username= ' + ''''+@username+'''' +
                        '  and  FromTRDB = ' + ''''+@treasuryDBName+'''' + ' and ServerName = ' + ''''+@ServerName+'''' +
                        '  and sourcetype = ''X'''

           --print  @sqlStr
           exec (@sqlStr )

           set @sqlStr = ' exec [' +  @ServerName+ '].' + @TreasuryDBName + '.dbo.sp_MM_BranchTransfer ' +
                   ''''+@username+''','  + convert(varchar(20),@year)+ ',' +convert(varchar(20),@period) +  ','''+@type+''''
  --print @sqlStr
 exec( @sqlStr)
     end   
     else if @type = 'BX'
     begin
      
          set @sqlStr = ' insert [' + @ServerName + '].'+ @treasuryDBName +'.dbo.working_so_master_det (' + 
                        ' username,XFER_ID, This_Shipment,  ' +
                        ' FromWhse_ID,WhseID,inv_id ,TreasuryDBName,ServerName)' +
                        ' select username, XFER_ID, This_Shipment,' +
                        ' FromWhse_ID,WhseID,inv_id ,treasuryDBName,ServerName  ' +
                        ' from Working_MM_Orders where selected = ''t''' + ' and username= ' + ''''+@username+'''' +
                        '  and FromTRDB= ' + ''''+@treasuryDBName+'''' + ' and FromTRServer = ' + ''''+@ServerName+'''' +
                        '  and sourcetype = ''BX'' and isnull(This_Shipment,0) <> 0 '
          -- print @sqlStr

          exec (  @sqlStr)  
          set @sqlStr = ' exec [' +  @ServerName+ '].' + @TreasuryDBName + '.dbo.sp_MM_BranchTransfer ' +
                   ''''+@username+''','  + convert(varchar(20),@year)+ ',' +convert(varchar(20),@period) +  ','''+@type+''''
          
          exec( @sqlStr)

        end

       else if @type = 'BXR'
       begin
           set @sqlStr = ' insert [' + @ServerName + '].'+ @treasuryDBName +'.dbo.working_so_master_det (' + 
                        ' username,XFER_ID,  This_Receipt,  ' +
                        ' FromWhse_ID,WhseID,inv_id ,TreasuryDBName,ServerName)' +
                        ' select username, XFER_ID,  This_Receipt,' +
                        ' FromWhse_ID,WhseID,inv_id ,TreasuryDBName,ServerName  ' +
                        ' from Working_MM_Orders where selected = ''t''' + ' and username= ' + ''''+@username+'''' +
                        '  and FromTRDB= ' + ''''+@treasuryDBName+'''' + ' and FromTRServer = ' + ''''+@ServerName+'''' +
                        '  and sourcetype = ''BX'' and isnull(This_Receipt,0) <> 0'
          exec( @sqlStr)  
          set @sqlStr = ' exec [' +  @ServerName+ '].' + @TreasuryDBName + '.dbo.sp_MM_BranchTransferRcv ' +
                   ''''+@username+''','  + convert(varchar(20),@year)+ ',' +convert(varchar(20),@period) 
          
          exec( @sqlStr)
       end
    fetch cur_po into @treasuryDBName,@ServerName
end

close cur_po
deallocate cur_po




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_MM_LoadOrders]') and xtype = 'P ')  
 drop Procedure sp_MM_LoadOrders
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--exec sp_MM_LoadOrders 'hm', 'y'

CREATE  proc [dbo].[sp_MM_LoadOrders]

@username varchar(50),@type   varchar(5)

as

--
--declare @username varchar(50),@type   varchar(5)
--
--select @username = 'hm',@type = 'BX'  

--'Y' : BuyIn, 'X' : BranchTransfer:Demand Transfer,'BX'  -- Branch Transfer:Stock Replenishment


delete Working_MM_Orders  where username = @username and sourcetype = @type

declare @company_name varchar(50), @treasurydbname varchar(500),
        @humandbname varchar(500),@companyservername varchar(500),@autoid varchar(200),
        @sqlStr  varchar(5000)
      
declare @COMMISSION_SMAN varchar(5), @sql   nvarchar(3000)

declare cur_company cursor for

select distinct company_name, treasurydbname,humandbname,companyservername,autoid
from companies

open cur_company
fetch cur_company into @company_name, @treasurydbname,@humandbname,@companyservername ,@autoid
while @@fetch_status=0
begin
    set @sql =' select @COMMISSION_SMAN = COMMISSION_SMAN  from  ' + @treasurydbname + '..ar_setup'

		exec sp_executesql @sql, N'@COMMISSION_SMAN varchar(5) OUT ', @COMMISSION_SMAN  OUT
    -- 1.buyin orders
    if @type = 'Y'
    begin

		set  @sqlStr = ' insert Working_MM_Orders ( SO_NO, SO_ID, SO_LINE_ID, Supplier, Username,CompanyID,CompanyName , ' +
					   ' Part_Number,ONE_TIME_PARTNO,Part_Desc,Customer,Unit_Price,Qty_Order,Order_Date,EXP_SHIP_DATE,treasurydbname , ' +
					   ' SLS_ID,SalesPerson ,ServerName,PO,Created,EstimatedCost,ShipFlag,DeliveryDate, '+
					   ' UOM,SupplierName,ItemNo ,Extention,SourceType,WhseID,WhseDesc,class_id, ' +
                       ' buyin_clear_acct ,buyin_gen_ledg_acct) '+ 
					   ' select distinct h.so_no,h.so_id,d.so_line_id,l.supplier , ' + ''''+@username+''',' +@autoid + ',' + ''''+@company_name+'''' +
					   ' ,i.Part_Number,d.ONE_TIME_PARTNO,d.DESCRIPTION,BILL_TO_NAME,l.UNIT_PRICE,l.Qty_Order,h.Order_Date,h.EXP_SHIP_DATE,' + ''''+@treasurydbname+'''' +
					   ' ,s.sls_id,isnull(firstname,'' '') + isnull (lastname,'' '')' + +','''+@companyservername+'''' + ',l.wo_po_no' +
					   ' ,wo_po_created,wo_po_cost, case when isnull(h.ship_type, '' '') = ''D'' then ''T'' else ''F'' end  ' + ',l.date_cust_orig' +
					   ' , l.UOM,m.Name,d.ItemNo ,isnull(Qty_Order,0) * isnull(wo_po_cost,0),instr, case when isnull(l.whse_id,0)=0 then h.whse_id else l.whse_id end, w.Description,d.class_id  ' +
                       ' ,w.buyin_clear_acct,c.buyin_gen_ledg_acct ' +
					   ' from [' + @companyservername + '].' + @treasurydbname + '.dbo.so_master_hdr h '+
					   ' join [' + @companyservername + '].' + @treasurydbname + '.dbo.so_master_detail d ' +
					   ' on h.so_id = d.so_id ' +
					   ' join [' + @companyservername + '].' + @treasurydbname + '.dbo.so_master_det_line l' +
					   ' on d.so_line_id = l.so_line_id ' +
					   ' left outer join  [' +  @companyservername + '].' + @treasurydbname + '.dbo.inventory  i  on d.inv_id = i.inv_id  ' +
					   ' left outer join  [' +  @companyservername + '].' + @treasurydbname + '.dbo.salespersons s on s.sls_id =  ' +
					   ' case when ' + ''''+@COMMISSION_SMAN +'''' + '=''I'' then h.sls_id else h.sls_id2 end' +
					   ' left outer join  [' +  @companyservername + '].' + @treasurydbname + '.dbo.Supplier_Master m on m.supplier = l.supplier ' +
					   ' join [' + @companyservername + '].' + @treasurydbname + '.dbo.warehouse w ' +
					   ' on w.whse_id = case when isnull(l.whse_id,0)=0 then h.whse_id else l.whse_id end ' +
                       ' left outer  join [' + @companyservername + '].' + @treasurydbname + '.dbo.class c on d.class_id = c.class_id ' +                        
					   ' where ((h.status = ''K'' and h.so_quote = ''Q'' and h.so_id in (select quote_id from [' + @companyservername + '].' + @treasurydbname + '.dbo.warehouse_booking where salesorder_id is null)) or (h.status = ''O'' and h.so_quote = ''S''))  and instr = ''Y'' ' 
		print @sqlStr
		exec ( @sqlstr)

		--- supplier contact
		set  @sqlStr= '  update  working_mm_orders set SuppContact = c.contact ,ContactPhone = tel from working_mm_orders  w ' +
					 ' join [' +  @companyservername + '].' + @treasurydbname + '.dbo.supp_contact  c  on   w.supplier = c.supplier ' +
					 ' where username = ' + ''''+@username+'''' +   'and  isnull(SuppContact,'' '') = '' ''' +
					 ' and c.def = ''T'' '
		exec (@sqlStr )
		set  @sqlStr= '  update  working_mm_orders set SuppContact = c.contact ,ContactPhone = tel  from working_mm_orders  w ' +
					 ' join [' +  @companyservername + '].' + @treasurydbname + '.dbo.supp_contact  c  on   w.supplier = c.supplier ' +
					 ' where username = ' + ''''+@username+'''' +   'and  isnull(SuppContact,'' '') = '' ''' 
	                
		exec (@sqlStr )

       
		--- supplier contact  (end)

--        update Working_MM_Orders set  buyin_gen_ledg_acct = '1305-0000-00'   
--        where username = @username and sourcetype  = 'Y'
--        and isnull(buyin_gen_ledg_acct,'') = ''
    end
    -- 2. Branch Transfers

    else if @type = 'X'
    begin
		set  @sqlStr = ' insert Working_MM_Orders ( SO_NO, SO_ID, SO_LINE_ID, Supplier, Username,CompanyID,CompanyName , ' +
					   ' Part_Number,ONE_TIME_PARTNO,Part_Desc,Customer,Unit_Price,Qty_Order,Order_Date,EXP_SHIP_DATE,treasurydbname , ' +
					   ' SLS_ID,SalesPerson ,ServerName,PO,Created,EstimatedCost,ShipFlag,DeliveryDate, '+
					   ' UOM,SupplierName,ItemNo ,Extention,SourceType,WhseID,WhseDesc, ' +
					   ' FromCompany_ID,FromCompany_Name,FromTRDB, FromWhse_ID , Inv_ID, Qty_Picked, class_id) ' +
					   ' select distinct h.so_no,h.so_id,d.so_line_id,l.supplier , ' + ''''+@username+''',' +@autoid + ',' + ''''+@company_name+'''' +
					   ' ,i.Part_Number,d.ONE_TIME_PARTNO,d.DESCRIPTION,BILL_TO_NAME,l.UNIT_PRICE,l.Qty_Order,h.Order_Date,h.EXP_SHIP_DATE,' + ''''+@treasurydbname+'''' +
					   ' ,s.sls_id,isnull(firstname,'' '') + isnull (lastname,'' '')' + +','''+@companyservername+'''' + ',l.wo_po_no' +
					   ' ,wo_po_created,wo_po_cost, case when isnull(h.ship_type, '' '') = ''D'' then ''T'' else ''F'' end  ' + ',l.date_cust_orig' +
					   ' , l.UOM,m.Name,d.ItemNo ,isnull(Qty_Order,0) * isnull(wo_po_cost,0),instr, case when isnull(l.whse_id,0)=0 then h.whse_id else l.whse_id end, w.Description  ' +
					   ' ,c.AutoID,c.Company_Name,c.TreasuryDBName, mainstocking_id , d.inv_id, l.Qty_Picked,d.class_id' +
					   ' from [' + @companyservername + '].' + @treasurydbname + '.dbo.so_master_hdr h '+
					   ' join [' + @companyservername + '].' + @treasurydbname + '.dbo.so_master_detail d ' +
					   ' on h.so_id = d.so_id ' +
					   ' join [' + @companyservername + '].' + @treasurydbname + '.dbo.so_master_det_line l' +
					   ' on d.so_line_id = l.so_line_id ' +
					   ' left outer join  [' +  @companyservername + '].' + @treasurydbname + '.dbo.inventory  i  on d.inv_id = i.inv_id  ' +
					   ' left outer join  [' +  @companyservername + '].' + @treasurydbname + '.dbo.salespersons s on s.sls_id =  ' +
					   ' case when ' + ''''+@COMMISSION_SMAN +'''' + '=''I'' then h.sls_id else h.sls_id2 end' +
					   ' left outer join  [' +  @companyservername + '].' + @treasurydbname + '.dbo.Supplier_Master m on m.supplier = l.supplier ' +
					   ' join [' + @companyservername + '].' + @treasurydbname + '.dbo.warehouse w ' +
					   ' on w.whse_id = case when isnull(l.whse_id,0)=0 then h.whse_id else l.whse_id end ' +
					   ' left outer join Companies   c    on c.autoid = w.company_id ' +
					   ' where ((h.status = ''K'' and h.so_quote = ''Q'' and h.so_id in (select quote_id from [' + @companyservername + '].' + @treasurydbname + '.dbo.warehouse_booking where salesorder_id is null)) or (h.status = ''O'' and h.so_quote = ''S''))  and instr = ''X'' ' 
		--print @sqlStr
		exec ( @sqlstr)

		-- FromCompany's warehouse description

		declare @companyID int ,@whseID  varchar(20)

		declare cur_whse cursor for

		select distinct fromcompany_id, fromwhse_id from working_mm_orders
		where username = @username and sourcetype ='x'
		and  isnull(fromcompany_id,0) <> 0 and  isnull(fromwhse_id,0) <> 0

		open cur_whse
		fetch cur_whse into @companyID,@whseID 
		while @@fetch_status=0
		begin
			
		   declare @serverName   varchar(500), @trDB  varchar(500)
		   select  @serverName= companyservername, @trDB = treasurydbname from companies
		   where autoid =  @companyID

		 
			declare @whseDesc   varchar(50)
			set @sql = 'select @whseDesc  = description  from  ' + '[' +@serverName +'].' +  @trDB  +'.dbo.warehouse where whse_id=' + @whseID
			exec sp_executesql @sql, N'@whseDesc varchar(50) OUT', @whseDesc OUT       
		    
		  
			 update  working_mm_orders  set FromWhse_Desc =  @whseDesc
			 where username = @username and sourcetype ='x'
			 and  isnull(fromcompany_id,0)= @companyID and  isnull(fromwhse_id,0)=  @whseID 

            ---------BRANCH_XFER_ACCT
            declare @BRANCH_XFER_ACCT   varchar(50)
			set @sql = 'select @BRANCH_XFER_ACCT  = BRANCH_XFER_ACCT  from  ' + '[' +@serverName +'].' +  @trDB  +'.dbo.INV_SETUP '
			exec sp_executesql @sql, N'@BRANCH_XFER_ACCT varchar(50) OUT', @BRANCH_XFER_ACCT  OUT       
		    
		    update  working_mm_orders  set BRANCH_XFER_ACCT =  @BRANCH_XFER_ACCT
			 where username = @username and sourcetype ='x'
			 and  isnull(fromcompany_id,0)= @companyID and  isnull(fromwhse_id,0)=  @whseID 
 
            ------ BRANCH_XFER_ACCT (end)

            
		    
			fetch cur_whse into @companyID ,@whseID 
		end

		close cur_whse
		deallocate cur_whse

    end
    else if @type = 'BX'  -- Branch Transfer:Stock Replenishment
    begin
       
         -- same company
          set  @sqlStr = ' insert Working_MM_Orders ( FromCompany_id,FromCompany_Name,FromTRDB,FromTRServer, ' +
					    ' treasurydbname,FromWhse_ID,FromWhse_Desc,WhseID,WhseDesc,  '+
                        ' Part_Number,Part_Desc,Inv_ID, qty_required,qty_shipped,qty_rcvd, qty_alloc, ' +
					    ' SourceType,Username ,XFER_ID,serial,Unit_Price,Extention,status , ' +
                        ' This_Shipment,This_Receipt,EXP_SHIP_DATE,' +
                        ' FRT_FACTOR, FRT_AMT, SERVICE_FACTOR, SERVICE_AMT, OTHER_FACTOR, OTHER_AMT )' +
                        'select ' + @autoid + ',' + ''''+@company_name+''','+ ''''+@treasurydbname+'''' +','''+@companyservername+''','+
                        'To_Company_Alias, h.From_Whse_ID,fw.description,h.To_Whse_ID,tw.description, '+
                        'd.part_number,i.Description, d.inv_id, d.qty_required,d.qty_shipped,d.qty_rcvd, d.qty_alloc,' +
                        ' ''BX'',' + ''''+@username+'''' +  ',h.XFER_ID,i.serial,isnull(fifo_unit_cost,0),isnull(fifo_unit_cost,0)*isnull(d.qty_required,0),h.status,' +
                        ' d.This_Shipment,d.This_Receipt, h.req_date, '  +
                        ' h.FRT_FACTOR, FRT_AMT, SERVICE_FACTOR, SERVICE_AMT, OTHER_FACTOR, OTHER_AMT ' +
                        ' from [' +  @companyservername + '].' + @treasurydbname + '.dbo.inv_xfer_head h '+
                        ' join [' +  @companyservername + '].' + @treasurydbname + '.dbo.inv_xfer_det  d on h.xfer_id = d.xfer_id' +
                        ' join [' +  @companyservername + '].' + @treasurydbname + '.dbo. warehouse fw on h.from_whse_id = fw.whse_id' +
                        ' join [' +  @companyservername + '].' + @treasurydbname + '.dbo. warehouse tw on h.to_whse_id = tw.whse_id ' +
                        ' join [' +  @companyservername + '].' + @treasurydbname + '.dbo.inventory i on d.inv_id = i.inv_id' +
                        ' where  isnull(Inter_CO,'''') <> ''T'' and  status in (''E'', ''R'',''S'') '
             --print @sqlStr
             exec (@sqlStr)


             -- different company

            set  @sqlStr = ' insert Working_MM_Orders ( FromCompany_id,FromCompany_Name,FromTRDB,FromTRServer, ' +
					    ' treasurydbname,FromWhse_ID,FromWhse_Desc,WhseID,WhseDesc,  '+
                        ' Part_Number,Part_Desc,Inv_ID, qty_required,qty_shipped,qty_rcvd, qty_alloc, ' +
					    ' SourceType,Username ,XFER_ID,serial,Unit_Price,Extention,status , ' +
                        ' This_Shipment,This_Receipt,EXP_SHIP_DATE,Inter_CO,' +
                        ' FRT_FACTOR, FRT_AMT, SERVICE_FACTOR, SERVICE_AMT, OTHER_FACTOR, OTHER_AMT ) ' +
                        'select ' + @autoid + ',' + ''''+@company_name+''','+ ''''+@treasurydbname+'''' +','''+@companyservername+''','+
                        'To_Company_Alias, h.From_Whse_ID,fw.description,h.To_Whse_ID,null, '+
                        'd.part_number,i.Description, d.inv_id, d.qty_required,d.qty_shipped,d.qty_rcvd, d.qty_alloc,' +
                        ' ''BX'',' + ''''+@username+'''' +  ',h.XFER_ID,i.serial,isnull(fifo_unit_cost,0),isnull(fifo_unit_cost,0)*isnull(d.qty_required,0),h.status,' +
                        ' d.This_Shipment,d.This_Receipt, h.req_date,h.Inter_CO , '  +
                        ' FRT_FACTOR, FRT_AMT, SERVICE_FACTOR, SERVICE_AMT, OTHER_FACTOR, OTHER_AMT ' +
                        ' from [' +  @companyservername + '].' + @treasurydbname + '.dbo.inv_xfer_head h '+
                        ' join [' +  @companyservername + '].' + @treasurydbname + '.dbo.inv_xfer_det  d on h.xfer_id = d.xfer_id' +
                        ' join [' +  @companyservername + '].' + @treasurydbname + '.dbo. warehouse fw on h.from_whse_id = fw.whse_id' +
                        --' join [' +  @companyservername + '].' + @treasurydbname + '.dbo. warehouse tw on h.to_whse_id = tw.whse_id ' +
                        ' join [' +  @companyservername + '].' + @treasurydbname + '.dbo.inventory i on d.inv_id = i.inv_id' +
                        ' where  isnull(Inter_CO,'''') = ''T'' and  status in (''E'', ''R'',''S'') '
             --print @sqlStr
             exec (@sqlStr)

 
					     
    end
	fetch cur_company into @company_name, @treasurydbname,@humandbname,@companyservername ,@autoid
end

close cur_company
deallocate cur_company

if @type = 'BX'
begin
   
    update   Working_MM_Orders  set  CompanyID =FromCompany_id  ,CompanyName =FromCompany_Name, TreasuryDBName = FromTRDB,serverName = FromTRServer
    from Working_MM_Orders  
    where sourcetype = 'BX' and isnull (inter_co,'')<> 'T'   and username = @username


    declare @ToTRDB  varchar(400),@ToWhseID varchar(20) ,@ToCompanyID int ,@ToTRServer varchar(500) ,@mmID  varchar(20),
            @ToCompanyName    varchar(100)

	declare cur_Comp cursor for
	select distinct w.treasurydbname,w.whseID,c.AutoID,c.CompanyServerName, MM_id, c.company_Name
    
	 from Working_MM_Orders w
	join companies c on  w.treasurydbname  = c.treasurydbname
	where username = @username and sourcetype = 'BX'
	and isnull(w.Inter_CO,'') = 'T'


	open cur_Comp
	fetch cur_Comp into @ToTRDB,@ToWhseID,@ToCompanyID,@ToTRServer,@mmID, @ToCompanyName
	while @@fetch_status=0
	begin
	  
       update Working_MM_Orders  set CompanyID = @ToCompanyID, CompanyName =  @ToCompanyName
       where MM_id = @mmID
       
       set @sqlStr = 'update  Working_MM_Orders set WhseDesc =  description  from Working_MM_Orders m ' +
                     ' join [' +  @ToTRServer +'].' + @ToTRDB +'.DBO.Warehouse w   on m.whseid =  w.whse_id ' +
                     ' where  m.whseid =' + @ToWhseID + ' and mm_id = ' +@mmID
       --print @sqlStr
       exec (@sqlStr)
     
	   fetch cur_Comp into @ToTRDB,@ToWhseID,@ToCompanyID,@ToTRServer,@mmID, @ToCompanyName
	end

	close cur_Comp
	deallocate cur_Comp

end







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_MM_SOItemExist]') and xtype = 'P ')  
 drop Procedure sp_MM_SOItemExist
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc [dbo].[sp_MM_SOItemExist] 
 
@username varchar (50), @TRServer  varchar(300), @TRDB  varchar(300)

as

--declare @username varchar (50), @TRServer  varchar(300), @TRDB  varchar(300)
--
--select @username = 'hm' , @TRServer = 'robin' , @TRDB = 'tr_wsedm'

declare @so_no      varchar(100), @sql nvarchar(4000)



--set @sql = 'select @mtr_db_name = DBName, @server_name = ServerName from ' + @web_db_name + '..DBS where Flavour = ''ComcoMTR'''

set @sql = ' select  @so_no = isnull(@so_no,'' '') +  '' '' + convert (varchar(20),so_no )  from Working_MM_Orders where username =  ' + 
              ''''+@username + '''' +  '  and  created = ''N''  ' +
             ' and so_line_id  not in  ( select so_line_id from [' +@TRServer + '].' + @TRDB +  '.dbo.so_master_detail ) '

exec sp_executesql @sql, N'@so_no  varchar(100) OUT', @so_no OUT

select isnull(@so_no,'')   'so_no'




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Nags_Inventory_Update]') and xtype = 'P ')  
 drop Procedure sp_Nags_Inventory_Update
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure [dbo].[sp_Nags_Inventory_Update](@Type varchar(2), @UserName varchar(50), @TRDBName varchar(500))

AS
--
--Declare @Type varchar(2), @UserName varchar(50), @TRDBName varchar(500)
--Set @Type = 'B'
--Set @UserName = 'hm'
--Set @TRDBName = 'TR_WSEDM'

Declare @WHSE_ID int, @Company_ID int, @str varchar(8000), @Debug bit
Set @Debug = 0

Declare aWarehouse Cursor For

Select WHSE_ID, Company_ID From working_WarehouseList Where Selected = 1 and [Type] = @Type

Open aWarehouse

Fetch aWarehouse Into @WHSE_ID, @Company_ID

While @@Fetch_Status = 0
Begin

	--Select @TRDBName = TreasuryDBName From Companies Where AutoID = @Company_ID

	--Insert Into Invenotry Parts Selected Not already there
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Parts'))  
	drop table #Parts
	create table #Parts
	(
	 Part_Number varchar(30) null
	)
	
	Set @str = 'Select PART_NUMBER	From working_NagsInventory wni
				Where wni.UserName = ''' + @UserName + ''' and 
					  wni.Part_Number not in ( Select Part_Number From ' + @TRDBName + '..Inventory)'
	Insert Into #Parts
	Exec (@str)
	
	Declare @Part_Number varchar(30)

	Declare aWorkingParts Cursor For
	
	Select Part_Number From #Parts

	Open aWorkingParts

	Fetch aWorkingParts Into @Part_Number
	
	While @@Fetch_Status = 0
	Begin
	
		Set @str = '
		Declare @newInv_ID int
		
		select @newInv_ID = id
		from ' + @TRDBName + '..system_ids
		where id_name = ''NEXT_INV_ID''

	    update ' + @TRDBName + '..system_ids
	    set id = isnull(@newInv_ID,0) + 1
	    where ID_NAME = ''NEXT_INV_ID''
	    and ' + convert(varchar(10),@Debug) + ' = 0

		Insert Into ' + @TRDBName + '..Inventory(INV_ID, PART_NUMBER, [DESCRIPTION], UNIT_OF_MEASURE, WEIGHT,USER_DEF1_ID, 
													 CLASS_ID, USER_DEF3_ID, QTYDECIMAL, PART_TYPE, interfaced)
		Select @newInv_ID, PART_NUMBER, [DESCRIPTION], UNIT_OF_MEASURE, 
				WEIGHT,USER_DEF1_ID, CLASS_ID, USER_DEF3_ID, QTYDECIMAL, PART_TYPE, ''T''
		From working_NagsInventory wni
		Where wni.UserName = ''' + @UserName + ''' and wni.Part_Number = ''' + @Part_Number + ''''

		Exec (@str)

		Fetch aWorkingParts Into @Part_Number

	End

	Close aWorkingParts
	DeAllocate aWorkingParts

	--Insert Into Status Table for items not to be updated

	Set @str = 'Insert Into working_InventoryUpdateResults(Part_Number, [Description], [Status], Result, UserName, WHSE_ID)
				Select PART_NUMBER, [DESCRIPTION], Case When (Select Count(*) From ' + @TRDBName + '..Inventory i 
				Inner Join ' + @TRDBName + '..Inv_Warehouse iw on iw.Inv_ID = i.Inv_ID and iw.WHSE_ID = ' + cast(@WHSE_ID as varchar(20)) + '
				Where i.Part_Number = wni.Part_Number) > 0 Then ''S'' Else ''A'' End,
				Case When (Select Count(*) From ' + @TRDBName + '..Inventory i 
				Inner Join ' + @TRDBName + '..Inv_Warehouse iw on iw.Inv_ID = i.Inv_ID and iw.WHSE_ID = ' + cast(@WHSE_ID as varchar(30)) + '
				Where Part_Number = wni.Part_Number) > 0 Then ''Part Not Added As It Already Exists'' Else ''Part Added To Warehouse'' End,
				''' + @UserName + ''', ' + cast(@WHSE_ID as varchar(30)) + '
				From working_NagsInventory wni
				Where UserName = ''' + @UserName + ''''

	Exec(@str)

	--Insert Into Warehouse Parts Not Found

	Set @str = 'Insert Into ' + @TRDBName + '..Inv_Warehouse(Inv_ID,WHSE_ID)
				Select Inv_ID, ' + cast(@WHSE_ID as varchar(30)) + '
				From working_NagsInventory wni
				Inner Join ' + @TRDBName + '..Inventory i on i.Part_Number = wni.Part_Number
				Where wni.UserName = ''' + @UserName + ''' and i.Inv_ID Not In
				(Select Inv_ID From ' + @TRDBName + '..Inv_Warehouse Where WHSE_ID =' + cast(@WHSE_ID as varchar(30)) + ')'

	Exec(@str)

	--Insert Into Log File all parts worked on
	
	Insert Into Nags_Inventory_Transfer_Log (PART_NUMBER, DESCRIPTION, UNIT_OF_MEASURE, WEIGHT, 
											 USER_DEF1_ID, CLASS_ID, USER_DEF3_ID, QTYDECIMAL, PART_TYPE, 
											 UserName, WHSE_ID, InsertedDate, BatchID, Company_ID)
	Select PART_NUMBER, DESCRIPTION, UNIT_OF_MEASURE, WEIGHT, USER_DEF1_ID, CLASS_ID, 
		   USER_DEF3_ID, QTYDECIMAL, PART_TYPE, UserName, @WHSE_ID, GetDate(), 
			IsNull((Select Max(BatchID) + 1 From Nags_Inventory_Transfer_Log),1), @Company_ID
	From working_NagsInventory
	Where UserName = @UserName

	Fetch aWarehouse Into @WHSE_ID, @Company_ID

End

Close aWarehouse
DeAllocate aWarehouse

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_OE_CreditApproval]') and xtype = 'P ')  
 drop Procedure sp_OE_CreditApproval
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_OE_CreditApproval]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@stat varchar(50),
	@SO_ID varchar(50)

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @SO_ID=module_reference_id, @stat=status from approvals_requested where id=@id


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..so_master_hdr set KC_STATUS=''D'' where so_id='+@SO_ID
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin

		set @sql ='
			declare 
			@TOTAL_PROD money, @PRE_APPROVAL_AMT money, @username varchar(10),
			@message varchar(500), @STATUS varchar(10), @PO_ID int,
			@SO_TASKID int, @ITEM_TOTAL money, @TAX_TOTAL money, @PO_TOTAL money, @SALES_TAX float, @TAXABLE varchar(1),
			@QTY float, @PRICE money
			
			select @TOTAL_PROD=(isnull(total_prod,0)+isnull(total_gst,0)+isnull(total_tax,0)), @PRE_APPROVAL_AMT=isnull(PRE_APPROVAL_AMT,0) 
			from '+@tr_db+'..so_master_hdr where so_id='+cast(@SO_ID as varchar)+'

			if 1=1--( @TOTAL_PROD = @PRE_APPROVAL_AMT )
			begin
				--updates the so_master_hdr status to approved
				update '+@tr_db+'..so_master_hdr set KC_STATUS=''A'', POST_APPROVAL_AMT=PRE_APPROVAL_AMT where so_id='+@SO_ID+'							
			end		
			else	
			begin
				update '+@tr_db+'..so_master_hdr set KC_STATUS=''F'', POST_APPROVAL_AMT=PRE_APPROVAL_AMT where so_id='+@SO_ID+'							
			end
			'

		exec( @sql )
	end
end
	
		
		








Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_OE_CreditDaysApproval]') and xtype = 'P ')  
 drop Procedure sp_OE_CreditDaysApproval
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc [dbo].[sp_OE_CreditDaysApproval] @ID int, @Status char(1) as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@stat varchar(50),
	@SO_ID varchar(50)

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @SO_ID=module_reference_id, @stat=status from approvals_requested where id=@id


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..so_master_hdr set KC_RoutedForCreditDays=''D'' where so_id='+@SO_ID
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin

		set @sql ='
			update '+@tr_db+'..so_master_hdr set KC_RoutedForCreditDays=''A'' where so_id='+@SO_ID


		exec( @sql )
	end
end
	
		
		









Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_oe_TransferRequest]') and xtype = 'P ')  
 drop Procedure sp_oe_TransferRequest
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
CREATE proc [dbo].[sp_oe_TransferRequest] @ToCompanyID int, @username varchar(500) as 
--declare @ToCompanyID int, @username varchar(500) select @ToCompanyID = 13, @username = 'hm' begin tran
--select top 5 * from tr_suncor_dev..inv_xfer_head order by xfer_id desc
--select top 5 * from tr_suncor_dev..inv_xfer_det order by seq desc
declare
@FromCompanyDB varchar(500),
@FromCompanyMarsalling varchar(1),
@ToCompanyMarsalling varchar(1),
@ToCompanyDB varchar(500),
@Sql varchar(8000), @Sqlstr nvarchar(4000)

select @ToCompanyDB = treasurydbname,@ToCompanyMarsalling = marsallingType from companies where autoID = @ToCompanyID
if(@ToCompanyDB is not null)
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#xfer_companies'))
	drop table #xfer_companies 
	create table #xfer_companies(
	so_id int,
	from_Company int,
	from_whse int,
	from_inv_id int,
	to_inv_id int,
	task_id int,
	so_line_id int,
	qty money,
	id int identity(1,1),
	sotype varchar(2),
	to_subwarehouse_id int,
	SplitTask int,
	PreferredXFER_ID varchar(20),
	PreferredClosedReason varchar(max))

	declare @Append_To_Existing_Transfer_to varchar(1), @toWHSEID  int
	

	select @SQL = '
	
	delete '+@ToCompanyDB+'..working_OE_Release_Invalid_PreferredTransfer where username = ''' + @Username + '''
	
	select h.so_id, t.from_company_id, t.from_whse_id, t.xfer_from_inv_id, t.inv_id, t.id, t.so_det_line_id, t.qty, 
	case when h.so_quote = ''S'' then ''SO'' else ''B'' end, t.to_subwarehouse_id, isnull(slf.task_id,-1),
	PreferredXFER_ID,
	case when t.PreferredXFER_ID = ''NEW'' then '''' 
	else 
		(select case when CutOff = 1 then ''The transfer request for line '' + 
			case when isnull(Pack_component,0) = 0 then '''' else cast(Pack_component as varchar(20)) + ''-'' end +
			cast(itemno as varchar(20)) + 
			'' has been cut-off. Please reset your transfer request.''
		when Status != ''E'' then ''The transfer request for line ''  + 
			case when isnull(Pack_component,0) = 0 then '''' else cast(Pack_component as varchar(20)) + ''-'' end +
			cast(itemno as varchar(20)) + 
			'' is no longer available. Please reset your transfer request.''
		end
		from '+@ToCompanyDB+'..inv_xfer_head where xfer_id = t.PreferredXFER_ID)
	end
	from '+@ToCompanyDB+'..so_tasks t
	join '+@ToCompanyDB+'..so_master_detail dd on dd.so_line_id = t.so_det_line_id
	join '+@ToCompanyDB+'..so_master_hdr h on h.so_id = t.so_id
	left outer join '+@ToCompanyDB+'..so_landing_factors slf on isnull(slf.task_id,-1) = t.id
	where t.id in
		(select w.so_task_id from '+@ToCompanyDB+'..working_oe_itemRelease w where w.selected = 1 and w.action_s_p_t_r = ''T'' and username = '''+@username+''')
	order by h.so_id, t.from_company_id, t.from_whse_id, t.to_subwarehouse_id
		
	'
	--print @Sql
	insert into #xfer_companies
	exec(@Sql)
	print @Sql
	
	declare @fromCompanyID int, @fromWHSEID int, @SO_ID int, @hdrIDFrom varchar(100), @hdrIDTo varchar(100) = '', 
	@InterCompany varchar(1), @SO_TYPE varchar(2), @to_subwarehouse_id int, 
	@ToCompany varchar(100), @ToWhse varchar(100), @ToSubwarehouse varchar(100), @FromCompany varchar(100), @FromWhse varchar(100),
	@SplitTask int, @PreferredClosedReason varchar(max), @PreferredXFER_ID varchar(20)
	
	declare transfers cursor for 
	select distinct so_id, from_company, from_whse, SOTYPE, isnull(to_subwarehouse_id,-1), isnull(SplitTask,-1), 
	PreferredClosedReason, PreferredXFER_ID
	from #xfer_companies
	order by so_id, from_Company, from_whse
	open transfers
	fetch transfers into @SO_ID, @fromCompanyID, @fromWHSEID, @SO_TYPE, @to_subwarehouse_id, @SplitTask, 
	@PreferredClosedReason, @PreferredXFER_ID
	while @@fetch_status = 0
	begin 
		select @FromCompanyDB = treasurydbname,  @FromCompanyMarsalling = marsallingType 
		from companies where autoID = @fromCompanyID
		
		select @ToCompany = company_name from companies where treasuryDBName = @ToCompanyDB
		
		if(@fromCompanyID = @ToCompanyID)
		begin
			select @InterCompany = 'F', @hdrIDFrom = '-1', @FromCompany = @ToCompany				
		end
		else 
		begin
			set @InterCompany = 'T'	
		    set @Sql ='exec '+@FromCompanyDB+'..sp_GetNextSystemID ''NEXT_XFER_ID'''
			exec execScalarSql @Sql ,@hdrIDFrom output 
			
			select @FromCompany = company_name from companies where treasuryDBName = @FromCompanyDB
		end
		
		declare @use_systm_id_to  varchar(1) 
		set @use_systm_id_to = 'T'

		set @Sqlstr  = ' select @Append_To_Existing_Transfer_to = isnull(Append_To_Existing_Transfer,''F'') from ' + @ToCompanyDB+ '..inv_setup'
	    exec sp_executesql @Sqlstr, N'@Append_To_Existing_Transfer_to varchar(1) OUT',  @Append_To_Existing_Transfer_to OUT

		  
		if @Append_To_Existing_Transfer_to = 'T'
		begin
		/* Removed by Robg-client wants to allow user to be able to either select a new transfer, or pick one at OE task creation time
				declare @exist_xfer_id_to int
				set @Sqlstr = 'select  @toWHSEID = whse_id from '+ @ToCompanyDB+'..so_master_hdr where so_id ='+cast(@SO_ID as varchar(20))
				exec sp_executesql @Sqlstr, N'@toWHSEID int OUT',  @toWHSEID OUT

				set @Sqlstr = 'select @exist_xfer_id_to = ( select  top 1 XFER_ID from ' +  @ToCompanyDB+ '..inv_xfer_head  where SourceType = ''SO'' and status = ''E'' and isnull(IN_PROCESS,'''') =''F'' and TO_WHSE_ID = ' 
					   +  cast(@toWHSEID as varchar(20)) +' and FROM_WHSE_ID = ' + cast(@fromWHSEID as varchar(20)) + ' order by XFER_ID ) '
				exec sp_executesql @Sqlstr, N'@exist_xfer_id_to int OUT',  @exist_xfer_id_to OUT
				if ( isnull( @exist_xfer_id_to,0) <> 0) 
				begin
					set @use_systm_id_to = 'F'
					set @hdrIDTo = @exist_xfer_id_to
				end
		*/
			if @PreferredXFER_ID = 'NEW'
			begin
				set @use_systm_id_to = 'T'
			end
			else
			begin
				--confirm that the preferred id is still available
				if isnull(@PreferredClosedReason,'') = ''
				begin			
					set @use_systm_id_to = 'F'	
					select @hdrIDTo = @PreferredXFER_ID
				end
				else
				begin
					--store in validation table to notify user after release is completed
					set @use_systm_id_to = 'F'						
					set @Sql ='
insert '+@ToCompanyDB+'..working_OE_Release_Invalid_PreferredTransfer(SO_ID, ErrorMessage, Username)
select ' + cast(@so_id as varchar(20)) + ', ''' + isnull(@PreferredClosedReason,'') + ''', ''' + @username + '''' 
					exec (@Sql)
				end
            end
		 end
		  
		 if @use_systm_id_to = 'T' 
		 begin
		  
			set @Sql ='exec '+@ToCompanyDB+'..sp_GetNextSystemID ''NEXT_XFER_ID'''	
			exec execScalarSql @Sql, @hdrIDTo output 
		  
			--now do the header insert(s)
			set @sql = 'insert into '+@ToCompanyDB+'..inv_xfer_head(XFER_ID, FROM_WHSE_ID, TO_WHSE_ID, REQ_DATE, STATUS, INTER_CO, 
				TO_COMPANY_ALIAS, IN_PROCESS, IXH_COMMENT, FROM_COMPANY_ALIAS, CreatedBy, SourceType, SourceID, ref_xfer_id, 
				source_display,	To_Sub_whse_Id, 
				To_Company_Name, To_Warehouse_Name, To_SubWarehouse_Name, 
				From_Company_Name, From_Warehouse_Name, From_SubWarehouse_Name)
			
				select '+@hdrIDTo+', '+cast(@fromWHSEID as varchar(10))+', (select whse_id from '+
				@ToCompanyDB+'..so_master_hdr where so_id ='+cast(@SO_ID as varchar(20))+'),
				getdate(),''E'','''+@InterCompany+''','''+@ToCompanyDB+''',''F'',null,'''+@FromCompanyDB+''', '''+
				@username+''', '''+@SO_TYPE+''', '+cast(@SO_ID as varchar(20))+
				','+@hdrIDFrom+',(select so_no from '+@ToCompanyDB+'..so_master_hdr where so_id ='+cast(@SO_ID as varchar(20))+'),'+ 
				cast(isnull(@to_subwarehouse_id,-1) as varchar(20)) +
				', ''' + @ToCompany + ''', 
				(select description from '+@ToCompanyDB+'..warehouse w join '+@ToCompanyDB+'..so_master_hdr h on w.whse_id = h.whse_id
				where so_id ='+cast(@SO_ID as varchar(20)) + '), 
				(select description from '+@ToCompanyDB+'..sub_warehouse where id ='+cast(isnull(@to_subwarehouse_id,-1) as varchar(20)) + '), 
				''' + @FromCompany + ''', 
				(select description from '+@FromCompanyDB+'..warehouse w where w.whse_id = '+cast(@fromWHSEID as varchar(20))+'), null'
			print @sql
			exec(@sql)
		 end
		if(@InterCompany = 'T')	
		begin--if its intercompany then insert into the from company as well
			set @sql = 'insert into '+@FromCompanyDB+'..inv_xfer_head(XFER_ID, FROM_WHSE_ID, TO_WHSE_ID, REQ_DATE, STATUS, 
			INTER_CO, TO_COMPANY_ALIAS, IN_PROCESS, IXH_COMMENT, FROM_COMPANY_ALIAS, CreatedBy, SourceType, SourceID, 
			ref_xfer_id, source_display, To_Sub_whse_Id, 
			To_Company_Name, To_Warehouse_Name, To_SubWarehouse_Name, 
			From_Company_Name, From_Warehouse_Name, From_SubWarehouse_Name)
			select    '+@hdrIDFrom+','+cast(@fromWHSEID as varchar(10))+',(select whse_id from '+@ToCompanyDB+'..so_master_hdr where so_id ='+cast(@SO_ID as varchar(20))+'),'+
			'getdate(),''E'','''+@InterCompany+''','''+@ToCompanyDB+''',''F'',null,'''+@FromCompanyDB+''' ,'''+@username+''', '''+@SO_TYPE+'''    ,'+cast(@SO_ID as varchar(20))+
			','+@hdrIDTo+',(select so_no from '+@ToCompanyDB+'..so_master_hdr where so_id ='+cast(@SO_ID as varchar(20))+'),'+ 
			cast(isnull(@to_subwarehouse_id,-1) as varchar(20)) +
			', ''' + @ToCompany + ''', 
			(select description from '+@ToCompanyDB+'..warehouse w join '+@ToCompanyDB+'..so_master_hdr h on w.whse_id = h.whse_id
			where so_id ='+cast(@SO_ID as varchar(20)) + '), 
			(select description from '+@ToCompanyDB+'..sub_warehouse where id ='+cast(isnull(@to_subwarehouse_id,-1) as varchar(20)) + '), 
			''' + @FromCompany + ''', 
			(select description from '+@FromCompanyDB+'..warehouse w where w.whse_id = '+cast(@fromWHSEID as varchar(20))+'), null'
			print @sql
			exec(@sql)
		end

		if isnull(@PreferredClosedReason,'') = ''
		begin--if they selected preferred xfer is not available, then 
			--recycle the landing factor record for use with the actual transfer
			set @sql = 'update '+@ToCompanyDB+'..so_landing_factors 
				set xfer_id = xh.xfer_id
				from '+@ToCompanyDB+'..so_landing_factors lf
				join '+@ToCompanyDB+'..inv_xfer_head xh on lf.whse_id = xh.from_whse_id
				where so_id = ' + cast(@SO_ID as varchar(20)) + ' and lf.xfer_id = -1 and lf.po_id = -1 
				and lf.task_id = ' + cast(@SplitTask as varchar(20)) + '
				and xh.xfer_id = ' + @hdrIDTo
			print @sql
			exec(@sql)

		
			--now the detail insert
			--to company
			
			set @sql = 
			'begin tran
			
			declare @Min int select @min = max(seq) from '+@ToCompanyDB+'..inv_xfer_det 
			insert into '+@ToCompanyDB+'..inv_xfer_det(XFER_ID, INV_ID, QTY_REQUIRED, PART_NUMBER, FIFO_UNIT_COST, XFER_COMMENT, 
			H_FROM_WHSE_ID, H_TO_WHSE_ID, H_REQ_DATE, H_STATUS,  H_INTER_CO, H_TO_COMPANY_ALIAS, H_IN_PROCESS, H_IXH_COMMENT, 
			H_FROM_COMPANY_ALIAS, DATE_REQIRED, CreatedBy, SourceType, SourceID, source_display, H_To_Sub_Whse_ID,
			Build_num, BuildForTransfer, approvedqty, Part_Description, ApprovedStatus, cust_seq, cust_part_no,
			OneTimeClass, OneTimeProductGroup, OneTimeIsPipe, OneTimeUOM, UpchargeComment)
			
			select '+@hdrIDTo+', isnull(x.to_inv_id,-1), x.qty,
			isnull((select part_number from '+@ToCompanyDB+'..inventory where inv_id = x.to_inv_id),d.one_time_partno),
			case when isnull(s.Build_num,-1) = -1 then 
			(Select SUM(f.FIFO_UNIT_COST * f.QTY_ON_HAND)/(CASE WHEN SUM(f.QTY_ON_HAND) = 0 THEN 1 ELSE 
			SUM(f.QTY_ON_HAND) END) From '+@ToCompanyDB+'..FIFO f Where f.Inv_ID = x.from_inv_id and f.whse_id = x.from_whse)
			else isnull(s.price,0) end,
			dl.COMMENT, from_whse, h.whse_id, getdate(), ''E'', '''+@InterCompany+''',
			'''+@ToCompanyDB+''', ''F'', null, '''+@FromCompanyDB+''', s.date_required, '''+@username+''', '''+@SO_TYPE+''', 
			x.task_id, d.itemno, ' + cast(@to_subwarehouse_id as varchar(20)) + ', s.Build_num, 
			case when isnull(s.Build_num,-1) = -1 then 0 else 1 end,
			case when isnull(s.Build_num,-1) = -1 then 0 else
				isnull((select sum(dlx.qty_order) 
				from '+@FromCompanyDB+'..so_master_det_line dlx 
				join '+@FromCompanyDB+'..so_master_detail dx on dx.so_line_id = dlx.so_line_id 
				join '+@FromCompanyDB+'..so_master_hdr hx on hx.so_id = dx.so_id 
				where hx.so_no = s.Build_Num),0)
			end, d.description,
			case when isnull(s.Build_num,-1) = -1 then ''R'' else ''A'' end,
			dl.cust_seq, dl.cust_part, 
			(select c.description from '+@ToCompanyDB+'..class c where c.class_id = d.class_id), 
			(select prod_group_desc from '+@ToCompanyDB+'..inv_prod_group ipg where ipg.prod_group_id in (select c.prod_group_id from '+@ToCompanyDB+'..class c where class_id = d.class_id)),
			(select c.is_pipe from '+@ToCompanyDB+'..class c where c.class_id = d.class_id), 
			dl.uom, '+@FromCompanyDB+'.dbo.SO_StuffUpchargesNotes(dl.so_line_id)
			from #xfer_companies x 
			join '+@ToCompanyDB+'..so_master_hdr h on h.so_id = x.so_id 
			join '+@ToCompanyDB+'..so_tasks s on s.id = x.task_id and isnull(s.to_subwarehouse_id,-1) = isnull(x.to_subwarehouse_id,-1)		
			join '+@ToCompanyDB+'..so_master_det_line dl on dl.so_line_id = s.so_det_line_id 
			join '+@ToCompanyDB+'..so_master_detail d on d.so_line_id = s.so_det_line_id
			where isnull(x.to_subwarehouse_id,-1) = ' + cast(isnull(@to_subwarehouse_id,-1) as varchar(50)) +
			case when @SplitTask = -1 then ' and s.id not in (select SplitTask from #xfer_companies) '
			else ' and s.id = ' + cast(@SplitTask as varchar(20)) end +
			case when @use_systm_id_to = 'T' then ' and s.PreferredXFER_ID = ''NEW'''
			else ' and s.PreferredXFER_ID = ''' + cast(@hdrIDTo as varchar(20)) + '''' end + '
			
			declare @Max int select @max = isnull(max(itemseq),0) from '+@ToCompanyDB+'..inv_xfer_det where XFER_ID = '+@hdrIDTo+'
			
			update '+@ToCompanyDB+'..inv_xfer_det set @max = itemseq = @max +1
			where itemseq is null 
			
			Commit tran
			'
			print @sql
			exec(@sql)
			
			select @sql = 'update '+@ToCompanyDB+'..so_tasks set inv_xfer_det_id = d.seq ,released = 1, status = ''A'',
			split = 0
			from '+@ToCompanyDB+'..inv_xfer_det d 
			join '+@ToCompanyDB+'..so_tasks t on t.id = d.sourceID and d.sourceType in (''SO'',''B'')
			where ' + case when @SplitTask = -1 then ' t.id not in (select SplitTask from #xfer_companies) '
			else ' t.id = ' + cast(@SplitTask as varchar(20)) end + '		
			and t.id in (select x.task_id from #xfer_companies x) ' +
			case when @use_systm_id_to = 'T' then ' and t.PreferredXFER_ID = ''NEW'''
			else ' and t.PreferredXFER_ID = ''' + cast(@hdrIDTo as varchar(20)) + '''' end 
			
			print @sql
			exec(@sql)				
		end
			
		fetch transfers into @SO_ID, @fromCompanyID, @fromWHSEID, @SO_TYPE, @to_subwarehouse_id, @SplitTask, 
		@PreferredClosedReason, @PreferredXFER_ID
	end
	
	

	close transfers
	deallocate transfers

end

--select top 5 * from tr_steelcraft_dev..inv_xfer_head order by xfer_id desc
--select top 5 * from tr_steelcraft_dev..inv_xfer_det order by seq desc
--select * from tr_suncor_dev..so_tasks where so_id = 850
--select * from tr_steelcraft_dev..working_OE_Release_Invalid_PreferredTransfer
--rollback tran


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_PO_POApproval]') and xtype = 'P ')  
 drop Procedure sp_PO_POApproval
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_PO_POApproval]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@stat varchar(50),
	@PO_ID varchar(50)

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @PO_ID=module_reference_id, @stat=status from approvals_requested where id=@id


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..PO_HEADER set KC_STATUS=''D'' where PO_ID='+@PO_ID
		--exec( @sql )
		set @sql = @sql + ' 
					update b
					set b.released_todate=isnull(b.released_todate,0)-isnull(d.qty_ordered,0)
					from '+@tr_db+'..bill_of_materials_list b 
					join '+@tr_db+'..po_detail d on d.bom_list_id=b.id
					where d.po_id='+@PO_ID
		exec( @sql )
		print @sql
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..PO_HEADER set KC_STATUS=''A'' where PO_ID='+@PO_ID
		exec( @sql )
	end
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_PO_ReturnDetails]') and xtype = 'P ')  
 drop Procedure sp_PO_ReturnDetails
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[sp_PO_ReturnDetails]
@ID int, 
@USERNAME varchar(50)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@modref varchar(100),
	@Active char(1)

	select @CompanyID=CompanyID, @modref=module_reference_id from approvals_requested where id = @ID

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	set @sql = '
		declare @REST_TYPE varchar(1)
		select @REST_TYPE=isnull(RESTOCKING_TYPE,''A'') from '+@tr_db+'..po_setup

		delete from WORKING_PO_RETURN where username='''+@USERNAME+'''		
		insert into WORKING_PO_RETURN (USERNAME, PO_DETAIL_ID, PART_NO, PART_DESC, QTY_ORDERED, UNIT_PRICE, EXT_PRICE, SUPP_PART_NO, SUPPLIER, 
		PO, WAREHOUSE, RETURN_DATE)
		SELECT distinct '''+@USERNAME+''', d.po_detail_id, CASE WHEN d.OneTime = ''T'' THEN d.ONE_TIME_PARTNO ELSE i.Part_Number END AS PART_NUM, d.PART_NO_DESC,
		d.QTY_ORDERED, d.UNIT_PRICE, d.EXTENSION, sl.SUPPLIER_PARTNO, h.SUPPLIER, h.PO, w.description, prh.date_saved
		FROM '+@tr_db+'..PO_HEADER h
		join '+@tr_db+'..PO_RETURN_HDR prh on prh.po_id=h.po_id
		JOIN '+@tr_db+'..PO_DETAIL d ON d.PO_ID = h.PO_ID 	
		join '+@tr_db+'..po_return_detail pd on pd.rtn_id=prh.rtn_id and pd.po_detail_id=d.po_detail_id
		JOIN '+@tr_db+'..PO_REC_DETAIL r on r.po_detail_id=d.po_detail_id
		join '+@tr_db+'..po_rec_header rh on rh.po_rec_id=r.po_rec_id
		join '+@tr_db+'..warehouse w on w.whse_id=h.whse_id
		LEFT OUTER JOIN '+@tr_db+'..INVENTORY i ON i.INV_ID = d.INV_ID 
		LEFT OUTER JOIN '+@tr_db+'..SUPPLIER_LIST sl ON sl.INV_ID = d.INV_ID AND sl.SUPPLIER_CODE = h.SUPPLIER and sl.WHSE_ID=h.WHSE_ID
		WHERE (ISNULL(r.QTY_RECEIVED, 0) > 0) AND isnull(rh.return_flag,''F'')=''F'' and prh.rtn_id = '+@modref+'

		delete from WORKING_PO_RETURN_DETAIL where username='''+@USERNAME+'''
		insert into WORKING_PO_RETURN_DETAIL (USERNAME, PO_DETAIL_ID, PO_REC_DETAIL_ID, RECEIVED_QTY, RETURN_QTY_REQ, QTY_RTN_TODATE, RESTOCKING_AMT,NET_RETURN_AMT, RETURN_REASON)
		SELECT '''+@USERNAME+''', d.PO_DETAIL_ID, r.PO_REC_DETAIL_ID, r.QTY_RECEIVED, prsd.return_qty_req, isnull(d.QTY_RTN_TODATE,0), prsd.restocking_amt, 
		CASE WHEN @REST_TYPE = ''P'' then 
		(isnull(prsd.return_qty_req,0)*isnull(d.unit_price,0)) - (isnull(prsd.return_qty_req,0)*isnull(d.unit_price,0))* isnull(prsd.restocking_amt,0)*.01
		else (isnull(prsd.return_qty_req,0)*isnull(d.unit_price,0))-isnull(prsd.restocking_amt,0) end,
		prr.code+'' - ''+prr.description
		FROM '+@tr_db+'..PO_HEADER h
		join '+@tr_db+'..PO_RETURN_HDR prh on prh.po_id=h.po_id
		JOIN '+@tr_db+'..PO_DETAIL d ON d.PO_ID = h.PO_ID 
		JOIN '+@tr_db+'..PO_REC_DETAIL r on r.po_detail_id=d.po_detail_id
		join '+@tr_db+'..po_return_detail prd on prd.rtn_id=prh.rtn_id and prd.po_detail_id=d.po_detail_id
		join '+@tr_db+'..PO_RETURN_SUB_DETAIL prsd on prsd.rtn_line_id=prd.rtn_line_id --prsd.po_rec_detail_id=r.po_rec_detail_id and 
		join '+@tr_db+'..po_rec_header rh on rh.po_rec_id=r.po_rec_id
		left outer join '+@tr_db+'..po_return_reason prr on prr.id=prsd.return_reason_id
		LEFT OUTER JOIN '+@tr_db+'..INVENTORY i ON i.INV_ID = d.INV_ID 
		LEFT OUTER JOIN '+@tr_db+'..SUPPLIER_LIST sl ON sl.INV_ID = d.INV_ID AND sl.SUPPLIER_CODE = h.SUPPLIER and sl.WHSE_ID=h.WHSE_ID
		WHERE (ISNULL(r.QTY_RECEIVED, 0) > 0) AND isnull(rh.return_flag,''F'')=''F'' and prh.rtn_id = '+@modref
	--print @sql
	exec( @sql )
		
end





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_PO_RMAApproval]') and xtype = 'P ')  
 drop Procedure sp_PO_RMAApproval
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[sp_PO_RMAApproval]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@stat varchar(50),
	@RTN_ID varchar(50),
	@nSql nvarchar(max),
	@KC_STATUS varchar(1)

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @RTN_ID=module_reference_id, @stat=status from approvals_requested where id=@id


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..PO_RETURN_HDR set KC_STATUS=''D'' where RTN_ID='+@RTN_ID
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		select @nSql = N'select @KC_STATUS=KC_STATUS from '+@tr_db+'..PO_RETURN_HDR where RTN_ID='+@RTN_ID+' '
		exec sp_executesql @nSql, N'@KC_STATUS varchar(1) OUT ', @KC_STATUS OUT
		
		if( @KC_STATUS = 'A' )
			goto FINISH
	
		set @sql ='
		declare @USERNAME varchar(75), @SUPPLIER varchar(10), @PO_ID int, @REST_AMT money, @REST_TYPE varchar(1), 
		@RMA_NO varchar(30), @YEAR int, @PERIOD int, @WHSE_ID int, @SO_RTN_SUB_ID int 
		
		select @USERNAME=operator_saved, @PO_ID=po_id, @RMA_NO=RMA_REFERENCE, @YEAR=GL_YEAR, @PERIOD=GL_PERIOD
		from '+@tr_db+'..po_return_hdr where rtn_id='+@RTN_ID+'

		select @SUPPLIER=supplier, @WHSE_ID=whse_id from '+@tr_db+'..po_header where po_id=@PO_ID

		set @USERNAME = ''$''+ substring(@USERNAME, 0, 10)
		
		
		delete from '+@tr_db+'..working_po_return where username=@USERNAME
		delete from '+@tr_db+'..working_po_return_detail where username=@USERNAME

		insert into '+@tr_db+'..working_po_return 
		(USERNAME, PO_DETAIL_ID, PART_NO, PART_DESC, QTY_ORDERED, UNIT_PRICE, EXT_PRICE, SUPP_PART_NO, SUPPLIER, RMA_NO) 
		select @USERNAME, rd.po_detail_id, CASE WHEN d.OneTime = ''T'' THEN d.ONE_TIME_PARTNO ELSE i.Part_Number END AS PART_NUM, d.PART_NO_DESC,
		d.QTY_ORDERED, d.UNIT_PRICE, d.EXTENSION, sl.SUPPLIER_PARTNO, @SUPPLIER, @RMA_NO
		from 
		'+@tr_db+'..po_return_detail rd 
		join '+@tr_db+'..po_detail d on d.po_detail_id=rd.po_detail_id
		LEFT OUTER JOIN '+@tr_db+'..INVENTORY i ON i.INV_ID = d.INV_ID 
		LEFT OUTER JOIN '+@tr_db+'..SUPPLIER_LIST sl ON sl.INV_ID = d.INV_ID AND sl.SUPPLIER_CODE = @SUPPLIER and sl.WHSE_ID=@WHSE_ID
		where rd.rtn_id='+@RTN_ID+'

		insert into '+@tr_db+'..working_po_return_detail
		(USERNAME, PO_DETAIL_ID, PO_REC_DETAIL_ID, RECEIVED_QTY, RETURN_QTY_REQ, QTY_RTN_TODATE, RESTOCKING_AMT, NET_RETURN_AMT, RETURN_REASON_ID)
		SELECT @USERNAME, d.PO_DETAIL_ID, -1, sum(rec.QTY_RECEIVED), rsd.return_qty_req, sum(isnull(d.QTY_RTN_TODATE,0)), rsd.restocking_amt, 0, rsd.return_reason_id
		FROM '+@tr_db+'..po_return_detail rd 
		join '+@tr_db+'..po_return_sub_detail rsd on rsd.rtn_line_id=rd.rtn_line_id
		JOIN '+@tr_db+'..PO_DETAIL d ON d.po_detail_id=rd.po_detail_id
		join '+@tr_db+'..po_rec_detail rec on rec.po_detail_id=d.po_detail_id
		LEFT OUTER JOIN '+@tr_db+'..INVENTORY i ON i.INV_ID = d.INV_ID 
		LEFT OUTER JOIN '+@tr_db+'..SUPPLIER_LIST sl ON sl.INV_ID = d.INV_ID AND sl.SUPPLIER_CODE = @SUPPLIER and sl.WHSE_ID=@WHSE_ID
		WHERE rd.rtn_id='+@RTN_ID+' 
		group by d.po_detail_id, rsd.return_qty_req, rsd.restocking_amt, rsd.return_reason_id '
		 
		--insert into '+@tr_db+'..working_po_return_detail
		--(USERNAME, PO_DETAIL_ID, PO_REC_DETAIL_ID, RECEIVED_QTY, RETURN_QTY_REQ, QTY_RTN_TODATE, RESTOCKING_AMT, NET_RETURN_AMT, RETURN_REASON_ID)
		--SELECT @USERNAME, d.PO_DETAIL_ID, rsd.PO_REC_DETAIL_ID, rec.QTY_RECEIVED, rsd.return_qty_req, isnull(rec.QTY_RTN_TODATE,0), rsd.restocking_amt, 0, rsd.return_reason_id
		--FROM '+@tr_db+'..po_return_detail rd 
		--join '+@tr_db+'..po_return_sub_detail rsd on rsd.rtn_line_id=rd.rtn_line_id
		--join '+@tr_db+'..po_rec_detail rec on rec.po_rec_detail_id=rsd.po_rec_detail_id
		--JOIN '+@tr_db+'..PO_DETAIL d ON d.po_detail_id=rd.po_detail_id
		--LEFT OUTER JOIN '+@tr_db+'..INVENTORY i ON i.INV_ID = d.INV_ID 
		--LEFT OUTER JOIN '+@tr_db+'..SUPPLIER_LIST sl ON sl.INV_ID = d.INV_ID AND sl.SUPPLIER_CODE = @SUPPLIER and sl.WHSE_ID=@WHSE_ID
		--WHERE rd.rtn_id='+@RTN_ID+'

		exec( @sql )

		BEGIN TRAN T1
		
		if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#postresult'))  
		drop table #postresult
		create table #postresult(result varchar(500))
		declare @PostResult varchar(500)
		
		set @sql = 
		'declare @SubNum int, @Message varchar(500), @USERNAME varchar(75), @YEAR int, @PERIOD int
		
		select @USERNAME=operator_saved, @YEAR=GL_YEAR, @PERIOD=GL_PERIOD
		from '+@tr_db+'..po_return_hdr where rtn_id='+@RTN_ID+'
		
		set @USERNAME = ''$''+ substring(@USERNAME, 0, 10)
		
		set @SubNum = -1 
		set @Message = '''' 
	
		exec '+@tr_db+'..sp_POReturnUpdate @USERNAME, @YEAR, @PERIOD, @SubNum output, @Message output, ''T'' 	 
		
		insert #postresult select @Message '
		
		exec(@sql)

		select @PostResult = result from #postresult
		if @PostResult != 'OK'
		begin
			ROLLBACK TRAN T1
			
			update approvals_requested set Status = 'Declined', Additional_notes = isnull(Additional_notes,'') + '***' 
			+ @PostResult where id = @id 
			set @sql = 'update ' + @tr_db + '..PO_RETURN_HDR set KC_STATUS = ''D'' where RTN_ID = ' + @RTN_ID
			exec(@sql)
		end
		else
		begin
			COMMIT TRAN T1
			set @sql = 'update s
			set s.SUPP_REQ_UPDATED=''T'', s.PO_RTN_SUB_ID=p.RTN_SUB_ID
			from '+@tr_db+'..SO_RETURN_SUB_DETAIL s 
			join '+@tr_db+'..PO_RETURN_SUB_DETAIL p on p.SO_RTN_SUB_ID=s.RTN_SUB_ID
			join '+@tr_db+'..PO_RETURN_DETAIL d on p.rtn_line_id=d.rtn_line_id
			where d.rtn_id='+@RTN_ID+'
		  
			update '+@tr_db+'..PO_RETURN_HDR set KC_STATUS=''A'' where RTN_ID='+@RTN_ID+''
			exec(@sql)
		end		
		
		FINISH:
	end
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_POApproval]') and xtype = 'P ')  
 drop Procedure sp_POApproval
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

CREATE proc [dbo].[sp_POApproval] @ID int, @Status char(1) 
as
begin
	declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@stat varchar(50),
	@REQUEST_REF_ID int,
	@MOD_REF_ID varchar(50),
	@SubmissionType varchar(1)

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @REQUEST_REF_ID=id, @MOD_REF_ID=module_reference_id, @stat=status from approvals_requested where id=@id
	

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ApprovalTBL'))
		drop table #ApprovalTBL
	create table #ApprovalTBL ( TBL varchar(1) )

	set @sql = 'declare @RefCNT int 
		select @RefCNT=count(*) from '+@tr_db+'..po_header where request_ref_id='+cast(@REQUEST_REF_ID as varchar)+' 
		if( @RefCNT > 0 )
		begin
			insert into #ApprovalTBL values (''P'')
		end

		select @RefCNT=count(*) from '+@tr_db+'..so_tasks where REQUEST_REF_ID='+cast(@MOD_REF_ID as varchar)+'
		if( @RefCNT > 0 )
		begin
			insert into #ApprovalTBL values (''S'')
		end 

		select @RefCNT=count(*) from '+@tr_db+'..rfq_det where REQUEST_REF_ID='+cast(@MOD_REF_ID as varchar)+'
		if( @RefCNT > 0 )
		begin
			insert into #ApprovalTBL values (''S'')
		end 

		select @RefCNT=count(*) from '+@tr_db+'..po_header where REV_REQUEST_REF_ID='+cast(@REQUEST_REF_ID as varchar)+'
		if( @RefCNT > 0 )
		begin
			insert into #ApprovalTBL values (''R'')
		end 
		'
	exec( @sql )
	select @SubmissionType=TBL from #ApprovalTBL
	
	print @SubmissionType
	if( @SubmissionType = 'S' )
	begin
		if( @stat = 'declined' )
		begin
			set @sql ='update '+@tr_db+'..so_tasks set STATUS=''D'' where REQUEST_REF_ID='+cast(@MOD_REF_ID as varchar)
			exec( @sql )
		end
		else --if( @stat = 'approved' )
		begin

			set @sql ='
				declare 
				@message varchar(500), @username varchar(10), @SO_ID int, @PO_ID int,
				@SO_TASKID int, @ITEM_TOTAL money, @TAX_TOTAL money, @PO_TOTAL money, @SALES_TAX float, @TAXABLE varchar(1),
				@QTY float, @PRICE money
				
				select @username=OPERATOR, @SO_TASKID=ID from '+@tr_db+'..so_tasks where REQUEST_REF_ID='+cast(@MOD_REF_ID as varchar)+'
				
				select @PO_ID=po_id from '+@tr_db+'..po_detail where so_task_id=@SO_TASKID
				if( @PO_ID is null )
				begin			
					--this only updates if the request originated from an RFQ
					update '+@tr_db+'..rfq_det set po_id = null, po_line_number = null where REQUEST_REF_ID='+cast(@MOD_REF_ID as varchar)+'
					
					exec '+@tr_db+'..sp_CreatePO @username, ''SO'', @message OUTPUT, '+cast(@MOD_REF_ID as varchar)+'
					select @SO_ID=so_id from '+@tr_db+'..so_tasks where id=@SO_TASKID
					
					update '+@tr_db+'..PO_HEADER set LAST_APPROVED_AMT = 
					isnull((select sum(isnull(Extension,0)) from '+@tr_db+'..PO_DETAIL d where d.po_id = '+@tr_db+'..PO_HEADER.po_id),0)
					where '+@tr_db+'..PO_HEADER.PO_ID in (select po_id from '+@tr_db+'..po_detail where so_task_id = @SO_TASKID)

					exec '+@tr_db+'..sp_OE_DistributeLandingCosts @SO_ID, -1, 1
		
					if( @message = ''OK'' )
					begin
						/*--updates the task status to approved*/
						update '+@tr_db+'..so_tasks set STATUS=''S'' where REQUEST_REF_ID='+cast(@MOD_REF_ID as varchar)+'					
					end
				end
				else
				begin
					declare @REVISION_NUMBER int, @REVISION_PRINTED varchar(1), @POSTATUS varchar(10), @REV_CNT int, @TASK_CNT int, 
					@REV_TYPE varchar(1), @DET_CNT int, @PO_DETAIL_ID int, @SO_TASK_ID int

					select @REVISION_NUMBER=isnull(REVISION_NUMBER,0), @REVISION_PRINTED=isnull(REVISION_PRINTED,''F''), @POSTATUS=STATUS 
					from '+@tr_db+'..po_header where po_id=@PO_ID

					/*--curses through the po detail that is attached to so tasks which have been approved*/
					declare cur cursor for
					select p.po_detail_id, s.id from '+@tr_db+'..so_tasks s
					join '+@tr_db+'..po_detail p on p.so_task_id=s.id
					where s.REQUEST_REF_ID='+cast(@MOD_REF_ID as varchar)+'

					open cur
					fetch cur into @PO_DETAIL_ID, @SO_TASK_ID
					while @@fetch_status=0
					begin

						select @REV_CNT=count(*) from '+@tr_db+'..PO_DETAIL_REVISIONS where po_detail_id=@PO_DETAIL_ID
						if( @REV_CNT = 0 )
						begin
							set @REVISION_NUMBER = 0
						end	
						
						if( @POSTATUS in (''Printed'', ''Received'' ) )
						begin
							exec '+@tr_db+'..sp_OE_PO_Revision_Update @PO_DETAIL_ID, @SO_TASK_ID /*--Revises the PO*/
						end
						else
						begin
							if( @POSTATUS = ''Open'' )
							begin
								
								declare @TASK_QTY money, @TASK_UNIT_PRICE money, @TASK_CONV_QTY money, @TASK_CONV_UNIT_PRICE money

								select @TASK_QTY=isnull(QTY_CUST,0), @TASK_CONV_QTY=isnull(QTY,0), @TASK_CONV_UNIT_PRICE=isnull(base_cost,0),
								@TASK_UNIT_PRICE=( isnull(QTY,0) / isnull(QTY_CUST,0) ) * isnull(base_cost,0)
								from '+@tr_db+'..so_tasks where id=@SO_TASK_ID

								update '+@tr_db+'..po_detail set qty_ordered=@TASK_QTY, unit_price=@TASK_UNIT_PRICE, CONVERTED_QTY=@TASK_CONV_QTY, CONV_UNIT_COST=@TASK_CONV_UNIT_PRICE, 
									EXTENSION=round(@TASK_QTY*@TASK_UNIT_PRICE, 2), REVISION_NUMBER=0 where so_task_id=@SO_TASK_ID
								
								update p
								set p.FREIGHT_TYPE=s.FREIGHT_TYPE, p.BROKERAGE_TYPE=s.BROKERAGE_TYPE, p.MISC_TYPE=s.MISC_TYPE, p.DUTY_TYPE=s.DUTY_TYPE, 
								p.FREIGHT_EST=s.FREIGHT_EST, p.BROKERAGE_EST=s.BROKERAGE_EST, p.MISC_EST=s.MISC_EST, p.DUTY_EST=s.DUTY_EST, 
								p.FREIGHT_AMT=s.FREIGHT_AMT, p.BROKERAGE_AMT=s.BROKERAGE_AMT, p.MISC_AMT=s.MISC_AMT, p.DUTY_AMT=s.DUTY_AMT,
								p.MISC_EST2=s.MISC_EST2, p.MISC_AMT2=s.MISC_AMT2, p.MISC_TYPE2=s.MISC_TYPE2
								from '+@tr_db+'..po_header p 
								left outer join '+@tr_db+'..so_landing_factors s on s.po_id=p.po_id
								where p.po_id=@PO_ID
								
							end
						end

						fetch cur into @PO_DETAIL_ID, @SO_TASK_ID
					end

					close cur
					deallocate cur

					/*--updates the task status to approved*/
						update '+@tr_db+'..so_tasks set STATUS=''S'' where REQUEST_REF_ID='+cast(@MOD_REF_ID as varchar)+'
					
					update '+@tr_db+'..PO_HEADER set LAST_APPROVED_AMT = 
					isnull((select sum(isnull(Extension,0)) from '+@tr_db+'..PO_DETAIL d where d.po_id = '+@tr_db+'..PO_HEADER.po_id),0)
					where PO_ID = @PO_ID

				end

				--exec '+@tr_db+'..sp_PORefresh @PO_ID
				'

			exec( @sql )
		end	
	end
	else if( @SubmissionType = 'P' )
	begin	
		if( @stat = 'declined' )
		begin
			set @sql ='update '+@tr_db+'..PO_HEADER set KC_STATUS=''D'' where PO_ID='+cast(@MOD_REF_ID as varchar)
			exec( @sql )
		end
		else if( @stat = 'approved' )
		begin		
			set @sql ='update '+@tr_db+'..PO_HEADER set KC_STATUS=''A'', LAST_APPROVED_AMT=PRE_APPROVED_AMT where PO_ID='+cast(@MOD_REF_ID as varchar)
			exec( @sql )
			
			set @sql ='if exists( select * from '+@tr_db+'.dbo.po_header p 
				join '+@tr_db+'.dbo.ws_pcpo_hdr w on p.po_id=w.po_id 
				where ISNULL(p.kc_subcon_status,'''') in ('''', ''A'') and p.po_id='+@MOD_REF_ID+' )
				begin
					exec '+@tr_db+'..WS_PCPO_Print '+@MOD_REF_ID+'
				end'
			exec( @sql )
		end
	end
	else if( @SubmissionType = 'R' )
	begin	
		if( @stat = 'declined' )
		begin
			set @sql ='update '+@tr_db+'..PO_HEADER set REV_KC_STATUS=''D'' where PO_ID='+cast(@MOD_REF_ID as varchar)+' 
			 update '+@tr_db+'..WORKING_PO_REV_HDR set KC_STATUS = ''D'' where po_id = '+cast(@MOD_REF_ID as varchar)
			exec( @sql )
		end
		else if( @stat = 'approved' )
		begin		
			set @sql ='update '+@tr_db+'..PO_HEADER set REV_KC_STATUS=''A'', REV_REQUEST_REF_ID=null, LAST_APPROVED_AMT=PRE_APPROVED_AMT where PO_ID='+cast(@MOD_REF_ID as varchar)+' 
			 update '+@tr_db+'..WORKING_PO_REV_HDR set KC_STATUS = ''A'' where po_id = '+cast(@MOD_REF_ID as varchar)
			exec( @sql )

			set @sql = 'declare @username varchar(50)
				select @username=operator_last_modified from '+@tr_db+'..po_header where po_id='+cast(@MOD_REF_ID as varchar)+'
				exec '+@tr_db+'..sp_PO_Revision_Update @username, '+cast(@MOD_REF_ID as varchar)+'
				update '+@tr_db+'..WORKING_PO_DETAIL_REVISIONS set REQUEST_REF_ID = null where po_id='+cast(@MOD_REF_ID as varchar)+' '				
			exec( @sql )
		end
	end
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_PriceFactorCtrlDescription]') and xtype = 'P ')  
 drop Procedure sp_PriceFactorCtrlDescription
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE procedure [dbo].[sp_PriceFactorCtrlDescription]
as

declare @tbl_CompanyServers table(
 AutoID int,
 SqlServer varchar(500),
 TreasuryDBName varchar(500))
--table used to get all the server/db names for each warehouse
insert into @tbl_CompanyServers SELECT AutoID, SQLServerName, TreasuryDBName from companies c
join PRICE_FACTOR_CTRL p on
c.AutoID = p.CompanyID

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#tbl_PriceFactorCtrl'))  
 drop table #tbl_PriceFactorCtrl
create table #tbl_PriceFactorCtrl(
	ID int,
	Company varchar(50),
	Warehouse varchar(45),
	Prefix varchar(10),
	PFValue1 float,
	PFValue2 float,
	PFValue3 float,
	PFValue4 float,
	PFValue5 float,
	PFValue6 float,
	PFValue7 float,
	PFValue8 float,
	PFValue9 float,
	PFValue10 float)


declare @ID int ,@CompanyName varchar(50),@CompanyID int,@WHSE_ID int,@Prefix varchar(10),@PFValue1 float,@PFValue2 float,@PFValue3 float,@PFValue4 float,@PFValue5 float,@PFValue6 float,@PFValue7 float,@PFValue8 float,@PFValue9 float,@PFValue10 float

Declare @str varchar(8000)

Declare aFactorControl Cursor For
select ID,CompanyID,WHSE_ID,Prefix,PFValue1,PFValue2,PFValue3,PFValue4,PFValue5,PFValue6,PFValue7,PFValue8,PFValue9,PFValue10 from PRICE_FACTOR_CTRL

open aFactorControl
Fetch aFactorControl into @ID,@CompanyID,@WHSE_ID,@Prefix,@PFValue1,@PFValue2,@PFValue3,@PFValue4,@PFValue5,@PFValue6,@PFValue7,@PFValue8,@PFValue9,@PFValue10

While @@Fetch_Status = 0
Begin
	
	
	Declare @SqlServer varchar(500)
	Declare @TreasuryDBName varchar(500)

	select @SqlServer = SqlServer, @TreasuryDBName = TreasuryDBName from @tbl_CompanyServers where AutoID = @CompanyID
	
	select @CompanyName = Company_Name from companies where AutoID = @CompanyID

	select @str = 'select '+ Convert(varchar(200),@ID ) +','''+@CompanyName+''',Description ,'''+@Prefix+''','+isnull(convert(varchar(200),@PFValue1),'null')+
				','+isnull(convert(varchar(200),@PFValue2),'null')+','+isnull(convert(varchar(200),@PFValue3),'null')+','+isnull(convert(varchar(200),@PFValue4 ),'null')+
				','+isnull(convert(varchar(200),@PFValue5),'null')+','+isnull(convert(varchar(200),@PFValue6),'null')+','+isnull(convert(varchar(200),@PFValue7 ),'null')+
				','+isnull(convert(varchar(200),@PFValue8),'null')+','+isnull(convert(varchar(200),@PFValue9),'null')+','+isnull(convert(varchar(200),@PFValue10),'null')+
				' from '+@SqlServer+'.'+@TreasuryDBName+'.dbo.Warehouse where WHSE_ID = '+ convert(varchar(200),@WHSE_ID)
	
	
	print @str
	insert into #tbl_PriceFactorCtrl
	exec(@str)
	


	Fetch aFactorControl into @ID,@CompanyID,@WHSE_ID,@Prefix,@PFValue1,@PFValue2,@PFValue3,@PFValue4,@PFValue5,@PFValue6,@PFValue7,@PFValue8,@PFValue9,@PFValue10
End


Close aFactorControl
DeAllocate aFactorControl

select * from #tbl_PriceFactorCtrl



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Projconv_InsertProspectCust]') and xtype = 'P ')  
 drop Procedure sp_Projconv_InsertProspectCust
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




create   proc sp_Projconv_InsertProspectCust
 
@TRDB   varchar(30),
@HRDB   varchar(30),
@srcID    int,
@CustomerCode  varchar (10)

as


-- declare 
-- @TRDB   varchar(30),
-- @HRDB   varchar(30),
-- @srcID    int,
-- @CustomerCode  varchar (10)
-- 
-- select @TRDB  = 'TR_bravo_57_test', @HRDB = 'hR_bravo_57_test',
--    @srcID   = 13, @CustomerCode = 'cash'


 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Lead'))  
    drop table #Lead  
    create table #Lead
      ( LeadID int )  

declare @str  varchar(800)
 select @str = 'select  customer_id  from ' + @HRDB  + '..estimate_head where Estimate_ID = ' 
       + convert(varchar(30),@srcID)

insert #Lead 
exec( @str)

declare @LeadId   int

select  @LeadID = LeadID 
from #Lead 


declare @CompanyID   int
select  @CompanyID  = AutoID  from companies
where TreasuryDBName = @TRDB


insert EST_Prospect_Customer (EstID, CompanyID, LeadId,  CustomerCode)
select @srcID, @CompanyID, @LeadID,  @CustomerCode


select * from EST_Prospect_Customer
where EstID = @srcID







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_ProjectWordMerge]') and xtype = 'P ')  
 drop Procedure sp_ProjectWordMerge
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE  Procedure [dbo].[sp_ProjectWordMerge] (@Estimate_ID int, @TRDB varchar(50), @HRDB varchar(50))

AS

--Declare @Estimate_ID int, @TRDB varchar(50), @HRDB varchar(50)
--
--Select @Estimate_ID = 34, @TRDB = 'TR_Q62', @HRDB = 'HR_Q62'

Declare @str varchar(8000)

set @str = 'Select IsNull(eh.CustomNumber,'''') as [Custom Number], IsNull(eh.ContactPhone,'''') as [Estimate Contact Phone], IsNull(eh.Cust_Name,'''') as [Estimate Name],
IsNull(eh.ContactEmail,'''') as [Estimate Contact Email], IsNull(eh.ContactFax,'''') as [Estimate Contact Fax], ISNULL(eh.Notes,'' '') as [Estimate Notes], 
ISNULL(eh.EstimateDescription,'' '') as [Estimate Description], 
ISNULL((Select Name from ' + @HRDB + '..Estimators Where Estimator_Code = eh.Estimator_Code),''None Assigned'') as Estimator,
Convert(varchar(12),eh.EstimateDate) as [Estimate Date], eh.LegalDescription as [Estimate Legal Description],eh.EstimateSize as [Estimate Size],
Case When EST_Type = ''C'' Then ''Customer'' When EST_Type = ''P'' then ''Prospect'' Else ''Internal'' End as [Estimate Type],
IsNull(p.pri_proj_id,0) as [Project Number], 
IsNull(p.pri_desc,'''') as [Project Description],
IsNull(p.pri_ship_name,'''') as [Shipping Name],
RTRIM(IsNull(p.pri_ship_address1,'''') + '' '' + IsNull(p.pri_ship_address2,'''') + '' '' + IsNull(p.pri_ship_address3,''''))  as [Shipping Street],
IsNull(p.pri_ship_city,'''') as [Shipping City], IsNull(p.pri_ship_prov,'''') as [Shipping State Prov],
IsNull(p.pri_ship_postal,'''') as [Shipping Zip Postal Code],
C.Customer_code, Case When EST_Type = ''C'' Then C.Name When EST_Type = ''P'' Then pr.KnownAs Else ''Internal'' End as [Name],
Case When EST_Type = ''C'' Then IsNull(C.Bill_Address_1,'''') + '' '' + IsNull(C.Bill_Address_2,'''') + '' '' + IsNull(C.Bill_Address_3,'''') 
     When EST_Type = ''P'' Then IsNull(pr.BusinessStreet,'''') Else ''Internal'' End as [Street],
Case When EST_Type = ''C'' Then IsNull(C.Bill_City,'''') When EST_Type = ''P'' Then IsNull(pr.BusinessCity,'''') Else ''Internal'' End as [City],
Case When EST_Type = ''C'' Then IsNull(C.Bill_State,'''') When EST_Type = ''P'' Then IsNull(pr.BusinessState,'''') Else ''Internal'' End as [State Prov],
Case When EST_Type = ''C'' Then IsNull(C.Bill_Zip,'''') When EST_Type = ''P'' Then IsNull(pr.BusinessPostalCode,'''') Else ''Internal'' End as [Zip Postal Code],
Case When EST_Type = ''C'' Then IsNull(C.Bill_Country_Code,'''') When EST_Type = ''P'' Then IsNull(pr.BusinessCountry,'''') Else ''Internal'' End as [Country],
Case When EST_Type = ''C'' Then IsNull(C.Telephone,'''') When EST_Type = ''P'' Then IsNull(pr.BusinessTelephoneNumber,'''') Else ''Internal'' End as [Phone],
Case When EST_Type = ''C'' Then IsNull(C.Fax,'''') When EST_Type = ''P'' Then IsNull(pr.BusinessFaxNumber,'''') Else ''Internal'' End as [Fax], 
Case When EST_Type = ''C'' Then IsNull(C.Cust_Email,'''') When EST_Type = ''P'' Then IsNull(pr.Email1Address,'''') Else ''Internal'' End as [Email]
from ' + @HRDB + '..project_head eh 
left join ' + @HRDB + '..proj_id p on p.pri_num = eh.pri_num
left outer join ' + @TRDB + '..Customers C on eh.Customer_ID = C.Customer_ID
left outer join Contact pr on eh.Customer_ID = pr.ID
Where eh.Estimate_ID = ' + convert(varchar(50),@Estimate_ID)

exec(@str)






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Prospect_AddNewProspect]') and xtype = 'P ')  
 drop Procedure sp_Prospect_AddNewProspect
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE  Procedure [dbo].[sp_Prospect_AddNewProspect](@UserID int, @Corporate bit, @ParentID int, @Flavour varchar(15))
AS

if(@ParentID is not null)
	Begin	
		insert into contact (Type, KnownAs, Owner_ID, PersonalEmailOnly, BusinessStreet, BusinessCity, BusinessPostalCode, 
							 BusinessState, BusinessCountry, BusinessTelephoneNumber, BusinessFaxNumber, Email1Address, BusinessCompany)
		Select 'Prospect', '', @UserId, 1, IsNull(BusinessStreet,IsNull(HomeStreet,IsNull(OtherStreet,''))), 
		IsNull(BusinessCity,IsNull(HomeCity,IsNull(OtherCity,''))), 
		IsNull(BusinessPostalCode,IsNull(HomePostalCode,IsNull(OtherPostalCode,''))),
		IsNull(BusinessState,IsNull(HomeState,IsNull(OtherState,''))),
		IsNull(BusinessCountry,IsNull(HomeCountry,IsNull(OtherCountry,''))),
		IsNull(BusinessTelephoneNumber,IsNull(Business2TelephoneNumber,IsNull(HomeTelephoneNumber,IsNull(Home2TelephoneNumber,IsNull(OtherTelephoneNumber,''))))),
		IsNull(BusinessFaxNumber,IsNull(HomeFaxNumber,IsNull(OtherFaxNumber,''))),
		IsNull(Email1Address,IsNull(Email2Address,IsNull(Email3Address,''))),
		IsNull(BusinessCompany,IsNull(KnownAs,''))
		From Contact Where ID = (Select Contact_ID from scLead WHere ID = @ParentID)
	End
else
	Begin
		insert into contact (Type, KnownAs, Owner_ID, PersonalEmailOnly) 
		Values ('Prospect', '', @UserID, 1)
	End

--select @@Identity [ID]

Declare @ContactID int

Select @ContactID = @@Identity

insert sclead(IncompleteYN, DateCreated, DateModified, CorporateYN, ParentID, Contact_ID) 
select 0, getdate(), getdate(), @Corporate, @ParentID, (select @@Identity)

Declare @ID int

Select @ID = @@Identity

insert scUDFStore(OwnerID, OwnerTableName) Values (@ContactID, 'Contact')
 
insert into working_FilteredLeads (LeadID, UserID, Flavour) Values (@ID, @UserID, @Flavour)

insert into working_sc_items (original_contact_id, contact_id, item_id, item_type) Values (@UserID, @UserID, @ID, 'L')

Select @ContactID [ContactID], @ID [LeadID]





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_ProspectContacts]') and xtype = 'P ')  
 drop Procedure sp_ProspectContacts
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


Create Procedure sp_ProspectContacts (@LeadID int)

as

SELECT     c.ID, c.KnownAs [Known As]
FROM         scLead l JOIN
                      Contact c ON l.Contact_ID = c.ID
WHERE     l.id = @LeadID
UNION
SELECT     c.ID, c.KnownAs [Known As]
FROM         scLead l JOIN
                      Contact c ON l.Contact_ID = c.ID
WHERE     l.ParentID = @LeadID




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Quote_Load_Working_QuoteNotificationList]') and xtype = 'P ')  
 drop Procedure sp_Quote_Load_Working_QuoteNotificationList
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--/****** Object:  StoredProcedure [dbo].[sp_Quote_Load_Working_QuoteNotificationList]    Script Date: 08/12/2007 10:44:51 ******/
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER ON
--GO
CREATE Procedure [dbo].[sp_Quote_Load_Working_QuoteNotificationList] (@UserID int, @Type varchar(2), @TypeID int)

AS

--Declare @UserID int, @Type varchar(2), @TypeID int
--Select @UserID = 37, @Type = 'A', @TypeID = -1

declare @Module_Reference_ID varchar(100)

if @Type = 'Q'
	Begin
		Select @Module_Reference_ID = Convert(varchar(100),@TypeID)
	End
Else
	Begin
		Select @Module_Reference_ID = '%'
	End

Delete working_QuoteNotificationMgr Where UserID = @UserID

---Quote Options
insert into working_QuoteNotificationMgr (AR_ID, Notes, [Description], [Status], ApprovalCount, DisapprovalCount, 
										  Holding, Community, Phase, Model, Elevation, ElevationPlan, Lot, Block, [Plan], 
										  PurchaserName, QuoteID, QuoteStatus, QuoteApprovalStatus, QuoteDate, [Option], 
										  OptionType, Qty, Adjustment, Allowance, Price, Total, Action_Committed, [Type],
										  UserID)
select  /*server*/ar.ID[AR_ID],IsNull(ar.Last_Changed_By_Notes,'') [Notes], ar.Description [Description], ar.Status [Status],
			ar.Current_Approval_Count [ApprovalCount], ar.Current_Disapproval_Count [DisapprovalCount],
		/*land*/sc.HoldingDesc[Holding],sc.CommunityDesc[Community],sc.ProjectDesc[Phase],
		/*home*/sc.ModelNameDesc[Model],isnull(sc.ModelDesc,' ')[Elevation],isnull(hm.Plan_Num,' ')[Elevation Plan],
		/*lot*/ isnull(sc.LotDesc,' ')[Lot],isnull(sc.BlockDesc,' ')[Block],isnull(sc.PlanNo,' ')[Plan],
		/*quote stuff*/isnull(ct.KnownAs,' ')[Purchaser Name],sc.ID[Quote#],
			case when sc.status = 'S' then 'Sold' else case when sc.status = 'C' then 'Construction' else 
			case when sc.status = 'X' then 'Cancelled' else 'Quote' end end  end[Quote Status],
		isnull(sc.QuoteApprovalStatus,' ')[Quote Approval Status],isnull(sc.Created,' ')[Quote Date],
		ho.Short_Desc[Option],'Quote Option'[Option Type],qo.UnitQty[Qty],qo.Adjustments[Adjustment],qo.AllowanceTotal[Allowance],qo.UnitPrice[Price],qo.PayableTotal[Total],
		ar.Action_Committed, 'Quote Option',@UserID
from Approvals_Requested ar 
join Approval_Topic at on at.ID = ar.AT_ID
join scQuoteOptions qo on ar.Module_Reference_ID = Convert(varchar(100),qo.ID )
join scquote sc on sc.ID = qo.QuoteID
join HB_Model hm on hm.MODEL_ID = sc.ModelID and hm.MODEL_NAME_ID = sc.ModelNameID and hm.RAW_LAND_CD = sc.HoldingID
join scLead ld on ld.ID = sc.LeadID
join contact ct on ld.Contact_ID = ct.ID
join HB_Options ho on ho.Option_ID = qo.Option_ID
where IsNull(ar.Requestor_ID,-1) = @UserID and at.Module = 'SalesCenter' /*and ar.Action_Committed = 0*/ and at.ID in (1,2,3,4,5,6,7,8,9)
		And Convert(varchar(50),qo.QuoteID) Like @Module_Reference_ID

---Custom Quote Options
insert into working_QuoteNotificationMgr (AR_ID, Notes, [Description], [Status], ApprovalCount, DisapprovalCount, 
										  Holding, Community, Phase, Model, Elevation, ElevationPlan, Lot, Block, [Plan], 
										  PurchaserName, QuoteID, QuoteStatus, QuoteApprovalStatus, QuoteDate, [Option], 
										  OptionType, Qty, Adjustment, Allowance, Price, Total, Action_Committed, [Type],
										  UserID)
select  /*server*/ar.ID[AR_ID],IsNull(ar.Last_Changed_By_Notes,'') [Notes], ar.Description [Description], ar.Status [Status],
			ar.Current_Approval_Count [ApprovalCount], ar.Current_Disapproval_Count [DisapprovalCount],
		/*land*/sc.HoldingDesc[Holding],sc.CommunityDesc[Community],sc.ProjectDesc[Phase],
		/*home*/sc.ModelNameDesc[Model],isnull(sc.ModelDesc,' ')[Elevation],isnull(hm.Plan_Num,' ')[Elevation Plan],
		/*lot*/ isnull(sc.LotDesc,' ')[Lot],isnull(sc.BlockDesc,' ')[Block],isnull(sc.PlanNo,' ')[Plan],
		/*quote stuff*/isnull(ct.KnownAs,' ')[Purchaser Name],sc.ID[Quote#],
			case when sc.status = 'S' then 'Sold' else case when sc.status = 'C' then 'Construction' else 
			case when sc.status = 'X' then 'Cancelled' else 'Quote' end end  end[Quote Status],
		isnull(sc.QuoteApprovalStatus,' ')[Quote Approval Status],isnull(sc.Created,' ')[Quote Date],
		qc.ShortDescription[Option],'Quote Custom'[Option Type],1[Qty],null[Adjustment],null[Allowance],isnull(qc.Price,0)[Price],isnull(qc.Price,0)[Total],
		ar.Action_Committed, 'Quote Custom',@UserID
from Approvals_Requested ar 
join Approval_Topic at on at.ID = ar.AT_ID
join scQuoteCustom qc on ar.Module_Reference_ID = Convert(varchar(100),qc.ID )
join scquote sc on sc.ID = qc.QuoteID
join HB_Model hm on hm.MODEL_ID = sc.ModelID and hm.MODEL_NAME_ID = sc.ModelNameID and hm.RAW_LAND_CD = sc.HoldingID
join scLead ld on ld.ID = sc.LeadID
join contact ct on ld.Contact_ID = ct.ID
where IsNull(ar.Requestor_ID,-1) = @UserID and at.Module = 'SalesCenter' /*and ar.Action_Committed = 0*/ and at.ID in (10,11)
		And Convert(varchar(50),qc.QuoteID) Like @Module_Reference_ID

--Quote
insert into working_QuoteNotificationMgr (AR_ID, Notes, [Description], [Status], ApprovalCount, DisapprovalCount, 
										  Holding, Community, Phase, Model, Elevation, ElevationPlan, Lot, Block, [Plan], 
										  PurchaserName, QuoteID, QuoteStatus, QuoteApprovalStatus, QuoteDate, [Option], 
										  OptionType, Qty, Adjustment, Allowance, Price, Total, Action_Committed, [Type],
										  UserID)
select  /*server*/ar.ID[AR_ID],IsNull(ar.Last_Changed_By_Notes,'') [Notes], ar.Description [Description], ar.Status [Status],
			ar.Current_Approval_Count [ApprovalCount], ar.Current_Disapproval_Count [DisapprovalCount],
		/*land*/sc.HoldingDesc[Holding],sc.CommunityDesc[Community],sc.ProjectDesc[Phase],
		/*home*/sc.ModelNameDesc[Model],isnull(sc.ModelDesc,' ')[Elevation],isnull(hm.Plan_Num,' ')[Elevation Plan],
		/*lot*/ isnull(sc.LotDesc,' ')[Lot],isnull(sc.BlockDesc,' ')[Block],isnull(sc.PlanNo,' ')[Plan],
		/*quote stuff*/isnull(ct.KnownAs,' ')[Purchaser Name],sc.ID[Quote#],
			case when sc.status = 'S' then 'Sold' else case when sc.status = 'C' then 'Construction' else 
			case when sc.status = 'X' then 'Cancelled' else 'Quote' end end  end[Quote Status],
		isnull(sc.QuoteApprovalStatus,' ')[Quote Approval Status],isnull(sc.Created,' ')[Quote Date],
		null[Option],'Quote'[Option Type],null[Qty],null[Adjustment],null[Allowance],sc.FinalPrice[Price],sc.FinalPrice[Total],
		ar.Action_Committed, 'Quote',@UserID
from Approvals_Requested ar 
join Approval_Topic at on at.ID = ar.AT_ID
join scquote sc on ar.Module_Reference_ID = Convert(varchar(100),sc.ID )
join HB_Model hm on hm.MODEL_ID = sc.ModelID and hm.MODEL_NAME_ID = sc.ModelNameID and hm.RAW_LAND_CD = sc.HoldingID
join scLead ld on ld.ID = sc.LeadID
join contact ct on ld.Contact_ID = ct.ID
where IsNull(ar.Requestor_ID,-1) = @UserID and at.Module = 'SalesCenter' /*and ar.Action_Committed = 0 */and at.ID in (12,13)
		And ar.Module_Reference_ID Like @Module_Reference_ID

--Select * From working_QuoteNotificationMgr


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_QuoteCustom_ActionCommit]') and xtype = 'P ')  
 drop Procedure sp_QuoteCustom_ActionCommit
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
Create Procedure sp_QuoteCustom_ActionCommit(@AR_ID int)

AS

Declare @QuoteCustomID int Select @QuoteCustomID = Convert(int,Module_Reference_ID) From Approvals_Requested Where ID = @AR_ID

Update scQuoteCustom
Set ShortDescription = qcal.ShortDescription, 
	Description = qcal.Description, 
	PriceIsKnownYN = qcal.PriceIsKnownYN, 
	Price = qcal.Price, 
	InventoryID = qcal.InventoryID, 
	Confirmation = qcal.Confirmation, 
	ApprovalID = qcal.ApprovalID, 
	Approved = 0
From scQuoteCustom_ApprovalLog qcal, scQuoteCustom sqc
Where qcal.QuoteCustomID = @QuoteCustomID and sqc.ID = @QuoteCustomID 
		and qcal.CreateDate = (Select Max(CreateDate) From scQuoteCustom_ApprovalLog Where QuoteCustomID = @QuoteCustomID)

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_QuoteOptions_InsertOption]') and xtype = 'P ')  
 drop Procedure sp_QuoteOptions_InsertOption
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure [dbo].[sp_QuoteOptions_InsertOption]
(@QuoteID int, @HoldingID int , @ModelID int, @Option_ID int, @ParentID int)

AS
-- sp_QuoteOptions_InsertOption 1132, 50016, 115, 382, -1


--Declare @QuoteID int, @HoldingID int , @ModelID int, @Option_ID int, @ParentID int
--Select @QuoteID = 1132, @HoldingID = 50016, @ModelID = 115, @Option_ID = 382, @ParentID = 11914

Declare @HBM_ID int, @OptionParentID int

Select @HBM_ID = HBM_ID From HB_Options Where Option_ID = @Option_ID

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#OptionList'))  
 drop table #OptionList
create table #OptionList
(Option_ID int not null)

if @HBM_ID Is Not Null
	Begin		
		Insert Into #OptionList(Option_ID)
		Select Option_ID From HB_Elv_Opt Where Model_ID = @HBM_ID and Raw_Land_CD = -1 AND Attached_YN = 'Y'
	End

Insert Into scQuoteOptions (QuoteID, Alternate, HB_Elv_Opt_Id, Option_ID, OriginalOption_ID, Major_ID, Sub_ID, UnitOfMeasure, 
IsStructural, UnitQty, UnitPrice, UnitTotal, PayableTotal, DepositPercent, DepositTotal, Removed, ParentID, HBM_ID, 
AttributeCost, Adjustments, Confirmation, ApprovalID, Approved, ConfirmationDeadlineDays, HB_OrderPoint_ID, 
HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID,OptionTotal, OrgUnitQty, OrgUnitPrice, OrgUnitTotal, PriceExtra)
Select @QuoteID as QuoteID, 'No' as Alternate,HOE.ID, HO.OPTION_ID, HO.OPTION_ID, HO.MAJ_GROUP_ID, HO.SUB_GROUP_ID,
HO.UOM, HO.IS_STRUCTURAL, IsNull(HOE.QTY,0), IsNull(HOE.PRC_SELL,0), IsNull((HOE.QTY * HOE.PRC_SELL),0) as UnitTotal,Case When PRC_EXTRA_YN = 'Y' Then IsNull((HOE.QTY * HOE.PRC_SELL),0) Else 0 End, 0, 0, 0,
@ParentID,
HO.HBM_ID, 0, 0, 0, -1, 0, IsNull(HOE.ConfirmationDeadlineDays,0),IsNull(HOE.HB_OrderPoint_ID,-1), IsNull(HOE.HB_ConfirmationPoint_ID,-1),
IsNull(HOE.HB_ScheduleDeliveryPoint_ID,-1),0, Case When PRC_EXTRA_YN = 'Y' Then 0 Else IsNull(HOE.QTY,0) End, Case When PRC_EXTRA_YN = 'Y' Then 0 Else IsNull(HOE.PRC_SELL,0) End, Case When PRC_EXTRA_YN = 'Y' Then 0 Else IsNull((HOE.QTY * HOE.PRC_SELL),0) End, PRC_EXTRA_YN
From HB_OPTIONS HO Left Outer Join HB_ELV_Opt HOE ON HO.OPTION_ID = HOE.OPTION_ID
Where HOE.Model_ID = @ModelID And HOE.Raw_Land_CD = @HoldingID And HO.Option_ID in (Select Option_ID from #OptionList)




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_QuotePrintDetail]') and xtype = 'P ')  
 drop Procedure sp_QuotePrintDetail
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


--exec sp_QuotePrintDetail 'hr_alcolive',13154
CREATE   proc sp_QuotePrintDetail
 @HR varchar(500),
 @Estimate_ID varchar(50)
as

exec('
select d.* 
from ' + @HR + '..Quoteheader h
join ' + @HR + '..QuoteDetail d
on h.id = d.QuoteHeader_ID
where h.Estimate_ID = ' + @Estimate_ID+'
order by GroupNumber,SequenceNumber')





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_QuotePrintHeader]') and xtype = 'P ')  
 drop Procedure sp_QuotePrintHeader
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
/****** Object:  StoredProcedure [dbo].[sp_QuotePrintHeader]    Script Date: 11/12/2007 09:25:15 ******/
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER OFF
--GO


--exec sp_QuotePrintHeader 'hr_alcolive', 'tr_alcoprelive',13154, 13
CREATE   proc [dbo].[sp_QuotePrintHeader]
 @HR varchar(500),
 @TR varchar(500),
 @Estimate_ID varchar(50),
 @ID int
as

--Declare @HR varchar(500),
-- @TR varchar(500),
-- @Estimate_ID varchar(50),
-- @ID int
--
--Select @HR = 'HR_Q62',
-- @TR = 'TR_Q62',
-- @Estimate_ID = 53,
-- @ID = 15

declare @sql_str varchar(8000)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#tmpout'))
drop table #tmpout

create table #tmpout(
Custom_Number varchar(50) null,
Estimate_Contact_Phone varchar(20) null,
Estimate_Name varchar(80) null,
Estimate_Contact_Email varchar(200) null,
Estimate_Contact_Fax varchar(20) null,
Estimate_Notes varchar(2000) null,
Estimate_Description varchar(1000) null,
Estimator varchar(50) null,
Estimate_Date datetime null,
Estimate_Legal_Description varchar(200) null,
Estimate_Size varchar(200) null,
Estimate_Type varchar(8) null,
Project_Number int null,
Project_Description varchar(1000) null,
Shipping_Name char(40) null,
Shipping_Street varchar(122) null,
Shipping_City char(20) null,
Shipping_State_Prov char(2) null,
Shipping_Zip_Postal_Code char(10) null,
Customer_code varchar(10) null,
[Name] varchar(50) null,
Street varchar(255) null,
City varchar(64) null,
State_Prov varchar(32) null,
Zip_Postal_Code varchar(32) null,
Country varchar(64) null,
Phone varchar(64) null,
Fax varchar(64) null,
Email varchar(128) null)

set @sql_str = 'Select IsNull(eh.CustomNumber,'''') as [Custom Number], IsNull(eh.ContactPhone,'''') as [Estimate Contact Phone], IsNull(eh.Cust_Name,'''') as [Estimate Name],
IsNull(eh.ContactEmail,'''') as [Estimate Contact Email], IsNull(eh.ContactFax,'''') as [Estimate Contact Fax], ISNULL(eh.Notes,'' '') as [Estimate Notes], 
ISNULL(eh.EstimateDescription,'' '') as [Estimate Description], 
ISNULL((Select Name from ' + @HR + '..Estimators Where Estimator_Code = eh.Estimator_Code),''None Assigned'') as Estimator,
Convert(varchar(12),eh.EstimateDate) as [Estimate Date], eh.LegalDescription as [Estimate Legal Description],eh.EstimateSize as [Estimate Size],
Case When EST_Type = ''C'' Then ''Customer'' When EST_Type = ''P'' then ''Prospect'' Else ''Internal'' End as [Estimate Type],
IsNull(p.pri_proj_id,0) as [Project Number], 
IsNull(p.pri_desc,'''') as [Project Description],
IsNull(p.pri_ship_name,'''') as [Shipping Name],
RTRIM(IsNull(p.pri_ship_address1,'''') + '' '' + IsNull(p.pri_ship_address2,'''') + '' '' + IsNull(p.pri_ship_address3,''''))  as [Shipping Street],
IsNull(p.pri_ship_city,'''') as [Shipping City], IsNull(p.pri_ship_prov,'''') as [Shipping State Prov],
IsNull(p.pri_ship_postal,'''') as [Shipping Zip Postal Code],
C.Customer_code, Case When EST_Type = ''C'' Then C.Name When EST_Type = ''P'' Then pr.KnownAs Else ''Internal'' End as [Name],
Case When EST_Type = ''C'' Then IsNull(C.Bill_Address_1,'''') + '' '' + IsNull(C.Bill_Address_2,'''') + '' '' + IsNull(C.Bill_Address_3,'''') 
     When EST_Type = ''P'' Then IsNull(pr.BusinessStreet,'''') Else ''Internal'' End as [Street],
Case When EST_Type = ''C'' Then IsNull(C.Bill_City,'''') When EST_Type = ''P'' Then IsNull(pr.BusinessCity,'''') Else ''Internal'' End as [City],
Case When EST_Type = ''C'' Then IsNull(C.Bill_State,'''') When EST_Type = ''P'' Then IsNull(pr.BusinessState,'''') Else ''Internal'' End as [State Prov],
Case When EST_Type = ''C'' Then IsNull(C.Bill_Zip,'''') When EST_Type = ''P'' Then IsNull(pr.BusinessPostalCode,'''') Else ''Internal'' End as [Zip Postal Code],
Case When EST_Type = ''C'' Then IsNull(C.Bill_Country_Code,'''') When EST_Type = ''P'' Then IsNull(pr.BusinessCountry,'''') Else ''Internal'' End as [Country],
Case When EST_Type = ''C'' Then IsNull(C.Telephone,'''') When EST_Type = ''P'' Then IsNull(pr.BusinessTelephoneNumber,'''') Else ''Internal'' End as [Phone],
Case When EST_Type = ''C'' Then IsNull(C.Fax,'''') When EST_Type = ''P'' Then IsNull(pr.BusinessFaxNumber,'''') Else ''Internal'' End as [Fax], 
Case When EST_Type = ''C'' Then IsNull(C.Cust_Email,'''') When EST_Type = ''P'' Then IsNull(pr.Email1Address,'''') Else ''Internal'' End as [Email]
from ' + @HR + '..estimate_head eh 
left join ' + @HR + '..proj_id p on p.pri_num = eh.pri_num
left outer join ' + @TR + '..Customers C on eh.Customer_ID = C.Customer_ID
left outer join Contact pr on eh.Customer_ID = pr.ID
Where eh.Estimate_ID = ' + convert(varchar(50),@Estimate_ID)

insert into #tmpout(Custom_Number, Estimate_Contact_Phone, Estimate_Name, Estimate_Contact_Email, Estimate_Contact_Fax, Estimate_Notes, 
Estimate_Description, Estimator, Estimate_Date, Estimate_Legal_Description, Estimate_Size, Estimate_Type, 
Project_Number, Project_Description, Shipping_Name, Shipping_Street, Shipping_City, Shipping_State_Prov, 
Shipping_Zip_Postal_Code, Customer_code, [Name], Street, City, State_Prov, Zip_Postal_Code, Country, Phone, Fax, Email)
exec(@sql_str)
--exec sp_estimatewordmerge 17,'tr_Q62','hr_Q62'

set @sql_str='
select h.*, t.*
from '+@HR+'..QuoteHeader h
join #tmpout t on h.estimate_id=t.custom_number
where h.ID='+cast(@ID as varchar(50))
exec(@sql_str)




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_QuoteUpdateSubStatus]') and xtype = 'P ')  
 drop Procedure sp_QuoteUpdateSubStatus
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_QuoteUpdateSubStatus]
 @QuoteID int
as

declare @OutstandingConditions int, @TotalConditions int, @SubStatusID int

select @TotalConditions = count(*)
from scQuoteConditions
where QuoteID = @QuoteID
and QuoteID in (select id from scQuote where Status = 'S')

select @OutstandingConditions = count(*)
from scQuoteConditions
where QuoteID = @QuoteID
and isNull(Status,0) = 0
and QuoteID in (select id from scQuote where Status = 'S')

select @TotalConditions = @TotalConditions + count(*)
from scQuoteBuilderConditions
where QuoteID = @QuoteID
and QuoteID in (select id from scQuote where Status = 'S')

select @OutstandingConditions = @OutstandingConditions + count(*)
from scQuoteBuilderConditions
where QuoteID = @QuoteID
and isNull(Status,0) = 0
and QuoteID in (select id from scQuote where Status = 'S')

if isnull(@TotalConditions,0) > 0
begin
 if isNull(@OutstandingConditions,0) = 0
 begin
  select @SubStatusID = id from scQuoteSubStatus where SubDescription = 'Subjects Removed'
 end
 else
 begin
  select @SubStatusID = id from scQuoteSubStatus where SubDescription = 'Subjects Outstanding'
 end
end 
else
begin
 select @SubStatusID = null
end

Select @SubStatusID




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_ReflexLoadCompanies]') and xtype = 'P ')  
 drop Procedure sp_ReflexLoadCompanies
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_ReflexLoadCompanies] @Username varchar(500) as
--declare @Username varchar(500) select @username = 'tkaal'

declare @ContactId int, @execStr varchar(8000)
select @ContactId = id from contact where Windows_Login = @username 

delete UserCompanies where [User] = @username

declare @Company_Name varchar(100), @ID int, @server varchar(500), @DB varchar(500)
declare CompanyCursor cursor
read_only
for
	select Company_Name, AutoID, CompanyServerName, TreasuryDBName
	from companies
	where Active = 1

	open CompanyCursor 
	fetch next from CompanyCursor into @Company_Name, @ID, @server, @DB
	while (@@fetch_status <> -1)
	begin
		if (@@fetch_status <> -2)
		begin
			
			select @execStr = 'declare @InCompany int, @MLname varchar(20)
			select @InCompany = count(*), @MLname = max([name]) from ['+@server+'].' +@DB+'.dbo.mluser where ContactID = ' + cast(@ContactId as varchar(20)) + '
			if isnull(@InCompany,0) > 0 
				insert UserCompanies([User], CompanyID, CompanyName, MLUser)
				select ''' + @username + ''', ' + cast(@ID as varchar(20)) + ', ''' + @Company_Name + ''', @MLname '
			print @execStr
			exec(@execStr)
			
		end
	fetch next from CompanyCursor into @Company_Name, @ID, @server, @DB
end

close CompanyCursor
deallocate CompanyCursor

select * from UserCompanies where [User] = @username order by CompanyName




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_ReflexToolsReIndexAll]') and xtype = 'P ')  
 drop Procedure sp_ReflexToolsReIndexAll
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE PROC sp_ReflexToolsReIndexAll
AS
BEGIN

declare @DB varchar(1000)

DECLARE DBCursor CURSOR FOR 
SELECT dbname FROM dbs
OPEN DBCursor  

FETCH NEXT FROM DBCursor INTO @DB
WHILE @@FETCH_STATUS = 0 
BEGIN 

exec('

DECLARE @TableName varchar(255)  

DECLARE TableCursor CURSOR FOR 
SELECT table_name FROM '+ @DB +'.information_schema.tables 
WHERE table_type = ''base table''

OPEN TableCursor  

FETCH NEXT FROM TableCursor INTO @TableName 
WHILE @@FETCH_STATUS = 0 
BEGIN 
 print ''Re-indexing ' + @DB + ''' + ''..'' + @TableName
 declare @str varchar(1000)
 select @str = '''' + ''' + @DB + ''' + ''.dbo.'' + @TableName + ''''
 DBCC DBREINDEX(@str,'' '',90) 


FETCH NEXT FROM TableCursor INTO @TableName 
END 
CLOSE TableCursor 
DEALLOCATE TableCursor')


FETCH NEXT FROM DBCursor INTO @DB
END 
CLOSE DBCursor
DEALLOCATE DBCursor

END


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_RemoveListboxSelection]') and xtype = 'P ')  
 drop Procedure sp_RemoveListboxSelection
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





CREATE proc sp_RemoveListboxSelection
 @Guid varchar(100),
 @ReportControlID int,
 @ValueItem varchar(500)
as

delete session_listbox_selections
where Guid = @Guid
and ReportControlID = @ReportControlID
and ValueItem = @ValueItem 







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_renamediagram]') and xtype = 'P ')  
 drop Procedure sp_renamediagram
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

	CREATE PROCEDURE dbo.sp_renamediagram
	(
		@diagramname 		sysname,
		@owner_id		int	= null,
		@new_diagramname	sysname
	
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
		declare @DiagIdTarg		int
		declare @u_name			sysname
		if((@diagramname is null) or (@new_diagramname is null))
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end
	
		EXECUTE AS CALLER;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		REVERT;
	
		select @u_name = USER_NAME(@owner_id)
	
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)
			return -3
		end
	
		-- if((@u_name is not null) and (@new_diagramname = @diagramname))	-- nothing will change
		--	return 0;
	
		if(@u_name is null)
			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @new_diagramname
		else
			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @owner_id and name = @new_diagramname
	
		if((@DiagIdTarg is not null) and  @DiagId <> @DiagIdTarg)
		begin
			RAISERROR ('The name is already used.', 16, 1);
			return -2
		end		
	
		if(@u_name is null)
			update dbo.sysdiagrams set [name] = @new_diagramname, principal_id = @theId where diagram_id = @DiagId
		else
			update dbo.sysdiagrams set [name] = @new_diagramname where diagram_id = @DiagId
		return 0
	END
	

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Report_Overrides]') and xtype = 'P ')  
 drop Procedure sp_Report_Overrides
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[sp_Report_Overrides] (@username  varchar(50), @CompanyID int, @DBModule_ID int, @SubReportGroupID int, @ReportType varchar(1), @OverrideGroup varchar(1))

as

--declare @username  varchar(50), @CompanyID int, @DBModule_ID int, @SubReportGroupID int, @ReportType varchar(1), @OverrideGroup varchar(1)
--select @username ='mike', @CompanyID = 12, @DBModule_ID = null, @SubReportGroupID = null, @ReportType = null, @OverrideGroup = null

Declare @TRDB varchar(500), @TRServer varchar(500), @sSql varchar(8000)
Select @TRDB = TreasuryDBName, @TRServer = SQLServerName From COMPANIES where @CompanyID = AutoID

If exists (select * from tempdb..sysobjects Where id = object_id(N'tempdb..#ReportIDs'))  
Drop Table #ReportIDs

Create Table #ReportIDs
(
  ReportID int null,
  Rpt_AliasID int null
)

If exists (select * from tempdb..sysobjects Where id = object_id(N'tempdb..#ReportOverides'))
Drop Table #ReportOverides

Create Table #ReportOverides
(
  Rpt_AliasID int null,
  OverrideID int null
)

If @ReportType = 'R'
Begin
	Insert Into #ReportIDs(ReportID, Rpt_AliasID)
	Select Distinct r.ReportID, r.Rpt_AliasID
	From REPORTS r
	Inner Join Report_Sub_Groups g on r.SubReportGroupID = g.SubReportGroupID
	Inner Join Report_Modules m on m.DBModule_ID = g.DBModule_ID
	Where g.DBModule_ID = Case When IsNull(@DBModule_ID,-1) = -1 Then g.DBModule_ID Else @DBModule_ID End
	and r.SubReportGroupID = Case When ISNULL(@SubReportGroupID,-1) = -1 Then r.SubReportGroupID Else @SubReportGroupID End
	and r.OverrideGroup = Case When ISNULL(@OverrideGroup,'') = '' Then r.OverrideGroup Else @OverrideGroup End
	and (r.Report_Type = 'R' OR LTRIM(RTRIM(r.Report_Type)) = '')
End
Else if @ReportType = 'O'
Begin
	Insert Into #ReportIDs(ReportID, Rpt_AliasID)
	Select r.ReportID, r.Rpt_AliasID
	From REPORTS r
	Where r.OverrideGroup = Case When ISNULL(@OverrideGroup,'') = '' Then r.OverrideGroup Else @OverrideGroup End
	and IsNull(r.Report_Type,'R') = 'O'
End
Else
Begin
	Insert Into #ReportIDs(ReportID, Rpt_AliasID)
	Select Distinct r.ReportID, r.Rpt_AliasID
	From REPORTS r
	Left Outer Join Report_Sub_Groups g on r.SubReportGroupID = g.SubReportGroupID
	Left Outer Join Report_Modules m on m.DBModule_ID = g.DBModule_ID
	Where (g.DBModule_ID = Case When IsNull(@DBModule_ID,-1) = -1 Then g.DBModule_ID Else @DBModule_ID End
	and g.SubReportGroupID = Case When ISNULL(@SubReportGroupID,-1) = -1 Then g.SubReportGroupID Else @SubReportGroupID End
	and r.OverrideGroup = Case When ISNULL(@OverrideGroup,'') = '' Then r.OverrideGroup Else @OverrideGroup End 
	and (r.Report_Type = 'R' OR LTRIM(RTRIM(r.Report_Type)) = '')) OR
	(r.OverrideGroup = Case When ISNULL(@OverrideGroup,'') = '' Then r.OverrideGroup Else @OverrideGroup End and IsNull(r.Report_Type,'R') = 'O')
End

Select @sSql = 'Select Distinct l.OverrideID, l.Report_AliasID From ' + @TRServer + '.' + @TRDB + '.dbo.Report_Overrides_List l Inner Join #ReportIDs r on r.Rpt_AliasID = l.Report_AliasID'

Insert Into #ReportOverides(OverrideID, Rpt_AliasID)
exec (@sSql)

SELECT r.ReportID, r.SubReportGroupID, r.ReportName, r.CrystalName, r.ReportLevel, r.RunType, r.RM_ID, r.Notes, r.PictureFileName, r.SecurityQuery_ID, 
	   r.OverrideGroup, r.Report_Type, wo.OverrideID, r.Rpt_AliasID
FROM REPORTS r
Inner Join #ReportIDs w on w.ReportID = r.ReportID
Left Outer Join #ReportOverides wo on r.Rpt_AliasID = wo.Rpt_AliasID
Order By r.SubReportGroupID, r.ReportID



--Select r.ReportID, r.SubReportGroupID, r.ReportName, r.CrystalName, r.ReportLevel, r.RunType, r.RM_ID, r.Notes, r.PictureFileName, r.SecurityQuery_ID, 
--	   r.OverrideGroup, r.Report_Type, r.RM_ID [OverrideID], r.Rpt_AliasID
--	From REPORTS r
--	Inner Join Report_Sub_Groups g on r.SubReportGroupID = g.SubReportGroupID
--	Inner Join Report_Modules m on m.DBModule_ID = g.DBModule_ID
--	Where g.DBModule_ID = Case When IsNull(@DBModule_ID,-1) = -1 Then g.DBModule_ID Else @DBModule_ID End
--	and r.SubReportGroupID = Case When ISNULL(@SubReportGroupID,-1) = -1 Then r.SubReportGroupID Else @SubReportGroupID End
--	and r.OverrideGroup = Case When ISNULL(@OverrideGroup,'') = '' Then r.OverrideGroup Else @OverrideGroup End
--	and (r.Report_Type = 'R' OR LTRIM(RTRIM(r.Report_Type)) = '')




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Report_Search]') and xtype = 'P ')  
 drop Procedure sp_Report_Search
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc [dbo].[sp_Report_Search]

@username  varchar(50), @whereClause    varchar(1000)

as

--declare @username  varchar(50), @whereClause    varchar(1000)
--select @whereClause = ' and m.DBModule_ID = 37',@username ='ying'


delete Working_SearchReport where username = @username

declare @sqlStr varchar(2000)

set @sqlStr = 'insert Working_SearchReport (username,ReportID )select ' + ''''+@username+'''' + ',r.reportID
                from reports  r
               join Report_Sub_Groups g on r.SubReportGroupID  = g.SubReportGroupID 
               join  report_modules  m on m.DBModule_ID =  g.DBModule_ID
               join versions  v on v.versionID = g.versionID
                where  1=1  '
                
 set    @sqlStr = @sqlStr +  @whereClause            
 -- print @sqlStr
 
 exec (@sqlstr)
 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_RFQ_FillMaterials]') and xtype = 'P ')  
 drop Procedure sp_RFQ_FillMaterials
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc sp_RFQ_FillMaterials
 @Username varchar(100)
as

delete working_RFQ_Material
where username = @username

insert working_RFQ_Material(UserName, Selected, MATERIAL_ID, MATGROUP_ID, MAT_CODE, MAT_SHORT_DESC, UOM, EXP_DESC)
select @UserName, 1, MATERIAL_ID, MATGROUP_ID, MAT_CODE, MAT_SHORT_DESC, UOM, EXP_DESC
from hb_material



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_RFQ_FillMatGroups]') and xtype = 'P ')  
 drop Procedure sp_RFQ_FillMatGroups
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc sp_RFQ_FillMatGroups
 @Username varchar(100)
as

delete working_RFQ_Material_Group
where username = @username

insert working_RFQ_Material_Group(UserName, Selected, MATGROUP_ID, MAT_GROUP, GROUP_DESC)
select @username, 1, MATGROUP_ID, MAT_GROUP, GROUP_DESC
from hb_mat_group



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_RFQ_LoadEstimateRFQ]') and xtype = 'P ')  
 drop Procedure sp_RFQ_LoadEstimateRFQ
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE Procedure sp_RFQ_LoadEstimateRFQ (@EstimateID int, @HRDB varchar(500), @HeaderID int)
AS

--Declare @EstimateID int, @HRDB varchar(500), @HeaderID int
--Select @EstimateID = 10, @HRDB = 'HR_KIHOMEBUILDER', @HeaderID = 53

Declare @sql varchar(8000)
Select @sql = ''

--Trades(SubContract)

Select @sql = 
'Insert Into RFQ_VendorSelectionLog (HeaderID, MajorCode, MinorCode, GROUP_DESC, Qty,  
									MajorCodeDesc, 
									MinorCodeDesc, 
									UOM, 
									TradeDesc, 
									TradeID, EstQty, LEMOS)
Select Distinct ' + Convert(varchar(30),@HeaderID) + ', pp.phs_code, pp.subp_code, IsNull(pt.OptionGroup,''''), pt.Qty, 
(Select Top 1 phs_desc from ' + @HRDB + '..phase p Where p.phs_code = pp.phs_code), 
(Select Top 1 subp_desc from ' + @HRDB + '..SubPhase sp Where sp.subp_code = pp.subp_code), 
pt.UOM, 
(Select Top 1 Trade_Desc from HB_Trades Where Trade_ID = pt.TakeoffLink_ID), 
pt.TakeoffLink_ID, pt.Qty, ''S'' from ' + @HRDB + '..proj_phase pp
Inner Join ' + @HRDB + '..proj_takeoffs pt on pt.Proj_Phase_ID = pp.Proj_Phase_ID
Where Estimate_ID = ' + Convert(varchar(100),@EstimateID) + ' and pt.TakeOffType = ''SubContract'' AND IsNull(Internal,0) = 0'

exec(@sql)

--Materials Load
Select @sql = '
Insert Into RFQ_VendorSelectionLog (HeaderID, MajorCode, MinorCode, GROUP_DESC, Qty, MATGROUP_ID, 
									MATGROUP_DESC, 
									MATERIAL_ID, MAT_CODE, 
									MAT_SHORT_DESC, 
									MajorCodeDesc, 
									MinorCodeDesc, 
									UOM, 
									EstQty, HB_PackageID, HB_PackageDescription, LEMOS)
Select Distinct ' + Convert(varchar(30),@HeaderID) + ', pp.phs_code, pp.subp_code, IsNull(pt.OptionGroup,''''), pt.Qty, (Select MatGroup_ID From HB_Material Where Material_ID = pt.TakeoffLink_ID), 
(Select Top 1Group_Desc From HB_Mat_Group Where MatGroup_ID = (Select Top 1 MatGroup_ID From HB_Material Where Material_ID = pt.TakeoffLink_ID)), 
pt.TakeoffLink_ID, (Select Top 1 MAT_CODE From HB_Material Where Material_ID = pt.TakeoffLink_ID), 
(Select Top 1 MAT_SHORT_DESC From HB_Material Where Material_ID = pt.TakeoffLink_ID), 
(Select Top 1 phs_desc from ' + @HRDB + '..phase p Where p.phs_code = pp.phs_code), 
(Select Top 1 subp_desc from ' + @HRDB + '..SubPhase sp Where sp.subp_code = pp.subp_code), 
pt.UOM, pt.qty, 
(Select Top 1 ID From HB_Package Where MatGroup_ID = (Select Top 1 MatGroup_ID From HB_Material Where Material_ID = pt.TakeoffLink_ID)),
(Select Top 1 PackageDescription From HB_Package Where MatGroup_ID = (Select Top 1 MatGroup_ID From HB_Material Where Material_ID = pt.TakeoffLink_ID)),
''M'' from ' + @HRDB + '..proj_phase pp
Inner Join ' + @HRDB + '..proj_takeoffs pt on pt.Proj_Phase_ID = pp.Proj_Phase_ID
Where Estimate_ID = ' + Convert(varchar(100),@EstimateID) + ' and pt.TakeOffType = ''Material'' and IsNull(Internal,0) = 0'

exec(@sql)

--Equipment
Select @sql = '
Insert Into RFQ_VendorSelectionLog (HeaderID, MajorCode, MinorCode, GROUP_DESC, Qty, 
									MajorCodeDesc, MinorCodeDesc, UOM, EstQty, LEMOS, Equip_Desc,
									EquipmentID, Equip_Group_ID, Equip_Group_Desc)
Select Distinct ' + Convert(varchar(30),@HeaderID) + ', pp.phs_code, pp.subp_code, IsNull(pt.OptionGroup,''''), pt.Qty, 
(Select Top 1 phs_desc from ' + @HRDB + '..phase p Where p.phs_code = pp.phs_code), 
(Select Top 1 subp_desc from ' + @HRDB + '..SubPhase sp Where sp.subp_code = pp.subp_code), 
pt.UOM, pt.Qty, ''E'',
(Select Equip_Desc from Equipment Where ID = pt.TakeOffLink_ID),
pt.TakeOffLink_ID,
(Select Equip_Group_ID from Equipment Where ID = pt.TakeOffLink_ID),
(Select Equip_Group_Desc from Equip_Group Where ID = (Select Equip_Group_ID From Equipment Where ID = pt.TakeOffLink_ID))
from ' + @HRDB + '..proj_phase pp
Inner Join ' + @HRDB + '..proj_takeoffs pt on pt.Proj_Phase_ID = pp.Proj_Phase_ID
Where Estimate_ID = ' + Convert(varchar(100),@EstimateID) + ' and pt.TakeOffType = ''Equipment'' AND IsNull(Internal,0) = 0'

exec (@sql)


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_RFQ_LoadResponseMatrix]') and xtype = 'P ')  
 drop Procedure sp_RFQ_LoadResponseMatrix
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure [dbo].[sp_RFQ_LoadResponseMatrix] (@HeaderID int, @TRDB varchar(500), @HRDB varchar(500))

AS

--Declare @HeaderID int, @TRDB varchar(500), @HRDB varchar(500)
--Select @HeaderID = 394, @trdb ='TR_RealEstateBeta', @hrdb = 'HR_RealEstateBeta'

Declare @TMO varchar(10), @ModelSpecific bit, @str varchar(8000)

Select @TMO = Type, @ModelSpecific = ModelSpecific from RFQ_VendorSelectionHeader Where ID = @HeaderID

--Select @TMO

If @TMO = 'T'
	Begin
		If @ModelSpecific = 1
			Begin
				Insert Into RFQ_Cost(Raw_Land_CD,Supplier,Supplier_Name, Supplier_ID, RFQC_TYPE_MOE, Model_ID, phs_code, subp_code,
									 Trade_ID, RFQ_HeaderID, Vendor_SelectionID, ModelNameID, ModelNameDesc, HoldingDesc, ModelDesc, RFQ_ID, Qty,
									 CostType, Available, LocalityID, PayType, Date_Effective)
				Select va.HoldingID, vs.Supplier, vs.SupplierName, vs.Supplier_ID, 'T', va.ModelID, vsl.MajorCode, vsl.MinorCode,
					   vsl.TradeID, @HeaderID, vs.ID, va.ModelNameID, va.ModelNameDesc, va.HoldingDesc, va.ModelDesc, vsh.RFQID, IsNull(EstQty,1),
					   'L', 0, Locality, 'D', GetDate()
				from RFQ_VendorSelectionLog vsl 
				Inner Join RFQ_VendorsSelected vs on vs.Log_ID = vsl.ID
				Inner Join RFQ_VSH_Application va on va.ID = vsl.VA_ID
				Inner Join RFQ_VendorSelectionHeader vsh on vsh.ID = vsl.HeaderID
				Where vsl.HeaderID = @HeaderID
				And vs.ID not in (Select Vendor_SelectionID From RFQ_COST Where RFQ_HeaderID = @HeaderID)
			End
		Else
			Begin
				Insert Into RFQ_Cost(Raw_Land_CD,Supplier,Supplier_Name, Supplier_ID, RFQC_TYPE_MOE, Model_ID, phs_code, subp_code,
									 Trade_ID, RFQ_HeaderID, Vendor_SelectionID, ModelNameID, ModelNameDesc, HoldingDesc, ModelDesc, RFQ_ID, Qty,
									 CostType, Available, LocalityID, PayType, Date_Effective)
				Select va.HoldingID, vs.Supplier, vs.SupplierName, vs.Supplier_ID, 'T', m.Model_ID, et.phs_code, et.subp_code,
					   vsl.TradeID, @HeaderID, vs.ID, mn.Model_Name_ID, mn.Model_Name, va.HoldingDesc, m.Model_Desc, vsh.RFQID, IsNull(EstQty,1),
					   'L', 0, Locality, 'D', GetDate()
				--Select *
				from RFQ_VendorSelectionLog vsl 
				Inner Join RFQ_VendorsSelected vs on vs.Log_ID = vsl.ID
				Inner Join RFQ_VSH_Application va on va.ID = vsl.VA_ID
				Inner Join RFQ_VendorSelectionHeader vsh on vsh.ID = vsl.HeaderID
				Inner Join HB_Model m on va.HoldingID = m.Raw_Land_CD
				Inner Join HB_Model_Name mn on mn.Model_Name_ID = m.Model_Name_ID
				Inner Join HB_EST_TRD et on et.Model_ID = m.Model_ID and et.Trade_ID = vsl.TradeID
				Where vsl.HeaderID = @HeaderID and et.Option_ID = -1 and et.Raw_Land_CD != -1
				And vs.ID not in (Select Vendor_SelectionID From RFQ_COST Where RFQ_HeaderID = @HeaderID)
			End

		Set @str = 'Update RFQ_Cost
		Set Ranking = IsNull(st.Ranking,3)
		from RFQ_Cost rc
		Inner Join ' + @TRDB + '..HB_SUPP_TMO st on st.TMO_ID = rc.Trade_ID and st.Supplier = rc.Supplier and TMO_TYPE = ''T''
		Where rc.RFQ_HeaderID = ' + Convert(varchar(50),@HeaderID) + ' and IsNull(rc.Ranking,-1) = -1'

		Exec (@str)
	End
Else if @TMO = 'M'
	Begin
		If(@ModelSpecific = 1)
			Begin
				Insert Into RFQ_Cost(Raw_Land_CD,Supplier,Supplier_Name, Supplier_ID, RFQC_TYPE_MOE, Model_ID, phs_code, subp_code,
									 Trade_ID, RFQ_HeaderID, Vendor_SelectionID, ModelNameID, ModelNameDesc, HoldingDesc, ModelDesc, RFQ_ID, Qty,
									 CostType, MatGroup_ID, Mat_Code, Material_ID, Available, LocalityID, PackageID, PayType, Date_Effective)
				Select va.HoldingID, vs.Supplier, vs.SupplierName, vs.Supplier_ID, 'M', m.Model_ID, em.phs_code, em.subp_code,
					   -1, @HeaderID, vs.ID, mn.Model_Name_ID, mn.Model_Name, va.HoldingDesc, m.Model_Desc, vsh.RFQID, IsNull(EstQty,1),
					   'M', ma.MatGroup_ID, ma.Mat_Code, em.Material_ID, 0, Locality, vsl.HB_PackageID, 'D', GetDate()
				--Select *
				from RFQ_VendorSelectionLog vsl 
				Inner Join RFQ_VendorsSelected vs on vs.Log_ID = vsl.ID
				Inner Join RFQ_VSH_Application va on va.ID = vsl.VA_ID
				Inner Join RFQ_VendorSelectionHeader vsh on vsh.ID = vsl.HeaderID
				Inner Join HB_Model m on va.HoldingID = m.Raw_Land_CD
				Inner Join HB_Model_Name mn on mn.Model_Name_ID = m.Model_Name_ID
				Inner Join HB_EST_MAT em on em.Model_ID = m.Model_ID and em.HB_Package_ID = vsl.HB_PackageID
				Inner Join HB_Material ma on ma.Material_ID = em.Material_ID
				Where vsl.HeaderID = @HeaderID and em.Option_ID = -1 and em.Raw_Land_CD != -1
				And vs.ID not in (Select Vendor_SelectionID From RFQ_COST Where RFQ_HeaderID = @HeaderID)
			End
		Else
			Begin
				Insert Into RFQ_Cost(Raw_Land_CD,Supplier,Supplier_Name, Supplier_ID, RFQC_TYPE_MOE, Model_ID, phs_code, subp_code,
									 Trade_ID, RFQ_HeaderID, Vendor_SelectionID, ModelNameID, ModelNameDesc, HoldingDesc, ModelDesc, RFQ_ID, Qty,
									 CostType, MatGroup_ID, Mat_Code, Material_ID, Available, LocalityID, PayType, Date_Effective)
				Select va.HoldingID, vs.Supplier, vs.SupplierName, vs.Supplier_ID, 'M', m.Model_ID, em.phs_code, em.subp_code,
					   -1, @HeaderID, vs.ID, mn.Model_Name_ID, mn.Model_Name, va.HoldingDesc, m.Model_Desc, vsh.RFQID, IsNull(EstQty,1),
					   'M', vsl.MatGroup_ID, vsl.Mat_Code, vsl.Material_ID, 0, Locality, 'D', GetDate()
				--Select *
				from RFQ_VendorSelectionLog vsl 
				Inner Join RFQ_VendorsSelected vs on vs.Log_ID = vsl.ID
				Inner Join RFQ_VSH_Application va on va.ID = vsl.VA_ID
				Inner Join RFQ_VendorSelectionHeader vsh on vsh.ID = vsl.HeaderID
				Inner Join HB_Model m on va.HoldingID = m.Raw_Land_CD
				Inner Join HB_Model_Name mn on mn.Model_Name_ID = m.Model_Name_ID
				Inner Join HB_EST_MAT em on em.Model_ID = m.Model_ID and em.Material_ID = vsl.Material_ID
				Where vsl.HeaderID = @HeaderID and em.Option_ID = -1 and em.Raw_Land_CD != -1
				And vs.ID not in (Select Vendor_SelectionID From RFQ_COST Where RFQ_HeaderID = @HeaderID)
			End

		Set @str = 'Update RFQ_Cost
		Set Ranking = IsNull(st.Ranking,3)
		from RFQ_Cost rc
		Inner Join ' + @TRDB + '..HB_SUPP_TMO st on st.TMO_ID = rc.MatGroup_ID and st.Supplier = rc.Supplier and TMO_TYPE = ''M''
		Where rc.RFQ_HeaderID = ' + Convert(varchar(50),@HeaderID) + ' and IsNull(rc.Ranking,-1) = -1'

		Exec (@str)
	End
Else if @TMO = '0'
	Begin
		print 'Option'
	End
Else If @TMO = 'GC'
	Begin
		Insert Into RFQ_COST (Raw_Land_CD, Supplier, Supplier_Name, Supplier_ID, RFQC_TYPE_MOE, phs_code, subp_code, Cost, Date_Effective, 
							  RFQ_HeaderID, Vendor_SelectionID, RFQ_ID, qty, CostType, PayType, Trade_ID, DATE_EXPIRE, Estimate_ID)
		Select -1, vs.Supplier, vs.SupplierName, vs.Supplier_ID, 'GC', vsl.MajorCode, vsl.MinorCode, vs.cost, GetDate(),
			   @HeaderID, vs.ID, vsh.RFQID, vsl.qty, 'S', 'D', vsl.TradeID, vsh.RequestExpiryDate, EstimateID
		from RFQ_VendorSelectionLog vsl
		Inner Join RFQ_VendorsSelected vs on vs.Log_ID = vsl.ID
		Inner Join RFQ_VendorSelectionHeader vsh on vsh.ID = vsl.HeaderID
		Where vsl.HeaderID = @HeaderID and vsl.LEMOS = 'S'

		Insert Into RFQ_COST (Raw_Land_CD, Supplier, Supplier_Name, Supplier_ID, RFQC_TYPE_MOE, phs_code, subp_code, Cost, Date_Effective, 
							  RFQ_HeaderID, Vendor_SelectionID, RFQ_ID, qty, CostType, PayType, Matgroup_ID, MatGroup_Desc, Mat_Code,
							  Mat_Short_Desc, Material_ID, Trade_ID, DATE_EXPIRE, Estimate_ID)
		Select -1, vs.Supplier, vs.SupplierName, vs.Supplier_ID, 'GC', vsl.MajorCode, vsl.MinorCode, vs.cost, GetDate(),
			   @HeaderID, vs.ID, vsh.RFQID, vsl.qty, 'M', 'D', vsl.MatGroup_ID, vsl.MatGroup_Desc, vsl.Mat_Code, vsl.Mat_Short_Desc,
			   vsl.Material_ID, -1, vsh.RequestExpiryDate, EstimateID
		from RFQ_VendorSelectionLog vsl
		Inner Join RFQ_VendorsSelected vs on vs.Log_ID = vsl.ID
		Inner Join RFQ_VendorSelectionHeader vsh on vsh.ID = vsl.HeaderID
		Where vsl.HeaderID = @HeaderID and vsl.LEMOS = 'M'

		Insert Into RFQ_COST (Raw_Land_CD, Supplier, Supplier_Name, Supplier_ID, RFQC_TYPE_MOE, phs_code, subp_code, Cost, Date_Effective, 
							  RFQ_HeaderID, Vendor_SelectionID, RFQ_ID, qty, CostType, PayType, Equip_Group_ID, EquipmentID, Trade_ID, DATE_EXPIRE, Estimate_ID)
		Select -1, vs.Supplier, vs.SupplierName, vs.Supplier_ID, 'GC', vsl.MajorCode, vsl.MinorCode, vs.cost, GetDate(),
			   @HeaderID, vs.ID, vsh.RFQID, vsl.qty, 'E', 'D', vsl.Equip_Group_ID, vsl.EquipmentID, -1, vsh.RequestExpiryDate, EstimateID
		from RFQ_VendorSelectionLog vsl
		Inner Join RFQ_VendorsSelected vs on vs.Log_ID = vsl.ID
		Inner Join RFQ_VendorSelectionHeader vsh on vsh.ID = vsl.HeaderID
		Where vsl.HeaderID = @HeaderID and vsl.LEMOS = 'E'

		Select @str = 'Update RFQ_Cost
				Set Ranking = IsNull(st.Ranking,3)
				from RFQ_Cost rc
				Inner Join ' + @TRDB + '..HB_SUPP_TMO st on st.TMO_ID = rc.Trade_ID and st.Supplier = rc.Supplier and TMO_TYPE = ''T''
				Where rc.RFQ_HeaderID = ' + Convert(varchar(50),@HeaderID) + ' and IsNull(rc.Ranking,-1) = -1 ' +
				'Update RFQ_Cost
				Set Ranking = IsNull(st.Ranking,3)
				from RFQ_Cost rc
				Inner Join ' + @TRDB + '..HB_SUPP_TMO st on st.TMO_ID = rc.MatGroup_ID and st.Supplier = rc.Supplier and TMO_TYPE = ''M''
				Where rc.RFQ_HeaderID = ' + Convert(varchar(50),@HeaderID) + ' and IsNull(rc.Ranking,-1) = -1 ' +
				'Update RFQ_Cost
				Set Ranking = IsNull(st.Ranking,3)
				from RFQ_Cost rc
				Inner Join ' + @TRDB + '..HB_SUPP_TMO st on st.TMO_ID = rc.Equip_Group_ID and st.Supplier = rc.Supplier and TMO_TYPE = ''E''
				Where rc.RFQ_HeaderID = ' + Convert(varchar(50),@HeaderID) + ' and IsNull(rc.Ranking,-1) = -1 '

		exec(@str)
	End

Update RFQ_Cost Set Ranking = 3 Where IsNull(Ranking,-1) = -1 and RFQ_HeaderID = @HeaderID

Set @str = 'Update RFQ_Cost
			Set Max_Homes = IsNull(sm.Max_Homes,1)
			From RFQ_Cost rc
			Inner Join ' + @TRDB + '..Supplier_Master sm on sm.Supplier = rc.Supplier
			Where rc.RFQ_HeaderID = ' + Convert(varchar(50),@HeaderID)+ ' and IsNull(rc.Max_Homes,-1) = -1'

Exec (@str)

Set @str = 'Update RFQ_Cost
			Set phs_desc = IsNull(p.phs_desc,'''')
			From RFQ_Cost rc 
			Left Outer Join ' + @HRDB + '..phase p on p.phs_code = rc.phs_code
			Where rc.RFQ_HeaderID = ' + Convert(varchar(50),@HeaderID) + ' And IsNull(rc.phs_desc, '''') = '''''

Exec (@str)

Set @str = 'Update RFQ_Cost
			Set subp_desc = IsNull(p.subp_desc,'''')
			From RFQ_Cost rc 
			Left Outer Join ' + @HRDB + '..subphase p on p.subp_code = rc.subp_code
			Where rc.RFQ_HeaderID = ' + Convert(varchar(50),@HeaderID) + ' And IsNull(rc.subp_desc, '''') = '''''

Exec (@str)


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_RFQ_SelectAllSuppliers]') and xtype = 'P ')  
 drop Procedure sp_RFQ_SelectAllSuppliers
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure [dbo].[sp_RFQ_SelectAllSuppliers](@HeaderID int, @TMO varchar(2),@TRDB varchar(50), @Primary int, @PrimaryAlt int, @Alternate int)
AS

-- Declare @HeaderID int, @TMO varchar(2), @TRDB varchar(50),@ModelSpecific varchar(5), @Primary bit, @PrimaryAlt bit, @Alternate bit
-- Select @HeaderID = 433, @TMO = 'T', @TRDB = 'TR_RealEstate62',@ModelSpecific = 'True', @Primary = 0, @PrimaryAlt = 0, @Alternate = 0

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Suppliers '))
drop table #Suppliers 
Create Table #Suppliers
(
 ID int IDENTITY (1, 1) NOT NULL ,
 Supplier varchar(10) NULL ,
 SupplierName varchar(40) NULL ,
 ContactMethod varchar(50) NULL ,
 Notified varchar(10) NULL ,
 Tel varchar (20) NULL ,
 Fax varchar (20) NULL ,
 Notes text NULL ,
 Email varchar(80) NULL ,
 EmailSubject varchar(500) NULL ,
 EmailBody text NULL ,
 EmailAttachment text NULL ,
 Contact varchar(50) NULL ,
 ResponseBy datetime NULL ,
 succeeded varchar(1) NULL ,
 MajorCode varchar(5) NULL ,
 MinorCode varchar(5) NULL ,
 HeaderID int NULL ,
 LOG_ID int NULL ,
 COST money NULL ,
 MAT_SIB char(1) NULL ,
 TARGET_VOLUME int NULL ,
 DATE_EXPIRE datetime NULL ,
 Responded varchar(1) NULL ,
 SUPPLIER_ID int NULL ,
 DATE_EFFECTIVE datetime NULL ,
 Contact_ID int NULL,
 HoldingID int NULL,
 ModelID int NULL 
)


--Sets up the ranking selection for the suppliers

Declare @Ranking varchar(10)

Select @Ranking = (Case When @Primary = 1 Then '1' Else '' End) + 
(Case When @PrimaryAlt = 1 AND @Primary = 1 Then ',2' When @PrimaryAlt = 1 AND @Primary = 0 Then '2' Else '' End) +
(Case When @Alternate = 1 AND (@PrimaryAlt = 1 OR @Primary = 1) Then ',3' 
      When @Alternate = 1 AND @PrimaryAlt = 0 AND @Primary = 0 Then '3'  Else '' End)

if @Ranking = ''
	Set @Ranking = '-1'

--Loads default info for suppliers to temp table

Declare @str varchar(8000)

If @TMO = 'T'
	Begin
		Set @str = 'SELECT DISTINCT w.id, sm.SUPPLIER, sm.NAME AS SupplierName, 
				sm.Supplier_ID AS SupplierID, sm.RFQ_METHOD, w.MajorCode, w.MinorCode,va.HoldingID,va.ModelID 
				FROM RFQ_VendorSelectionLog w
				JOIN RFQ_VSH_Application va on w.VA_ID = va.ID
				JOIN ' + @TRDB + '.dbo.HB_HCP_SUPPLIERS s ON s.TSUP_TM_ID = w.TradeID AND s.TSUP_TM_TYPE = ''' + @TMO + '''  AND va.HoldingID = s.TSUP_HCP_ID 
				JOIN ' + @TRDB + '.dbo.SUPPLIER_MASTER sm ON s.SUPPLIER = sm.SUPPLIER 
				WHERE (s.TSUP_HCP_TYPE = ''H'') and w.HeaderID = ' + Convert(varchar(20),@HeaderID) + '
				and w.id not in (Select Log_ID From RFQ_VendorsSelected where HeaderID = ' + Convert(varchar(20),@HeaderID) + ')
				and sm.SUPPLIER in (Select Supplier from ' + @TRDB + '.dbo.HB_SUPP_TMO Where Ranking in (' + @Ranking + ')) Order By va.HoldingID'
	End
Else If @TMO = 'M' and @TMO = 'P'
	Begin
		Set @str = 'SELECT DISTINCT w.id, sm.SUPPLIER, sm.NAME AS SupplierName, 
				sm.Supplier_ID AS SupplierID, sm.RFQ_METHOD, w.MajorCode, w.MinorCode,va.HoldingID,va.ModelID 
				FROM RFQ_VendorSelectionLog w
				JOIN RFQ_VSH_Application va on w.VA_ID = va.ID
				JOIN ' + @TRDB + '.dbo.HB_HCP_SUPPLIERS s ON s.TSUP_TM_ID = w.Material_ID AND s.TSUP_TM_TYPE = ''' + @TMO + '''  AND va.HoldingID = s.TSUP_HCP_ID 
				JOIN ' + @TRDB + '.dbo.SUPPLIER_MASTER sm ON s.SUPPLIER = sm.SUPPLIER 
				WHERE (s.TSUP_HCP_TYPE = ''H'') and w.HeaderID = ' + Convert(varchar(20),@HeaderID) + '
				and w.id not in (Select Log_ID From RFQ_VendorsSelected where HeaderID = ' + Convert(varchar(20),@HeaderID) + ')
				and sm.SUPPLIER in (Select Supplier from ' + @TRDB + '.dbo.HB_SUPP_TMO Where Ranking in (' + @Ranking + ')) Order By va.HoldingID'
	End
Else If @TMO = 'GC'
	Begin	
		Set @str = 'Select vsl.id, sm.Supplier, sm.Name as SupplierName,
						   sm.Supplier_ID as SupplierID, sm.RFQ_Method, vsl.MajorCode, vsl.MinorCode, null, null
					from ' + @TRDB + '..Supplier_Master sm
					Inner Join ' + @TRDB + '..HB_Supp_TMO tmo on tmo.Supplier = sm.Supplier
					Inner Join RFQ_VendorSelectionLog vsl on vsl.Equip_Group_ID = tmo.TMO_ID
					Where HeaderID = ' + Convert(varchar(20),@HeaderID) + ' and TMO_TYPE Like ''E''
					UNION
					Select vsl.id, sm.Supplier, sm.Name as SupplierName,
						   sm.Supplier_ID as SupplierID, sm.RFQ_Method, vsl.MajorCode, vsl.MinorCode, null, null
					from ' + @TRDB + '..Supplier_Master sm
					Inner Join ' + @TRDB + '..HB_Supp_TMO tmo on tmo.Supplier = sm.Supplier
					Inner Join RFQ_VendorSelectionLog vsl on vsl.MatGroup_ID = tmo.TMO_ID
					Where HeaderID = ' + Convert(varchar(20),@HeaderID) + ' and TMO_TYPE Like ''M''
					UNION
					Select vsl.id, sm.Supplier, sm.Name as SupplierName,
						   sm.Supplier_ID as SupplierID, sm.RFQ_Method, vsl.MajorCode, vsl.MinorCode, null, null
					from ' + @TRDB + '..Supplier_Master sm
					Inner Join ' + @TRDB + '..HB_Supp_TMO tmo on tmo.Supplier = sm.Supplier
					Inner Join RFQ_VendorSelectionLog vsl on vsl.TradeID = tmo.TMO_ID
					Where HeaderID = ' + Convert(varchar(20),@HeaderID) + ' and TMO_TYPE Like ''T'''
	End

Insert Into #Suppliers(Log_ID,Supplier,SupplierName,SUPPLIER_ID,ContactMethod,MajorCode,MinorCode,HoldingID,ModelID)
exec (@str)

--Removes Duplicate Suppliers From Selection

Delete #Suppliers --Select * 
From #Suppliers s
Inner Join RFQ_VendorsSelected vs on vs.Log_ID = s.Log_ID and vs.Supplier = s.Supplier
Where vs.HeaderID = @HeaderID

--Loads Contact for Suppliers Which loads either the first available contact OR the first defaulted Default RFQ contact

Update #Suppliers
Set Tel = IsNull((Select Top 1 BusinessTelephoneNumber from Contact c
		Inner Join Relations r on r.ItemID = c.ID and r.ItemType = 'Contact'
		Where Target = 'Supplier' and TargetID = Supplier_ID
		Order By DefaultRFQContact desc),'') ,
    Fax = IsNull((Select Top 1 BusinessFaxNumber from Contact c
		Inner Join Relations r on r.ItemID = c.ID and r.ItemType = 'Contact'
		Where Target = 'Supplier' and TargetID = Supplier_ID
		Order By DefaultRFQContact desc),''),
    Email = IsNull((Select Top 1 Email1Address from Contact c
		Inner Join Relations r on r.ItemID = c.ID and r.ItemType = 'Contact'
		Where Target = 'Supplier' and TargetID = Supplier_ID
		Order By DefaultRFQContact desc),'') ,
    Contact = IsNull((Select Top 1 KnownAs from Contact c
		Inner Join Relations r on r.ItemID = c.ID and r.ItemType = 'Contact'
		Where Target = 'Supplier' and TargetID = Supplier_ID
		Order By DefaultRFQContact desc),''),
    Contact_ID =IsNull((Select Top 1 c.ID from Contact c
			Inner Join Relations r on r.ItemID = c.ID and r.ItemType = 'Contact'
			Where Target = 'Supplier' and TargetID = Supplier_ID
			Order By DefaultRFQContact desc),0),
    Notes = '', EmailSubject = '', EmailBody = '', EmailAttachment = '', Notified = ''

--Brings over the text fields to the temp table from any suppliers that were already pre-selected on this RFQ

Declare @VendorsSelectedID int, @SupplierID int
Declare aCurrentSuppliers Cursor For

Select vs.ID, s.ID from RFQ_VendorsSelected vs
Join #Suppliers s on s.Supplier_ID = vs.Supplier_ID
Where vs.HeaderID = @HeaderID
Order By s.ID

Open aCurrentSuppliers
Fetch Next From aCurrentSuppliers into @VendorsSelectedID,@SupplierID

While @@Fetch_Status = 0
Begin

	Declare @EmailBody binary(16), @EmailAttachment binary(16), @EmailBody2 binary(16), @EmailAttachment2 binary(16),
		@Notes binary(16), @Notes2 binary(16)

	Select @EmailBody = TextPtr(EmailBody),@EmailAttachment = TextPtr(EmailAttachment), @Notes = TextPtr(Notes) From RFQ_VendorsSelected Where ID = @VendorsSelectedID
	Select @EmailBody2 = TextPtr(EmailBody),@EmailAttachment2 = TextPtr(EmailAttachment), @Notes2 = TextPtr(Notes) From #Suppliers Where ID = @SupplierID

	if(@EmailBody is not null AND @EmailBody2 is not null)
		Begin
		UpdateText #Suppliers.EmailBody @EmailBody2 0 null RFQ_VendorsSelected.EmailBody @EmailBody
		End
	if(@EmailAttachment is not null AND @EmailAttachment2 is not null)
		Begin
		UpdateText #Suppliers.EmailAttachment @EmailAttachment2 0 null RFQ_VendorsSelected.EmailAttachment @EmailAttachment
		End
	if(@Notes is not null AND @Notes2 is not null)
		Begin
		UpdateText #Suppliers.Notes @Notes2 0 null RFQ_VendorsSelected.Notes @Notes
		End

	Fetch Next From aCurrentSuppliers into @VendorsSelectedID,@SupplierID

End

Close aCurrentSuppliers
DeAllocate aCurrentSuppliers

-- Updates the remaining info thats NOT a text field for the exsiting suppliers

Update #Suppliers
Set Tel = vs.Tel,
    Fax = vs.Fax,
    Email = vs.Email,
    Contact = vs.Contact,
    Contact_ID = vs.Contact_ID,
    EmailSubject = vs.EmailSubject,
    ResponseBy = vs.ResponseBy,
    Notified = vs.Notified
From RFQ_VendorsSelected vs
Join #Suppliers s on s.Supplier_ID = vs.Supplier_ID
Where vs.HeaderID = @HeaderID

-- Declare @CurrentVSLID int
-- 
-- Declare aRFQ_VendorSelectionLog Cursor For
-- Select ID from RFQ_VendorSelectionLog Where HeaderID = @HeaderID
-- 
-- Open aRFQ_VendorSelectionLog
-- Fetch Next From aRFQ_VendorSelectionLog into @CurrentVSLID
-- 
-- While @@Fetch_Status = 0
-- Begin
-- 
-- End
-- 
-- Close aRFQ_VendorSelectionLog
-- DeAllocate aRFQ_VendorSelectionLog
-- 
-- Select * from #Suppliers s
-- Inner Join RFQ_VendorSelectionLog vsl on vsl.ID = s.Log_ID
-- Where vsl.ID = 45421
-- 
-- Select * from RFQ_VendorSelectionLog


Declare aUpdatedSuppliers Cursor For
Select ID from #Suppliers

Open aUpdatedSuppliers
Fetch Next From aUpdatedSuppliers into @SupplierID

While @@Fetch_Status = 0
Begin

	Insert Into RFQ_VendorsSelected(Supplier,SupplierName,contactMethod,Tel,Fax,Email,Contact,Contact_ID,EmailSubject,ResponseBy,
					Notified,HeaderID,LOG_ID, MajorCode, MinorCode,Supplier_ID, Notes, EmailBody,EmailAttachment)
	Select Supplier,SupplierName,IsNull(ContactMethod,'PH'), Tel,Fax,Email,Contact,Contact_ID,EmailSubject,ResponseBy,
		Notified,@HeaderID,LOG_ID,IsNull(MajorCode,''),IsNull(MinorCode,''),Supplier_ID, '','',''
		from #Suppliers Where ID = @SupplierID

	Declare @NewSelectedVendorID int
	Select @NewSelectedVendorID = @@Identity

	Declare @EmailBdy binary(16), @EmailAtch binary(16), @EmailBdy2 binary(16), @EmailAtch2 binary(16),
		@NewNotes binary(16), @NewNotes2 binary(16)

	Select @EmailBdy = TextPtr(EmailBody),@EmailAtch = TextPtr(EmailAttachment), @NewNotes = TextPtr(Notes) From #Suppliers Where ID = @SupplierID
	Select @EmailBdy2 = TextPtr(EmailBody),@EmailAtch2 = TextPtr(EmailAttachment), @NewNotes2 = TextPtr(Notes) From RFQ_VendorsSelected Where ID = @NewSelectedVendorID

	if(@EmailBdy is not null AND @EmailBdy2 is not null)
		Begin
		UpdateText #Suppliers.EmailBody @EmailBdy 0 null RFQ_VendorsSelected.EmailBody @EmailBdy2
		End
	if(@EmailAtch is not null AND @EmailAtch2 is not null)
		Begin
		UpdateText #Suppliers.EmailAttachment @EmailAtch 0 null RFQ_VendorsSelected.EmailAttachment @EmailAtch2
		End
	if(@NewNotes is not null AND @NewNotes2 is not null)
		Begin
		UpdateText #Suppliers.Notes @NewNotes 0 null RFQ_VendorsSelected.Notes @NewNotes2
		End

	Fetch Next From aUpdatedSuppliers into @SupplierID

End

Close aUpdatedSuppliers
DeAllocate aUpdatedSuppliers




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_RFQLoadSuppliers]') and xtype = 'P ')  
 drop Procedure sp_RFQLoadSuppliers
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
Create Procedure sp_RFQLoadSuppliers

(@TRDB varchar(50),@phs_code varchar(10), @subp_code varchar(10), @Model_ID varchar(20), @Raw_Land_CD int, @TradeID int,
 @UserName varchar(50))

AS

-- Declare @TRDB varchar(50),@phs_code varchar(10), @subp_code varchar(10), @Model_ID varchar(20), @Raw_Land_CD int, @TradeID int,
--     	@UserName varchar(50)
-- 
-- Select @TRDB = 'TR_Realestate62', @phs_code ='0100', @subp_code = '%', @Model_ID ='18', @Raw_Land_CD = 1, @TradeID = 22,
-- 	@UserName = 'Ken'

Delete working_RFQSuppliers Where UserName = @UserName

Declare @exec varchar(8000)

Set @exec = 'SELECT  DISTINCT sm.SUPPLIER, sm.NAME, CASE WHEN RANKING = 1 THEN ''PRIMARY'' WHEN RANKING = 2 THEN ''Primary Alternate'' 
ELSE ''Alternate'' END AS RANKING, sm.Supplier_ID, sm.RFQ_METHOD, ''' + @UserName + ''' as UserName
FROM working_rfqselectedmajorminor w
join HB_TMO T on t.phs_code = w.phs_code and TMO_TYPE = ''T'' 
join HB_Trades tr on tr.Trade_ID = t.TMO_ID 
join ' + @TRDB + '..HB_HCP_SUPPLIERS s ON s.TSUP_TM_ID = t.TMO_ID AND s.TSUP_TM_TYPE = t.TMO_TYPE and w.Raw_Land_CD = s.TSUP_HCP_ID
INNER JOIN ' + @TRDB + '..SUPPLIER_MASTER sm ON s.SUPPLIER = sm.SUPPLIER 
where s.TSUP_HCP_TYPE = ''H'' and w.phs_code like '''+ @phs_code + ''' and w.subp_code like  ''' + @subp_code + ''' and 
Cast(w.Model_ID as Varchar(20)) like ''' + @Model_ID + '''  and w.Raw_Land_CD = ' + Cast(@Raw_Land_CD as Varchar(20)) + ' 
and tr.Trade_ID = ' + Cast(@TradeID as Varchar(20))

Insert Into working_RFQSuppliers
exec (@exec)


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_RLGetReportGroups]') and xtype = 'P ')  
 drop Procedure sp_RLGetReportGroups
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go







CREATE   proc sp_RLGetReportGroups
 @LoginID int
as

select distinct
 GroupName,
-- case when isNUll(imc.ServerName ,'') = '' then c.ServerName else imc.ServerName end ServerName,
-- case when isNUll(imc.DBName ,'') = '' then c.DBName else imc.DBName end DBName
 isNUll(imc.ServerName ,'') ServerName,
 isNUll(imc.DBName ,'') DBName
from user_reports ur
join reports r
on ur.ReportID = r.ReportID
join Report_Groups rg
on r.ReportGroupID = rg.ReportGroupID
left outer join ICC_Module_Ctrl imc
on  imc.[module] = rg.[module]
-- left outer join Companies c
-- on imc.[module] = c.[module]
-- and ur.Company_ID = c.Company_ID
where USER_LOGIN_ID = @LoginID










Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_RLGetReports]') and xtype = 'P ')  
 drop Procedure sp_RLGetReports
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go








CREATE   proc sp_RLGetReports
 @LoginID int,
 @ReportGroup varchar(500),
 @Company varchar(500)
as

select *--distinct r.ReportID, r.ReportName, r.CrystalName, r.RunType 
from user_reports ur
join reports r
on ur.ReportID = r.ReportID
join Report_Groups rg
on r.ReportGroupID = rg.ReportGroupID
join Companies c
on c.Company_ID = ur.Company_ID
where USER_LOGIN_ID = @LoginID
and GroupName = @ReportGroup
and Company_Name = @Company
order by r.ReportName










Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_scClosingListing]') and xtype = 'P ')  
 drop Procedure sp_scClosingListing
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
Create   proc [dbo].[sp_scClosingListing] @PCID varchar(500), @ProcessStatus varchar(20), @StartDate datetime, @EndDate datetime  
as 

exec sp_scProcessListings @PCID, 'Closing', @ProcessStatus, @StartDate, @EndDate

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_scDeleteCampaign]') and xtype = 'P ')  
 drop Procedure sp_scDeleteCampaign
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc sp_scDeleteCampaign(@ID int)
as

begin
--declare @ID int
--set @ID = 37
--exec sp_scDeleteCampaign @ID

delete contact_AptsTasks where contactHistoryID in(
select ID from contactHistory where  id in(
select linkID from scMethodInstance i
join scStep s on i.stepID = s.ID
where PI_ID in (select ID from scProcessInstance where ProcessTypeInstance = 'Campaign' and LinkID = @ID)))



delete contactHistory where  id in(
select linkID from scMethodInstance i
join scStep s on i.stepID = s.ID
where PI_ID in (select ID from scProcessInstance where ProcessTypeInstance = 'Campaign' and LinkID = @ID))

delete scMethodInstance where PI_ID in (select ID from scProcessInstance where ProcessTypeInstance = 'Campaign' and LinkID = @ID)
delete from scProcessInstance where ProcessTypeInstance = 'Campaign' and LinkID = @ID
delete from scCampaignees where CampaignID = @ID
delete from scCampaign where Id = @ID


end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_scGetCommissions]') and xtype = 'P ')  
 drop Procedure sp_scGetCommissions
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


-- exec sp_scGetCommissions 1274

CREATE  proc [dbo].[sp_scGetCommissions]
 @QuoteID int,  @QuoteSalesmanID int
as


select FinalPrice [Sale Amount], KnownAs [Salesperson], 
 (case 
   when FinalPrice <= isNull(RangeHigh,0) then ((FinalPrice - isNull(RangeLow,0) ) * (CommissionPercent/100)) + case when FinalPrice > isNull(RangeLow,0) then isnull(CommissionFlatAmount,0) else 0 end
   when FinalPrice > isNull(RangeHigh,0) then ((case when isNull(RangeHigh,0) = 0 then 600000000000 else RangeHigh end - isNull(RangeLow,0)) * (CommissionPercent/100)) + case when FinalPrice > isNull(RangeLow,0) then isnull(CommissionFlatAmount,0) else 0 end
 end) * Percentage/100  Commission,
RangeLow, RangeHigh, isnull(CommissionPercent,0) [Commission Percent], isnull(CommissionFlatAmount,0) [Commission Flat Amount], SalesType, Seq [Sequence], case when isnull(Paid,0) = 0 then 'False' else 'True' end Paid, VoucherID [Voucher]
from scQuoteSalesman sm
join contact c
on c.id = sm.contactid
join scQuote q
on q.id = sm.QuoteID
join scCommissionStructure cs
on cs.id = q.CommissionStructureID
join scCommissionSteps css
on cs.id = css.CommissionStructureID
and css.SalesType = 
 case when c.Type = 'User' then 'Inside Sales'
	  when c.Type = 'Prospect' then 'Outside Sales' end
where QuoteID = @QuoteID 
and sm.ID like
Case When @QuoteSalesmanID = -1 then '%' Else Convert(varchar(20),@QuoteSalesmanID) End
order by SalesType, [Salesperson], [Sequence]

--select FinalPrice [Sale Amount], KnownAs [Salesperson], 
-- (case 
--   when FinalPrice <= isNull(RangeHigh,0) then ((FinalPrice - isNull(RangeLow,0) ) * (CommissionPercent/100)) + case when FinalPrice > isNull(RangeLow,0) then isnull(CommissionFlatAmount,0) else 0 end
--   when FinalPrice > isNull(RangeHigh,0) then ((case when isNull(RangeHigh,0) = 0 then 600000000000 else RangeHigh end - isNull(RangeLow,0)) * (CommissionPercent/100)) + case when FinalPrice > isNull(RangeLow,0) then isnull(CommissionFlatAmount,0) else 0 end
-- end) * Percentage/100  Commission,
--RangeLow, RangeHigh, isnull(CommissionPercent,0) [Commission Percent], isnull(CommissionFlatAmount,0) [Commission Flat Amount], SalesType, Seq [Sequence], case when isnull(Paid,0) = 0 then 'False' else 'True' end Paid, VoucherID [Voucher]
--from scQuoteSalesman sm
--join contact c
--on c.id = sm.contactid
--join scQuote q
--on q.id = sm.QuoteID
--join scCommissionStructure cs
--on cs.id = q.CommissionStructureID
--join scCommissionSteps css
--on cs.id = css.CommissionStructureID
--and css.SalesType = 
-- case 
--	when c.Type = 'User' then 
--    case when c.id in (select ContactID from access where UserLevel = 'S' and Contactid = c.id) 
--    then 'Sales Management'
--    else 'Inside Sales' end 
-- when c.Type = 'OSSales' then 'Outside Sales' end
--where QuoteID = @QuoteID
--order by SalesType, [Salesperson], [Sequence]






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_scGetHomePayments]') and xtype = 'P ')  
 drop Procedure sp_scGetHomePayments
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





-- exec sp_scGetHomePayments 1282

CREATE  proc [dbo].[sp_scGetHomePayments]
@QuoteID int
as

-- declare @QuoteID int
-- select @QuoteID = 1049

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Pullin'))
drop table #Pullin
create table #Pullin(
ID int null,
FinalPrice money null,           
DueDate datetime null,                                      
StageNumber varchar(500) null,
Description varchar(500) null,                                                                                                                     
DaysElapsed int null,
AmountStyle varchar(50) null,
Amount money null,
ActualAmount money null,
SchedulePoint varchar(100) null)

insert #Pullin
exec scSP_PaymentScheduleForQuote @QuoteID

declare @NonAlloc money

select @NonAlloc = sum(isnull(Amount,0)) 
from scpaymentdetail pd2 
where pd2.StageID = 0 
and pd2.PaymentID in (select id from scPaymentMain where Quoteid = @Quoteid)
and ((pd2.OptionID = 0
and isnull(pd2.AdjustmentID,0) = 0)
 or
(pd2.OptionID <> 0
and isnull(pd2.AdjustmentID,0) <> 0))

delete working_GetHomePayments
where QuoteID = @QuoteID 

if isnull(@NonAlloc,0) <> 0
begin
 insert working_GetHomePayments(QuoteID, Deposit, Owing, Stage, Required, [Payment Type])
 select @QuoteID, @NonAlloc Deposit, -1*@NonAlloc [Owing], 'Unallocated' Stage, 0 [Required], 'Non-Allocated' [Payment Type] 
 union
 select @QuoteID, isNull(sum(pd.Amount),0) Deposit, isNull(ActualAmount,0) - isNull(sum(pd.Amount),0) [Owing], 'Stage ' + p.StageNumber Stage, ActualAmount [Required], ps.PaymentType [Payment Type] 
 from scPaymentStage ps
 left outer join #Pullin p
 on p.StageNumber = ps.StageNumber
 left outer join scPaymentMain pm
 on p.ID = pm.QuoteID 
 left outer join scQuote q
 on q.id = pm.Quoteid
 and TemplateID = q.PaymentTemplateID
 left outer join scPaymentDetail pd
 on pm.id = pd.PaymentID
 and ps.id = pd.StageID
 where q.ID = @QuoteID
 group by p.StageNumber, ActualAmount, ps.PaymentType
 order by Stage, Owing, [Payment Type]
end
else
begin
 insert working_GetHomePayments(QuoteID, Deposit, Owing, Stage, Required, [Payment Type])
 select @QuoteID, isNull(sum(pd.Amount),0) Deposit, isNull(ActualAmount,0) - isNull(sum(pd.Amount),0) [Owing], 'Stage ' + p.StageNumber Stage, ActualAmount [Required], ps.PaymentType [Payment Type]
 from scPaymentStage ps
 left outer join #Pullin p
 on p.StageNumber = ps.StageNumber
 left outer join scPaymentMain pm
 on p.ID = pm.QuoteID 
 left outer join scQuote q
 on q.id = pm.Quoteid
 and TemplateID = q.PaymentTemplateID
 left outer join scPaymentDetail pd
 on pm.id = pd.PaymentID
 and ps.id = pd.StageID
 where q.ID = @QuoteID
 group by p.StageNumber, ActualAmount, ps.PaymentType
 order by p.StageNumber, ActualAmount, ps.PaymentType
end

 insert working_GetHomePayments
 select @QuoteID, isNull(sum(pd.Amount),0) Deposit, isNull(qa.Amount,0) - isNull(sum(pd.Amount),0) [Owing], [Notes] Stage, qa.Amount [Required], 'Adjustment' [Payment Type]
 from scQuoteAdjustments qa
 left outer join scPaymentDetail pd
 on qa.id = pd.AdjustmentID
 left outer join scPaymentMain pm
 on pd.PaymentID = pm.ID
 where qa.QuoteID = @QuoteID and qa.Amount >= 0
 group by [Notes], qa.Amount, PaymentType

 insert working_GetHomePayments
 select @QuoteID, isNull(sum(pd.Amount),0) Deposit, isNull(sum(o.DepositTotal),0) - isNull(sum(pd.Amount),0)  [Owing], [SHORT_DESC] Stage, isNull(sum(o.DepositTotal),0) [Required], 'Deposit' [Payment Type] 
 from scQuoteOptions o
 left outer join scPaymentDetail pd
 on pd.OptionID = o.ID
 left outer join scPaymentMain pm
 on pm.ID = pd.PaymentID
 right outer join hb_options hbo
 on hbo.Option_ID = o.Option_ID
 Where o.QuoteID = @QuoteID and ISNULL(o.DepositTotal,0) > 0 and IsNull(Removed,0) != 1
 group by o.ID, [SHORT_DESC], PaymentType

select *
from working_GetHomePayments
where QuoteID = @QuoteID 





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_SchemaLoadTable]') and xtype = 'P ')  
 drop Procedure sp_SchemaLoadTable
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc sp_SchemaLoadTable @SchemaGroupId int, @Flavour varchar(10), @TableName varchar(500), @DatabaseName varchar(500) as
--declare @SchemaGroupId int, @Flavour varchar(10), @TableName varchar(500), @DatabaseName varchar(500) 
--select @TableName = 'so_master_detail', @DatabaseName = 'tr_master_dist_qa', @Flavour = 'TR', @SchemaGroupId = -1

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#FNames'))
drop table #FNAMES
CREATE TABLE #FNAMES(
TABLE_QUALIFIER varchar(500) null,
TABLE_OWNER varchar(50) null,
TABLE_NAME  varchar(100) null,
COLUMN_NAME  varchar(100) null,
DATA_TYPE int null,
[TYPE_NAME]  varchar(50) null,
[PRECISION] int null,
[LENGTH] int null,
[SCALE] int null,
RADIX int null,
NULLABLE bit null,
REMARKS  varchar(500) null,
COLUMN_DEF varchar(500) null,
SQL_DATA_TYPE int null,
SQL_DATETIME_SUB  varchar(100) null,
CHAR_OCTET_LENGTH int null,
ORDINAL_POSITION int null,
IS_NULLABLE  varchar(500) null,
SS_DATA_TYPE int null)

exec('
insert #FNames
exec '+@DatabaseName+'..sp_columns ''' + @TableName + '''')

 
update SchemaFields set FieldType = type_name + case when type_name in ('decimal', 'real') then '(' + cast([precision] as varchar(20))+ ',' + cast(scale as varchar(20))+ ')' 
when type_name in ('varchar', 'nvarchar', 'char') then '(' + cast([precision] as varchar(20)) + ')' else '' end
from SchemaFields sf							
join SchemaTables st
on sf.SchemaTableId = st.id
join #FNames fn on sf.FieldName = fn.Column_name and fn.TABLE_NAME = st.TableName
where st.Flavour = @Flavour

--check to see if the table exists
declare @Count int 
select @Count = count(*) 
from SchemaTables 
where id in (select id from schemaTables where SchemaGroupId = @SchemaGroupId and TableName = @TableName and Flavour = @Flavour)

if @Count = 0
	insert SchemaTables (SchemaGroupId, TableName, Flavour, FriendlyName)
	select @SchemaGroupId, @TableName, @Flavour, dbo.fn_SchemaSuggestedFriendlyFieldName(@TableName)
 
declare @SchemaTableId int
select @SchemaTableId = id
from SchemaTables
where TableName = @TableName and Flavour = @Flavour and SchemaGroupId = @SchemaGroupId
 
 
insert SchemaFields(SchemaTableId, FieldName, FriendlyName, FieldType, AllowNulls)
select @SchemaTableId, column_name, dbo.fn_SchemaSuggestedFriendlyFieldName(column_name), 
type_name + case when type_name in ('decimal', 'real') then '(' + cast([precision] as varchar(20))+ ',' + cast(scale as varchar(20))+ ')' 
when type_name in ('varchar', 'nvarchar', 'char') then '(' + cast([precision] as varchar(20)) + ')' else '' end, 
case when is_nullable = 'YES' then 1 else 0 end
from #FNames
where column_name not in (select fieldname from schemafields sf join SchemaTables st on sf.SchemaTableId = st.id where TableName = @TableName and Flavour = @Flavour and SchemaGroupId = @SchemaGroupId)


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_scInventoryQuoteUpdate]') and xtype = 'P ')  
 drop Procedure sp_scInventoryQuoteUpdate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure sp_scInventoryQuoteUpdate(@InventoryID int, @QuoteID int)

AS

--Declare @InventoryID int, @QuoteID int
--Select @InventoryID = 24, @QuoteID = 1088

Declare @OldQuoteID int
Select @OldQuoteID = QuoteID from Inventory where ID = @InventoryID

Update scQuote 
Set HoldingID = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    CommunityID = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    ProjectID = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    LotID = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    LotGuesstimate = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    ModelID = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    ModelNameID = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    LotDesc = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    CommunityDesc = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    CivicAddress = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    BlockDesc = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    HoldingDesc = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    GST = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    GSTRebate = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    GSTTotal = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    ProjectDesc = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    ModelDesc = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    ModelNameDesc = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    PlanNo = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    GST_Code = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    GST_PCT = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    SALES_TAX_CODE = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID), 
    SALES_TAX = (Select Top 1 HoldingID From scQuote Where ID = @OldQuoteID)
Where ID = @QuoteID

Update scQuote 
Set LotDesc = (Select Top 1 LotDesc from Inventory Where ID = @InventoryID), 
    LotID = 0,
    CommunityDesc = (Select Top 1 CommunityDesc from Inventory Where ID = @InventoryID), 
    CommunityID = 0,
    CivicAddress = (Select Top 1 CivicAddress from Inventory Where ID = @InventoryID), 
    BlockDesc = (Select Top 1 BlockDesc from Inventory Where ID = @InventoryID), 
    HoldingDesc = (Select Top 1 HoldingDesc from Inventory Where ID = @InventoryID), 
    HoldingID = 0,
    ProjectDesc = (Select Top 1 ProjectDesc from Inventory Where ID = @InventoryID), 
    ProjectID = 0,
    ModelDesc = (Select Top 1 ModelDesc from Inventory Where ID = @InventoryID), 
	ModelID = 0,
    ModelNameDesc = (Select Top 1 ModelNameDesc from Inventory Where ID = @InventoryID), 
	ModelNameID = 0,
    PlanNo = (Select Top 1 PlanNo from Inventory Where ID = @InventoryID), 
    LotClass = (Select Top 1 LotClass from Inventory Where ID = @InventoryID), 
    LotSubClass = (Select Top 1 LotSubClass from Inventory Where ID = @InventoryID)
Where ID = @QuoteID


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_scOptionPastConfirmationPoint]') and xtype = 'P ')  
 drop Procedure sp_scOptionPastConfirmationPoint
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
Create Procedure sp_scOptionPastConfirmationPoint (@QuoteOptionsID int)

AS

Declare @QuoteID int, @SchedulePoint_ID int, 
        @Project_ID int, @Task_UID int, @ConfirmationDeadlineDays int, @Task_Start_Date datetime

Select @QuoteID = 0, @SchedulePoint_ID = 0, @Project_ID = 0, @Task_UID = 0, 
       @ConfirmationDeadlineDays = 0, @Task_Start_Date = null

Select @QuoteID = QuoteID, @SchedulePoint_ID = HB_ConfirmationPoint_ID, @ConfirmationDeadlineDays = ConfirmationDeadlineDays from scQuoteOptions Where ID = @QuoteOptionsID

Select @Task_UID = MSP_Task_UID from HB_ScheduleMap Where SchedulePoint_ID = @SchedulePoint_ID and QuoteID = @QuoteID
Select @Project_ID = MSP_Proj_ID from scQuote Where ID = @QuoteID

Select @Task_Start_Date = DateAdd(day,@ConfirmationDeadlineDays,Task_Start_Date) From MSP_Tasks Where Task_UID = @Task_UID and Proj_ID = @Project_ID

if @Task_Start_Date is null
	begin
		Select 0 [Passed]
	end
else if @Task_Start_Date < GetDate()
	begin
		Select 0 [Passed]
	end
else if @Task_Start_Date > GetDate()
	begin
		Select 1 [Passed]
	end
else
	begin
		Select 0 [Passed]
	end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_scProcessListings]') and xtype = 'P ')  
 drop Procedure sp_scProcessListings
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
Create Procedure sp_scProcessListings(@PCID varchar(500), @Type varchar(20), @ProcessStatus varchar(20), @StartDate datetime, @EndDate datetime)
As

--Declare @PCID varchar(500), @Type varchar(20), @ProcessStatus varchar(20), @StartDate datetime, @EndDate datetime
--Select @PCID = 'Mike', @Type ='Campaign', @ProcessStatus ='', @StartDate = '01-23-2008', @EndDate = '02-28-2008'

--Types 'Lead', 'Campaign', 'Closing'

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Process'))
drop table #Process

create table #Process
(
 ID int identity(1,1) not null Primary Key,
 ProcessDescription varchar(64) null,
 ProcessStartDate datetime null,
 ProcessStatus varchar(20) null,
 StepDescription varchar(128) null,
 StepStartDate datetime null,
 LeadName varchar(100) null,
 StepMethod varchar(8) null,
 StepStatus varchar(20) null,
 CampaignName varchar(128) null
)

Declare @Where varchar(8000), @Sql varchar(8000)

If Exists(Select * from working_Process where PCID = @PCID)
Begin
	Select @Where = ' AND p.ID in (Select Process_ID from working_Process where PCID = ''' + @PCID + ''') '
End

If Exists(Select * from working_Campaign where PCID = @PCID) AND @Type = 'Campaign'
Begin
	Select @Where = ' AND ca.ID in (Select ID from working_Campaign Where PCID = ''' + @PCID + ''') '
End

Select @Sql = 'Select p.Description, pi.ProcessStartDate, pi.ProcessStatus, s.Description, mi.StartDate, c.KnownAs, s.MethodType, mi.Status
' + (Case When @Type = 'Campaign' Then ' ,ca.Description' Else ', null' End) + '
from scProcessInstance pi 
Inner Join scProcess p on p.ID = pi.ProcessID
Inner Join scMethodInstance mi on mi.PI_ID = pi.id
Inner Join scStep s on s.ID = mi.StepID
Inner Join scLead l on l.ID = mi.LeadID
Inner Join Contact c on c.ID = l.Contact_ID
' + (Case When @Type = 'Campaign' Then 'Inner Join scCampaign ca on ca.ID = pi.LinkID' Else '' End) + '
Where ProcessTypeInstance = ''' + @Type + ''' and pi.ProcessStartDate >= ''' + Convert(varchar(500),@StartDate) + ''' 
and pi.ProcessStartDate < ''' + Convert(varchar(500),@EndDate) + ''' '

Insert Into #Process (ProcessDescription, ProcessStartDate, ProcessStatus, StepDescription, StepStartDate, LeadName, StepMethod, StepStatus, CampaignName)
exec (@Sql)

Select ProcessDescription, ProcessStartDate, ProcessStatus, StepDescription, StepStartDate, LeadName, StepMethod, StepStatus, CampaignName
From #Process

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_scQuoteClone]') and xtype = 'P ')  
 drop Procedure sp_scQuoteClone
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure sp_scQuoteClone(@QuoteID int)

AS

--Declare @QuoteID int
--Select @QuoteID = 1024

Declare @NewQuoteID int
Select @NewQuoteID = -1

---------------Copy Master Quote First------------------------------
Insert Into scQuote (LeadID, HoldingID, CommunityID, ProjectID, LotID, LotGuesstimate, ModelID, ModelNameID, GoodUntilDate, 
	   FinalPrice, Status, 
	   StartDate, ConvertFlag, LotDesc, CommunityDesc, CivicAddress, BlockDesc, CompanyID, HoldingDesc, GST, GSTRebate, 
	   GSTTotal, ProjectDesc, ModelDesc, ModelNameDesc, PlanNo, SaleType,
	   GST_Code, GST_PCT, LotReserveExpiryDate, Discount, BasePriceDate, InventoryID, UseResale, ListingID)
Select LeadID, HoldingID, CommunityID, ProjectID, LotID, LotGuesstimate, ModelID, ModelNameID, GetDate() + 7, 
	   FinalPrice, Status, 
	   StartDate, ConvertFlag, LotDesc, CommunityDesc, CivicAddress, BlockDesc, CompanyID, HoldingDesc, GST, GSTRebate, 
	   GSTTotal, ProjectDesc, ModelDesc, ModelNameDesc, PlanNo, SaleType,
	   GST_Code, GST_PCT, LotReserveExpiryDate, Discount, BasePriceDate, InventoryID, UseResale, ListingID
from scQuote Where ID = @QuoteID

Select @NewQuoteID = @@Identity

----Copy Quote Custom Options------------------------------------
Insert Into scQuoteCustom (QuoteID, ShortDescription, Description, PriceIsKnownYN, Price, InventoryID)
Select @NewQuoteID, ShortDescription, Description, PriceIsKnownYN, Price, InventoryID
from scQuoteCustom Where QuoteID = @QuoteID

----Copy QuoteOptionsRooms (Only used at quote level now)--------
Insert Into scQuoteRoomOptions (ModRoom_ID, QuoteID, Value, DimmensionID)
Select ModRoom_ID, @NewQuoteID, Value, DimmensionID
from scQuoteRoomOptions Where QuoteID = @QuoteID

----Copy Options and there room attributes-----------------------

Declare @Counter int, @Max int, @NewQuoteOptionsID int
Select @Counter = min(ID) from scQuoteOptions where QuoteID = 1024
Select @Max = max(ID) from scQuoteOptions where QuoteID = 1024
Select @NewQuoteOptionsID = 0;

while @Counter <= @Max
Begin
	Insert Into scQuoteOptions(QuoteID, Alternate, HB_Elv_Opt_Id, Option_ID, OriginalOption_ID, Major_ID, Sub_ID, UnitOfMeasure, IsStructural, UnitQty, 
	   UnitPrice, UnitTotal, AllowanceQty, AllowancePrice, AllowanceTotal, ReplaceId, PayableTotal, DepositPercent, DepositTotal, 
	   Removed, ParentID, HBM_ID, AttributeCost, Adjustments, OptionTotal, OrgUnitQty, OrgUnitPrice, OrgUnitTotal, PriceExtra)	
	Select @NewQuoteID, Alternate, HB_Elv_Opt_Id, Option_ID, OriginalOption_ID, Major_ID, Sub_ID, UnitOfMeasure, IsStructural, UnitQty, 
	   UnitPrice, UnitTotal, AllowanceQty, AllowancePrice, AllowanceTotal, ReplaceId, PayableTotal, DepositPercent, DepositTotal, 
	   Removed, ParentID, HBM_ID, AttributeCost, Adjustments, OptionTotal, OrgUnitQty, OrgUnitPrice, OrgUnitTotal, PriceExtra
	from scQuoteOptions Where ID = @Counter

	Select @NewQuoteOptionsID = @@Identity

	Insert Into scQuoteOptions_Designations (QuoteOptionsID, Qty, OATYP_ID1, OATVAL_ID1, OATYP_ID2, OATVAL_ID2, OATYP_ID3, OATVAL_ID3, OATYP_ID4, OATVAL_ID4, OATYP_ID5, 
	   OATVAL_ID5, OATYP_ID6, OATVAL_ID6, OATYP_ID7, OATVAL_ID7, OATYP_ID8, OATVAL_ID8, OATYP_ID9, OATVAL_ID9, OATYP_ID10, 
	   OATVAL_ID10, MODROOM_ID, RoomName, QuoteID, Notes)
	Select @Counter, Qty, OATYP_ID1, OATVAL_ID1, OATYP_ID2, OATVAL_ID2, OATYP_ID3, OATVAL_ID3, OATYP_ID4, OATVAL_ID4, OATYP_ID5, 
	   OATVAL_ID5, OATYP_ID6, OATVAL_ID6, OATYP_ID7, OATVAL_ID7, OATYP_ID8, OATVAL_ID8, OATYP_ID9, OATVAL_ID9, OATYP_ID10, 
	   OATVAL_ID10, MODROOM_ID, RoomName, @NewQuoteID, Notes
	From scQuoteOptions_Designations Where QuoteOptionsID = @Counter and QuoteID = @NewQuoteID
	
	select @Counter = @Counter + 1
End

Select @NewQuoteID 'NewQuoteID'


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_scQuoteGetBasePrice]') and xtype = 'P ')  
 drop Procedure sp_scQuoteGetBasePrice
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure [dbo].[sp_scQuoteGetBasePrice] (@QuoteID int, @BasePriceDate DateTime)

As

--Declare @QuoteID int, @BasePriceDate DateTime
--Select @QuoteID = 1024, @BasePriceDate = '2/11/2008'

Declare @Price money
Select @Price = 0

Select Top 1 @Price = mph.price from HB_ModelPriceHistory mph
Inner Join scQuote q on q.ModelID = mph.Model_ID and q.ProjectID = mph.Project_CD and mph.Level = 'P'
Where mph.ExpieryDate < @BasePriceDate and q.ID = @QuoteID
Order By mph.ExpieryDate desc

If IsNull(@Price,0) = 0
Begin
	
	Select Top 1 @Price = mph.price from HB_ModelPriceHistory mph
	Inner Join scQuote q on q.ModelID = mph.Model_ID and q.CommunityID = mph.Community_CD and mph.Level = 'C'
	Where mph.ExpieryDate < @BasePriceDate and q.ID = @QuoteID
	Order By mph.ExpieryDate desc

	If IsNull(@Price,0) = 0
	Begin

		Select Top 1 @Price = mph.price from HB_ModelPriceHistory mph
		Inner Join scQuote q on q.ModelID = mph.Model_ID and q.HoldingID = mph.Raw_Land_CD and mph.Level = 'H'
		Where mph.ExpieryDate < @BasePriceDate and q.ID = @QuoteID
		Order By mph.ExpieryDate desc

	End

End

Select IsNull(@Price,0) Price



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_scQuoteOption_CreateApprovalLog]') and xtype = 'P ')  
 drop Procedure sp_scQuoteOption_CreateApprovalLog
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE Procedure [dbo].[sp_scQuoteOption_CreateApprovalLog] (@QuoteOptionID int)

AS

Insert Into scQuoteOptions_ApprovalLog(QuoteOptionsID, QuoteID, Alternate, HB_Elv_Opt_Id, Option_ID, OriginalOption_ID, 
									   Major_ID, Sub_ID, UnitOfMeasure, IsStructural, UnitQty, UnitPrice, UnitTotal, 
									   AllowanceQty, AllowancePrice, AllowanceTotal, ReplaceId, PayableTotal, DepositPercent, 
									   DepositTotal, Removed, ParentID, HBM_ID, AttributeCost, Adjustments, Confirmation, 
									   ApprovalID, Approved, ConfirmationDeadlineDays, HB_OrderPoint_ID,
									   HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID,CreateDate)

Select Id, QuoteID, Alternate, HB_Elv_Opt_Id, Option_ID, OriginalOption_ID, Major_ID, Sub_ID, UnitOfMeasure, IsStructural, 
	   UnitQty, UnitPrice, UnitTotal, AllowanceQty, AllowancePrice, AllowanceTotal, ReplaceId, PayableTotal, DepositPercent, 
	   DepositTotal, Removed, ParentID, HBM_ID, AttributeCost, Adjustments, Confirmation, ApprovalID, Approved, 
	   ConfirmationDeadlineDays, HB_OrderPoint_ID, HB_ConfirmationPoint_ID, HB_ScheduleDeliveryPoint_ID,GetDate()
From scQuoteOptions Where ID = @QuoteOptionID

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_scQuoteOptionsAttrUpdate]') and xtype = 'P ')  
 drop Procedure sp_scQuoteOptionsAttrUpdate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
Create Procedure sp_scQuoteOptionsAttrUpdate(@Type varchar(20), @ElvOptId int, @QuoteOptionsID int, @QuoteID int)

AS

--Declare @Type varchar(20), @ElvOptId int, @QuoteOptionsID int, @QuoteID int
--Select @Type = 'Alternate', @ElvOptId = 722, @QuoteOptionsID = -1, @QuoteID = 1024

if (@Type = 'New') OR (@Type = 'AttrReplacement')
	Begin
		Insert Into scQuoteOptions_Designations (QuoteOptionsID, Qty, OATYP_ID1, OATVAL_ID1, OATYP_ID2, OATVAL_ID2, 
				OATYP_ID3, OATVAL_ID3, OATYP_ID4, OATVAL_ID4, OATYP_ID5, OATVAL_ID5, OATYP_ID6, OATVAL_ID6, OATYP_ID7, OATVAL_ID7, 
				OATYP_ID8, OATVAL_ID8, OATYP_ID9, OATVAL_ID9, OATYP_ID10, OATVAL_ID10, MODROOM_ID, RoomName)
		Select @QuoteOptionsID, Qty, OATYP_ID1, OATVAL_ID1, OATYP_ID2, OATVAL_ID2, 
		OATYP_ID3, OATVAL_ID3, OATYP_ID4, OATVAL_ID4, OATYP_ID5, OATVAL_ID5, OATYP_ID6, OATVAL_ID6, OATYP_ID7, OATVAL_ID7, 
		OATYP_ID8, OATVAL_ID8, OATYP_ID9, OATVAL_ID9, OATYP_ID10, OATVAL_ID10, MODROOM_ID, RoomName 
		From HB_OPTION_DESIGNATIONS
		Where ElvOpt_ID = @ElvOptId
			
	End
if (@Type = 'Alternate') OR (@Type = 'Replacement')
	Begin
		--Clear Old Attributes
		Delete scQuoteOptions_Designations Where QuoteOptionsID = @QuoteOptionsID 

		--Load New Attribute Defaults
		Insert Into scQuoteOptions_Designations (QuoteOptionsID, Qty, OATYP_ID1, OATVAL_ID1, OATYP_ID2, OATVAL_ID2, 
				OATYP_ID3, OATVAL_ID3, OATYP_ID4, OATVAL_ID4, OATYP_ID5, OATVAL_ID5, OATYP_ID6, OATVAL_ID6, OATYP_ID7, OATVAL_ID7, 
				OATYP_ID8, OATVAL_ID8, OATYP_ID9, OATVAL_ID9, OATYP_ID10, OATVAL_ID10, MODROOM_ID, RoomName)
		Select @QuoteOptionsID, Qty, OATYP_ID1, OATVAL_ID1, OATYP_ID2, OATVAL_ID2, 
		OATYP_ID3, OATVAL_ID3, OATYP_ID4, OATVAL_ID4, OATYP_ID5, OATVAL_ID5, OATYP_ID6, OATVAL_ID6, OATYP_ID7, OATVAL_ID7, 
		OATYP_ID8, OATVAL_ID8, OATYP_ID9, OATVAL_ID9, OATYP_ID10, OATVAL_ID10, MODROOM_ID, RoomName 
		From HB_OPTION_DESIGNATIONS
		Where ElvOpt_ID = @ElvOptId
	End
if (@Type = 'Partial Replacement')
	Begin
		Insert Into scQuoteOptions_Designations (QuoteOptionsID, Qty, OATYP_ID1, OATVAL_ID1, OATYP_ID2, OATVAL_ID2, 
				OATYP_ID3, OATVAL_ID3, OATYP_ID4, OATVAL_ID4, OATYP_ID5, OATVAL_ID5, OATYP_ID6, OATVAL_ID6, OATYP_ID7, OATVAL_ID7, 
				OATYP_ID8, OATVAL_ID8, OATYP_ID9, OATVAL_ID9, OATYP_ID10, OATVAL_ID10, MODROOM_ID, RoomName)
		Select @QuoteOptionsID, Qty, OATYP_ID1, OATVAL_ID1, OATYP_ID2, OATVAL_ID2, 
		OATYP_ID3, OATVAL_ID3, OATYP_ID4, OATVAL_ID4, OATYP_ID5, OATVAL_ID5, OATYP_ID6, OATVAL_ID6, OATYP_ID7, OATVAL_ID7, 
		OATYP_ID8, OATVAL_ID8, OATYP_ID9, OATVAL_ID9, OATYP_ID10, OATVAL_ID10, MODROOM_ID, RoomName 
		From HB_OPTION_DESIGNATIONS
		Where ElvOpt_ID in (Select HB_Elv_Opt_Id from working_scQuoteOptions Where QuoteID = @QuoteID)
	End

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_scUpdateSpecHomeCustomer]') and xtype = 'P ')  
 drop Procedure sp_scUpdateSpecHomeCustomer
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
Create Procedure sp_scUpdateSpecHomeCustomer (@CustomerID int, @CompanyID int, @QuoteID int)

AS

--Declare @CustomerID int, @CompanyID int, @QuoteID int
--Select @CustomerID = 2, @CompanyID = 16, @QuoteID = 921

Declare @TRDB varchar(500), @HRDB varchar(500)
Select @TRDB = TreasuryDBName, @HRDB = HumanDBName From Companies Where AutoID = @CompanyID

--Select @TRDB, @HRDB

Declare @proj_ID_ID int, @pri_num int
Select @proj_ID_ID = Proj_ID_ID, @pri_num = pri_num from scQuote where ID = @QuoteID

--Select @proj_ID_ID 'Proj_ID_ID', @pri_num 'pri_num'

Declare @sqlStr varchar(8000)

if(@pri_num is not null)
begin

	select @sqlStr = 
	'Declare @pri_status char(1) ' +
	'Select @pri_status = pri_status from ' + @HRDB + '..proj_id Where pri_num = ' + Convert(varchar(50),@pri_num) + ' and pri_co = 1 ' +
	'if @pri_status <> ''C'' ' +
	'begin ' +
		'Update ' + @HRDB + '..proj_id ' +
		'Set customer_id = ' + Convert(varchar(50),@CustomerID) + ', ' +
			'customer_code = (Select Customer_Code from ' + @TRDB + '..customers where Customer_ID = ' + Convert(varchar(50),@CustomerID) + ') ' +
		'Where pri_num = ' + Convert(varchar(50),@pri_num) + ' and pri_co = 1 ' +
	'end '

	--print @sqlStr
	exec (@sqlStr)
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Search_Glass_Parts]') and xtype = 'P ')  
 drop Procedure sp_Search_Glass_Parts
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--select * from companies
--exec sp_Search_Glass_Parts 'fb21072', 'hm', 1, 13
--exec sp_Search_Glass_Parts 'dw01660', 'hm', 1, 13
--select * from working_glass_parts_searched
--select * from working_ws_qty_column_headers
--exec sp_Search_Glass_Parts 'FB21072', 'hm', 1, 12
CREATE proc [dbo].[sp_Search_Glass_Parts]
@part_num char(7),
@username varchar(300),
@Whse_id int,
@companyID int
as 
begin
	--set @part_num = 'FB21072'
	--set @username = 'hm'
	--set @Whse_id = 1
	--set @companyID = 12
	--/\--sp params
	declare 
	@part_number char(10),
	@override_cnt int,
	@override char(1),
	@parts int,
	@loop_cnt int,
	@current_glass_id varchar(20),
	@eff_dt datetime,
	@tr_db varchar(50),
	@strSQL varchar(8000),
	@whse_counter int,
	@num_whses int,
	@available_qty int,
	@current_whse int,
	@Stocking_whse_id int,
	@Stocking_company_id int,
	@Stocking_TR_DB varchar(50),
	@whse_name varchar(50)

	declare @revlookup table (
	m_name varchar(20),
	make_id numeric(8,0),
	mm_name varchar(20),
	make_model_id numeric(8,0),
	bs_dsc varchar(35),
	veh_id numeric(8,0),
	nags_glass_id char(7),
	part_number char(10),
	part_description varchar(150),
	nags_price numeric(8, 2),
	eff_dt datetime
	)

	declare @revlookupfiltered table (
	m_name varchar(20),
	make_id numeric(8,0),
	mm_name varchar(20),
	make_model_id numeric(8,0),
	bs_dsc varchar(35),
	--veh_id numeric(8,0),
	nags_glass_id char(7),
	part_number char(10),
	part_description varchar(150),
	nags_price numeric(8, 2),
	eff_dt datetime,
	override char(1)
	)

	-----------------------------------------------------------------

	select @tr_db=treasurydbname from companies where autoid=@companyID
	CREATE TABLE #whse_ids( whse_id int, company_id int )
	--gets all of the warehouses from the current company that arnt stocking warehouses.
	set @strSQL = 
	'CREATE TABLE #whse_ids1 ( whse_id int, company_id int )
	insert into #whse_ids1
	select u.whse_id, u.company_id from user_rights u
	join '+@tr_db+'..warehouse w on w.whse_id = u.whse_id
	where contact_id=(select contactid from '+@tr_db+'..mluser where name='''+@username+''') and u.company_id='
	+cast(@companyID as varchar(15))+' and mainstocking_id is not null
	select * from #whse_ids1
	DROP TABLE #whse_ids1'
	delete from #whse_ids
	insert into #whse_ids(whse_id, company_id) exec (@strSQL)
	select @num_whses=count(*) from #whse_ids
	-----------------------------------------------------
	--gets the tr_database name that the stocking warehouse is in
	set @strSQL =
	'select top 1 mainstocking_id, company_id from '+@tr_db+'..warehouse where whse_id in(
	select u.whse_id from user_rights u
	join '+@tr_db+'..warehouse w on w.whse_id = u.whse_id
	where contact_id=(select contactid from '+@tr_db+'..mluser where name='''+@username+''') and u.company_id='+cast(@companyID as varchar(15))+' and mainstocking_id is not null)'

	CREATE TABLE #tr_stocking ( whse_id int, company_id int )
	INSERT #tr_stocking exec ( @strSQL )
	SELECT @Stocking_whse_id=whse_id, @Stocking_company_id=company_id from #tr_stocking
	DROP TABLE #tr_stocking
	select @Stocking_TR_DB=treasurydbname from companies where autoid=@Stocking_company_id
	-----------------------------------------------------------
	-- updates the working table that contains the names of the warehouses to be displayed in the grid headers
	delete from working_ws_qty_column_headers where username=@username and table_type='working_glass_parts_searched'
	insert into working_ws_qty_column_headers (username, table_type)values (@username, 'working_glass_parts_searched')

	set @whse_counter = 1	
	set @current_whse = -1
	CREATE TABLE #tr_name ( name varchar(50) )
	--the warehouse names in the current company
	while( @whse_counter <= @num_whses )
	begin

		select top 1 @current_whse=whse_id from #whse_ids where whse_id > @current_whse order by whse_id
		delete from #tr_name
		set @strSQL = 'select description from '+@tr_db+'..warehouse where whse_id='+cast(@current_whse as varchar(15))
		insert into #tr_name exec( @strSQL )
		select top 1 @whse_name=replace(name,'''', '''''') from #tr_name

		set @strSQL = 'update working_ws_qty_column_headers set hdr'+cast(@whse_counter as varchar(10))+'='''+@whse_name+''' where username='''+@username+''' and table_type=''working_glass_parts_searched'' '
		exec( @strSQL )
		set @whse_counter = @whse_counter + 1
	end
	--the stocking warehouse name
	delete from #tr_name
	set @strSQL = 'select description from '+@Stocking_TR_DB+'..warehouse where whse_id='+cast(@Stocking_whse_id as varchar(15))
	insert into #tr_name exec( @strSQL )
	select top 1 @whse_name=replace(name,'''', '''''') from #tr_name
	DROP TABLE #tr_name
	set @strSQL = 'update working_ws_qty_column_headers set hdr'+cast(@whse_counter as varchar(10))+'='''+@whse_name+''' where username='''+@username+''' and table_type=''working_glass_parts_searched'' '
	exec( @strSQL )

	-------------------------------------------------------


	insert into @revlookup 
	--gets the original list or parts that match the nags glass id
	select distinct m.NAME, m.make_id, mm.NAME, mm.make_model_id, bs.DSC, v.veh_id, vg.nags_glass_id, 
	ngp.nags_glass_id+ngp.glass_color_cd+ngp.atchmnt_flag as Part_Number,
	np.DSC + ' ' +
	case when p.name is null then '' else '['+ p.name + ']' end + 
	case when s.name is null then '' else '['+ s.name + ']' end + 
	case when ng.ANT_FLAG = 'Y' then '[Ant]' else '' end + 
	case when ng.HEATED_FLAG = 'Y' then '[Heated]' else '' end,
	ngp.PRC, ngp.EFF_DT
	from veh_glass vg
	join nags_glass ng on ng.nags_glass_id = vg.nags_glass_id
	join NAGS_PREFIX np ON np.prefix_cd = ng.prefix_cd
	join GLASS_ON_OPENING goo ON goo.NAGS_GLASS_ID = vg.NAGS_GLASS_ID
	left outer join POS p ON p.POS_CD = goo.POS_CD
	left outer join SIDE s ON s.SIDE_CD = goo.SIDE_CD
	join NAGS_GLASS_PRC ngp on ngp.nags_glass_id = vg.nags_glass_id
	join veh v on v.veh_id = vg.veh_id
	join body_style bs on bs.body_style_id = v.body_style_id
	join make_model mm on mm.make_model_id = v.make_model_id
	join make m on m.make_id = mm.make_id
	join mf mf on mf.mf_id = m.mf_id
	where vg.nags_glass_id = @part_num
	order by m.NAME, mm.NAME, bs.DSC, vg.nags_glass_id


	--curses through all the records to update the part year on the description
	declare cur_nags cursor for
	select distinct part_number from @revlookup
	open cur_nags
	fetch cur_nags into @part_number
	while @@fetch_status=0
	begin
		update @revlookup set part_description = (
		select SUBSTRING(cast(max( model_yr )as varchar),3,4) + ')'
		from body_style b
		join veh v on v.body_style_id = b.body_style_id
		where v.veh_id in (select top 1 veh_id from @revlookup where part_number=@part_number order by veh_id desc )
		) + ' ' + part_description where part_number=@part_number
		
		update @revlookup set part_description = (
		select '('+SUBSTRING(cast(min( model_yr )as varchar),3,4) + '-'
		from body_style b
		join veh v on v.body_style_id = b.body_style_id
		where v.veh_id in (select top 1 veh_id from @revlookup where part_number=@part_number order by veh_id asc)
		) + part_description where part_number=@part_number	

		fetch cur_nags into @part_number
	end
	close cur_nags
	deallocate cur_nags


	--filters through the list leaving only one part from the same year of parts
	declare cur_nags cursor for
	select distinct part_number from @revlookup
	open cur_nags
	fetch cur_nags into @part_number
	while @@fetch_status=0
	begin
		select @override_cnt=count( * ) from parts_catalogue where override='T' and referenceid=@part_number
		set @override = 'F'
		if( @override_cnt > 0 )
		begin
			set @override = 'T'
		end
		
		insert into @revlookupfiltered
		select m_name, make_id, mm_name, make_model_id, bs_dsc, nags_glass_id, part_number, part_description, nags_price, eff_dt, @override from @revlookup where part_number=@part_number

		fetch cur_nags into @part_number
	end
	close cur_nags
	deallocate cur_nags

	--select * from @revlookupfiltered

	delete from working_glass_parts_searched where username=@username
	--moves the selected parts into the working table
	insert into working_glass_parts_searched (part_num, nags_glass_id, description, dimension, ureth, labour, clips, molding, 
	nags_price, effective_date, username, m_name, make_id, mm_name, make_model_id, bs_dsc, PFValue1, PFValue2, PFValue3, PFValue4, 
	PFValue5, PFValue6, PFValue7, PFValue8, PFValue9, PFValue10, override, ranking, hours, notes, srp, timerestriction )
	select distinct r.part_number, r.nags_glass_id, r.part_description,  
	CAST(ng.BLK_SIZE1 AS varchar) + ' X ' + CAST(ng.BLK_SIZE2 AS varchar) AS Dimension, ng.tube_qty AS Ureth, 
	ngc.NAGS_LABOR AS Labour, ngc.CLIPS_FLAG AS Clips, ngc.MLDING_FLAG AS Molding, r.nags_price,  
	r.EFF_DT, @username, r.m_name, r.make_id, r.mm_name, r.make_model_id, r.bs_dsc, 
	pfc.PFValue1, pfc.PFValue2,pfc.PFValue3,pfc.PFValue4,pfc.PFValue5,
	pfc.PFValue6,pfc.PFValue7,pfc.PFValue8,pfc.PFValue9,pfc.PFValue10,
	r.Override, pc.Ranking, pc.Hours, pc.Notes, pc.Srp, pc.TimeRestriction
	from @revlookupfiltered r
	join NAGS_GLASS ng on ng.nags_glass_id = r.nags_glass_id
	join NAGS_GLASS_CFG ngc ON r.NAGS_GLASS_ID = ngc.NAGS_GLASS_ID 
	join NAGS_GLASS_PRC ngp ON r.NAGS_GLASS_ID = ngp.NAGS_GLASS_ID 
	left outer join PARTS_CATALOGUE pc on pc.referenceid = r.part_number
	LEFT OUTER JOIN PRICE_FACTOR_CTRL pfc ON pfc.Prefix = ng.PREFIX_CD and pfc.companyid=@companyID and Whse_id = @Whse_id 

	--select * from working_glass_parts_searched where username=@username

	set @loop_cnt = 0
	set @current_glass_id = -1
	--gets the number of distinct part numbers for the specified user
	select @parts=count( distinct part_num ) from working_glass_parts_searched where username=@username
	--loops through each one of those parts
	while( @loop_cnt < @parts )
	begin
		--increases the loop counter 
		set @loop_cnt = @loop_cnt + 1
		--selectes the most current part number based on its effective date
		select top 1 @current_glass_id=part_num, @eff_dt=effective_date
		from working_glass_parts_searched 
		where part_num > @current_glass_id and username=@username
		order by part_num, effective_date desc
		--deletes all other parts of the same part number that dates arnt the most current
		delete from working_glass_parts_searched
		where part_num = @current_glass_id and effective_date <> @eff_dt and username=@username
		
		-----------------------------------------------------------
		--WAREHOUSE QUANTITIES
		--gets the quantities available for the current part
		set @whse_counter = 1	
		set @current_whse = -1
		
		--the qty in the current companies warehouses
		while( @whse_counter <= @num_whses )
		begin
			select top 1 @current_whse=whse_id from #whse_ids where whse_id > @current_whse order by whse_id
			set @strSQL = @tr_db+'..sp_get_warehouse_qty_available '''+@tr_db+''', '''+@current_glass_id+''', '''+@username+''', '+cast(@current_whse as varchar(15))+''
			exec( @strSQL )

			set @available_qty = 0
			CREATE TABLE #qty_aval (var int)
			INSERT #qty_aval exec ( 'select qty_available from '+@tr_db+'..working_ws_available_qty where username='''+@username+'''')
			SELECT @available_qty = var from #qty_aval
			DROP TABLE #qty_aval
			set @strSQL = 'update working_glass_parts_searched set qty'+cast(@whse_counter as varchar(10))+'='+cast(@available_qty as varchar(15))+' where username='''+@username+''' and part_num = '''+@current_glass_id+''' '
			exec( @strSQL )
			set @whse_counter = @whse_counter + 1
		end

		--the qty in the stocking warehouse
		set @strSQL = @tr_db+'..sp_get_warehouse_qty_available '''+@Stocking_TR_DB+''', '''+@current_glass_id+''', '''+@username+''', '+cast(@Stocking_whse_id as varchar(15))+''
		exec( @strSQL )
		
		set @available_qty = 0
		CREATE TABLE #st_qty_aval (var int)
		INSERT #st_qty_aval exec ( 'select qty_available from '+@Stocking_TR_DB+'..working_ws_available_qty where username='''+@username+'''')
		SELECT @available_qty = var from #st_qty_aval
		DROP TABLE #st_qty_aval
		set @strSQL = 'update working_glass_parts_searched set qty'+cast(@whse_counter as varchar(10))+'='+cast(@available_qty as varchar(15))+' where username='''+@username+''' and part_num = '''+@current_glass_id+''' '
		exec( @strSQL )
		--------------------------------------------------------	

	end
	DROP TABLE #whse_ids
--select * from working_glass_parts_searched where username=@username order by m_name, part_num
end








Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_security_KBI_whereClause_Creator]') and xtype = 'P ')  
 drop Procedure sp_security_KBI_whereClause_Creator
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_security_KBI_whereClause_Creator] 
@KBI_Instance_ID int,
@CompanyID int
as

begin
/*

exec sp_security_KBI_whereClause_Creator 2,33

*/
--#############################
--Note sp_security_whereClause_Creator will have to be altered as well if any changes are made here
--#############################

declare 
@SQ_ID int,
@user varchar(8000)

set @user =  cast(@KBI_Instance_ID as varchar(8000))


select @SQ_ID = k.sq_id from dbo.Security_KBIs k join security_kbi_instance i 
on k.id = i.skbi_id and i.id = @KBI_Instance_ID


declare csr cursor for
select si.ID[SI_ID],sl.id[SL_ID],isnull(sq.kbifieldname,sq.fieldname)[fieldname],sl.limittype,sv.value from security_Instance si 
join security_Limit sl on sl.SI_ID = si.ID
join security_Values sv on sv.SL_ID = sl.ID
join security_query_columns sq on sq.fieldName = sl.ColumnName and sq.sq_id = @SQ_ID 
where isnull(si.sq_ID,-999) = @SQ_ID and si.Target = @user
and si.CompanyID in(@CompanyID,-1) and si.Active = 1 
order by si.id,sl.id,sv.id

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#tbl_text'))
drop table #tbl_text 
create table #tbl_text(
whereClause text
)
insert into #tbl_text(whereClause)
values('')

declare 
@si_ID int,
@currentSI_ID int,
@sl_ID int,
@currentSL_ID int,
@columnName varchar(100),
@limittype varchar(10),
@value varchar(200),
@whereStr varchar(8000),
@isNewLimit bit,
@mytextPtr varbinary(16),
@myCommandPtr varbinary(16)
--select * from security_query_columns
SELECT @mytextPtr = TEXTPTR(whereClause) 
FROM #tbl_text 
select @myCommandPtr = TEXTPTR(command)
FROM Reflex_Command_Session where username = @user

select @whereStr = 'and (',@currentSI_ID = -1,@currentSL_ID = -1,@isNewLimit = 1


open csr
fetch next from csr into @si_ID,@sl_ID,@columnName,@limittype,@value
while @@fetch_status = 0
begin

--format column the correct way
-------------------------------
set @columnName = replace(@columnName,'[','')
set @columnName = replace(@columnName,']','')

if(@columnName like '%.%')
begin
 set @columnName = replace(@columnName,'.','.[') + ']'
end
else
begin
set @columnName = '[' + @columnName + ']'
end 
-----------------------------------
--================================================================================	
	set @value = replace(@value,'''','''''')--change all ' into ''
	if @si_ID <> @currentSI_ID 
	begin	
		set @currentSI_ID = @si_ID 
		
		if @currentSL_ID = -1
				set @whereStr = @whereStr +'(' --starting point
		else
			begin
				set @whereStr = @whereStr +'))'+' and  (' --appending to previous	
				set @currentSL_ID = -1
			end
	end
--================================================================================
	if @sl_ID <> @currentSL_ID 
	begin
		if @limittype = 'Between'
		begin
				if @currentSL_ID = -1
				set @whereStr = @whereStr + ' isnull('+@columnName + ','''') '+ @limittype+' '--starting point
			else
				set @whereStr =  @whereStr + ') and isnull('+@columnName + ','''') '+ @limittype+' ' --appending to previous
		end
		else
		begin
			if @currentSL_ID = -1
				set @whereStr = @whereStr + ' isnull(cast('+@columnName + ' as varchar(8000)),'''') '+ @limittype+'('--starting point
			else
				set @whereStr =  @whereStr + ') and isnull(cast('+@columnName + ' as varchar(8000)),'''') '+ @limittype+'(' --appending to previous
		end
	set @isNewLimit = 1
	set @currentSL_ID = @sl_ID 
		
	end
	
--================================================================================
	if @limittype = 'Between'
	begin
		set @whereStr =  @whereStr + '(getDate() - '+@value+') and getDate('
	end
	else
	begin
	
	if @isNewLimit = 1
		begin
			set @isNewLimit = 0
			set @whereStr =  @whereStr + ''''+@value +''''
		end
	else
		begin
			set @whereStr =  @whereStr + ','''+@value +''''
		end
	end
UPDATETEXT #tbl_text.whereClause @mytextPtr null 0 @whereStr
if(@myCommandPtr is not null)
begin
	UPDATETEXT Reflex_Command_Session.command @myCommandPtr null 0 @whereStr
end
set @whereStr = ''
fetch next from csr into @si_ID,@sl_ID,@columnName,@limittype,@value
end

deallocate csr

if @whereStr = 'and (' 
	set @whereStr = ''
else
	set @whereStr = @whereStr + ')) )'

UPDATETEXT #tbl_text.whereClause @mytextPtr null 0 @whereStr
if(@myCommandPtr is not null)
begin
	UPDATETEXT Reflex_Command_Session.command @myCommandPtr null 0 @whereStr
end
select whereClause from #tbl_text
end







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_security_whereClause_Creator]') and xtype = 'P ')  
 drop Procedure sp_security_whereClause_Creator
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



--select * from ar_periods
--where period in(1,2,3,4,5,6,7,8,9) and 
--/*END*/ (
--(period not in (2,3,4,12))
--or
--(period in(4) and ar_year = 2008)
-- 
--
--)


--
--declare 
--@SQ_ID int,
--@TargetDepartment varchar(100),
--@TargetMLUser varchar(100),
--@CompanyID int
--
--select @SQ_ID = null,
--@TargetDepartment = 'All',
--@TargetMLUser = 'greg',
--@CompanyID = 7

CREATE proc [dbo].[sp_security_whereClause_Creator]
@SQ_ID int,
@TargetDepartment varchar(100),
@TargetMLUser varchar(100),
@CompanyID int
as
--#############################
--Note sp_security_KBI_whereClause_Creator will have to be altered as well if any changes are made here
--#############################
--exec sp_security_whereClause_Creator -999,'All','10016',7
declare csr cursor for
select si.ID[SI_ID],sl.id[SL_ID],sl.columnName,sl.limittype,sv.value from security_Instance si 
join security_Limit sl on sl.SI_ID = si.ID
join security_Values sv on sv.SL_ID = sl.ID
where isnull(si.sq_ID,-999) = @SQ_ID and si.Target = 
	case when si.targettype = 'Department' then
			@TargetDepartment 
	else 
			@TargetMLUser end and 
si.CompanyID in(@CompanyID,-1) and si.Active = 1 
order by si.id,sl.id,sv.id



if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#tbl_text'))
drop table #tbl_text 
create table #tbl_text(
whereClause text
)
insert into #tbl_text(whereClause)
values('')

declare 
@si_ID int,
@currentSI_ID int,
@sl_ID int,
@currentSL_ID int,
@columnName varchar(100),
@limittype varchar(10),
@value varchar(200),
@whereStr varchar(8000),
@isNewLimit bit,
@mytextPtr varbinary(16),
@myCommandPtr varbinary(16)

SELECT @mytextPtr = TEXTPTR(whereClause) 
FROM #tbl_text 
select @myCommandPtr = TEXTPTR(command)
FROM Reflex_Command_Session where username = @TargetMLUser


select @whereStr = 'and (',@currentSI_ID = -1,@currentSL_ID = -1,@isNewLimit = 1




open csr
fetch next from csr into @si_ID,@sl_ID,@columnName,@limittype,@value
while @@fetch_status = 0
begin
--format column the correct way
-------------------------------
set @columnName = replace(@columnName,'[','')
set @columnName = replace(@columnName,']','')

if(@columnName like '%.%')
begin
 set @columnName = replace(@columnName,'.','.[') + ']'
end
else
begin
set @columnName = '[' + @columnName + ']'
end 
-----------------------------------
--================================================================================	
	set @value = replace(@value,'''','''''')--change all ' into ''
	if @si_ID <> @currentSI_ID 
	begin	
		set @currentSI_ID = @si_ID 
		
		if @currentSL_ID = -1
				set @whereStr = @whereStr +'(' --starting point
		else
			begin
				set @whereStr = @whereStr +'))'+' and  (' --appending to previous	
				set @currentSL_ID = -1
			end
	end
--================================================================================
	if @sl_ID <> @currentSL_ID 
	begin
		if @limittype = 'Between'
		begin
				if @currentSL_ID = -1
				set @whereStr = @whereStr + ' isnull('+@columnName + ','''') '+ @limittype+' '--starting point
			else
				set @whereStr =  @whereStr + ') and isnull('+@columnName + ','''') '+ @limittype+' ' --appending to previous
		end
		else
		begin
			if @currentSL_ID = -1
				set @whereStr = @whereStr + ' isnull(cast('+@columnName + ' as varchar(8000)),'''') '+ @limittype+'('--starting point
			else
				set @whereStr =  @whereStr + ') and isnull(cast('+@columnName + ' as varchar(8000)),'''') '+ @limittype+'(' --appending to previous
		end
	set @isNewLimit = 1
	set @currentSL_ID = @sl_ID 
		
	end
	
--================================================================================
	if @limittype = 'Between'
	begin
		set @whereStr =  @whereStr + '(getDate() - '+@value+') and getDate('
	end
	else
	begin
	
	if @isNewLimit = 1
		begin
			set @isNewLimit = 0
			set @whereStr =  @whereStr + ''''+@value +''''
		end
	else
		begin
			set @whereStr =  @whereStr + ','''+@value +''''
		end
	end
UPDATETEXT #tbl_text.whereClause @mytextPtr null 0 @whereStr
if(@myCommandPtr is not null)
begin
	UPDATETEXT Reflex_Command_Session.command @myCommandPtr null 0 @whereStr
end
set @whereStr = ''
fetch next from csr into @si_ID,@sl_ID,@columnName,@limittype,@value
end

deallocate csr

if @whereStr = 'and (' 
	set @whereStr = ''
else
	set @whereStr = @whereStr + ')) )'

declare @orderby varchar(8000)
select @orderby=isnull(orderby,'') from security_queries where id=@SQ_ID

set @whereStr = @whereStr + ' ' + isnull(@orderby,'')

UPDATETEXT #tbl_text.whereClause @mytextPtr null 0 @whereStr
if(@myCommandPtr is not null)
begin
	UPDATETEXT Reflex_Command_Session.command @myCommandPtr null 0 @whereStr
end

select whereClause from #tbl_text




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_SO_GMLimitApproval]') and xtype = 'P ')  
 drop Procedure sp_SO_GMLimitApproval
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE  proc [dbo].[sp_SO_GMLimitApproval]
@ID int,
@Status varchar(1)
as




begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@modref varchar(100)

   
	select @CompanyID=CompanyID,@modref=module_reference_id  from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	set @sql ='update '+@tr_db+'..so_master_hdr set KC_GMStatus = '''+@Status+'''   where so_id ='+@modref
	exec( @sql )
	
	

end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_SO_RMAApproval]') and xtype = 'P ')  
 drop Procedure sp_SO_RMAApproval
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_SO_RMAApproval]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@stat varchar(50),
	@RTN_ID varchar(50)

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @RTN_ID=module_reference_id, @stat=status from approvals_requested where id=@id


	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..SO_RETURN_HDR set KC_STATUS=''D'' where RTN_ID='+@RTN_ID
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..SO_RETURN_HDR set KC_STATUS=''A'' where RTN_ID='+@RTN_ID
		exec( @sql )
	end
end







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_SO_TaskApproval]') and xtype = 'P ')  
 drop Procedure sp_SO_TaskApproval
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[sp_SO_TaskApproval]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@stat varchar(50),
	@REQUEST_REF_ID varchar(50)

	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	select @REQUEST_REF_ID=module_reference_id, @stat=status from approvals_requested where id=@id

	if( @stat = 'declined' )
	begin
		set @sql ='update '+@tr_db+'..so_tasks set STATUS=''D'' where REQUEST_REF_ID='+cast(@REQUEST_REF_ID as varchar)
		exec( @sql )
	end
	else if( @stat = 'approved' )
	begin

		set @sql ='
			declare 
			@message varchar(500), @username varchar(10), @SO_ID int, @PO_ID int,
			@SO_TASKID int, @ITEM_TOTAL money, @TAX_TOTAL money, @PO_TOTAL money, @SALES_TAX float, @TAXABLE varchar(1),
			@QTY float, @PRICE money
			
			select @username=OPERATOR, @SO_TASKID=ID from '+@tr_db+'..so_tasks where REQUEST_REF_ID='+cast(@REQUEST_REF_ID as varchar)+'
			
			select @PO_ID=po_id from '+@tr_db+'..po_detail where so_task_id=@SO_TASKID
			if( @PO_ID is null )
			begin
				exec '+@tr_db+'..sp_CreatePO @username, ''SO'', @message OUTPUT, '+cast(@REQUEST_REF_ID as varchar)+'

				if( @message = ''OK'' )
				begin
					/*--updates the task status to approved*/
					update '+@tr_db+'..so_tasks set STATUS=''S'' where REQUEST_REF_ID='+cast(@REQUEST_REF_ID as varchar)+'
				end
			end
			else
			begin
				declare @REVISION_NUMBER int, @REVISION_PRINTED varchar(1), @POSTATUS varchar(10), @REV_CNT int, @TASK_CNT int, 
				@REV_TYPE varchar(1), @DET_CNT int, @PO_DETAIL_ID int, @SO_TASK_ID int

				select @REVISION_NUMBER=isnull(REVISION_NUMBER,0), @REVISION_PRINTED=isnull(REVISION_PRINTED,''F''), @POSTATUS=STATUS 
				from '+@tr_db+'..po_header where po_id=@PO_ID

				/*--curses through the po detail that is attached to so tasks which have been approved*/
				declare cur cursor for
				select p.po_detail_id, s.id from '+@tr_db+'..so_tasks s
				join '+@tr_db+'..po_detail p on p.so_task_id=s.id
				where s.REQUEST_REF_ID='+cast(@REQUEST_REF_ID as varchar)+'

				open cur
				fetch cur into @PO_DETAIL_ID, @SO_TASK_ID
				while @@fetch_status=0
				begin

					select @REV_CNT=count(*) from '+@tr_db+'..PO_DETAIL_REVISIONS where po_detail_id=@PO_DETAIL_ID
					if( @REV_CNT = 0 )
					begin
						set @REVISION_NUMBER = 0
					end	
					
					if( @POSTATUS in (''Printed'', ''Received'' ) )
					begin
						exec '+@tr_db+'..sp_OE_PO_Revision_Update @PO_DETAIL_ID, @SO_TASK_ID /*--Revises the PO*/
					end
					else
					begin
						if( @POSTATUS = ''Open'' )
						begin
							
							declare @TASK_QTY money, @TASK_UNIT_PRICE money, @TASK_CONV_QTY money, @TASK_CONV_UNIT_PRICE money

							select @TASK_QTY=isnull(QTY_CUST,0), @TASK_CONV_QTY=isnull(QTY,0), @TASK_CONV_UNIT_PRICE=isnull(base_cost,0),
							@TASK_UNIT_PRICE=( isnull(QTY,0) / isnull(QTY_CUST,0) ) * isnull(base_cost,0)
							from '+@tr_db+'..so_tasks where id=@SO_TASK_ID

							update '+@tr_db+'..po_detail set qty_ordered=@TASK_QTY, unit_price=@TASK_UNIT_PRICE, CONVERTED_QTY=@TASK_CONV_QTY, CONV_UNIT_COST=@TASK_CONV_UNIT_PRICE, 
								EXTENSION=round(@TASK_QTY*@TASK_UNIT_PRICE, 2), REVISION_NUMBER=0 where so_task_id=@SO_TASK_ID
							
							update p
							set p.FREIGHT_TYPE=s.FREIGHT_TYPE, p.BROKERAGE_TYPE=s.BROKERAGE_TYPE, p.MISC_TYPE=s.MISC_TYPE, p.DUTY_TYPE=s.DUTY_TYPE, 
							p.FREIGHT_EST=s.FREIGHT_EST, p.BROKERAGE_EST=s.BROKERAGE_EST, p.MISC_EST=s.MISC_EST, p.DUTY_EST=s.DUTY_EST, 
							p.FREIGHT_AMT=s.FREIGHT_AMT, p.BROKERAGE_AMT=s.BROKERAGE_AMT, p.MISC_AMT=s.MISC_AMT, p.DUTY_AMT=s.DUTY_AMT,
							p.MISC_EST2=s.MISC_EST2, p.MISC_AMT2=s.MISC_AMT2, p.MISC_TYPE2=s.MISC_TYPE2
							from '+@tr_db+'..po_header p 
							left outer join '+@tr_db+'..so_landing_factors s on s.po_id=p.po_id
							where p.po_id=@PO_ID
							
						end
					end

					fetch cur into @PO_DETAIL_ID, @SO_TASK_ID
				end

				close cur
				deallocate cur

				/*--updates the task status to approved*/
					update '+@tr_db+'..so_tasks set STATUS=''S'' where REQUEST_REF_ID='+cast(@REQUEST_REF_ID as varchar)+'
			end

			exec '+@tr_db+'..sp_PORefresh @PO_ID
			'

		exec( @sql )
	end
end
	





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_SO_TRN_HDR_Update_Status]') and xtype = 'P ')  
 drop Procedure sp_SO_TRN_HDR_Update_Status
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[sp_SO_TRN_HDR_Update_Status]
@ID int,
@Status char(1)
as
begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int


	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	set @sql ='
	update '+@tr_db+'..SO_TRN_HDR_BATCH set STATUS=''P'' where SO_TRN_BATCH_ID in 
	(
		select module_reference_id from approvals_requested where status=''in progress''
		and id=APPROVAL_REQ_ID
	)

	update '+@tr_db+'..SO_TRN_HDR_BATCH set STATUS=''R'' where SO_TRN_BATCH_ID in 
	(
		select module_reference_id from approvals_requested where status =''declined''
		and id=APPROVAL_REQ_ID
	)

	update '+@tr_db+'..SO_TRN_HDR_BATCH set STATUS=''A'' where SO_TRN_BATCH_ID in 
	(
		select module_reference_id from approvals_requested where status=''approved''
		and id=APPROVAL_REQ_ID
	)

	update '+@tr_db+'..SO_TRN_HDR_BATCH set STATUS=''O'' where SO_TRN_BATCH_ID in 
	(
		select module_reference_id from approvals_requested where status=''recalled''
		and id=APPROVAL_REQ_ID
	)'
	exec( @sql )

end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_SO_UpdateContract]') and xtype = 'P ')  
 drop Procedure sp_SO_UpdateContract
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE  proc [dbo].[sp_SO_UpdateContract]
@ID int,
@Status varchar(1)
as




begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@modref varchar(100),
	@stat varchar(50)

    
	select @CompanyID=CompanyID,@modref=module_reference_id  from approvals_requested where id = @id

	select @tr_db=treasurydbname from companies where autoid = @CompanyID

	set @sql ='update '+@tr_db+'..so_master_det_line set contractOverride = '''+@Status+'''   where so_line_id ='+@modref
	exec( @sql )
	
	if( @Status = 'D' )
	begin
		set @sql ='update '+@tr_db+'..so_master_det_line set unit_price = '+@tr_db+'.dbo.fn_getPriceType(h.CUSTOMER_ID, smd.INV_ID, smd.CLASS_ID, smdl.DATE_CUST_ORIG, CASE WHEN isnull(smdl.instr , ''S'') = ''S'' THEN ''T'' ELSE ''F'' END, ISNULL(smdl.calc_cost, 0))  '+
				  ' from '+@tr_db+'..so_master_detail d
					join '+@tr_db+'..so_master_det_line dl on d.so_line_id = dl.so_line_id
					join '+@tr_db+'..so_master_hdr h on h.so_id = d.so_id '+											
					'where dl.so_line_id ='+@modref
        
		exec( @sql )
				
	end
	

	

end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_SQAPTrialBalance]') and xtype = 'P ')  
 drop Procedure sp_SQAPTrialBalance
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--exec sp_SQWarehouseAgedTrialBalance 33, 'wes'
create proc [dbo].[sp_SQAPTrialBalance]
@CompanyAutoID int,@username varchar(100)
as

declare 
@sq_id int,
@sqlStartStr varchar(8000)

set @sq_id = 6


----------------------------------------------------------------------------------
--================================Declare ALL Parameters here=====================
----------------------------------------------------------------------------------
--Starting declarations for parameters(default parameters in list are username and companyautoid)
set @sqlStartStr ='declare '+
'@username varchar(100),' +
'@CompanyAutoID int '



--------------------------------------------------------------------
--sets for each declared parameter
set @sqlStartStr = @sqlStartStr + ' 
set @username ='''+@username +''' 
set @CompanyAutoID = '+ cast(@CompanyAutoID as varchar(8000))+' '


----------------------------------------------------------------------------------
--================================DO NOT EDIT BELOW===============================
----------------------------------------------------------------------------------
delete working_performance_indicator_value where username = @username
set @sqlStartStr = @sqlStartStr + '
'



if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#tempValue'))
  drop table #tempValue
create table #tempValue(
vvalue varchar(8000)
)

declare --cursor variables
@id int,
@flavour varchar(8000),
@sqlquery varchar(8000),
@replacementString varchar(8000),
@value varchar(8000)



declare cursor_performanceIndicators cursor for
select id,flavour,sqlquery from security_performance_indicators
where sq_id = @sq_id and active = 1

open cursor_performanceIndicators

fetch next from cursor_performanceIndicators
into @id,@flavour,@sqlquery

while @@FETCH_STATUS = 0
begin
set @replacementString = dbo.fn_tableprefix(@CompanyAutoID,@flavour)

set @sqlquery = replace(@sqlQuery,'dbo.',@replacementString)

declare @RunSQL varchar(8000)
select @RunSQL = cast(@sqlStartStr as varchar(8000)) + cast(@sqlquery as varchar(8000))


insert into #tempValue
exec (@RunSQL)

	if @@Error <> 0
	begin
		print '===========@@Error = '+ cast(@@Error as varchar(100))
		print 'Security Performance Indicator ID = ' + cast(@id as varchar(100))
		print @RunSQL

	end
	else
	begin
		select @value = vvalue from #tempValue
		--now update the row
		if exists(select * from working_performance_indicator_value where username = @username and spi_id = @id)
		begin--row exists update it
			update working_performance_indicator_value set value = @value where username = @username and spi_id = @id
		end
		else--row does not exist create it
		begin	
		insert into working_performance_indicator_value(spi_id,value,username)values(@id,@value,@username)
	end
	delete #tempValue
end
fetch next from cursor_performanceIndicators
into @id,@flavour,@sqlquery
end
deallocate cursor_performanceIndicators




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_SQquickE]') and xtype = 'P ')  
 drop Procedure sp_SQquickE
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc [dbo].[sp_SQquickE]
@CompanyAutoID int,@username varchar(100),@Customer_ID int
as
--exec [sp_SQquickE] 12, 'hm',3338
declare 
@sq_id int,
@sqlStartStr varchar(8000)

set @sq_id = 31


----------------------------------------------------------------------------------
--================================Declare ALL Parameters here=====================
----------------------------------------------------------------------------------
--Starting declarations for parameters(default parameters in list are username and companyautoid)
set @sqlStartStr ='declare '+
'@username varchar(100),' +
'@CompanyAutoID int,'+
'@Customer_ID int '



--------------------------------------------------------------------
--sets for each declared parameter
set @sqlStartStr = @sqlStartStr + ' 
set @username ='''+@username +''' 
set @CompanyAutoID = '+ cast(@CompanyAutoID as varchar(8000))+' '+
'set @Customer_ID = '+ cast(@Customer_ID as varchar(8000))+' '


----------------------------------------------------------------------------------
--================================DO NOT EDIT BELOW===============================
----------------------------------------------------------------------------------
delete working_performance_indicator_value where username = @username
set @sqlStartStr = @sqlStartStr + '
'



if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#tempValue'))
  drop table #tempValue
create table #tempValue(
vvalue varchar(8000)
)

declare --cursor variables
@id int,
@flavour varchar(8000),
@sqlquery varchar(8000),
@replacementString varchar(8000),
@value varchar(8000)



declare cursor_performanceIndicators cursor for
select id,flavour,sqlquery from security_performance_indicators
where sq_id = @sq_id and active = 1

open cursor_performanceIndicators

fetch next from cursor_performanceIndicators
into @id,@flavour,@sqlquery

while @@FETCH_STATUS = 0
begin
set @replacementString = dbo.fn_tableprefix(@CompanyAutoID,@flavour)

set @sqlquery = replace(@sqlQuery,'dbo.',@replacementString)

declare @RunSQL varchar(8000)
select @RunSQL = cast(@sqlStartStr as varchar(8000)) + cast(@sqlquery as varchar(8000))


insert into #tempValue
exec (@RunSQL)

	if @@Error <> 0
	begin
		print '===========@@Error = '+ cast(@@Error as varchar(100))
		print 'Security Performance Indicator ID = ' + cast(@id as varchar(100))
		print @RunSQL

	end
	else
	begin
		select @value = vvalue from #tempValue
		--now update the row
		if exists(select * from working_performance_indicator_value where username = @username and spi_id = @id)
		begin--row exists update it
			update working_performance_indicator_value set value = @value where username = @username and spi_id = @id
		end
		else--row does not exist create it
		begin	
		insert into working_performance_indicator_value(spi_id,value,username)values(@id,@value,@username)
	end
	delete #tempValue
end
fetch next from cursor_performanceIndicators
into @id,@flavour,@sqlquery
end
deallocate cursor_performanceIndicators





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_SQWarehouseAgedTrialBalance]') and xtype = 'P ')  
 drop Procedure sp_SQWarehouseAgedTrialBalance
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



--exec sp_SQWarehouseAgedTrialBalance 33, 'wes'
CREATE proc [dbo].[sp_SQWarehouseAgedTrialBalance]
@CompanyAutoID int,@username varchar(100)
as

declare 
@sq_id int,
@sqlStartStr varchar(8000)

set @sq_id = 1


----------------------------------------------------------------------------------
--================================Declare ALL Parameters here=====================
----------------------------------------------------------------------------------
--Starting declarations for parameters(default parameters in list are username and companyautoid)
set @sqlStartStr ='declare '+
'@username varchar(100),' +
'@CompanyAutoID int '



--------------------------------------------------------------------
--sets for each declared parameter
set @sqlStartStr = @sqlStartStr + ' 
set @username ='''+@username +''' 
set @CompanyAutoID = '+ cast(@CompanyAutoID as varchar(8000))+' '


----------------------------------------------------------------------------------
--================================DO NOT EDIT BELOW===============================
----------------------------------------------------------------------------------
delete working_performance_indicator_value where username = @username
set @sqlStartStr = @sqlStartStr + '
'



if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#tempValue'))
  drop table #tempValue
create table #tempValue(
vvalue varchar(8000)
)

declare --cursor variables
@id int,
@flavour varchar(8000),
@sqlquery varchar(8000),
@replacementString varchar(8000),
@value varchar(8000)



declare cursor_performanceIndicators cursor for
select id,flavour,sqlquery from security_performance_indicators
where sq_id = @sq_id and active = 1

open cursor_performanceIndicators

fetch next from cursor_performanceIndicators
into @id,@flavour,@sqlquery

while @@FETCH_STATUS = 0
begin


set @replacementString = dbo.fn_tableprefix(@CompanyAutoID,@flavour)

set @sqlquery = replace(@sqlQuery,'dbo.',@replacementString)

declare @RunSQL varchar(8000)
select @RunSQL = cast(@sqlStartStr as varchar(8000)) + cast(@sqlquery as varchar(8000))


insert into #tempValue
exec (@RunSQL)


	if @@Error <> 0
	begin
		print '===========@@Error = '+ cast(@@Error as varchar(100))
		print 'Security Performance Indicator ID = ' + cast(@id as varchar(100))
		print @RunSQL

	end
	else
	begin
		select @value = vvalue from #tempValue
		print (@value)
		--now update the row
		if exists(select * from working_performance_indicator_value where username = @username and spi_id = @id)
		begin--row exists update it
			update working_performance_indicator_value set value = @value where username = @username and spi_id = @id
		end
		else--row does not exist create it
		begin	
		insert into working_performance_indicator_value(spi_id,value,username)values(@id,@value,@username)
	end
	delete #tempValue
	
end
fetch next from cursor_performanceIndicators
into @id,@flavour,@sqlquery
end
deallocate cursor_performanceIndicators





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_SQWarehouseCreditAnalysis]') and xtype = 'P ')  
 drop Procedure sp_SQWarehouseCreditAnalysis
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



--exec sp_SQWarehouseAgedTrialBalance 33, 'wes'
create proc [dbo].[sp_SQWarehouseCreditAnalysis]
@CompanyAutoID int,@username varchar(100)
as

declare 
@sq_id int,
@sqlStartStr varchar(8000)

set @sq_id = 29


----------------------------------------------------------------------------------
--================================Declare ALL Parameters here=====================
----------------------------------------------------------------------------------
--Starting declarations for parameters(default parameters in list are username and companyautoid)
set @sqlStartStr ='declare '+
'@username varchar(100),' +
'@CompanyAutoID int '



--------------------------------------------------------------------
--sets for each declared parameter
set @sqlStartStr = @sqlStartStr + ' 
set @username ='''+@username +''' 
set @CompanyAutoID = '+ cast(@CompanyAutoID as varchar(8000))+' '


----------------------------------------------------------------------------------
--================================DO NOT EDIT BELOW===============================
----------------------------------------------------------------------------------
delete working_performance_indicator_value where username = @username
set @sqlStartStr = @sqlStartStr + '
'



if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#tempValue'))
  drop table #tempValue
create table #tempValue(
vvalue varchar(8000)
)

declare --cursor variables
@id int,
@flavour varchar(8000),
@sqlquery varchar(8000),
@replacementString varchar(8000),
@value varchar(8000)



declare cursor_performanceIndicators cursor for
select id,flavour,sqlquery from security_performance_indicators
where sq_id = @sq_id and active = 1

open cursor_performanceIndicators

fetch next from cursor_performanceIndicators
into @id,@flavour,@sqlquery

while @@FETCH_STATUS = 0
begin


set @replacementString = dbo.fn_tableprefix(@CompanyAutoID,@flavour)

set @sqlquery = replace(@sqlQuery,'dbo.',@replacementString)

declare @RunSQL varchar(8000)
select @RunSQL = cast(@sqlStartStr as varchar(8000)) + cast(@sqlquery as varchar(8000))


insert into #tempValue
exec (@RunSQL)
print @RunSQL

	if @@Error <> 0
	begin
		print '===========@@Error = '+ cast(@@Error as varchar(100))
		print 'Security Performance Indicator ID = ' + cast(@id as varchar(100))
		print @RunSQL

	end
	else
	begin
		select @value = vvalue from #tempValue
		print (@value)
		--now update the row
		if exists(select * from working_performance_indicator_value where username = @username and spi_id = @id)
		begin--row exists update it
			update working_performance_indicator_value set value = @value where username = @username and spi_id = @id
		end
		else--row does not exist create it
		begin	
		insert into working_performance_indicator_value(spi_id,value,username)values(@id,@value,@username)
	end
	delete #tempValue
	
end
fetch next from cursor_performanceIndicators
into @id,@flavour,@sqlquery
end
deallocate cursor_performanceIndicators





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Update_ServiceCenterContact]') and xtype = 'P ')  
 drop Procedure sp_Update_ServiceCenterContact
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE  Procedure sp_Update_ServiceCenterContact (@FirstName varchar(50), @WindowsLogon varchar(50), @Password varchar(20), @Tech bit, @User bit, @ContactID int)

AS

If ((@FirstName = '' or @FirstName = Null) OR (@WindowsLogon = '' or @WindowsLogon = Null) OR (@Password = '' or @Password = null) OR (@Tech = null AND @User = null))
	Begin
		If ((@FirstName = '' or @FirstName = Null) AND (@WindowsLogon = '' or @WindowsLogon = Null) AND (@Password = '' or @Password = null))
			Begin
				RAISERROR('All Values are empty or invalid please enter in proper values', 16, 1)
			End
		Else If (@FirstName = '' or @FirstName = Null)
			Begin
				RAISERROR('First Name is empty', 16, 1)
			End
		Else If (@WindowsLogon = '' or @WindowsLogon = Null)
			Begin
				RAISERROR('Windows Logon is empty', 16, 1)
			End
		Else If (@Password = '' or @Password = null)
			Begin
				RAISERROR('Password is empty', 16, 1)
			End
		Else If (@Tech = null AND @User = null)
			Begin
				RAISERROR('Tech amd User are empyt at least one is require to have a value',16,1)
				ROLLBACK
			End
		Else If (@ContactID = null or @ContactID = 0)
			Begin
				RAISERROR('ContactID is empty', 16, 1)
			End
		Else
			Begin
				RAISERROR('Error validating parameters', 16, 1)
			End
	End
Else
	Begin
		Update Contact 
		Set FirstName = @FirstName , Windows_Login = @WIndowsLogon , Password = @Password 
		Where ID = @ContactID

		If (@@Error <> 0)
			Begin
				RAISERROR('Error Updating User Contact', 16,1)
				ROLLBACK
			End
		Else
			Begin
				If (@User = 1)
					Begin
					 	If ((Select Count(ContactID) From Access Where ContactID=@ContactID AND UserLevel = 'V') = 0)
							Begin
								Insert into Access (ContactID, UserLevel) Values (@ContactID, 'V')
								If (@@Error <> 0)
									Begin
										RAISERROR('Error Updating Access Level User', 16, 1)
										ROLLBACK
									End
							End							
						
					End
				Else
					Begin
						If((Select Count(ContactID) From Access Where ContactID=@ContactID AND UserLevel ='V') > 0)
							Begin
								Delete Access Where ContactID=@ContactID AND UserLevel = 'V'
								If(@@Error <> 0)
									Begin
										RAISERROR('Error Removing Access Level User', 16, 1)
										ROLLBACK
									End
							End
					End
				If (@Tech = 1)
					Begin
					 	If ((Select Count(ContactID) From Access Where ContactID=@ContactID AND UserLevel = 'T') = 0)
							Begin
								Insert into Access (ContactID, UserLevel) Values (@ContactID, 'T')
								If (@@Error <> 0)
									Begin
										RAISERROR('Error Updating Access Level Tech', 16, 1)
										ROLLBACK
									End
							End							
						
					End
				Else
					Begin
						If((Select Count(ContactID) From Access Where ContactID=@ContactID AND UserLevel ='T') > 0)
							Begin
								Delete Access Where ContactID=@ContactID AND UserLevel = 'T'
								If(@@Error <> 0)
									Begin
										RAISERROR('Error Removing Access Level Tech', 16, 1)
										ROLLBACK
									End
							End
					End
			End
	
	End




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_updateApprovalUser]') and xtype = 'P ')  
 drop Procedure sp_updateApprovalUser
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create proc sp_updateApprovalUser
@contactID int,
@Module varchar(50)
as

delete working_Approval_Users
where contactID = @contactID

if (lower(@Module)) = 'all'
begin
insert into working_Approval_Users(contactID,Module)
select distinct @contactID,Module from Approval_Topic
end
else
begin
insert into working_Approval_Users(contactID,Module)
values(@contactID,@Module)
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_UpdateCompanyIPAddresses]') and xtype = 'P ')  
 drop Procedure sp_UpdateCompanyIPAddresses
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

--exec sp_updatecompanyipaddresses
CREATE procedure sp_UpdateCompanyIPAddresses
as
declare
@company_id varchar(50),
@tr_db varchar(500),
@server_name varchar(500),
@sql nvarchar(4000),
@ip_address varchar(50),
@comp_ip_address varchar(50)

declare cur cursor for select company_id, sqlservername, treasurydbname, serveripaddress from companies
open cur
fetch cur into @company_id, @server_name, @tr_db, @comp_ip_address
while @@fetch_status=0
begin
	if isnull(@comp_ip_address,'')=''
	begin
	
		set @sql='exec '+@server_name+'.'+@tr_db+'.dbo.sp_get_ip_address @ip output'
		exec sp_executesql @sql,N'@ip varchar(40) output',@ip_address output
	
		update companies set serveripaddress=@ip_address where company_id=@company_id and isnull(serveripaddress,'')<>@ip_address
	-- 	print @ip_address
	end

	fetch cur into @company_id, @server_name, @tr_db, @comp_ip_address
end
close cur
deallocate cur

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_UpdateCompanySystemIDs]') and xtype = 'P ')  
 drop Procedure sp_UpdateCompanySystemIDs
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- 
-- select * from system_id_config
-- select * from companysystemidconfig

create procedure sp_UpdateCompanySystemIDs
as

delete companysystemidconfig


declare
@company_id varchar(50),
@sql varchar(4000),
@tr_db_name varchar(50),
@id_name varchar(50),
@server_name varchar(50),
@db_name varchar(50),
@table_name varchar(50),
@field_name varchar(50)


declare cur_comp cursor for select company_id from companies
open cur_comp
fetch cur_comp into @company_id
while @@fetch_status=0
begin
	declare cur_id cursor for 
	select i.system_id_name, treasurydbname, case when i.source_db='TR' then c.treasurydbname when source_db='HR' then c.humandbname end, i.source_table, i.source_field, c.companyservername
	from system_id_config i
	join companies c on c.company_id=@company_id
	open cur_id 
	fetch cur_id into @id_name, @tr_db_name, @db_name, @table_name, @field_name, @server_name
	while @@fetch_status=0
	begin
		set @sql='
		insert companysystemidconfig (company_id, system_id_name, system_id_value, next_id_value)
		select '''+@company_id+''', '''+@id_name+''', t.id, 
		(select isnull(max('+@field_name+'),0)+1 from '+@server_name+'.'+@db_name+'.dbo.'+@table_name+')
		from '+@server_name+'.'+@tr_db_name+'.dbo.system_ids t where t.id_name='''+@id_name+''''
		print @sql
		exec(@sql)

		fetch cur_id into @id_name, @tr_db_name, @db_name, @table_name, @field_name, @server_name
	end
	close cur_id
	deallocate cur_id

	fetch cur_comp into @company_id
end
close cur_comp
deallocate cur_comp


declare
@cur_value int, @next_value int

declare cur_update cursor for select i.company_id, c.companyservername, c.treasurydbname, i.system_id_name, i.system_id_value, i.next_id_value 
from companysystemidconfig i
join companies c on c.company_id=i.company_id
open cur_update
fetch cur_update into @company_id, @server_name, @tr_db_name, @id_name, @cur_value, @next_value
while @@fetch_status=0
begin
	set @sql='
	update '+@server_name+'.'+@tr_db_name+'.dbo.system_ids set id='+cast(@next_value as varchar)+'
	where id_name='''+@id_name+''' and '+cast(@cur_value as varchar)+'<>'+cast(@next_value as varchar)

	print @sql
	exec(@sql)

	fetch cur_update into @company_id, @server_name, @tr_db_name, @id_name, @cur_value, @next_value
end
close cur_update
deallocate cur_update







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_UpdateFilter]') and xtype = 'P ')  
 drop Procedure sp_UpdateFilter
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go






create proc sp_UpdateFilter
 @Guid varchar(100), 
 @GridNamePage varchar(500), 
 @DisplayName varchar(500), 
 @Filter varchar(500)
as
update session_filter_selections
set Filter = @Filter
where Guid = @Guid
and GridNamePage = @GridNamePage
and DisplayName = @DisplayName








Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_UpdateSCRptGrouping]') and xtype = 'P ')  
 drop Procedure sp_UpdateSCRptGrouping
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





--exec sp_UpdateSCRptGrouping 'hm'

CREATE   proc sp_UpdateSCRptGrouping @PCID varchar(500)
as

declare @sql as varchar(2000),
        @count as int

set @count=1    
while @count<=3    
begin    
 set @sql='    
 update scReport_Options
 set g'+cast(@count as varchar)+'_suppress=''T''
 where PCID='''+cast(@PCID as varchar)+'''
 and g'+cast(@count as varchar)+'_field is null
 or g'+cast(@count as varchar)+'_field='''''
 exec(@sql)

 set @count=@count+1    
end











Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_upgraddiagrams]') and xtype = 'P ')  
 drop Procedure sp_upgraddiagrams
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

	CREATE PROCEDURE dbo.sp_upgraddiagrams
	AS
	BEGIN
		IF OBJECT_ID(N'dbo.sysdiagrams') IS NOT NULL
			return 0;
	
		CREATE TABLE dbo.sysdiagrams
		(
			name sysname NOT NULL,
			principal_id int NOT NULL,	-- we may change it to varbinary(85)
			diagram_id int PRIMARY KEY IDENTITY,
			version int,
	
			definition varbinary(max)
			CONSTRAINT UK_principal_name UNIQUE
			(
				principal_id,
				name
			)
		);


		/* Add this if we need to have some form of extended properties for diagrams */
		/*
		IF OBJECT_ID(N'dbo.sysdiagram_properties') IS NULL
		BEGIN
			CREATE TABLE dbo.sysdiagram_properties
			(
				diagram_id int,
				name sysname,
				value varbinary(max) NOT NULL
			)
		END
		*/

		IF OBJECT_ID(N'dbo.dtproperties') IS NOT NULL
		begin
			insert into dbo.sysdiagrams
			(
				[name],
				[principal_id],
				[version],
				[definition]
			)
			select	 
				convert(sysname, dgnm.[uvalue]),
				DATABASE_PRINCIPAL_ID(N'dbo'),			-- will change to the sid of sa
				0,							-- zero for old format, dgdef.[version],
				dgdef.[lvalue]
			from dbo.[dtproperties] dgnm
				inner join dbo.[dtproperties] dggd on dggd.[property] = 'DtgSchemaGUID' and dggd.[objectid] = dgnm.[objectid]	
				inner join dbo.[dtproperties] dgdef on dgdef.[property] = 'DtgSchemaDATA' and dgdef.[objectid] = dgnm.[objectid]
				
			where dgnm.[property] = 'DtgSchemaNAME' and dggd.[uvalue] like N'_EA3E6268-D998-11CE-9454-00AA00A3F36E_' 
			return 2;
		end
		return 1;
	END
	

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spAddPrimaryKey]') and xtype = 'P ')  
 drop Procedure spAddPrimaryKey
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--IF EXISTS (Select 1 from sysobjects where [name]='spAddPrimaryKey' and xtype='P')
--Drop procedure [dbo].[spAddPrimaryKey]
--GO

--spAddPrimaryKey 0, 1, 0, 1, 0 
create procedure [dbo].[spAddPrimaryKey] @Print bit = 1, @Execute bit = 0, @Identitycheck bit = 0, @PrintStatement bit = 0, @IncludeTempTable bit = 0 as 


/*************************************************************************************************************************************

????Store Procedure Name :: spAddPrimaryKey
????Created By???????????? :: Vinay Kumar

????Purpose???????????????? ::????Add Primary key in those tables which doesn't contain primary key.
???????????????????????? If table already contains any identity column with unique data then it'll convert it into a primary key
????????????????????????????OtherWise It'll add a new identity column with a primary key constraint.
????????????????????????????Primary key constraint = PK_+<Column_name>+<Table_Name>

????Input Parameters :: 5????
???????? @Print???????????????? Type = Bit
???????????????????????? 1 for Print Statement 
???????????????????????????? 0 for not Print Statement.
???????????????????????????? [Default Value :: 1]

???????? @Execute???????????? Type = Bit 
???????????????????????????? 1 for Execute Statement
???????????????????????????? 0 for Not Execute Statement.
???????????????????????????? [Default Value :: 0]

???????? @Identitycheck Type = Bit 
???????????????????????????? check that Is any identity column contains duplicate value. 
???????????????????????????? [Default Value :: 0]

???????? @PrintStatement???? Type = Bit 
???????????????????????????? This show resutl information that which tables are updated.
???????????????????????????? 1 for print statements.
???????????????????????????? [Default Value :: 0]

???????? @IncludeTempTable???? Type = Bit 
???????????????????????????? This Flag is used to include Temporary Tables.
???????????????????????????? 1 for include Temporary tables.
???????????????????????????? [Default Value :: 0] 


????Output Parameters :: 0

*************************************************************************************************************************************/

SET NOCOUNT ON 
-- Create Tmp Table 
create table #temp11 (id int identity(1,1), tid int ,tname varchar(200),CoLName varchar(200),isidentity bit,IsTempTable bit) 
 
insert into #temp11 (tid, tname, ColName, isidentity, IsTempTable) 
select id,[name],	bb.ColName,	case when bb.tabid is null then 0 else 1 end,
case when substring([name],0,4)='temp' then 1
	when substring([name],len([name])-3,4)='temp' then 1
	When substring([name],0,3)='temp' then 1
	When substring([name],len([name])-2,3)='temp' then 1
	else 0 end
from (select distinct id, [Name] 
		from sysobjects where xtype='U' 
		and id not in 
			(select distinct parent_obj from sysobjects where xtype in ('PK','UQ') 
			and parent_obj in (select id from sysobjects where xtype='U'))) aa 
left join (select c.object_id as [tabid],	c.[Name] as ColName,	s.[name] as tabName 
			from sys.objects s 
			inner join sys.columns c on s.object_id=c.object_id 
			where type='U' and c.is_identity=1) bb 
on aa.id=bb.tabid --where tabid is null


Declare @Counter int 
Declare @Maxid int 
Declare @Tname varchar(200) 
Declare @Tcol varchar(100) 
Declare @Tid int 
Declare @ColName varchar(200) 
Declare @isidentity bit 
Declare @SqlQuery nvarchar(4000) 
declare @Result varchar(8000) 
Declare @IdentitycheckString varchar(8000)
Declare @IsTempTable bit
 
 
set @Counter=1
set @IsTempTable=0 
set @Result='' 
set @IdentitycheckString='
---------- Show identity column information'
select @Maxid=max(id) from #temp11 
 
set @SqlQuery =' 
/***************************************************************************************************************************** 
 If any table which doesn''t contain Primary key, This script add the primary key. 
 Note:- If table already contains any identity column and contain unique data then it''ll converted in to primary key 
*****************************************************************************************************************************/  
' 
print(@SqlQuery) 

set @SQlQuery='
Select ''--------- Before Script ---------'' 
select distinct [Name] as ''Table which doesn''''t contain primary key'' from sysobjects where xtype=''U'' 
and id not in (select distinct parent_obj from sysobjects where xtype in (''PK'',''UQ'') 
and parent_obj in (select id from sysobjects where xtype=''U'')) order by 1'

Execute (@sqlQuery)


 
while (@counter<=@Maxid) 
begin 
	select @Tid=Tid, @Tname=Tname, @ColName=ColName, @isidentity=isidentity, @IsTempTable=IsTempTable 
	from #temp11 where id=@counter 
	
	select top 1 @Tcol= case when substring([Name],1,charindex('_',[Name]))='' then (Upper(substring(@Tname,1,3)))+'_' 
	else substring([Name],1,charindex('_',[Name])) end from syscolumns where id=object_id(@Tname) 

	 
	set @Tcol=@Tcol+'PKkey'

	if (@Identitycheck=1 and @isidentity=1)
	begin
		set @IdentitycheckString = @IdentitycheckString +'
		select '''+@Tname+''' as ''Table_Name'', '''+@ColName+''' as ''Identity_Column_Name'', 1 as ''ISDuplicateValue'' from '+@Tname+' group by '+@ColName+' having count(*)>1
		GO'
	end 

	if (@isidentity=1) 
	begin 
		set @SQlQuery=' 
		/********************************************************************* 
		 Table Name :: '+@Tname+', Column Name :: '+@ColName+' 
		*********************************************************************/ 
		IF NOT EXISTS (select top 1 * from '+@Tname+' group by '+@ColName+' having count(*)>1) 
		begin 
			IF NOT EXISTS(select top 1 * from sysobjects where sysobjects.[name]=''PK_'+@ColName+'_'+@Tname+''') 
			begin 
				alter table ['+@Tname+'] add constraint [PK_'+@ColName+'_'+@Tname+'] primary key (['+@ColName+']) 
			End 
		End' 
		set @Result=@Result+' 
		Print ''Table :: ['+@Tname +'] Primary Column :: ['+@ColName+']'' ' 
	end 

	else 
	begin  
		set @SQlQuery=' 
		/********************************************************************* 
		 Table Name :: '+@Tname+', Column Name :: '+@Tcol+' 
		*********************************************************************/ 
		IF NOT EXISTS(select top 1 * from sysobjects where sysobjects.[name]=''PK_'+@Tcol+'_'+@Tname+''') 
		begin 
			Alter table ['+@Tname+'] add ['+@Tcol+'] int identity(1,1) constraint [PK_'+@Tcol+'_'+@Tname+'] primary key 
		end' 
		set @Result=@Result+' 
		Print ''Table :: ['+@Tname +'] Primary Column :: ['+@Tcol+']'' ' 
	end 
	
	if (@Execute=1)
	begin 
		if (@IncludeTempTable=1)
			execute (@SQlQuery) 
		else if (@IsTempTable=0)
			execute (@SQlQuery) 
	end 
	
	if (@print=1) 
	begin 
		set @SQlQuery=@SQlQuery+' 
		GO ' 
		if (@IncludeTempTable=1)
			print (@SQlQuery)
		else
		begin
			if (@IsTempTable=0)
				print (@SQlQuery)
		end
end 

set @SQlQuery=''


if (@IdentityCheck=1) 
Print (@IdentityCheckString) 

if (@printstatement=1) 
print (@Result) 


set @SQlQuery=''
set @Result=' 
' 
set @IdentitycheckString='
'
set @counter=@counter+1 

	
end-- While end 
 
drop table #temp11 
set @SQlQuery='
Select ''--------- After Script ---------'' 
select distinct [Name] as ''Table which doesn''''t contain primary key'' from sysobjects where xtype=''U'' 
and id not in (select distinct parent_obj from sysobjects where xtype in (''PK'',''UQ'') 
and parent_obj in (select id from sysobjects where xtype=''U'')) order by 1'

Execute (@sqlQuery)

---- Execute statement

--EXECUTE spAddPrimaryKey 0,1,0,0,0






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spCreatescLeadAddress]') and xtype = 'P ')  
 drop Procedure spCreatescLeadAddress
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE PROCEDURE [dbo].[spCreatescLeadAddress] AS
ALTER TABLE scLead
ADD ExternalReference varchar(256)





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQAutoSelectVenorForStarts]') and xtype = 'P ')  
 drop Procedure spRFQAutoSelectVenorForStarts
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go








CREATE    proc spRFQAutoSelectVenorForStarts

@quoteID   int, @startDate datetime

as
-- 
-- declare @quoteID   int, @startDate datetime
-- 
-- select @quoteID = 966
-- select @startDate = '05/10/06'

insert CMS_Contract_Management_Supp (CMS_ID,RFQC_ID, SUPPLIER, RFQ_EST, start_date,
          SUPPLIER_ID, SUPPLIER_NAME )
select CMS_ID,c.RFQC_ID,SUPPLIER,COST, @startDate, SUPPLIER_ID, SUPPLIER_NAME 
from CMS_Contract_Management  m
 join rfq_cost  c
on m.phs_code = c.phs_code 
and m.subp_code = c.subp_code
and m.RAW_LAND_CD= c.RAW_LAND_CD 
and m.MODEL_NAME_ID = c.ModelNameID
and m.MODEL_ID = c.MODEL_ID
where quoteid = @quoteID
and m.type = 'E'
and isnull(c.def,'') = 'T'
and c.RFQC_TYPE_MOE = 'T'
and not exists( select *
                       from CMS_Contract_Management_Supp as n
                       where  m.CMS_ID = n.CMS_ID
          )


-- Option 
--1. Standard Option

-- Labe & Material
insert CMS_Contract_Management_Supp (CMS_ID,RFQC_ID, SUPPLIER, RFQ_EST, start_date,
          SUPPLIER_ID, SUPPLIER_NAME )


select CMS_ID,c.RFQC_ID,SUPPLIER,COST, @startDate, SUPPLIER_ID, SUPPLIER_NAME 
-- select   CMS_ID,c.RFQC_ID,SUPPLIER,COST,SUPPLIER_ID, SUPPLIER_NAME , rfq_headerid
from CMS_Contract_Management  m
 join rfq_cost  c
on m.phs_code = c.phs_code 
and m.subp_code = c.subp_code
and m.RAW_LAND_CD= c.RAW_LAND_CD 
and m.OPTION_ID = c.OPTION_ID
and m.CostType = c.CostType
join RFQ_VendorSElectionHeader h
on c.RFQ_HeaderID = h.ID
where quoteid =@quoteID
and h.RFQType = 'S'
and m.type = 'O'
and isnull(c.def,'') = 'T'
and c.RFQC_TYPE_MOE = 'O'

and not exists( select *
                       from CMS_Contract_Management_Supp as n
                       where  m.CMS_ID = n.CMS_ID
          )



--2. Structural Option

-- Labor

insert CMS_Contract_Management_Supp (CMS_ID,RFQC_ID, SUPPLIER, RFQ_EST, start_date,
          SUPPLIER_ID, SUPPLIER_NAME )


select CMS_ID,c.RFQC_ID,SUPPLIER,COST, @startDate, SUPPLIER_ID, SUPPLIER_NAME 
-- select  m.CostType,c.CostType,m.CMS_ID,c.RFQC_ID,SUPPLIER,COST,SUPPLIER_ID, SUPPLIER_NAME , rfq_headerid
from CMS_Contract_Management  m
 join rfq_cost  c
on m.phs_code = c.phs_code 
and m.subp_code = c.subp_code
and m.RAW_LAND_CD= c.RAW_LAND_CD 
and m.OPTION_ID = c.OPTION_ID
and m.CostType = c.CostType
join RFQ_VendorSElectionHeader h
on c.RFQ_HeaderID = h.ID
where quoteid = @quoteID
and h.RFQType = 'ST'
and m.type = 'O'
and m.CostType = 'L'
and isnull(c.def,'') = 'T'
and c.RFQC_TYPE_MOE = 'O'
and not exists( select *
                       from CMS_Contract_Management_Supp as n
                       where  m.CMS_ID = n.CMS_ID
          )

-- material

insert CMS_Contract_Management_Supp (CMS_ID,RFQC_ID, SUPPLIER, RFQ_EST, start_date,
          SUPPLIER_ID, SUPPLIER_NAME )


select CMS_ID,c.RFQC_ID,SUPPLIER,COST, @startDate, SUPPLIER_ID, SUPPLIER_NAME 
-- select  m.CostType,c.CostType,m.CMS_ID,c.RFQC_ID,SUPPLIER,COST,SUPPLIER_ID, SUPPLIER_NAME , rfq_headerid
from CMS_Contract_Management  m
 join rfq_cost  c
on m.phs_code = c.phs_code 
and m.subp_code = c.subp_code
and m.RAW_LAND_CD= c.RAW_LAND_CD 
and m.OPTION_ID = c.OPTION_ID
and m.CostType = c.CostType
and m.MATERIAL_ID = c.MATERIAL_ID
join RFQ_VendorSElectionHeader h
on c.RFQ_HeaderID = h.ID
where quoteid = @quoteID
and h.RFQType = 'ST'
and m.type = 'O'
and m.CostType = 'M'
and isnull(c.def,'') = 'T'
and c.RFQC_TYPE_MOE = 'O'
and not exists( select *
                       from CMS_Contract_Management_Supp as n
                       where  m.CMS_ID = n.CMS_ID
          )














Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQAutoSupplierSelection]') and xtype = 'P ')  
 drop Procedure spRFQAutoSupplierSelection
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




















CREATE             proc  spRFQAutoSupplierSelection

@headerID    int, @type varchar(5) ,@Global   varchar(10),
    @trDB  varchar(20),  @hrDB   varchar(20),
    @Primary  varchar(1), @PrimaryA  varchar(1), @Alternate   varchar(1)


as

-- declare @headerID    int, @type varchar(5) ,@Global   varchar(10),
--     @trDB  varchar(20), @hrDB   varchar(20),
--     @Primary  varchar(1), @PrimaryA  varchar(1), @Alternate   varchar(1)
   
-- 
-- 
-- select @headerID = 38, @type = 'T' ,@Global = 'F'
-- select @trDB = 'tr_realestate'
-- select @hrDB = 'hr_realestate'
-- select @Primary = 'F', @PrimaryA= 'T', @Alternate = 'T'

declare @companyID  int

select @companyID = AutoID from COMPANIES
where  TreasuryDbName = @trDB


declare @countMinorCode  int

select @countMinorCode  = count( minorCode) from RFQ_VendorSelectionLog
where headerid =  @headerID 
and isnull(minorCode,'') <> ''


select isnull(@countMinorCode,0)  'countMinorCode'



if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#vendor '))  
drop table #vendor
create table #vendor
	  (
           RAW_LAND_CD   int null,
           SUPPLIER  varchar(10) null,  
           NAME  varchar(40) null, 
           RFQ_METHOD   varchar(10) null,
           phs_code   varchar(10) null,
           subp_code   varchar(10) null,
           MATGROUP_ID       int  null,
           SUPPLIER_ID       int  null
           )


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#result '))  
drop table #result
create table #result
	  (
	        [Supplier] [varchar] (10)  NULL ,
		[SupplierName] [varchar] (40)  NULL ,
		[ContactMethod] [varchar] (50)  NULL ,
		[Notified] [varchar] (10)  NULL ,
		[Tel] [varchar] (20) NULL ,
		[Fax] [varchar] (20)  NULL ,
		[Notes] [text]  NULL ,
		[Email] [varchar] (80)  NULL ,
		[EmailSubject] [varchar] (50)  NULL ,
		[EmailBody] [text]  NULL ,
		[EmailAttachment] [text] NULL ,
		[Contact] [varchar] (50) NULL ,
		[ResponseBy] [datetime] NULL ,
		[succeeded] [varchar] (1)  NULL ,
		[MajorCode] [varchar] (5)  NULL ,
		[MinorCode] [varchar] (5)  NULL ,
		[HeaderID] [int] NULL ,
		[LOG_ID] [int] NULL,
                [SUPPLIER_ID] [int] NULL ,
                [Contact_ID] [int] NULL 
	)
	

declare  @s  varchar(1000) 


	select @s = '
	SELECT DISTINCT RAW_LAND_CD,s.SUPPLIER, sm.NAME,rtrim(t.phs_code),rtrim(ts.subp_code),RFQ_METHOD, SUPPLIER_ID
	FROM         ' + @trDB + '..HB_HCP_SUPPLIERS s LEFT OUTER JOIN '
	               + @trDB + '..HB_TMO t ON s.TSUP_TM_ID = t.TMO_ID AND s.TSUP_TM_TYPE = t.TMO_TYPE 
	         LEFT OUTER JOIN ' + @trDB + '..HB_TMO_SubCode ts ON t.TMO_ID = ts.TMO_ID AND t.TMO_TYPE = ts.TMO_TYPE
	      JOIN '+ @trDB + '..SUPPLIER_MASTER sm ON s.SUPPLIER = sm.SUPPLIER 
	      JOIN ' + @trDB + '.. HB_TRADES ht ON s.TSUP_TM_ID = ht.TRADE_ID 
	      JOIN ' + @trDB + '..HB_RAW_LAND rl ON s.TSUP_HCP_ID = rl.RAW_LAND_CD
	where (s.TSUP_TM_TYPE = ''T'') AND  (s.TSUP_HCP_TYPE = ''H'')'
      
if ( (@Primary = 'T')and ( @PrimaryA= 'F') and ( @Alternate= 'F') )
                select @s = @s + 'and  (RANKING = 1)'
else if ( (@Primary= 'F') and ( @PrimaryA= 'T' ) and ( @Alternate= 'F' ) )
		select @s = @s + 'and (RANKING = 2)'
else if ( (@Primary= 'F') and ( @PrimaryA= 'F' ) and ( @Alternate= 'T' ) )
		select @s = @s +  'and (RANKING =3)' 
else if ( (@Primary= 'T') and ( @PrimaryA='T' ) and (@Alternate= 'F' ) )
		select @s = @s +  + 'and (RANKING = 1 or RANKING =2)' ;
else if ( (@Primary= 'F') and (@PrimaryA= 'T' ) and ( @Alternate= 'T' ) )
		select @s = @s +  + 'and (RANKING = 2 or RANKING =3)' 
else if ( (@Primary='T') and ( @PrimaryA='F' ) and ( @Alternate='T' ) )
	       select @s = @s +  + 'and (RANKING = 1 or RANKING =3)' 
else if ( (@Primary= 'T') and ( @PrimaryA='T' ) and ( @Alternate='T' ) )
	       select @s = @s +  + 'and ( RANKING = 1 or RANKING = 2 or RANKING =3 )'
else 
       select @s = @s +  + 'and ( RANKING = 1 and RANKING = 2 and RANKING =3 )'


   insert #vendor (RAW_LAND_CD,SUPPLIER, NAME,phs_code, subp_code,RFQ_METHOD,SUPPLIER_ID)
	exec ( @s)
-------------------------------------------------
        if  isnull(@countMinorCode,0) = 0
        begin
             update  #vendor
             set subP_code = ''
        end 
-------------------------------------------

if @type = 'T'
begin	


      insert #result (Supplier,SupplierName,HeaderID,Log_ID,ContactMethod,MajorCode,MinorCode,SUPPLIER_ID)
      select v.Supplier, v.Name, l.HeaderID,l.id,RFQ_METHOD,phs_code, subp_code, v.SUPPLIER_ID
       --select a.HoldingID, l.Majorcode,v.Supplier, v.Name, Group_desc, SUB_GROUP_DESC,SHORT_DESC, l.id
       from RFQ_VendorSelectionLog  l
      join  RFQ_VSH_Application  a
      on l.VA_ID = a.ID
      and l.HeaderID = a.HeaderID
      join #vendor   v
      on a.HoldingID = v.RAW_LAND_CD
      and   l.Majorcode = v.phs_code 
      and l.MinorCode = v.subp_code
      where l.HeaderID = @headerID
      order by a.HoldingID, Group_desc, SUB_GROUP_DESC,SHORT_DESC,l.Majorcode,v.Supplier, v.Name
	
	
end
else if @type = 'O'
begin
      
      insert #result (Supplier,SupplierName,HeaderID,Log_ID,ContactMethod, SUPPLIER_ID)
      select v.Supplier, v.Name, l.HeaderID,l.id,RFQ_METHOD,v.SUPPLIER_ID
       --select a.HoldingID, l.Majorcode,v.Supplier, v.Name, Group_desc, SUB_GROUP_DESC,SHORT_DESC, l.id
       from RFQ_VendorSelectionLog  l
      join  RFQ_VSH_Application  a
      on l.VA_ID = a.ID
      and l.HeaderID = a.HeaderID
      join #vendor   v
      on a.HoldingID = v.RAW_LAND_CD
      and   l.Majorcode = v.phs_code 
      and l.MinorCode = v.subp_code
      where l.HeaderID = @headerID
      order by a.HoldingID, Group_desc, SUB_GROUP_DESC,SHORT_DESC,l.Majorcode,v.Supplier, v.Name
end
else if @type = 'M' 
begin
        if @global = 'F'
        begin

--              declare @headerID    int, @type varchar(5) ,@Global   varchar(10),
-- 	             @trDB  varchar(20), @s  varchar(1000)
-- 	     select @headerID = 456, @type = 'M' ,@Global = 'F'
-- 	     select @trDB = 'tr_adam'
             
             select @s = 
                       'select distinct  rl.RAW_LAND_CD, rtrim(t.phs_code), rtrim(s.subp_code),
                       st.SUPPLIER, sm.NAME, RFQ_METHOD,SUPPLIER_ID from ' +
                       @trDB + '..HB_HCP_SUPPLIERS st LEFT OUTER JOIN '+
                       @trDB + '..HB_TMO t ON st.TSUP_TM_ID = t.TMO_ID 
                       AND st.TSUP_TM_TYPE = t.TMO_TYPE  JOIN ' +
                       @trDb + '..HB_TMO_SubCode s ON t.TMO_ID = s.TMO_ID 
                         AND t.TMO_TYPE = s.TMO_TYPE  JOIN ' +
                       @trDB + '..HB_MAT_GROUP g ON t.TMO_ID = g.MATGROUP_ID  JOIN ' +
                       @trDb + '..SUPPLIER_MASTER sm ON st.SUPPLIER = sm.SUPPLIER  JOIN ' +
                       @trDB + '..HB_RAW_LAND rl ON st.TSUP_HCP_ID = rl.RAW_LAND_CD
                       WHERE     (t.TMO_TYPE = ''M'') AND (st.TSUP_HCP_TYPE = ''H'') '

           


           delete #vendor
         
	   insert #vendor (RAW_LAND_CD,phs_code,subp_code,SUPPLIER, NAME,RFQ_METHOD,SUPPLIER_ID)
           exec (@s)
           
           if  isnull(@countMinorCode,0) = 0
           begin
               update  #vendor
               set subP_code = ''
           end 

           --  delete #result
           insert #result (Supplier,SupplierName,HeaderID,Log_ID,ContactMethod,SUPPLIER_ID)
           select v.Supplier, v.Name, l.HeaderID,l.id,RFQ_METHOD,v.SUPPLIER_ID
	   
           -- select *
	   from #vendor  v
	   join rfq_vendorSElectionLog   l
	   on MajorCode = v.phs_code
	   and MinorCode = v.subp_code 
	   join RFQ_VSH_Application  a
	   on l.VA_ID = a.ID
	   and l.HeaderID = a.HeaderID
	   and v.RAW_LAND_CD = a.HoldingID
	   where l.Headerid = @headerID
	   order by RAW_LAND_CD,phs_code
            
        end
        else
        begin         
	--       declare @headerID    int, @type varchar(5) ,@Global   varchar(10),
	--          @trDB  varchar(20), @s  varchar(1000)
	--       select @headerID = 425, @type = 'M' ,@Global = 'F'
	--       select @trDB = 'tr_adam'
	 
	      -- select * from #vendor where raw_land_cd =50000
	       delete  #vendor
	       select @s = '
	                  SELECT DISTINCT hcp.TSUP_HCP_ID,g.MATGROUP_ID,m.SUPPLIER, m.NAME,RFQ_METHOD,SUPPLIER_ID
	                  FROM ' + @trDB + '..SUPPLIER_MASTER m  JOIN ' +
	                  @trDB + '..HB_HCP_SUPPLIERS hcp ON m.SUPPLIER = hcp.SUPPLIER  JOIN ' +
	                  @trDB + '..HB_MAT_GROUP g ON hcp.TSUP_TM_ID = g.MATGROUP_ID  JOIN ' +
	                  @trdb + '..HB_RAW_LAND l ON hcp.TSUP_HCP_ID = l.RAW_LAND_CD ' + 
	                  ' where  (hcp.TSUP_HCP_TYPE = ''H'') AND (hcp.TSUP_TM_TYPE = ''M'') '
	    
              
	      


	       insert #vendor (RAW_LAND_CD,MATGROUP_ID,SUPPLIER, NAME,RFQ_METHOD,SUPPLIER_ID)
	       exec (@s)
	
	       insert  #result (Supplier,SupplierName,HeaderID,Log_ID,ContactMethod,SUPPLIER_ID)
	       select distinct v.Supplier, v.Name, l.headerid,l.id,RFQ_METHOD,SUPPLIER_ID
	       --select v.Supplier, v.Name,l.headerid,l.id,RFQ_METHOD
	       from RFQ_VendorSelectionLog  l
	       join  RFQ_VSH_Application  a
	       on l.VA_ID = a.ID
	       and l.HeaderID = a.HeaderID
	       join #vendor   v
	       on a.HoldingID = v.RAW_LAND_CD
	       and   l.MATGROUP_ID = v.MATGROUP_ID
	       where l.HeaderID = @headerID
       end
  
     -- select * from   #result
                      
end

update #result
set  contact = KnownAs,TEL =BusinessTelephoneNumber,
    FAX = BusinessFaxNumber, email = Email1Address, Contact_ID = c.ID
	-- select distinct  t.Supplier,KnownAs,BusinessTelephoneNumber,BusinessFaxNumber,Email1Address 
from #result  t
join  Relations  r
on t.SUPPLIER_ID = r.TargetID
join contact  c  
on c.ID =  r.ItemID
and type = 'supplier' 
and isnull(DefaultRFQContact,'') = 'T' 
AND ISNULL(r.CompanyID, 0) = @companyID



insert RFQ_VendorsSelected (Supplier, SupplierName, TEL, FAX, email, 
                		 ContactMethod,contact, HeaderID,
		      	         MajorCode, MinorCode,LOG_ID,SUPPLIER_ID, Contact_ID )
select distinct Supplier, SupplierName, TEL, FAX, email, 
       ContactMethod,contact, HeaderID,
       MajorCode, MinorCode,LOG_ID,SUPPLIER_ID, Contact_ID
from #result


---default contact if there is only one 


declare @str   varchar(8000)
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#OneContactSupplier '))
drop table #OneContactSupplier 
create table #OneContactSupplier(
     iCount  int null,
     Supplier   varchar(50) null
)
select @str = '
               select count(t.ID) ,Supplier
               from '+ @trDB  + '..Supplier_Master c
               join  Relations r
               on c.SUPPLIER_ID =r.TargetID
               join Contact t
               on r.ItemID = t.ID
               where ISNULL(t.Type, '''') = ''Supplier''
               and isnull(DefaultRfqContact,'''') <>''T'''+
                ' AND ISNULL(r.CompanyID, 0) = ' + 
                ''+ convert(varchar(20), @companyID )+ '' +
               ' group by supplier
               having  count(t.ID)=1
               order by supplier' 
insert #OneContactSupplier 
exec( @str)
  


update RFQ_VendorsSelected
	set Contact =c.KnownAs ,
	Tel = c.BusinessTelephoneNumber,
	Fax = c.BusinessFaxNumber,
	Email = c.Email1Address,
        Contact_id =   c.ID
-- select n.supplier,c.knownas, n.*
from RFQ_VendorsSelected n
join Relations r
on n.Supplier_ID = r.TargetID
join Contact  c
on r.ItemID = c.ID
join #OneContactSupplier   s
on n.Supplier= s.Supplier
where ISNULL(c.Type, '') = 'Supplier'
and isnull(n.Contact_id,0 )= 0
and HeaderId = @headerID
--order by n.supplier

-------------------------------------------------


-- email body subject and notes starts
declare @supp   varchar(50), @countOne  int
        

declare aSuppCursor cursor for 

  select distinct Supplier from   #result

open aSuppCursor
fetch next from aSuppCursor into @supp
  
while @@FETCH_STATUS = 0
begin
     

        --  if type= trade then default subject & body & notes for email, fax and phone
        if @type = 'T'
        begin
            print (' default subject & body & notes ')

            exec  spRFQDefaultLine_Request @headerID,@supp,@hrDB


        end  

      fetch next from aSuppCursor into @supp
end

close aSuppCursor
deallocate aSuppCursor


---default contact if there is only one & email body subject and notes ends

--select * from #result 




















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQCopyFromOldRFQ]') and xtype = 'P ')  
 drop Procedure spRFQCopyFromOldRFQ
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




















CREATE             proc [dbo].[spRFQCopyFromOldRFQ]

@fHeaderID   int, @tHeaderID int,
        @type   varchar(5) , @global   varchar(5)

as

-- declare @fHeaderID   int, @tHeaderID int,
--         @type   varchar(5) , @global   varchar(5)
-- 
-- select @fHeaderID = 329, @tHeaderID  =358
-- select @type = 'M', @global = 'F'



if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#supp '))  
	drop table #supp
	create table #supp  
	  (
	   ID   int   null,
           Supplier  varchar(10) null,
           SupplierName  varchar(40) null,
           ContactMethod   varchar(50)  null,
           Tel  varchar(20)  null,
           Fax   varchar(20)  null,
           Notes   varchar(2000)null,
           Email     varchar(80)  null,
           EmailSubject   varchar (500) null,
           EmailBody   varchar(2000)null,
           EmailAttachment  varchar(2000)null,
           Contact   varchar(50)  null,
           Responseby   datetime    null,
           MajorCode varchar (5) NULL ,
           MinorCode varchar (5)  NULL ,
           MAJ_GROUP_ID int NULL ,
           SUB_GROUP_ID int NULL ,
           OPTION_ID int NULL ,
           MATGROUP_ID int NULL ,
           MATERIAL_ID int NULL ,
           ModelID int NULL ,
           ModelNameID int NULL ,
           HoldingID int NULL ,
           Contact_ID  int null,
           Supplier_ID  int null
	   )


-- select * from RFQ_vendorSElectionLog
--select * from  #supp

if (@type = 'T')
begin

      insert #supp ( HoldingID,ModelNameID,ModelID,
              MajorCode, MinorCode, MAJ_GROUP_ID,SUB_GROUP_ID,OPTION_ID,
              Supplier, SupplierName, ContactMethod,Tel,Fax, Notes, 
	      Email,EmailSubject, EmailBody, EmailAttachment, Contact, Responseby, Contact_ID,
             Supplier_ID  )

      select distinct a.HoldingID,ModelNameID,ModelID,
                l.MajorCode,l. MinorCode, l.MAJ_GROUP_ID,l.SUB_GROUP_ID,l.OPTION_ID,
              Supplier, SupplierName, ContactMethod,Tel,Fax,
             convert(varchar(2000), s.Notes), 
 	       	 Email,  EmailSubject, convert(varchar(2000),EmailBody),
              convert( varchar(2000),EmailAttachment), Contact, Responseby , s.Contact_ID,
           Supplier_ID
        from RFQ_VendorsSelected s
        join RFQ_vendorSElectionLog   l
        on s.Log_ID = l.ID
        join RFQ_VSH_Application   a
        on l.HeaderID = a.HeaderID
        and l.VA_ID = a.ID
        where s.HeaderID = @fHeaderID 

        
	select distinct Supplier, SupplierName, ContactMethod,Tel,Fax, 
              s.Notes, Email,EmailSubject, s.EmailBody,s. EmailAttachment,
              Contact, Responseby,v.HeaderID,v.ID, s.Majorcode, s.MinorCode, Contact_ID,Supplier_ID
         into #reult
	 from #supp  s
	join RFQ_vendorSElectionLog v   
        on  s.MajorCode = v.MajorCode
        and s.MinorCode = v.MinorCode
--         join RFQ_VSH_Application   a
--         on v.HeaderID = a.HeaderID
--         and v.VA_ID = a.ID
--  	and s.HoldingID = a.HoldingID
--         and s.ModelNameID = a.ModelNameID
--         and s.ModelID = a.ModelID
        where v.HeaderID =  @tHeaderID

         insert RFQ_VendorsSelected (Supplier, SupplierName, ContactMethod,Tel,Fax, Notes, 
		 Email,EmailSubject, EmailBody, EmailAttachment, Contact,
	       Responseby,HeaderID, LOG_ID, Majorcode, MinorCode, Contact_ID,Supplier_ID )
	select  Supplier, SupplierName, ContactMethod,Tel,Fax, 
              Notes, Email,EmailSubject, EmailBody, EmailAttachment,
              Contact, Responseby,HeaderID,ID, Majorcode, MinorCode, Contact_ID,Supplier_ID
        from  #reult
       
end

if (@type = 'O' ) and (@global= 'F')
begin
        insert #supp ( HoldingID,ModelNameID,ModelID,
              MajorCode, MinorCode, MAJ_GROUP_ID,SUB_GROUP_ID,OPTION_ID,
              Supplier, SupplierName, ContactMethod,Tel,Fax, Notes, 
	      Email,EmailSubject, EmailBody, EmailAttachment, Contact, Responseby, Contact_ID,
             Supplier_ID)
	
         select distinct a.HoldingID,ModelNameID,ModelID,
                l.MajorCode,l. MinorCode, l.MAJ_GROUP_ID,l.SUB_GROUP_ID,l.OPTION_ID,
              Supplier, SupplierName, ContactMethod,Tel,Fax,
             convert(varchar(8000), s.Notes), 
 	       	 Email,  EmailSubject, convert(varchar(8000),EmailBody),
              convert( varchar(8000),EmailAttachment), Contact, Responseby, s.Contact_ID,Supplier_ID
        from RFQ_VendorsSelected s
        join RFQ_vendorSElectionLog   l
        on s.Log_ID = l.ID
        join RFQ_VSH_Application   a
        on l.HeaderID = a.HeaderID
        and l.VA_ID = a.ID
        where s.HeaderID = @fHeaderID 

	insert RFQ_VendorsSelected (Supplier, SupplierName, ContactMethod,Tel,Fax, Notes, 
		 Email,EmailSubject, EmailBody, EmailAttachment, Contact,
	       Responseby,HeaderID, LOG_ID,Contact_ID,Supplier_ID )
	select Supplier, SupplierName, ContactMethod,Tel,Fax, s.Notes, 
		 Email,EmailSubject, EmailBody, EmailAttachment, Contact, 
	       Responseby, @tHeaderID,v.ID,s.Contact_ID,Supplier_ID
-- select Supplier_ID,* 
	 from #supp  s
	join RFQ_vendorSElectionLog v
        on  s.MajorCode = v.MajorCode
        and s.MinorCode = v.MinorCode
        and  s.MAJ_GROUP_ID = v.MAJ_GROUP_ID
        and s.SUB_GROUP_ID = v.SUB_GROUP_ID
        and s.OPTION_ID = v.OPTION_ID
        join RFQ_VSH_Application   a
        on v.HeaderID = a.HeaderID
        and v.VA_ID = a.ID
 	and s.HoldingID = a.HoldingID
        and s.ModelNameID = a.ModelNameID
        and s.ModelID = a.ModelID
        where v.HeaderID = @tHeaderID
end
else if (@type = 'O' ) and (@global= 'T')
begin
-- 
-- declare @fHeaderID   int, @tHeaderID int,
--         @type   varchar(5) , @global   varchar(5)

        insert #supp (MajorCode,OPTION_ID,Supplier, SupplierName, ContactMethod,Tel,Fax, Notes, 
		 Email,EmailSubject, EmailBody, EmailAttachment, Contact, Responseby,Contact_ID,
                 Supplier_ID)
	
         select distinct l.MajorCode,l.OPTION_ID,Supplier, SupplierName, ContactMethod,Tel,Fax,
            convert(varchar(8000), s.Notes), 
 	       	 Email,  EmailSubject, convert(varchar(8000),EmailBody),
              convert( varchar(8000),EmailAttachment), Contact, Responseby ,s.Contact_ID,Supplier_ID
       from RFQ_VendorsSelected s
        join RFQ_vendorSElectionLog   l
        on s.Log_ID = l.ID
        where s.HeaderID = @fHeaderID 

	insert RFQ_VendorsSelected (Supplier, SupplierName, ContactMethod,Tel,Fax, Notes, 
		 Email,EmailSubject, EmailBody, EmailAttachment, Contact,
	       Responseby,HeaderID, LOG_ID,Contact_ID,Supplier_ID )
	select Supplier, SupplierName, ContactMethod,Tel,Fax, s.Notes, 
		 Email,EmailSubject, EmailBody, EmailAttachment, Contact, 
	       Responseby, @tHeaderID,v.ID,s.Contact_ID,Supplier_ID
	 from #supp  s   
	join RFQ_vendorSElectionLog v
	on s.OPTION_ID= v.OPTION_ID
        and s.MajorCode = v.MajorCode
	where v.HeaderID = @tHeaderID
end
if (@type = 'M' ) and (@global= 'F')
begin
        insert #supp ( HoldingID,ModelNameID,ModelID,
              MajorCode, MinorCode, MATGROUP_ID, MATERIAL_ID,
              Supplier, SupplierName, ContactMethod,Tel,Fax, Notes, 
	      Email,EmailSubject, EmailBody, EmailAttachment, Contact, Responseby,Contact_ID,
             Supplier_ID)
	
         select distinct a.HoldingID,ModelNameID,ModelID,
                l.MajorCode,l. MinorCode,MATGROUP_ID, MATERIAL_ID,
              Supplier, SupplierName, ContactMethod,Tel,Fax,
             convert(varchar(8000), s.Notes), 
 	       	 Email,  EmailSubject, convert(varchar(8000),EmailBody),
              convert( varchar(8000),EmailAttachment), Contact, Responseby,s.Contact_ID,
            Supplier_ID
        from RFQ_VendorsSelected s
        join RFQ_vendorSElectionLog   l
        on s.Log_ID = l.ID
        join RFQ_VSH_Application   a
        on l.HeaderID = a.HeaderID
        and l.VA_ID = a.ID
        where s.HeaderID = @fHeaderID 

	insert RFQ_VendorsSelected (Supplier, SupplierName, ContactMethod,Tel,Fax, Notes, 
		 Email,EmailSubject, EmailBody, EmailAttachment, Contact,
	       Responseby,HeaderID, LOG_ID ,Contact_ID,Supplier_ID)
	select Supplier, SupplierName, ContactMethod,Tel,Fax, s.Notes, 
		 Email,EmailSubject, EmailBody, EmailAttachment, Contact, 
	       Responseby, @tHeaderID,v.ID,s.Contact_ID, Supplier_ID
-- select * 
	 from #supp  s
	join RFQ_vendorSElectionLog v
        on  s.MajorCode = v.MajorCode
        and s.MinorCode = v.MinorCode
        and  s.MATGROUP_ID= v.MATGROUP_ID
        and s.MATERIAL_ID = v.MATERIAL_ID
        join RFQ_VSH_Application   a
        on v.HeaderID = a.HeaderID
        and v.VA_ID = a.ID
 	and s.HoldingID = a.HoldingID
        and s.ModelNameID = a.ModelNameID
        and s.ModelID = a.ModelID
        where v.HeaderID = @tHeaderID
end
else if (@type = 'M' ) and (@global= 'T')
begin
       insert #supp (ID,Supplier, SupplierName, ContactMethod,Tel,Fax, Notes, 
		 Email,EmailSubject, EmailBody, EmailAttachment, Contact, Responseby,Contact_ID,
            Supplier_ID)
        select distinct l.MATERIAL_ID,Supplier, SupplierName, ContactMethod,Tel,Fax,
            convert(varchar(8000), s.Notes), 
 	       	 Email,  EmailSubject, convert(varchar(8000),EmailBody),
              convert( varchar(8000),EmailAttachment), Contact, Responseby ,s.Contact_ID,Supplier_ID
       from RFQ_VendorsSelected s
       join RFQ_vendorSElectionLog   l
       on s.Log_ID = l.ID
       where s.HeaderID = @fHeaderID

	insert RFQ_VendorsSelected (Supplier, SupplierName, ContactMethod,Tel,Fax, Notes, 
		 Email,EmailSubject, EmailBody, EmailAttachment, Contact,
	       Responseby,HeaderID, LOG_ID,Contact_ID,Supplier_ID )
	select Supplier, SupplierName, ContactMethod,Tel,Fax, s.Notes, 
		 Email,EmailSubject, EmailBody, EmailAttachment, Contact, 
	       Responseby, @tHeaderID,v.ID,s.Contact_ID,Supplier_ID
	 from #supp  s
	join RFQ_vendorSElectionLog v
	on s.ID = v.MATERIAL_ID
	where v.HeaderID = @tHeaderID
end

-- delete RFQ_VendorsSelected  where headerid = 332






















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQDefaultBobyLine_PO]') and xtype = 'P ')  
 drop Procedure spRFQDefaultBobyLine_PO
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go













CREATE       proc  [dbo].[spRFQDefaultBobyLine_PO]

@username   varchar(40),
@supplier  varchar(30)


as

-- 
-- declare @username   varchar(40),
--         @supplier  varchar(20),@hrDB   varchar(50)
-- 
-- select @username = 'hm'
-- select @supplier = 'AlbSurv'  --'Acklands'   


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#holding '))
drop table #holding 
create table #holding (
    holdingDesc   varchar(50)
)


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#modelName '))
drop table #modelName
create table #modelName (
    modelNameDesc   varchar(50)
)


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#model '))
drop table #model
create table #model(
    modelDesc   varchar(50)
)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#code '))
drop table #code
create table #code(
    Phs_code   varchar(50),
    subp_code   varchar(50),
    cost      money,
    PO    varchar(60) ,
    startDate   varchar(40),
    notes          varchar(8000),
    ExpiryDate    varchar(20),
    RFQID       varchar(50)
    
) 

declare @BodyDef  varchar(8000), @Def   varchar(8000)

declare @HoldingID int, @ModelNameID  int, @ModelID    int

declare @Phs_code  varchar(20), @subp_code    varchar(20)   

 
declare aCursorHolding cursor for 

   select distinct q.HoldingID
	from cms_contract_management_Supp c
	join RFQ_Working_Application a
	on c.CMSS_ID = a.CMSS_ID
        join  cms_contract_management m
        on c.CMS_ID = m.CMS_ID
        join scQuote  q
        on m.QuoteID = q.ID
        where   isnull(POed,'') <> 'T'
        and isnull(PO,'') <> ''
        and userid =  @username
        and c.supplier = @supplier

open aCursorHolding
fetch next from aCursorHolding into @HoldingID 

select @BodyDef  =   SPACE(60)+ 'RFQID' + SPACE(8) + 'Expiry Date' + SPACE(6) + 'Cost' + SPACE(13) +
                  'PO#' + SPACE(13) +'Start Date' 
                         + SPACE(10) +'Notes'
while @@FETCH_STATUS = 0
begin
       
     delete #holding  
     insert  #holding 
     select   distinct q.HoldingDesc 
     from cms_contract_management_Supp c
     join RFQ_Working_Application a
     on c.CMSS_ID = a.CMSS_ID
     join  cms_contract_management m
     on c.CMS_ID = m.CMS_ID
     join scQuote  q
     on m.QuoteID = q.ID
     where     isnull(POed,'') <> 'T'     
     and isnull(PO,'') <> ''
     and userid =  @username
      and c.supplier = @supplier
     and q.HoldingID = @HoldingID
     
     select @Def = holdingDesc from #holding
     select   @BodyDef  =  @BodyDef + char(13) + char(10)+ @Def   -- holding
     ------ model Name--------
      declare aCursorModelName cursor for 
	
      select distinct q.ModelNameID 
      from cms_contract_management_Supp c
      join RFQ_Working_Application a
      on c.CMSS_ID = a.CMSS_ID
      join  cms_contract_management m
      on c.CMS_ID = m.CMS_ID
      join scQuote  q
      on m.QuoteID = q.ID
      where     isnull(POed,'') <> 'T'
      and isnull(PO,'') <> ''
      and userid =  @username
       and c.supplier = @supplier
      and q.HoldingID = @HoldingID

	
      open aCursorModelName
      fetch next from aCursorModelName into @ModelNameID 
	
      select @Def  = ''
      while @@FETCH_STATUS = 0
      begin
	       
	      delete #modelName 
	      insert  #modelName 
	      select   distinct q.ModelNameDesc 
	      from cms_contract_management_Supp c
              join RFQ_Working_Application a
              on c.CMSS_ID = a.CMSS_ID
              join  cms_contract_management m
              on c.CMS_ID = m.CMS_ID
              join scQuote  q
              on m.QuoteID = q.ID
              where     isnull(POed,'') <> 'T'
              and isnull(PO,'') <> ''
              and userid =  @username
              and c.supplier = @supplier
          and q.HoldingID = @HoldingID
              and q.ModelNameID= @ModelNameID 

	      select @Def = modelNameDesc 
              from #modelName
              --select  @Def  'def'
	      select   @BodyDef  = @BodyDef + char(13) + char(10)+ SPACE(5) + @Def   -- modelname
              --- model
              declare aCursorModel cursor for 
	
              select distinct q.ModelID 
              -- select *
               from cms_contract_management_Supp c
              join RFQ_Working_Application a
              on c.CMSS_ID = a.CMSS_ID
              join  cms_contract_management m
              on c.CMS_ID = m.CMS_ID
              join scQuote  q
              on m.QuoteID = q.ID
              where     isnull(POed,'') <> 'T'
              and isnull(PO,'') <> ''
              and userid =  @username
              and c.supplier = @supplier
              and q.HoldingID = @HoldingID
              and q.ModelNameID= @ModelNameID  
	
              open aCursorModel
              fetch next from aCursorModel into @ModelID 
	
              select @Def  = ''
              while @@FETCH_STATUS = 0
              begin
	       
		      delete #model 
		      insert  #model 
		      select   distinct q.ModelDesc 
		      -- select * 
		      from cms_contract_management_Supp c
                      join RFQ_Working_Application a
                      on c.CMSS_ID = a.CMSS_ID
                      join  cms_contract_management m
                      on c.CMS_ID = m.CMS_ID
                      join scQuote  q
                      on m.QuoteID = q.ID
                      where     isnull(POed,'') <> 'T'
                       and isnull(PO,'') <> ''
                      and userid =  @username
                       and c.supplier = @supplier
                      and q.HoldingID = @HoldingID
                      and q.ModelNameID= @ModelNameID 
                       and q.ModelID = @ModelID

		      select @Def = modelDesc from #model
	              --select  @Def  'def'
		      select   @BodyDef  =  @BodyDef + char(13) + char(10)+ SPACE(10) + @Def   -- model
		       --- Major code / minor code ----

                      declare aCursorcode cursor for 
			
		      select distinct Phs_code, subp_code
                      -- select *
                       from cms_contract_management_Supp c
                      join RFQ_Working_Application a
                      on c.CMSS_ID = a.CMSS_ID
                      join  cms_contract_management m
                      on c.CMS_ID = m.CMS_ID
                      join scQuote  q
                      on m.QuoteID = q.ID
                      where     isnull(POed,'') <> 'T'
                      and isnull(PO,'') <> ''
                      and userid =  @username
                      and c.supplier = @supplier
                      and q.HoldingID = @HoldingID
                      and q.ModelNameID= @ModelNameID 
                      and q.ModelID = @ModelID

		       open aCursorcode
		       fetch next from aCursorcode into @Phs_code, @subp_code 
			
		       select @Def  = ''
		       while @@FETCH_STATUS = 0
		       begin
			       
			    delete #code 
			    insert  #code 
		            select distinct   m.phs_desc, m.subp_desc,c.RFQ_EST, PO,
                                convert(varchar(20), q.startDate,107), convert(varchar(8000),isNull(PONotes,'')), 
                                 convert(varchar(20), h.RequestExpiryDate,107),h.RFQID
                           -- select *
	                    from cms_contract_management_Supp c
                            join RFQ_Working_Application a
                            on c.CMSS_ID = a.CMSS_ID
                            join  cms_contract_management m
                            on c.CMS_ID = m.CMS_ID
                            join scQuote  q
                            on m.QuoteID = q.ID
       join RFQ_COST t
                            on c.RFQC_ID = t.RFQC_ID
                            join RFQ_VendorSelectionHeader   h
                            on  t.RFQ_HeaderID = h.ID 
                            where     isnull(POed,'') <> 'T'
                            and isnull(PO,'') <> ''
                            and a.userid =  @username
                            and c.supplier = @supplier
                            and q.HoldingID = @HoldingID
                            and q.ModelNameID= @ModelNameID 
                            and q.ModelID = @ModelID
	                    and m.Phs_code = @Phs_code
	                    and m. subp_code =  @subp_code
	                    
	                                  
                            select @Def =  SPACE(21) + rtrim( Phs_code + isnull(subp_code,'') ) +space(5)+
                                             rtrim( isnull(RFQID,''))+ space(3)+ rtrim( isnull(ExpiryDate,'')) + 
	                                    space(4)+ convert(varchar(10), cost) +space(6)+ PO +
	                                            space(5) +  rtrim( convert(varchar(20), startDate) ) +
                                     space(5)+ rtrim( isnull(notes,'')) 
                                 
	                   --select * 
                           from #code

		            --select  @Def  'def'
			    select   @BodyDef  =  @BodyDef + char(13) + char(10)+ SPACE(20) + @Def   -- model
					
			    fetch next from aCursorcode into  @Phs_code, @subp_code 
			              
		        end
			
		        close aCursorcode
		        deallocate aCursorcode
			
                        --- Major code/Minor code ------
		
		      fetch next from aCursorModel into @ModelID  
	              
              end
	
              close aCursorModel
              deallocate aCursorModel 
	
	      --- model
	      fetch next from aCursorModelName into @ModelNameID  
       end
	
       close aCursorModelName
       deallocate aCursorModelName
     
        ------model name -------

      fetch next from aCursorHolding into @HoldingID 
end

close aCursorHolding
deallocate aCursorHolding


select @BodyDef  '@BodyDef'


declare @suppName varchar(30), @contact   varchar(50)


SELECT @suppName= isnull( c.SUPPLIER_NAME,''), @contact = isnull( c.Contact,'')
FROM RFQ_Notification c 
INNER JOIN RFQ_Working_Application a 
ON c.CMSS_ID = a.CMSS_ID 
INNER JOIN CMS_Contract_Management_Supp s 
ON c.CMSS_ID = s.CMSS_ID AND c.SUPPLIER = s.SUPPLIER 
WHERE (ISNULL(s.POed, '') <> 'T') AND (ISNULL(s.PO, '') <> '')
  AND (c.Type = 'P')
 AND (a.UserID = @username) 
and c.SUPPLIER = @supplier
	


 select @BodyDef   = 'To: ' + @suppName + char(13) + char(10) + 'Attention: ' + isnull(@contact,'') +
                         char(13) + char(10) + char(13) + char(10) +
                     'The following PO(s) have been awarded to you with their respective ' +char(13) + char(10)+
                     'start(s). Please contact the contracts department immediately if any of '+ char(13) + char(10)+
                     'the start dates pose a problem.' + char(13) + char(10) +char(13) + char(10) + @BodyDef
       



 -- select @body 'body'

declare @subject   varchar(100)

select @subject = 'PO Notification'

        update RFQ_Notification
        set EmailBody = @BodyDef ,
            EmailSubject =  @subject, notes = @BodyDef
        -- select *
        from RFQ_Notification c
        JOIN RFQ_Working_Application a 
        ON c.CMSS_ID = a.CMSS_ID 
        JOIN CMS_Contract_Management_Supp s 
        ON c.CMSS_ID = s.CMSS_ID AND c.SUPPLIER = s.SUPPLIER 
        WHERE (ISNULL(s.POed, '') <> 'T') AND (ISNULL(s.PO, '') <> '')
          AND (c.Type = 'P')
          AND (a.UserID = @username) 
         and c.Supplier = @supplier
















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQDefaultBobyLine_Response]') and xtype = 'P ')  
 drop Procedure spRFQDefaultBobyLine_Response
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go















CREATE         proc  spRFQDefaultBobyLine_Response

@username   varchar(40),
@supplier  varchar(20)


as

-- declare @username   varchar(40),
--         @supplier  varchar(20),@hrDB   varchar(50)
-- 
-- select @username = 'hm'
-- select @supplier = 'Acklands' --'Kramer'  --'Acklands'   --'AlbSurv'   





if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#RFQId '))
drop table #RFQId 
create table #RFQId(
    RFQId  varchar(50)
)


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#holding '))
drop table #holding 
create table #holding (
    holdingDesc   varchar(50)
)


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#modelName '))
drop table #modelName
create table #modelName (
    modelNameDesc   varchar(50)
)


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#model '))
drop table #model
create table #model(
    modelDesc   varchar(50)
)


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#code '))
drop table #code
create table #code(
    Phs_code   varchar(50),
    subp_code   varchar(50),
    cost      money,
    Date_Expire    varchar(50) ,
    notes          varchar(7500)
    
) 



declare @BodyDef  varchar(8000), @Def   varchar(8000)

declare @RFQID varchar(50),@HoldingID int, @ModelNameID  int, @ModelID    int,
@phs_code  varchar(10), @subp_code  varchar(10)


declare @RFQCode varchar(50)

--select * from  RFQ_Working_Application 
		
select @RFQCode = ''      
select @BodyDef  =  SPACE(55)+ 'Cost' + SPACE(7) + 'Expiry Date' + SPACE(10) +'Notes' 
 
declare aCursorRFQID cursor for 
		
select distinct c.RFQ_HeaderID
from RFQ_Cost  c
join  RFQ_Working_Application   a
on c.RFQ_HeaderID = a.RFQ_HeaderID  
where a.userID = @username
and supplier = @supplier
and ISNULL(c.Respond_Thank, 'F') <> 'T'
		
open aCursorRFQID
fetch next from aCursorRFQID into @RFQID  

while @@FETCH_STATUS = 0
begin
		       
    delete #RFQId   
    insert  #RFQId    -- select * from #RFQId 
    select   distinct RFQ_ID
     -- select Date_Expire, notes
    from RFQ_COST
    where  RFQ_HeaderID = @RFQID  
     and ISNULL(Respond_Thank, 'F') <> 'T' 

    select @Def = RFQId  from #RFQId 
    if isnull(@RFQCode,'') = ''
        select @RFQCode = @RFQCode + @Def
    else
        select @RFQCode = @RFQCode + ',' + @Def
    
    if isnull(@BodyDef,'') <> '' 
      select   @BodyDef  =  @BodyDef + char(13) + char(10)+  @Def  -- RFQID
    else
        select   @BodyDef  =  @BodyDef +  @Def 
-----------------------holding----------------------------
		declare aCursorHolding cursor for 
		
		select distinct RAW_LAND_CD
		from RFQ_Cost
		where RFQ_HeaderID = @RFQID 
		and supplier = @supplier
                and ISNULL(Respond_Thank, 'F') <> 'T'
		open aCursorHolding
		fetch next from aCursorHolding into @HoldingID 
		
		
		while @@FETCH_STATUS = 0
		begin
		       
		     delete #holding  
		     insert  #holding 
		     select   distinct HoldingDesc 
		     -- select * 
		     from RFQ_COST
		     where RFQ_HeaderID = @RFQID 
		     and RAW_LAND_CD = @HoldingID
                     and supplier = @supplier
                     and ISNULL(Respond_Thank, 'F') <> 'T'
		     select @Def = holdingDesc from #holding
		     select   @BodyDef  =  @BodyDef +char(13) + char(10)+  SPACE(5) +@Def    -- holding
                                       
		     ------ model Name--------
		      declare aCursorModelName cursor for 
			
		      select distinct ModelNameID 
                      from RFQ_COST
		      where RFQ_HeaderID = @RFQID 
    		      and RAW_LAND_CD = @HoldingID
			and supplier = @supplier
                          and ISNULL(Respond_Thank, 'F') <> 'T'
		      open aCursorModelName
		      fetch next from aCursorModelName into @ModelNameID 
			
		      select @Def  = ''
		      while @@FETCH_STATUS = 0
		      begin
			       
			      delete #modelName 
			      insert  #modelName 
			      select   distinct ModelNameDesc 
			      -- select * 
			      from RFQ_COSt
			      where   RFQ_HeaderID = @RFQID 
		                 and RAW_LAND_CD = @HoldingID
			         and ModelNameID= @ModelNameID 
                                 and supplier = @supplier
                                 and ISNULL(Respond_Thank, 'F') <> 'T'
 
			      select @Def = modelNameDesc 
		              from #modelName
		             
			      select   @BodyDef  = @BodyDef + char(13) + char(10)+ SPACE(10) + @Def   -- modelname
		              --- model
		              declare aCursorModel cursor for 
			
		              select distinct Model_ID
                               from RFQ_COST
		              where RFQ_HeaderID = @RFQID 
		                 and RAW_LAND_CD = @HoldingID
    		                 and ModelNameID = @ModelNameID 
			         and supplier = @supplier
                                 and ISNULL(Respond_Thank, 'F') <> 'T'
		              open aCursorModel
		              fetch next from aCursorModel into @ModelID 
			
		              select @Def  = ''
		              while @@FETCH_STATUS = 0
		              begin
			       
				      delete #model 
				      insert  #model 
				      select   distinct ModelDesc 
				      -- select * 
				      from RFQ_COST
				      where  RFQ_HeaderID = @RFQID 
		                      and RAW_LAND_CD = @HoldingID
		                     and ModelNameID = @ModelNameID 
		                       and Model_ID = @ModelID
                                      and supplier = @supplier
                                      and ISNULL(Respond_Thank, 'F') <> 'T'

				      select @Def = modelDesc from #model
			              --select  @Def  'def'
				      select   @BodyDef  =  @BodyDef + char(13) + char(10)+ SPACE(15) + @Def   -- model
				      --- Major code / minor code ----
                                       declare aCursorcode cursor for 
			
		                       select distinct Phs_code, subp_code
                                       -- select *
                                       from RFQ_COST
    		                       where RFQ_HeaderID = @RFQID 
		                       and RAW_LAND_CD = @HoldingID
		                       and ModelNameID = @ModelNameID 
			               and Model_ID = @ModelID
                                       and supplier = @supplier
                                         and ISNULL(Respond_Thank, 'F') <> 'T' 
		                      open aCursorcode
		                      fetch next from aCursorcode into @Phs_code, @subp_code 
			
		                     select @Def  = ''
		                     while @@FETCH_STATUS = 0
		                     begin
			       
				      delete #code 
				      insert  #code 
				      select   distinct phs_desc, subp_desc,Cost, convert(varchar(107),Date_Expire,107), 
                                              convert(varchar(8000),notes)
				      -- select supplier ,* 
				      from RFQ_COST
				      where  RFQ_HeaderID = @RFQID 
		                      and RAW_LAND_CD = @HoldingID
		                      and ModelNameID = @ModelNameID 
		                      and Model_ID = @ModelID
                                      and Phs_code = @Phs_code
                                      and  subp_code =  @subp_code
                                      and supplier = @supplier
                                      and ISNULL(Respond_Thank, 'F') <> 'T'
				      select @Def = rtrim( Phs_code + isnull(subp_code,'') ) +space(20)+
                                              convert(varchar(10), cost) +space(5)+ isnull(Date_Expire,'') +
                                                    space(5) +  isnull(notes,'')
                                                    
   from #code
			              --select  @Def  'def'
				      select   @BodyDef  =  @BodyDef + char(13) + char(10)+ SPACE(20) + @Def   -- model
				
				
				      fetch next from aCursorcode into  @Phs_code, @subp_code 
			              
		                      end
			
		                      close aCursorcode
		                      deallocate aCursorcode
			
                                      --- Major code/Minor code ------
				
				      fetch next from aCursorModel into @ModelID  
			              
		              end
			
		              close aCursorModel
		              deallocate aCursorModel 
			
			      --- model
			      fetch next from aCursorModelName into @ModelNameID  
		       end
			
		       close aCursorModelName
		       deallocate aCursorModelName
		     
		        ------model name -------
		
		      fetch next from aCursorHolding into @HoldingID 
		end
		
		close aCursorHolding
		deallocate aCursorHolding
------------------------holding-----------------------------------------------
      fetch next from aCursorRFQID into  @RFQId 
end
		
close aCursorRFQId
deallocate aCursorRFQID

--select @BodyDef  '@BodyDef'

declare @suppName  varchar(50), @contact varchar(50)
	
select  @suppName= isnull(c.SUPPLIER_NAME,''),@contact = isnull(c.Contact,'')
FROM RFQ_Notification c       --- select supplier,emailbody from  RFQ_Notification where isnull( convert (varchar(8000), emailbody),'') <>''
INNER JOIN RFQ_Working_Application a   -- select * from RFQ_Working_Application
ON c.RFQ_HeaderID = a.RFQ_HeaderID 
INNER JOIN RFQ_COST s 
ON c.RFQ_HeaderID = s.RFQ_HeaderID 
AND c.SUPPLIER = s.SUPPLIER 
WHERE (ISNULL(s.Respond_Thank, 'F') <> 'T')   AND (c.Type = 'T')
AND (a.UserID = @username) 
and c.supplier = @supplier


select  @BodyDef =  'To: ' + @suppName + char(13) + char(10) + 'Attention: ' + isnull(@contact,'') +
                         char(13) + char(10) +  char(13) + char(10) +  'Thank you for your timely response to our RFQ.' +char(13) + char(10)+
                      'We have received to following pricing information from you. '+  char(13) + char(10)+
                  'If there are any corrections to your response that need to be made,' +  char(13) + char(10)+
                  'please do not hesitate to contact us. Thank you again. ' + 
                   char(13) + char(10)+  char(13) + char(10)+ @BodyDef


select  @BodyDef  'select  @BodyDef'
select @RFQCode  '@RFQCode'

declare @subject   varchar(100)

select @subject = 'Acknowledgement of RFQ ' +  @RFQCode

select @subject  'subject'



declare @docID   int
select @docID = isnull(max(Doc_ID),0) + 1
from RFQ_Notification 



 update RFQ_Notification
        set EmailBody = @BodyDef ,
            EmailSubject =  @subject, notes = @BodyDef,
      Doc_ID = @docID
        FROM RFQ_Notification c 
        INNER JOIN RFQ_Working_Application a 
        ON c.RFQ_HeaderID = a.RFQ_HeaderID 
        INNER JOIN RFQ_COST s 
        ON c.RFQ_HeaderID = s.RFQ_HeaderID 
        AND c.SUPPLIER = s.SUPPLIER 
        WHERE (ISNULL(s.Respond_Thank, 'F') <> 'T')   AND (c.Type = 'T')
         AND (a.UserID = @username)  
         and c.Supplier = @supplier














Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQDefaultBobyLine_Schedule]') and xtype = 'P ')  
 drop Procedure spRFQDefaultBobyLine_Schedule
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go













CREATE       proc  spRFQDefaultBobyLine_Schedule

@username   varchar(40),
@supplier  varchar(20)


as
-- 
-- declare @username   varchar(40),
--         @supplier  varchar(20),@hrDB   varchar(50)
-- 
-- select @username = 'hm'
-- select @supplier = 'AlbSurv' --'Acklands'   





if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#RFQId '))
drop table #RFQId 
create table #RFQId(
    RFQId  varchar(50)
)


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#holding '))
drop table #holding 
create table #holding (
    holdingDesc   varchar(50)
)


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#modelName '))
drop table #modelName
create table #modelName (
    modelNameDesc   varchar(50)
)


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#model '))
drop table #model
create table #model(
    modelDesc   varchar(50)
)


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#code '))
drop table #code
create table #code(
    Phs_code   varchar(50),
    subp_code   varchar(50),
    cost      money,
    Date_Expire    varchar(50) ,
    notes          varchar(7500),
   Assign_Volume   varchar(10),
   StartDates       varchar(100)
    
) 



declare @BodyDef  varchar(8000), @Def   varchar(8000)

declare @RFQID varchar(50),@HoldingID int, @ModelNameID  int, @ModelID    int,
@phs_code  varchar(10), @subp_code  varchar(10)


--select * from  RFQ_Working_Application 
      
select @BodyDef  =  SPACE(50)+ 'Cost' + SPACE(7) + 'Expiry Date' +  SPACE(5) 
         + 'Starts' + SPACE(5) +  'Est.Start Dates' + SPACE(10) +'Notes'
 
declare aCursorRFQID cursor for 
		
select distinct c.RFQ_HeaderID
from RFQ_Cost  c
join  RFQ_Working_Application   a
on c.RFQ_HeaderID = a.RFQ_HeaderID  
where a.userID = @username
and supplier = @supplier
and ISNULL(c.Respond_scheduling, 'F') <> 'T'
and isnull(StartDates,'') <> ''
		
open aCursorRFQID
fetch next from aCursorRFQID into @RFQID  
		

while @@FETCH_STATUS = 0
begin
		       
    delete #RFQId   
    insert  #RFQId    -- select * from #RFQId 
    select   distinct RFQ_ID
     -- select Date_Expire, notes
    from RFQ_COST
    where  RFQ_HeaderID = @RFQID  
     and ISNULL(Respond_scheduling, 'F') <> 'T' 
      and isnull(StartDates,'') <> ''  
    select @Def = RFQId  from #RFQId 
    if isnull(@BodyDef,'') <> '' 
      select   @BodyDef  =  @BodyDef + char(13) + char(10)+  @Def  -- RFQID
    else
        select   @BodyDef  =  @BodyDef +  @Def 
-----------------------holding----------------------------
		declare aCursorHolding cursor for 
		
		select distinct RAW_LAND_CD
		from RFQ_Cost
		where RFQ_HeaderID = @RFQID 
		and supplier = @supplier
                and ISNULL(Respond_scheduling, 'F') <> 'T'
                and isnull(StartDates,'') <> ''
		open aCursorHolding
		fetch next from aCursorHolding into @HoldingID 
		
		
		while @@FETCH_STATUS = 0
		begin
		       
		     delete #holding  
		     insert  #holding 
		     select   distinct HoldingDesc 
		     -- select * 
		     from RFQ_COST
		     where RFQ_HeaderID = @RFQID 
		     and RAW_LAND_CD = @HoldingID
                     and supplier = @supplier
                     and ISNULL(Respond_scheduling, 'F') <> 'T'
                     and isnull(StartDates,'') <> ''
		     select @Def = holdingDesc from #holding
		     select   @BodyDef  =  @BodyDef + char(13) + char(10)+  SPACE(5) +@Def    -- holding
                                       
		     ------ model Name--------
		      declare aCursorModelName cursor for 
			
		      select distinct ModelNameID 
                      from RFQ_COST
		      where RFQ_HeaderID = @RFQID 
    		      and RAW_LAND_CD = @HoldingID
			and supplier = @supplier
                          and ISNULL(Respond_scheduling, 'F') <> 'T'
    and isnull(StartDates,'') <> ''
		      open aCursorModelName
		      fetch next from aCursorModelName into @ModelNameID 
			
		      select @Def  = ''
		      while @@FETCH_STATUS = 0
		      begin
			       
			      delete #modelName 
			      insert  #modelName 
			      select   distinct ModelNameDesc 
			      -- select * 
			      from RFQ_COSt
			      where   RFQ_HeaderID = @RFQID 
		                 and RAW_LAND_CD = @HoldingID
			         and ModelNameID= @ModelNameID 
                                 and supplier = @supplier
                                 and ISNULL(Respond_scheduling, 'F') <> 'T'
                                 and isnull(StartDates,'') <> ''
			      select @Def = modelNameDesc 
		              from #modelName
		             
			      select   @BodyDef  = @BodyDef + char(13) + char(10)+ SPACE(10) + @Def   -- modelname
		              --- model
		              declare aCursorModel cursor for 
			
		              select distinct Model_ID
                               from RFQ_COST
		              where RFQ_HeaderID = @RFQID 
		                 and RAW_LAND_CD = @HoldingID
    		                 and ModelNameID = @ModelNameID 
			         and supplier = @supplier
                                 and ISNULL(Respond_scheduling, 'F') <> 'T'
                                 and isnull(StartDates,'') <> ''
		              open aCursorModel
		              fetch next from aCursorModel into @ModelID 
			
		              select @Def  = ''
		              while @@FETCH_STATUS = 0
		              begin
			       
				      delete #model 
				      insert  #model 
				      select   distinct ModelDesc 
				      -- select * 
				      from RFQ_COST
				      where  RFQ_HeaderID = @RFQID 
		                      and RAW_LAND_CD = @HoldingID
		                     and ModelNameID = @ModelNameID 
		                       and Model_ID = @ModelID
                                      and supplier = @supplier
                                      and ISNULL(Respond_scheduling, 'F') <> 'T'
                                      and isnull(StartDates,'') <> ''
				      select @Def = modelDesc from #model
			              --select  @Def  'def'
				      select   @BodyDef  =  @BodyDef + char(13) + char(10)+ SPACE(15) + @Def   -- model
				      --- Major code / minor code ----
                                       declare aCursorcode cursor for 
			
		                       select distinct Phs_code, subp_code
                                       -- select *
                                       from RFQ_COST
    		                       where RFQ_HeaderID = @RFQID 
		                       and RAW_LAND_CD = @HoldingID
		                       and ModelNameID = @ModelNameID 
			               and Model_ID = @ModelID
                                       and supplier = @supplier
                                         and ISNULL(Respond_scheduling, 'F') <> 'T' 
                                       and isnull(StartDates,'') <> ''
		                      open aCursorcode
		                      fetch next from aCursorcode into @Phs_code, @subp_code 
			
		                     select @Def  = ''
		                     while @@FETCH_STATUS = 0
		                     begin
			       
				      delete #code 
				      insert  #code 
				      select   distinct phs_desc, subp_desc,Cost, convert(varchar(20),Date_Expire,107),
                                             convert(varchar(8000), notes), Assign_Volume, StartDates
				      -- select * 
				      from RFQ_COST
				      where  RFQ_HeaderID = @RFQID 
		                      and RAW_LAND_CD = @HoldingID
		                      and ModelNameID = @ModelNameID 
		                      and Model_ID = @ModelID
                                      and Phs_code = @Phs_code
                                      and  subp_code =  @subp_code
          and supplier = @supplier
                                     and ISNULL(Respond_scheduling, 'F') <> 'T'
                                      and isnull(StartDates,'') <> ''
				      select @Def = rtrim( Phs_code + isnull(subp_code,'') ) +space(16)+
                                              convert(varchar(10), cost) +space(5)+ isnull(Date_Expire,'') +
                                                   + space(5) + 
                                             rtrim( isnull(Assign_Volume,'') )+ space(11) +
                                              rtrim( isnull(StartDates,'') ) + space(15) +  rtrim(isnull(notes,''))
                                                    
                                      from #code
			              --select  @Def  'def'
				      select   @BodyDef  =  @BodyDef + char(13) + char(10)+ SPACE(20) + @Def   -- model
				
				
				      fetch next from aCursorcode into  @Phs_code, @subp_code 
			              
		                      end
			
		                      close aCursorcode
		                      deallocate aCursorcode
			
                                      --- Major code/Minor code ------
				
				      fetch next from aCursorModel into @ModelID  
			              
		              end
			
		              close aCursorModel
		              deallocate aCursorModel 
			
			      --- model
			      fetch next from aCursorModelName into @ModelNameID  
		       end
			
		       close aCursorModelName
		       deallocate aCursorModelName
		     
		        ------model name -------
		
		      fetch next from aCursorHolding into @HoldingID 
		end
		
		close aCursorHolding
		deallocate aCursorHolding
------------------------holding-----------------------------------------------
      fetch next from aCursorRFQID into  @RFQId 
end
		
close aCursorRFQId
deallocate aCursorRFQID

select @BodyDef  '@BodyDef'



declare  @suppName varchar(30), @contact   varchar(50)       

select  @suppName = isnull(s.SUPPLIER_NAME,''),  @contact  = isnull(c.Contact,'')
FROM RFQ_Notification c       
INNER JOIN RFQ_Working_Application a   
ON c.RFQ_HeaderID = a.RFQ_HeaderID 
INNER JOIN RFQ_COST s 
ON c.RFQ_HeaderID = s.RFQ_HeaderID 
AND c.SUPPLIER = s.SUPPLIER 
WHERE (ISNULL(s.Respond_scheduling, 'F') <> 'T')   AND (c.Type = 'S')
AND (a.UserID = @username) 
 and c.Supplier = @supplier



select @BodyDef   = 'To: ' + @suppName + char(13) + char(10) + 'Attention: ' + isnull(@contact,'') +
                         char(13) + char(10) + char(13) + char(10) +
                      'We expect to contract you to begin construction on the following in the ' +char(13) + char(10)+
                      'near future. Please see below for the particulars. Feel free to contact '+ char(13) + char(10)+
                      'the contracts department for further clarification. ' + char(13) + char(10) +
                      '*Note, these are estimated starts only… ' +char(13) + char(10)+
                      'no purchase orders have been issued on the document.' + char(13) + char(10)+
                      + char(13) + char(10)+ @BodyDef


declare @subject   varchar(100)

select @subject = 'Scheduling Notification'


        update RFQ_Notification
        set EmailBody = @BodyDef ,
            EmailSubject =  @subject, notes = @BodyDef
        FROM RFQ_Notification c 
        INNER JOIN RFQ_Working_Application a 
        ON c.RFQ_HeaderID = a.RFQ_HeaderID 
        INNER JOIN RFQ_COST s 
        ON c.RFQ_HeaderID = s.RFQ_HeaderID 
        AND c.SUPPLIER = s.SUPPLIER 
        WHERE (ISNULL(s.Respond_scheduling, 'F') <> 'T')   AND (c.Type = 'S')
         AND (a.UserID = @username)  
         and c.Supplier = @supplier
         












Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQDefaultLine_PO]') and xtype = 'P ')  
 drop Procedure spRFQDefaultLine_PO
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go









CREATE     proc spRFQDefaultLine_PO

   @username  varchar(40)

as

-- declare @username  varchar(40)
-- select @username = 'hm'
----------------
declare @supp varchar(30)


declare aCursorSupp cursor for 
	
SELECT DISTINCT c.SUPPLIER
FROM RFQ_Notification c 
INNER JOIN RFQ_Working_Application a 
ON c.CMSS_ID = a.CMSS_ID 
INNER JOIN CMS_Contract_Management_Supp s 
ON c.CMSS_ID = s.CMSS_ID AND c.SUPPLIER = s.SUPPLIER 
WHERE (ISNULL(s.POed, '') <> 'T') AND (ISNULL(s.PO, '') <> '')
  AND (c.Type = 'P')
 AND (a.UserID = @username) 
	


declare @body   varchar(8000)
open aCursorSupp
fetch next from aCursorSupp into @supp

while @@FETCH_STATUS = 0
begin
	    
    exec spRFQDefaultBobyLine_PO @username,@supp 

    fetch next from aCursorSupp into  @supp 
	              
end
	
close aCursorSupp
deallocate aCursorSupp  













Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQDefaultLine_Request]') and xtype = 'P ')  
 drop Procedure spRFQDefaultLine_Request
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go










CREATE      proc [dbo].[spRFQDefaultLine_Request]

@headerID   int  ,  @supplier varchar(30),@hrDB   varchar(50)
as

-- declare @headerID   int  ,  @supplier varchar(30)
-- 
-- select @headerID = 33
-- select @supplier =  'First' --   --'AlbSurv' -
-- 
-- 
-- declare         @hrDB   varchar(50)
-- select @hrDB = 'hr_realestate'

declare @str  varchar(800)
 
select @str = 'update RFQ_VendorSelectionLog 
              set MajorCodeDesc = p.phs_desc 
              from RFQ_VendorSelectionLog  c
              join ' + @hrDB + '..phase  p
              on c.MajorCode = p.phs_code
              where isnull(c.MajorCodeDesc,'''') =  '''' '
exec( @str)

select @str =  'update RFQ_VendorSelectionLog 
               set MinorCodeDesc = p.subp_desc
               from RFQ_VendorSelectionLog  c
               join ' + @hrDB  + '..subphase  p
               on c.MinorCode = p.subp_code
                where isnull(c.MinorCodeDesc,'''') =  '''''
exec( @str)



if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#holding '))
drop table #holding 
create table #holding (
    holdingDesc   varchar(50)
)


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#modelName '))
drop table #modelName
create table #modelName (
    modelNameDesc   varchar(50)
)


if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#model '))
drop table #model
create table #model(
    modelDesc   varchar(50)
)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#code '))
drop table #code
create table #code (
    MajorCode  varchar(50),
    MinorCode   varchar(50)
)


declare @DefCode  varchar(8000), @BodyDefCode  varchar(8000),
             @MajorCode varchar(20), @MinorCode  varchar(20)


declare @subject varchar(300) , @contact varchar(40),@SuppName varchar(40),
        @expireDate varchar(20), @responseby  varchar(20)

select @subject = 'Request for quote# ' + RFQId + ':' + RFQDesc,
       @expireDate = convert(varchar(20), RequestExpiryDate,107)
--select *
 from RFQ_VendorSelectionHeader
where id = @headerid 

select @subject 'subject'
select  @expireDate  ' @expireDate'


select @contact = isnull(contact,''),@SuppName = SupplierName , 
        @responseby = convert (varchar(20),responseby,107)
-- select contact,*
from RFQ_VendorsSelected
where Headerid = @headerid
 and supplier = @supplier

select @responseby = isnull(@responseby ,'')


--select CONVERT(varchar(12), getdate(),1) -- mm/dd/yy

select  @contact ' @contact'

select  @SuppName ' SuppName'

select @responseby '@responseby'



-- Major code/Minor code
                       declare aCursorCode cursor for 
	
                      select distinct l.MajorCode, l.MinorCode
                      FROM    RFQ_VendorSelectionLog l 
                      join    RFQ_VendorsSelected v
                      ON v.LOG_ID = l.ID AND l.HeaderID = v.HeaderID 
                      join    RFQ_VendorSelectionHeader h
                      ON l.HeaderID = h.ID
                      JOIN RFQ_VSH_Application a
                      ON l.HeaderID = a.HeaderID AND a.ID = l.VA_ID
                      where h.ID= @headerID 
                              and v.supplier = @supplier
                      open aCursorCode
                      fetch next from aCursorCode into @MajorCode, @MinorCode
	
                      select @BodyDefCode = ''
                      while @@FETCH_STATUS = 0
                      begin
	       
			      delete #code
			      insert  #code 
			      select   distinct l.MajorCodeDesc, l.MinorCodeDesc
			      -- select * 
			      FROM    RFQ_VendorSelectionLog l 
	                      join    RFQ_VendorsSelected v
	                      ON v.LOG_ID = l.ID AND l.HeaderID = v.HeaderID 
	                      join    RFQ_VendorSelectionHeader h
	                      ON l.HeaderID = h.ID
	                      JOIN RFQ_VSH_Application a
	                      ON l.HeaderID = a.HeaderID AND a.ID = l.VA_ID
			      where  h.ID= @headerID 
			                and v.supplier = @supplier
                              and l.MajorCode = @MajorCode and l.MinorCode = @MinorCode
	
			      select @DefCode = rtrim(isnull(MajorCode,'')) +
                                          rtrim( isnull(MinorCode,'')) 
                              from #code
		              --select  @DefCode 'def'
                              if isnull(@BodyDefCode,'') <> ''
			         select   @BodyDefCode  = rtrim( @BodyDefCode) + '/' +rtrim( @DefCode)   -- code
			      else    
                                 select   @BodyDefCode  = rtrim( @BodyDefCode) + rtrim( @DefCode)   -- code
			
			
			      fetch next from aCursorCode into @MajorCode, @MinorCode
	              
                      end
	
                      close aCursorCode
                      deallocate aCursorCode 
		      -- Minor code / Minor code 

select @BodyDefCode  '@BodyDefCode'  


declare @BodyDef  varchar(8000), @Def   varchar(8000)

declare @HoldingID int, @ModelNameID  int, @ModelID    int
  

      

declare aCursorHolding cursor for 

select distinct a.HoldingID
FROM    RFQ_VendorSelectionLog l 
join    RFQ_VendorsSelected v
ON v.LOG_ID = l.ID AND l.HeaderID = v.HeaderID 
join    RFQ_VendorSelectionHeader h
ON l.HeaderID = h.ID
JOIN RFQ_VSH_Application a
ON l.HeaderID = a.HeaderID AND a.ID = l.VA_ID
WHERE     h.ID = @headerID
and v.supplier = @supplier

open aCursorHolding
fetch next from aCursorHolding into @HoldingID 

select @BodyDef  = ''
while @@FETCH_STATUS = 0
begin
       
     delete #holding  
     insert  #holding 
     select   distinct HoldingDesc 
     -- select * 
     FROM    RFQ_VendorSelectionLog l 
     join    RFQ_VendorsSelected v
      ON v.LOG_ID = l.ID AND l.HeaderID = v.HeaderID 
     join    RFQ_VendorSelectionHeader h
     ON l.HeaderID = h.ID
     JOIN RFQ_VSH_Application a
     ON l.HeaderID = a.HeaderID AND a.ID = l.VA_ID
     WHERE     (h.ID = @headerID)
     and a.HoldingID = @HoldingID
     and v.supplier = @supplier

     select @Def = holdingDesc from #holding
     select   @BodyDef  =  @BodyDef + char(13) + char(10)+ @Def   -- holding
     ------ model Name--------
      declare aCursorModelName cursor for 
	
      select distinct ModelNameID 
      FROM    RFQ_VendorSelectionLog l 
     join    RFQ_VendorsSelected v
      ON v.LOG_ID = l.ID AND l.HeaderID = v.HeaderID 
     join    RFQ_VendorSelectionHeader h
     ON l.HeaderID = h.ID
     JOIN RFQ_VSH_Application a
     ON l.HeaderID = a.HeaderID AND a.ID = l.VA_ID
     WHERE     (h.ID = @headerID)
     and a.HoldingID = @HoldingID
     and v.supplier = @supplier
	
      open aCursorModelName
      fetch next from aCursorModelName into @ModelNameID 
	
      select @Def  = ''
      while @@FETCH_STATUS = 0
      begin
	       
	      delete #modelName 
	      insert  #modelName 
	      select   distinct ModelNameDesc 
	      -- select * 
	      FROM    RFQ_VendorSelectionLog l 
              join    RFQ_VendorsSelected v
              ON v.LOG_ID = l.ID AND l.HeaderID = v.HeaderID 
              join    RFQ_VendorSelectionHeader h
              ON l.HeaderID = h.ID
              JOIN RFQ_VSH_Application a
              ON l.HeaderID = a.HeaderID AND a.ID = l.VA_ID
	      where h.ID= @headerID 
	      and a.HoldingID = @HoldingID and ModelNameID= @ModelNameID 
              and v.supplier = @supplier

	      select @Def = modelNameDesc 
              from #modelName
              --select  @Def  'def'
	      select   @BodyDef  = @BodyDef + char(13) + char(10)+ SPACE(5) + @Def   -- modelname
              --- model
              declare aCursorModel cursor for 
	
              select distinct ModelID 
              FROM    RFQ_VendorSelectionLog l 
              join    RFQ_VendorsSelected v
              ON v.LOG_ID = l.ID AND l.HeaderID = v.HeaderID 
              join    RFQ_VendorSelectionHeader h
              ON l.HeaderID = h.ID
              JOIN RFQ_VSH_Application a
              ON l.HeaderID = a.HeaderID AND a.ID = l.VA_ID
              where h.ID= @headerID  and a.HoldingID= @HoldingID
               and ModelNameID = @ModelNameID 
               and v.supplier = @supplier
	
              open aCursorModel
              fetch next from aCursorModel into @ModelID 
	
              select @Def  = ''
              while @@FETCH_STATUS = 0
              begin
	       
		      delete #model 
		      insert  #model 
		      select   distinct ModelDesc 
		      -- select * 
		      FROM    RFQ_VendorSelectionLog l 
                      join    RFQ_VendorsSelected v
                      ON v.LOG_ID = l.ID AND l.HeaderID = v.HeaderID 
                      join    RFQ_VendorSelectionHeader h
                      ON l.HeaderID = h.ID
                      JOIN RFQ_VSH_Application a
                      ON l.HeaderID = a.HeaderID AND a.ID = l.VA_ID
		      where  h.ID= @headerID 
		      and a.HoldingID = @HoldingID and ModelNameID= @ModelNameID 
                       and ModelID = @ModelID
                      and v.supplier = @supplier

		      select @Def = modelDesc from #model
	              --select  @Def  'def'
		      select   @BodyDef  =  @BodyDef + char(13) + char(10)+ SPACE(10) + @Def   -- model
                                         
		
		      fetch next from aCursorModel into @ModelID  
	              
              end
	
              close aCursorModel
              deallocate aCursorModel 
	
	      --- model
	      fetch next from aCursorModelName into @ModelNameID  
       end
	
       close aCursorModelName
       deallocate aCursorModelName
     
        ------model name -------

      fetch next from aCursorHolding into @HoldingID 
end

close aCursorHolding
deallocate aCursorHolding


select @BodyDef  '@BodyDef'



select   @BodyDef  = 'To: ' + @SuppName + char(13) + char(10)  +
                     'Attention :' +  isnull(@contact,'') +  char(13) + char(10) +  char(13) + char(10) +
                     'Please provide pricing for the following Models / Elevations for ' +
                     @BodyDefCode + 
                     case when  @responseby = '' then '.'
                     else  +  ' by ' +   @responseby  + '.'  end   + char(13) + char(10) +
                    'We require quoted prices that are valid until ' +  char(13) + char(10) +
                     @expireDate +  '. Thank you.' + char(13) + char(10) +
                     @BodyDef 

select @BodyDef            '@BodyDef '

update RFQ_VendorsSelected
set EmailSubject = @subject,
    EmailBody = @BodyDef ,
    Notes =  @BodyDef
--select * from RFQ_VendorsSelected
where Headerid = @headerid
 and supplier = @supplier












Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQDefaultLine_Response]') and xtype = 'P ')  
 drop Procedure spRFQDefaultLine_Response
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go











CREATE       proc spRFQDefaultLine_Response

   @username  varchar(40)

as

-- declare @username  varchar(40)
-- select @username = 'hm'
----------------
declare @supp varchar(30)
--declare @subject   varchar(100)

--select @subject = 'Acknowledgement of RFQ'



declare aCursorSupp cursor for 
	
select DISTINCT c.SUPPLIER
FROM RFQ_Notification c       
INNER JOIN RFQ_Working_Application a   
ON c.RFQ_HeaderID = a.RFQ_HeaderID 
INNER JOIN RFQ_COST s 
ON c.RFQ_HeaderID = s.RFQ_HeaderID 
AND c.SUPPLIER = s.SUPPLIER 
WHERE (ISNULL(s.Respond_Thank, 'F') <> 'T')   AND (c.Type = 'T')
AND (a.UserID = @username) 
	


declare @body   varchar(8000)
open aCursorSupp
fetch next from aCursorSupp into @supp  

while @@FETCH_STATUS = 0
begin
     
	 exec spRFQDefaultBobyLine_Response @username ,@supp 
        
         fetch next from aCursorSupp into  @supp 
	              
end
	
close aCursorSupp
deallocate aCursorSupp  















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQDefaultLine_Schedule]') and xtype = 'P ')  
 drop Procedure spRFQDefaultLine_Schedule
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go









CREATE     proc spRFQDefaultLine_Schedule

   @username  varchar(40)

as

-- declare @username  varchar(40)
-- select @username = 'hm'
----------------
declare @supp varchar(30)



declare aCursorSupp cursor for 
	
select DISTINCT c.SUPPLIER
FROM RFQ_Notification c       
INNER JOIN RFQ_Working_Application a   
ON c.RFQ_HeaderID = a.RFQ_HeaderID 
INNER JOIN RFQ_COST s 
ON c.RFQ_HeaderID = s.RFQ_HeaderID 
AND c.SUPPLIER = s.SUPPLIER 
WHERE (ISNULL(s.Respond_scheduling, 'F') <> 'T')   AND (c.Type = 'S')
AND (a.UserID = @username) 
	


declare @body   varchar(8000)
open aCursorSupp
fetch next from aCursorSupp into @supp

while @@FETCH_STATUS = 0
begin
   
     exec spRFQDefaultBobyLine_Schedule @username,@supp 

    fetch next from aCursorSupp into  @supp
	              
end
	
close aCursorSupp
deallocate aCursorSupp  













Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQGetAllInfo]') and xtype = 'P ')  
 drop Procedure spRFQGetAllInfo
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
















































CREATE                                             proc [dbo].[spRFQGetAllInfo]

  @webDB  varchar(30),
  @headID   int   ,
  @type   varchar(10),
  @RFQType  varchar(10)

as

-- 
-- declare @webDB  varchar(30),
--         @headID   int   ,
--         @type   varchar(10), @RFQType  varchar(10)
--  
--  select @webDB = 'Web_adam', @headID = 13, @type = 'T', @RFQType = ''



declare @count   int



select  @count  = count(*)  from RFQ_VendorSelectionLog
where HeaderID = @headID

select @count


if @count = 0
begin

	if @type = 'T'
	begin
		--- type = model(elevation) ---------
		
		if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Elevation '))  
		drop table #Elevation
		create table #Elevation 
		  (
		   Type      varchar(10)   null,  -- 'Trade', 'Option', 'Material'
		   RAW_LAND_CD    int null,
		   MODEL_NAME_ID  int   null,
		   MODEL_NAME  varchar (50)  null,
		   MODEL_ID   int null,
		   MODEL_SDESC  varchar(50) null,
		   MODEL_DESC   varchar(50) null,
		   RFQC_ID   int null,
		   SHORT_DESC     varchar (50) null,
		   phs_code    varchar(10)  null,
		   subp_code    varchar(10)  null,
		   BADC  varchar(1) null,
		   INTERNAL_EST    money null
		   )
		
		
		insert  #Elevation( MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC, 
		        MODEL_DESC,phs_code,subp_code, BADC,INTERNAL_EST    )
		
		select   m.MODEL_NAME_ID, n.MODEL_NAME, m.MODEL_ID,
		        m.MODEL_SDESC, m.MODEL_DESC, p.phs_code, p.subp_code,BADC,INTERNAL_EST
		from HB_EST   p
		left outer join HB_MODEL m
		on m.MODEL_ID = p.MODEL_ID
		left outer join HB_MODEL_NAME  n
		on n.MODEL_NAME_ID = m.MODEL_NAME_ID
		where BASE_MODEL = 'Y'
		
		if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#BaseElevation '))  
		drop table #BaseElevation
		create table #BaseElevation(
		   type      varchar(10)   null, 
		    RAW_LAND_CD    int null, 
		   MODEL_NAME_ID  int   null,
		   MODEL_NAME  varchar (50)  null,
		   MODEL_ID   int null,
		   MODEL_SDESC  varchar(50) null,
		   MODEL_DESC   varchar(50) null,
		   phs_code    varchar(10)  null,
		   subp_code    varchar(10)  null,
		   RFQC_ID   int null,
		   BADC  varchar(1) null,
		   INTERNAL_EST    money null
		)
		
		insert #BaseElevation( MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC,
		       MODEL_DESC,phs_code,subp_code, BADC,INTERNAL_EST )
		
		select  MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC,
		       MODEL_DESC,phs_code,subp_code,BADC,INTERNAL_EST
		 from #Elevation
		
		
		insert #Elevation( MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC,MODEL_DESC,
		        phs_code,subp_code, BADC,INTERNAL_EST)
		select m.MODEL_NAME_ID, n.MODEL_NAME, m.MODEL_ID,m.MODEL_SDESC,
		        m.MODEL_DESC, b.phs_code,b.subp_code, BADC,INTERNAL_EST
		from HB_MODEL_NAME  n
		left outer join HB_MODEL m
		on n.MODEL_NAME_ID = m.MODEL_NAME_ID
		left outer join #BaseElevation b
		on m.MODEL_NAME_ID = b.MODEL_NAME_ID
		where BASE_MODEL = 'N'
		order by m.MODEL_ID
		
		
		
		update #Elevation
		--select * 
		set BADC = 'C',INTERNAL_EST = he.INTERNAL_EST
		from #Elevation    e
		left outer join HB_EST  he
		on e.MODEL_ID = he.MODEL_ID
		and e.phs_code  =  he.phs_code 
                and e.subp_code = he.subp_code
		where he.BADC = 'C'
	       
                delete #Elevation  
		from #Elevation    e
		left outer join HB_EST  he
		on e.MODEL_ID = he.MODEL_ID
		and e.phs_code  =  he.phs_code 
                and e.subp_code = he.subp_code
                where he.BADC = 'D'
	        --------------------
	        
	        insert RFQ_VendorSelectionLog (HeaderID, MajorCode, MinorCode, VA_ID)
	        select distinct h.ID,phs_code, subp_code, a.ID
	        from RFQ_VendorSelectionHeader   h
	        left outer join RFQ_VSH_Application a
	        on h.ID = a.HeaderID
	        join #Elevation p
	   on a.ModelNameID  = p.MODEL_NAME_ID
	        and a.ModelID=  p.MODEL_ID 
	        where h.ID = @headID
	
	end
	-------------------------
	
	-------2. Option----------------
	-- spRFQGetAllInfo_Option
	
	---------3. material-------------------
	else if @type = 'M'
	begin
	
		
		
		if  (@RFQType = 'T') or ( @RFQType = 'C')
                --1. Global
                begin 
                     select distinct @headID [HeaderID],mg.MATGROUP_ID,
		        mg.MAT_GROUP,  mg.GROUP_DESC,
		        mat.MATERIAL_ID,mat.MAT_CODE,  mat.MAT_SHORT_DESC  
		     into #allmat 
                     --select * 
	             from HB_MAT_GROUP mg
              	     left outer join HB_MATERIAL    mat
          	      on mg.MATGROUP_ID = mat.MATGROUP_ID
                    -- where isnull(mat.MATERIAL_ID,0) <> 0 
                     order by mg.GROUP_DESC, mat_code
		

                  

                   insert RFQ_VendorSelectionLog 
		    (HeaderID,MATGROUP_ID, MATGROUP_DESC,MATERIAL_ID, MAT_CODE ,MAT_SHORT_DESC, VA_ID) 
		    select  a.headerid, MATGROUP_ID, GROUP_DESC,MATERIAL_ID, MAT_CODE ,MAT_SHORT_DESC,a.ID
		    from #allmat l
                    join RFQ_VSH_Application   a 
                   on l.headerid = a.headerid
                  
                     
                  
                  

                end
                else 
		begin
                  -- 2.RFQ for seleced Model/Elevation
                   print ('RFQ for seleced Model/Elevation')

                
                if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#mat '))  
		drop table #mat
		create table #mat
		  (
		
		   MODEL_NAME_ID  int   null,
		   MODEL_NAME  varchar (50)  null,
		   MODEL_ID   int null,
		   MODEL_SDESC  varchar(50) null,
		   MODEL_DESC   varchar(50) null,
		   phs_code    varchar(10)  null,
		   subp_code    varchar(10)  null,
                   MATGROUP_ID  int null,
                   MATGROUP_DESC   varchar(50)  null,
                   MATERIAL_ID    int null,
                   MAT_CODE     varchar(30) null,
                   MAT_SHORT_DESC   varchar(50) null,
                   qty              money null
		 
		   )
		
		
		insert  #mat( MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC, 
		        MODEL_DESC,phs_code,subp_code,qty,
                        MATERIAL_ID,MAT_SHORT_DESC,MATGROUP_ID, MATGROUP_DESC,MAT_CODE )
		
		select   m.MODEL_NAME_ID, n.MODEL_NAME, m.MODEL_ID,
		        m.MODEL_SDESC, m.MODEL_DESC, p.phs_code, p.subp_code,qty,
                         p.MATERIAL_ID,mat.MAT_SHORT_DESC, mat.MATGROUP_ID, mg.GROUP_DESC,MAT_CODE
                -- select p.* 
		from HB_EST_MAT   p
		 join HB_MODEL m
		on m.MODEL_ID = p.MODEL_ID
		 join HB_MODEL_NAME  n
		on n.MODEL_NAME_ID = m.MODEL_NAME_ID
                join HB_TRADES   t --select * from hb_trades
                 on p.TRADE_ID = t.TRADE_ID
                join HB_MATERIAL  mat   -- select * from HB_MATERIAL 
                on p.MATERIAL_ID = mat.MATERIAL_ID 
                join HB_MAT_GROUP    mg
                 on mat.MATGROUP_ID = mg.MATGROUP_ID
               --  where isnull(mat.MATERIAL_ID,0) <> 0 
		
		
		if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#BaseMat '))  
		drop table #BaseMat
		create table #BaseMat(
		  
		   MODEL_NAME_ID  int   null,
		   MODEL_NAME  varchar (50)  null,
		   MODEL_ID   int null,
		   MODEL_SDESC  varchar(50) null,
		   MODEL_DESC   varchar(50) null,
		   phs_code    varchar(10)  null,
		   subp_code    varchar(10)  null,
                   MATGROUP_ID  int null,
                   MATGROUP_DESC   varchar(50)  null,
                   MATERIAL_ID    int null,
                   MAT_CODE     varchar(30) null,
                   MAT_SHORT_DESC   varchar(50) null,
                   qty              money null
		 
		)
		
		insert #BaseMat( MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC,
		       MODEL_DESC,phs_code,subp_code ,qty,
                       MATERIAL_ID,MAT_SHORT_DESC,MATGROUP_ID,MATGROUP_DESC,MAT_CODE)
		
		select   m.MODEL_NAME_ID, n.MODEL_NAME, m.MODEL_ID,
		        m.MODEL_SDESC, m.MODEL_DESC, p.phs_code, p.subp_code,qty,
                         p.MATERIAL_ID,mat.MAT_SHORT_DESC, mat.MATGROUP_ID, mg.GROUP_DESC,MAT_CODE
                -- select * 
		from HB_EST_MAT   p
		left outer join HB_MODEL m
		on m.MODEL_ID = p.MODEL_ID
		left outer join HB_MODEL_NAME  n
		on n.MODEL_NAME_ID = m.MODEL_NAME_ID
                join HB_TRADES   t --select * from hb_trades
                 on p.TRADE_ID = t.TRADE_ID
                join HB_MATERIAL  mat   -- select * from HB_MATERIAL 
                on p.MATERIAL_ID = mat.MATERIAL_ID 
                join HB_MAT_GROUP    mg
                 on mat.MATGROUP_ID = mg.MATGROUP_ID
		where BASE_MODEL = 'Y'
                -- and isnull(mat.MATERIAL_ID,0) <> 0 
		
		
		insert #Mat( MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC,MODEL_DESC,qty,
		        phs_code,subp_code, MATERIAL_ID,MAT_SHORT_DESC,MATGROUP_ID,MATGROUP_DESC,MAT_CODE)
               	

		select m.MODEL_NAME_ID, n.MODEL_NAME, m.MODEL_ID,m.MODEL_SDESC,
		        m.MODEL_DESC,qty, b.phs_code,b.subp_code, MATERIAL_ID,MAT_SHORT_DESC,
                   MATGROUP_ID,MATGROUP_DESC,MAT_CODE
		
                from HB_MODEL_NAME  n
		join HB_MODEL m
		on n.MODEL_NAME_ID = m.MODEL_NAME_ID
		join #BaseMat b
		on m.MODEL_NAME_ID = b.MODEL_NAME_ID
                -- and m.MODEL_ID =   b.MODEL_ID
		where BASE_MODEL = 'N'
               --  and isnull(b.MATERIAL_ID,0) <> 0 
		order by m.MODEL_ID
               
                update #Mat
		set qty= he.qty
                -- select * 
		from #mat  e
		left outer join HB_EST_Mat  he
		on e.MODEL_ID = he.MODEL_ID
		and e.phs_code  =  he.phs_code 
                and  e.subp_code = he.subp_code
                and e.MATERIAL_ID = he.MATERIAL_ID
		where he.BADC = 'C'
	       
                delete #mat  
		from #mat    e
		left outer join HB_EST_Mat  he
		on e.MODEL_ID = he.MODEL_ID
		and e.phs_code  =  he.phs_code 
                and  e.subp_code = he.subp_code
                and e.MATERIAL_ID = he.MATERIAL_ID
		where he.BADC = 'D'




                 insert  RFQ_VendorSelectionLog (HeaderID,MajorCode,MinorCode,Qty, 
                              MATGROUP_ID, MATGROUP_DESC,MATERIAL_ID, MAT_CODE,MAT_SHORT_DESC, VA_ID, selected)
                  select distinct a.HeaderID , m.phs_code, m.subp_code,  Qty,MATGROUP_ID, MATGROUP_DESC,MATERIAL_ID, MAT_CODE,MAT_SHORT_DESC,
                             ID, 'T' from RFQ_VSH_Application a
                             left outer join #mat  m 
                             on a.ModelNameID = m.MODEL_NAME_ID
                             and a.ModelID= m.MODEL_ID
                             where HeaderID =  @headID
  

                
                --print @s



		end
		
		
----------------------------------- get material UOM ---------------------------

		
		update RFQ_VendorSelectionLog
                            set UOM = m.UOM 
                            from RFQ_VendorSelectionLog l 
                            join HB_Material m  
                	     on l.MATERIAL_ID = m.MATERIAL_ID 
                            where headerid =  @headID
                
               

		
		
	end
end


















































Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQGetAllInfo_Option]') and xtype = 'P ')  
 drop Procedure spRFQGetAllInfo_Option
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
































































CREATE                                  proc spRFQGetAllInfo_Option

  @webDB  varchar(30),
  @headID   int   ,
  @RFQType  varchar(10),
  @Global   varchar(10)

as

-- 
-- declare @webDB  varchar(30),
--         @headID   int   ,
--         @Global   varchar(10), @RFQType  varchar(10)
--  
--  select @webDB = 'Web_realestatebeta', @headID = 169, @Global  = 'G', @RFQType = 'S'




declare @s   varchar(8000)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#counter '))  
	drop table #counter
	create table #counter 
	  (
	   counter   int
	   )
	

select @s = ' select count(*) acount from ' + @webDB +'..RFQ_VendorSelectionLog where HeaderID = '
            +''+convert( varchar(30),@headID)+''

insert #counter 
exec ( @s )


declare @count   int

select @count = isnull( counter,0) from #counter

select @count


if @count = 0
begin

	
		-------2. Option----------------

	

                 select  g.MAJ_GROUP_ID,g.GROUP_DESC, s.SUB_GROUP_ID, s.SUB_GROUP_DESC,     
                       o.OPTION_ID ,o.SHORT_DESC, o.EXP_DESC , o.IS_STRUCTURAL
                 into #AllOptions   -- drop table #AllOptions   drop table #Option
                 -- select o.IS_STRUCTURAL,* 
                 from  HB_OPTIONS   o 
                 join  HB_OPT_SUB_GROUP   s 
		 on s.MAJ_GROUP_ID  = o.MAJ_GROUP_ID    
		 and s.SUB_GROUP_ID = o.SUB_GROUP_ID 
		 join HB_OPT_MAJ_GROUP   g  
		 on g.MAJ_GROUP_ID  = s.MAJ_GROUP_ID  
                 where --isnull(g.Maj_group_id,0)<> 0 and
                  isnull(o.OPTION_ID,0) <> 0                
                 order by g.GROUP_DESC, s.SUB_GROUP_DESC ,o.SHORT_DESC 
                
                if @Global = 'G' or   @Global = 'C'  
                begin
	                -- 1.Global
	                 -------------------------
-- 	                 declare @webDB  varchar(30),
-- 	                         @headID   int   ,
-- 	                         @RFQType    varchar(10), @s varchar(1000)
-- 	 
-- 	                 select @webDB = 'Web_Realestatebeta', @headID = 4, @RFQType  = 'ST'
	                -------------------------
			
                       declare @defStr   varchar(8000)
                      
                       select @defStr=  'insert ' + @webDB + '..RFQ_VendorSelectionLog (HeaderID, MAJ_GROUP_ID, GROUP_DESC,
			              SUB_GROUP_ID, SUB_GROUP_DESC, OPTION_ID, SHORT_DESC, EXP_DESC, MajorCode,MinorCode,VA_ID,type)' +
			         ' select ' + ''+convert(varchar(30),@headID)+'' + ',MAJ_GROUP_ID,GROUP_DESC, SUB_GROUP_ID, SUB_GROUP_DESC,     
	                           r.OPTION_ID,SHORT_DESC, EXP_DESC, rtrim(phs_code), rtrim(subp_code), a.ID, ' + '''L'''  +
			         ' from ' + @webDB + '..RFQ_VendorSelectionHeader   h
	                    	   left outer join ' + @webDb + '..RFQ_VSH_Application a
	               		   on h.ID = a.HeaderID
			           join HB_RAW_OPT  r 
                                   on a.HoldingID  = r.RAW_LAND_CD 
                                   join #AllOptions p  
                                   on r.OPTION_ID = p.OPTION_ID
                                   join HB_EST  e
                                   on p.OPTION_ID = e.OPTION_ID
                                   where h.ID = ' + ''+convert(varchar(30),@headID)+'' ;
                                   
                        if @RFQType  = 'ST' 
                            select @s = @defStr  + ' and  isnull(p.IS_STRUCTURAL,''N'') = ''Y'''
                        else
                            select @s = @defStr  + ' and  isnull(p.IS_STRUCTURAL,''N'') = ''N'''
                       --print @s
                        exec( @s )


                       ------------------------------Material start -----------------------------------------------------------------
--------------------------------------------------------------------------------------------
-- 	                 declare @webDB  varchar(30),
-- 	                         @headID   int   ,
-- 	                         @RFQType    varchar(10), @s varchar(3000), @defStr  varchar(3000)
-- 	 
-- 	                 select @webDB = 'Web_Realestatebeta', @headID = 149, @RFQType  = 'ST'
	             
--------------------------------------------------------------------------------------------------
                      if @RFQType  = 'ST' 
                      begin
                         select @defStr=  'insert ' + @webDB + '..RFQ_VendorSelectionLog (HeaderID,MAJ_GROUP_ID, GROUP_DESC,
			              SUB_GROUP_ID, SUB_GROUP_DESC, OPTION_ID, SHORT_DESC, EXP_DESC, MajorCode,MinorCode,VA_ID,'  +
                                 ' MATERIAL_ID,MATGROUP_ID,MATGROUP_DESC, MAT_CODE, MAT_SHORT_DESC,type) ' +
			         ' select ' + ''+convert(varchar(30),@headID)+'' + ',p.MAJ_GROUP_ID,p.GROUP_DESC, SUB_GROUP_ID, SUB_GROUP_DESC,     
	                           r.OPTION_ID,SHORT_DESC, p.EXP_DESC, rtrim(e.phs_code), rtrim(e.subp_code), a.ID,  ' +
                                 'em.MATERIAL_ID,mg.MATGROUP_ID,mg.GROUP_DESC,m.MAT_CODE, m.MAT_SHORT_DESC,''M'' ' +
			         ' from ' + @webDB + '..RFQ_VendorSelectionHeader   h
	                    	   left outer join ' + @webDb + '..RFQ_VSH_Application a
	               		   on h.ID = a.HeaderID
			           join HB_RAW_OPT  r 
                                   on a.HoldingID  = r.RAW_LAND_CD 
                                   join #AllOptions p  
                                   on r.OPTION_ID = p.OPTION_ID
                                   join HB_EST  e
                                   on p.OPTION_ID = e.OPTION_ID
                                   join HB_EST_MAT   em
                                   on  r.OPTION_ID = em.OPTION_ID
                                   and e.phs_code  = em.phs_code
                                   and e.subp_code = em.subp_code
                                   join HB_EST_TRD t
                                   on t.phs_code = em.phs_code   and t.subp_code = em.subp_code
                                    and t.option_id = em.option_id and t.TRADE_ID = em.TRADE_ID
                                   join HB_MATERIAL m
                                   on em.MATERIAL_ID = m.MATERIAL_ID
                                   join HB_MAT_GROUP   mg
                                   on m.MATGROUP_ID = mg.MATGROUP_ID
                                   join hb_trades  tr
                                   on tr.TRADE_ID = t.TRADE_ID   
                                   where h.ID = ' + ''+convert(varchar(30),@headID)+'' + 
                                   ' and t.EST_SIB= ''I'' '

                        
                            select @s = @defStr  + ' and  isnull(p.IS_STRUCTURAL,''N'') = ''Y'''
                        end
                        else
                        begin
                             select @defStr=  'insert ' + @webDB + '..RFQ_VendorSelectionLog (HeaderID, MAJ_GROUP_ID, GROUP_DESC,
			              SUB_GROUP_ID, SUB_GROUP_DESC, OPTION_ID, SHORT_DESC, EXP_DESC, MajorCode,MinorCode,VA_ID,type)' +
			         ' select ' + ''+convert(varchar(30),@headID)+'' + ',MAJ_GROUP_ID,GROUP_DESC, SUB_GROUP_ID, SUB_GROUP_DESC,     
	                           r.OPTION_ID,SHORT_DESC, EXP_DESC, rtrim(phs_code), rtrim(subp_code), a.ID, ' + '''M'''  +
			         ' from ' + @webDB + '..RFQ_VendorSelectionHeader   h
	                    	   left outer join ' + @webDb + '..RFQ_VSH_Application a
	               		   on h.ID = a.HeaderID
			           join HB_RAW_OPT  r 
                                   on a.HoldingID  = r.RAW_LAND_CD 
                                   join #AllOptions p  
                                   on r.OPTION_ID = p.OPTION_ID
                                   join HB_EST  e
     on p.OPTION_ID = e.OPTION_ID
                                   where h.ID = ' + ''+convert(varchar(30),@headID)+'' ; 
                            select @s = @defStr + ' and  isnull(p.IS_STRUCTURAL,''N'') = ''N'''
                        end
                        exec ( @s)
                      --print @s

------------------------------material ends ----------------------------------------------------
			
                 end
                 else   -- model/Elevation
                 begin 


		        -- 2. RFQ for seleced Model/Elevation
			select  m.MODEL_NAME_ID,
			       mo.MODEL_ID, n.MODEL_NAME,m.MODEL_SDESC,m.MODEL_DESC,e.OPTION_ID,SHORT_DESC,
			       o.MAJ_GROUP_ID, GROUP_DESC,o.SUB_GROUP_ID, SUB_GROUP_DESC,rtrim(e.phs_code)[phs_code],
			     rtrim(e.subp_code) [subp_code], e.BADC,e.INTERNAL_EST,ATTACHED_YN,  EXP_DESC ,IS_STRUCTURAL
			into #option  -- drop table  #option
			from HB_EST  e   
			join   HB_ELV_OPT   mo      
			on e.OPTION_ID = mo.OPTION_ID 
			left outer join HB_MODEL m 
			on m.MODEL_ID = mo.MODEL_ID 
			left outer join HB_MODEL_NAME   n 
			on n.MODEL_NAME_ID = m.MODEL_NAME_ID 
	                join #AllOptions   o
	                on e.OPTION_ID  = o.OPTION_ID 
	                where isnull(e.option_id,0)  <> 0
                        --and  isnull(o.Maj_group_id,0)<> 0 
			order by n.MODEL_NAME,m.MODEL_SDESC, 
			        e.phs_code, e.subp_code
			
	
	
	                	
	                -------------------------
-- 	                declare @webDB  varchar(30),
-- 	                        @headID   int   ,
-- 	                        @type   varchar(10), @s varchar (1000)
-- 	
-- 	                select @webDB = 'Web_adam', @headID = 4, @type = 'T'

	                -------------------------
                        declare @insertStr   varchar(3000) 
			select @insertStr =  'insert ' + @webDB + '..RFQ_VendorSelectionLog (
	                          HeaderID, MajorCode, MinorCode,MAJ_GROUP_ID, GROUP_DESC,
			          SUB_GROUP_ID, SUB_GROUP_DESC, OPTION_ID, SHORT_DESC, EXP_DESC,VA_ID, type)
			          select distinct  h.ID, phs_code, subp_code,MAJ_GROUP_ID,GROUP_DESC ,
			          SUB_GROUP_ID, SUB_GROUP_DESC, OPTION_ID,SHORT_DESC, p.EXP_DESC, A.ID, '+ '''L''' +
			          ' from ' + @webDB + '..RFQ_VendorSelectionHeader   h
	                 		left outer join ' + @webDb + '..RFQ_VSH_Application a
	               		  on h.ID = a.HeaderID
			          join #option p
	 		          on a.ModelNameID  = p.MODEL_NAME_ID
	 		          and a.ModelID=  p.MODEL_ID 
			          where h.ID = ' + ''+convert(varchar(30),@headID)+'' 
	   		          
                        if @RFQType  = 'ST' 
                            select @s = @insertStr  + ' and  isnull(p.IS_STRUCTURAL,''N'') = ''Y'''
                        else
                            select @s =  @insertStr  + ' and  isnull(p.IS_STRUCTURAL,''N'') = ''N'''
                       --print @s
                        exec( @s )

                        -- material starts
                          if @RFQType  = 'ST' 
                          begin
                            select @insertStr =  'insert ' + @webDB + '..RFQ_VendorSelectionLog (
	                          HeaderID, MajorCode, MinorCode,MAJ_GROUP_ID, GROUP_DESC,
			          SUB_GROUP_ID, SUB_GROUP_DESC, OPTION_ID, SHORT_DESC, EXP_DESC,VA_ID,
                                   MATERIAL_ID,MATGROUP_ID,MATGROUP_DESC, MAT_CODE, MAT_SHORT_DESC, type)
			          select distinct  h.ID, p.phs_code, p.subp_code,p.MAJ_GROUP_ID,p.GROUP_DESC ,
			          p.SUB_GROUP_ID, p.SUB_GROUP_DESC, p.OPTION_ID,SHORT_DESC, p.EXP_DESC, A.ID, '+ 
                                  'em.MATERIAL_ID,mg.MATGROUP_ID,mg.GROUP_DESC,m.MAT_CODE, m.MAT_SHORT_DESC,''M'' ' +
			          ' from ' + @webDB + '..RFQ_VendorSelectionHeader   h
	                 		left outer join ' + @webDb + '..RFQ_VSH_Application a
	      		  on h.ID = a.HeaderID
			          join #option p
	 		          on a.ModelNameID  = p.MODEL_NAME_ID
	 		          and a.ModelID=  p.MODEL_ID 
                                  join HB_EST_MAT   em
                                   on  p.OPTION_ID = em.OPTION_ID
                                   and p.phs_code  = em.phs_code
                                   and p.subp_code = em.subp_code
                                   join HB_EST_TRD t
                                   on t.phs_code = em.phs_code   and t.subp_code = em.subp_code
                                    and t.option_id = em.option_id and t.TRADE_ID = em.TRADE_ID
                                   join HB_MATERIAL m
                                   on em.MATERIAL_ID = m.MATERIAL_ID
                                   join HB_MAT_GROUP   mg
                                   on m.MATGROUP_ID = mg.MATGROUP_ID
                                   join hb_trades  tr
                                   on tr.TRADE_ID = t.TRADE_ID   
			          where h.ID = ' + ''+convert(varchar(30),@headID)+'' + 
                                        ' and t.EST_SIB= ''I'' ' + 
                                         ' and  isnull(p.IS_STRUCTURAL,''N'') = ''Y'''
                          end
                          else
                          begin
                              select @insertStr =  'insert ' + @webDB + '..RFQ_VendorSelectionLog (
	                          HeaderID, MajorCode, MinorCode,MAJ_GROUP_ID, GROUP_DESC,
			          SUB_GROUP_ID, SUB_GROUP_DESC, OPTION_ID, SHORT_DESC, EXP_DESC,VA_ID, type)
			          select distinct  h.ID, phs_code, subp_code,MAJ_GROUP_ID,GROUP_DESC ,
			          SUB_GROUP_ID, SUB_GROUP_DESC, OPTION_ID,SHORT_DESC, p.EXP_DESC, A.ID, '+ '''M''' +
			          ' from ' + @webDB + '..RFQ_VendorSelectionHeader   h
	                 		left outer join ' + @webDb + '..RFQ_VSH_Application a
	               		  on h.ID = a.HeaderID
			          join #option p
	 		          on a.ModelNameID  = p.MODEL_NAME_ID
	 		          and a.ModelID=  p.MODEL_ID 
			          where h.ID = ' + ''+convert(varchar(30),@headID)+''  +
                                      ' and  isnull(p.IS_STRUCTURAL,''N'') = ''N'''
                          end
                            
                       --print  @insertStr
                        exec(  @insertStr ) 
                        -- material ends

	              

	        end	

           
                
end
	



		
		
		

































































Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQGetContactMethodCount]') and xtype = 'P ')  
 drop Procedure spRFQGetContactMethodCount
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go













CREATE       proc spRFQGetContactMethodCount

@headerID   int ,
@contactMethod   varchar(10),
@resultType  varchar(5)


as
-----------------------
-- Contact Method
--     PH:  Phone Call
--     PU:  Pick Up
--     FA:  Fax 
--     EM:  Email
--     IP: Internet Posting
--     PD:  PDA Update
--     XM:  XML

--@resultType 
--'T' : Total
--'S' : Succeeded
--'U' : Unsucceeded
--------------------
--  declare
--  @headerID   int ,
--  @contactMethod   varchar(10),
-- @type  varchar(10), 
-- @resultType  varchar(5)
-- 
-- select @headerID  = 482,
--  @contactMethod = 'PH', @type='O',@resultType = 'U'  
-- 





if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#count '))
drop table #count 

create table #count (
     ContactMethod  varchar(10),
      supplier     varchar(20)
)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#succeeded '))
drop table #succeeded 

create table #succeeded (
     ContactMethod  varchar(10),
      supplier     varchar(20)
)


       insert  #count ( ContactMethod , supplier)
	select distinct ContactMethod , supplier
	
	FROM RFQ_VendorsSelected v 
                              
	where v.HeaderID =  @headerID
	and isnull(ContactMethod, '') <> ''
	--and isnull(v.succeeded,'') <> 'T'

       insert  #succeeded( ContactMethod , supplier)
	select distinct ContactMethod , supplier
	FROM RFQ_VendorsSelected v 
        where v.HeaderID =  @headerID
	and isnull(ContactMethod, '') <> ''
	and isnull(v.succeeded,'') = 'T'
--end

declare @count  int, @succeeded  int

select @count  = count( ContactMethod)
-- select count( ContactMethod)
from #count
where ContactMethod  = @contactMethod
 group by ContactMethod

select @succeeded  = count( ContactMethod)
-- select count( ContactMethod)
from #succeeded
where ContactMethod  = @contactMethod
 group by ContactMethod

if @resultType = 'T'
 select isnull(@count,0)  'Total'
else if @resultType = 'S'
 select isnull(@succeeded,0)  'succeeded'
else if @resultType = 'U'
 select isnull(@count,0)-isnull(@succeeded,0)  'Unsucceeded'


















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQGetRespondCount]') and xtype = 'P ')  
 drop Procedure spRFQGetRespondCount
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go







CREATE  proc spRFQGetRespondCount

       
        @headerID  int,
        @resulttype varchar(3)
as

-- declare  @resulttype varchar(3), @headerID  int
-- select @resulttype = 'U',  @headerID = 505
-- ----------------
--@resultType 
--'T' : Total
--'S' : Succeeded
--'U' : Unsucceeded
----------
select distinct supplier
into #suppNotResponded  -- drop table #suppNotResponded
from RFQ_VendorsSelected 
where HeaderID = @headerID
and isnull(Responded,'F') = 'F'


select distinct supplier
into #supp -- drop table #supp
from RFQ_VendorsSelected 
where HeaderID = @headerID

declare @total  int, @notresponded  int

select @notresponded  = count(*) from #suppNotResponded
select  @total =count(*) from #supp
if @resulttype = 'T'
   select isnull(@total,0)   'Total'
else
    select isnull(@notresponded,0) 'Not responded'










Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQGetResponseContactMethodCount]') and xtype = 'P ')  
 drop Procedure spRFQGetResponseContactMethodCount
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



















CREATE             proc spRFQGetResponseContactMethodCount

@username  varchar(40), 
@contactMethod   varchar(10),
@resultType  varchar(5),
@notifyType   varchar(5)
 
 
 as
-----------------------
-- Contact Method
--     PH:  Phone Call
--     PU:  Pick Up
--     FA:  Fax 
--     EM:  Email
--     IP: Internet Posting
--     PD:  PDA Update
--     XM:  XML

--@resultType 
--'T' : Total
--'S' : Succeeded
--'U' : Unsucceeded
--------------------
-- declare
-- @contactMethod   varchar(10),
-- @username  varchar(40), 
-- @resultType  varchar(5),
-- @notifyType   varchar(5)
-- 
-- select  @username= 'hm' ,
--         @contactMethod = 'EM', @resultType = 'U'  , @notifyType = 'T'




if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#count '))
drop table #count 

create table #count (
     ContactMethod  varchar(10) null,
      supplier     varchar(20) null,
      HeaderID    int null,
      CMSS_ID     int null

)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#succeeded '))
drop table #succeeded 

create table #succeeded (
     ContactMethod  varchar(10) null,
      supplier     varchar(20) null,
      HeaderID    int null,
      CMSS_ID     int null 
)

   if @notifyType = 'P'
          insert  #count ( ContactMethod , supplier, CMSS_ID )
		select distinct v.ContactMethod , v.supplier, v.CMSS_ID
		FROM RFQ_Notification v 
                join  CMS_Contract_Management_Supp   c
                on v.CMSS_ID = c.CMSS_ID
                and v.supplier = c.Supplier
	        join RFQ_Working_Application a                      
		on v.CMSS_ID =  a.CMSS_ID
		where a.UserID = @username
	           and isnull(v.ContactMethod, '') <> ''
                 and v.type =@notifyType
  
   else if @notifyType = 'T'
  
        insert  #count ( ContactMethod , supplier, HeaderID )
		select distinct v.ContactMethod , v.supplier, v.RFQ_HeaderID 
		FROM RFQ_Notification v 
                join RFQ_Cost   c
                on v.RFQ_HeaderID = c.RFQ_HeaderID
                and v.supplier = c.Supplier
	        join RFQ_Working_Application a                      
		on v.RFQ_HeaderID =  a.RFQ_HeaderID
		where a.UserID = @username
	           and isnull(v.ContactMethod, '') <> ''
                 and v.type =@notifyType
  else 
  
        insert  #count ( ContactMethod , supplier, HeaderID )
		select distinct v.ContactMethod , v.supplier, v.RFQ_HeaderID 
		FROM RFQ_Notification v 
                join RFQ_Cost   c
                on v.RFQ_HeaderID = c.RFQ_HeaderID
                and v.supplier = c.Supplier
	        join RFQ_Working_Application a                      
		on v.RFQ_HeaderID =  a.RFQ_HeaderID
		where a.UserID = @username
	           and isnull(v.ContactMethod, '') <> ''
                 and v.type =@notifyType
                  and (ISNULL(c.StartDates, '') <> '')


       if @notifyType = 'T'
       begin
	       
		insert  #succeeded( ContactMethod , supplier,HeaderID )
		select distinct v.ContactMethod , v.supplier, v.RFQ_HeaderID 
		FROM RFQ_Notification v 
                join RFQ_Cost   c
                on v.RFQ_HeaderID = c.RFQ_HeaderID
                and v.supplier = c.Supplier
	        join RFQ_Working_Application a                      
		on v.RFQ_HeaderID =  a.RFQ_HeaderID
		where a.UserID = @username
	        and isnull(v.ContactMethod, '') <> ''
		and isnull(c.Respond_Thank,'') = 'T' 
                and v.type =@notifyType

         end
         else  if @notifyType = 'S'
         begin
               
		   
		insert  #succeeded( ContactMethod , supplier,HeaderID )
		select distinct v.ContactMethod , v.supplier, v.RFQ_HeaderID 
		FROM RFQ_Notification v 
                join RFQ_Cost   c
                on v.RFQ_HeaderID = c.RFQ_HeaderID
                and v.supplier = c.Supplier
	        join RFQ_Working_Application a        
		on v.RFQ_HeaderID =  a.RFQ_HeaderID
		where a.UserID = @username
	        and isnull(v.ContactMethod, '') <> ''
		and isnull(c.Respond_Scheduling,'') = 'T'
                and v.type =@notifyType
                and (ISNULL(c.StartDates, '') <> '')

  
         end
         else
          begin
	       
		insert  #succeeded( ContactMethod , supplier,CMSS_ID )
		select distinct v.ContactMethod , v.supplier, v.CMSS_ID
		FROM RFQ_Notification v 
                join  cms_contract_management_Supp   c
                on v.CMSS_ID = c.CMSS_ID
                and v.supplier = c.Supplier
	        join RFQ_Working_Application a                      
		on v.CMSS_ID =  a.CMSS_ID
		where   isnull(POed,'') = 'T'
                 and isnull(PO,'') <> ''
                 and a.UserID = @username
	        and isnull(v.ContactMethod, '') <> ''
		
                and v.type =@notifyType

         end

declare @count  int, @succeeded  int

select @count  = count( ContactMethod)
-- select count( ContactMethod)
from #count
where ContactMethod  = @contactMethod
 group by ContactMethod

select @succeeded  = count( ContactMethod)
-- select count( ContactMethod)
from #succeeded
where ContactMethod  = @contactMethod
 group by ContactMethod

if @resultType = 'T'
 select isnull(@count,0)  'Total'
else if @resultType = 'S'
 select isnull(@succeeded,0)  'succeeded'
else if @resultType = 'U'
 select isnull(@count,0)-isnull(@succeeded,0)  'Unsucceeded'
























Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQInsertNotification]') and xtype = 'P ')  
 drop Procedure spRFQInsertNotification
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

























CREATE                    proc spRFQInsertNotification

@notifyType   varchar(5), @trDB  varchar(30), @userName varchar(30),
@hrDB   varchar(30) 

as

-- 
-- declare @notifyType   varchar(5), @trDB  varchar(30),@userName varchar(30)
-- 
-- select @notifyType = 'T'   -- T: Thank you response  s: Scheduling
-- 
-- select @trDB -- 'TR_RealEstate', @userName = 'hm'

declare @companyID  int

select @companyID = AutoID from COMPANIES
where  TreasuryDbName = @trDB



if @notifyType = 'T'   -- Thank you response

begin    
	insert RFQ_Notification ( SUPPLIER,SUPPLIER_ID,SUPPLIER_NAME,Type, RFQ_HeaderID)
	       
	select distinct c.SUPPLIER,c.SUPPLIER_ID,c.SUPPLIER_NAME,'T', c.RFQ_HeaderID
	from RFQ_Cost c
	join RFQ_Working_Application a
	on c.RFQ_headerid = a.RFQ_HeaderID
        where  not exists( select *
                       from RFQ_Notification as n
                       where  c.Supplier = n.Supplier
         and c.RFQ_HeaderID = n.RFQ_HeaderID  and type = 'T' )
	and isnull(Respond_thank,'F') = 'F'
        and  UserID = @userName


end
else if @notifyType = 'S'
begin
    insert RFQ_Notification ( SUPPLIER,SUPPLIER_ID,SUPPLIER_NAME,Type, RFQ_HeaderID)
	       
	select distinct c.SUPPLIER,c.SUPPLIER_ID,c.SUPPLIER_NAME,'S', c.RFQ_HeaderID
	from RFQ_Cost c
	join RFQ_Working_Application a
	on c.RFQ_headerid = a.RFQ_HeaderID
        where  not exists( select *
                       from RFQ_Notification as n
                       where  c.Supplier = n.Supplier
         and c.RFQ_HeaderID = n.RFQ_HeaderID  and type = 'S')
	and isnull(Respond_Scheduling,'F') = 'F'
        and  UserID = @userName


end
else   --  PO notification
begin
   insert RFQ_Notification ( SUPPLIER,SUPPLIER_ID,SUPPLIER_NAME,Type, CMSS_ID)
	       
	select distinct c.SUPPLIER,c.SUPPLIER_ID,c.SUPPLIER_NAME,'P', c.CMSS_ID
	from cms_contract_management_Supp c
	join RFQ_Working_Application a
	on c.CMSS_ID = a.CMSS_ID
        where  not exists( select *
                       from RFQ_Notification as n
                       where  c.Supplier = n.Supplier
         and c.CMSS_ID = n.CMSS_ID  and type = 'P' )
	 and isnull(POed,'') <> 'T'
     and isnull(PO,'') <> ''
        and  UserID = @userName


end

---------------default contact for all the suppliers-----------------------

--- 1. default contact based on default flag
update RFQ_Notification
	set Contact =c.KnownAs ,
	Tel = c.BusinessTelephoneNumber,
	Fax = c.BusinessFaxNumber,
	Email = c.Email1Address,
        Contact_id =   c.ID
-- select n.supplier,c.knownas, n.*
from RFQ_Notification n
join Relations r
on n.Supplier_ID = r.TargetID
join Contact  c
on r.ItemID = c.ID
where ISNULL(c.Type, '') = 'Supplier'
and isnull(c.DefaultRfqContact,'F') = 'T'
and isnull(n.Contact_id,0 )= 0
AND ISNULL(r.CompanyID, 0) = @companyID
--order by n.supplier


--select * from #OneContactSupplier

declare @str varchar(8000)

-- declare @trDB   varchar(50), @companyID  int
-- select @trDb= 'tr_realestate', @companyID = 7

-- 2. default contact based on there is only one contact for the supplier
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#OneContactSupplier '))
drop table #OneContactSupplier 
create table #OneContactSupplier(
     iCount  int null,
     Supplier   varchar(50) null
)
select @str = '
               select count(t.ID) ,Supplier
               from '+ @trDB  + '..Supplier_Master c
               join  Relations r
               on c.SUPPLIER_ID =r.TargetID
               join Contact t
               on r.ItemID = t.ID
               where ISNULL(t.Type, '''') = ''Supplier''
               and isnull(DefaultRfqContact,'''') <>''T''' +
                 ' AND ISNULL(r.CompanyID, 0) = ' + 
                ''+ convert(varchar(20), @companyID )+ '' +
              ' group by supplier
               having  count(t.ID)=1 '  
             
      
insert #OneContactSupplier 
exec( @str)
  


update RFQ_Notification
	set Contact =c.KnownAs ,
	Tel = c.BusinessTelephoneNumber,
	Fax = c.BusinessFaxNumber,
	Email = c.Email1Address,
        Contact_id =   c.ID
-- select n.supplier,c.knownas, n.*
from RFQ_Notification n
join Relations r
on n.Supplier_ID = r.TargetID
join Contact  c
on r.ItemID = c.ID
join #OneContactSupplier   s
on n.Supplier= s.Supplier
where ISNULL(c.Type, '') = 'Supplier'
and isnull(n.Contact_id,0 )= 0
--order by n.supplier
	
------------------------------------------------------------------------

--- default subject , body line for email, notes for phone and fax

if @notifyType = 'T'
begin
    
     exec  spRFQDefaultLine_Response  @userName

end
else if @notifyType = 'S'
begin
   exec  spRFQDefaultLine_Schedule  @userName
end
else
begin
   --declare @str varchar(8000)
   select @str = 'update CMS_Contract_Management 
              set phs_desc = p.phs_desc 
              from CMS_Contract_Management  c
              join ' + @hrDB + '..phase  p
              on c.phs_code = p.phs_code
              where isnull(c.phs_desc,'''') =  '''' '
   exec( @str)

   select @str =  'update CMS_Contract_Management 
               set subp_desc = p.subp_desc
               from CMS_Contract_Management  c
               join ' + @hrDB  + '..subphase  p
               on c.subp_code = p.subp_code
                where isnull(c.subp_desc,'''') =  '''''
   exec( @str)

         -- default subject , body line for email, notes for phone and fax
   exec  spRFQDefaultLine_PO  @userName
end

------------------------------------------------------------------------------
-- contact method

-- declare @str  varchar(8000)
-- 
-- declare  @trDB  varchar(30)
-- select @trDB  = 'TR_RealEstate'

select @str = ' update RFQ_Notification 
           set Contactmethod  = m.RFQ_METHOD
           from RFQ_Notification   n
           join ' + @trDb + '..supplier_master   m
          on n.supplier = m.supplier' +
          '  and   isnull(Contactmethod,'''') = '''' '


 

exec (@str)


 




























Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQReport]') and xtype = 'P ')  
 drop Procedure spRFQReport
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go






CREATE    proc spRFQReport

        @type   varchar(5) ,
        @contactMethod   varchar(5), @notified  varchar(5),
        @username  varchar(60),
        @headID   int,
        @companyName   varchar(100)
         

as

-- declare @type   varchar(5) ,
--         @contactMethod   varchar(5), @notified  varchar(5),
--         @username  varchar(60),
--         @headID   int
--   
-- 
-- select @type = 'P',  @contactMethod = '%',@headID = 22,
--  @notified  = '%', @username = 'hm'



--------------------@notified----------
--  T -- notified
--  F -- not notified
--  '%'-- all 
----------------------------------@notified----------
----------------report type( @type) -----------------------------

--        R - Request Notification
--        T = Thank you  response notification 
--        S - Scheduling notification
--        P - PO   notification
----------------- report type -----------------------------

-----------------contact method (@contactMethod)----------------------------
--      PH: Phone Call
--      PU: Pick Up (Mail )
--      FA: Fax 
--      EM: Email
--      IP:Internet Posting
--      PD: PDA Update
--      XM: XML
--      %  : all the methods (Phone call, fax, email etc )
-----------------contact method----------------------------


delete RFQ_Working_Notification 
where username =  @username


if @type = 'R'  ---Request Notification
begin
       insert RFQ_Working_Notification(Supplier,Supplier_ID, Supplier_Name, ContactMethod, Tel, Fax,
              Notes,Email,EmailSubject,EmailBody, EmailAttachment,Contact,
          notified, ResponseBy, username,Type,RFQID,RFQDesc,RequestExpiryDate)
	select distinct Supplier,Supplier_ID, SupplierName, ContactMethod, Tel, Fax,
	      convert(varchar(8000),Notes)[Notes],
	  Email,EmailSubject,convert(varchar(8000),EmailBody)[EmailBody],
	  convert(varchar(8000),EmailAttachment)[EmailAttachment],Contact,
          succeeded, ResponseBy,@username,Type,RFQID,RFQDesc,RequestExpiryDate
	-- select *
	from RFQ_VendorsSelected  v
        join RFQ_VendorSelectionHeader  h
        on v.HeaderID = h.ID
	where  headerid =@headID
	and ContactMethod like  @contactMethod
        and  isnull(succeeded,'F') like @notified
end       

else if @type = 'T'   -- thank you response notification
begin
       insert RFQ_Working_Notification(Supplier,Supplier_ID, Supplier_Name,  Tel, Fax,
              Notes,Email,EmailSubject,EmailBody, EmailAttachment,Contact,ContactMethod,
          notified,  username,Type,RFQID,RFQDesc,RequestExpiryDate)
   
	SELECT DISTINCT v.SUPPLIER, v.SUPPLIER_ID, v.SUPPLIER_NAME, 
	 v.Tel, v.Fax, CONVERT (varchar(8000), v.notes) AS Notes, v.Email, v.EmailSubject, 
	CONVERT (varchar(8000), v.EmailBody) AS EmailBody, 
	CONVERT (varchar(8000), v.EmailAttachment) AS EmailAttachment,
	 v.Contact,v.ContactMethod,c.Respond_Thank,@username,
         h.Type,h.RFQID,h.RFQDesc,h.RequestExpiryDate
	 FROM RFQ_Notification v 
	INNER JOIN RFQ_COST c ON v.SUPPLIER = c.SUPPLIER 
	AND v.RFQ_HeaderID = c.RFQ_HeaderID INNER 
	JOIN RFQ_Working_Application a 
	ON v.RFQ_HeaderID = a.RFQ_HeaderID 
        join RFQ_VendorSelectionHeader  h
        on v.RFQ_HeaderID = h.ID
	WHERE (ISNULL(c.Respond_Thank, 'F')like @notified) 
	AND (v.ContactMethod like @ContactMethod) 
	AND (a.UserID = @username)
	AND (v.Type = @Type ) 

end     -- select * from RFQ_Working_Notification 
else if @type = 'S'   --Scheduling notification
begin
        insert RFQ_Working_Notification(Supplier,Supplier_ID, Supplier_Name,  Tel, Fax,
              Notes,Email,EmailSubject,EmailBody, EmailAttachment,Contact,ContactMethod,
          notified, username,Type,RFQID,RFQDesc,RequestExpiryDate)

	 SELECT DISTINCT v.SUPPLIER, v.SUPPLIER_ID, v.SUPPLIER_NAME, 
	 v.Tel, v.Fax, CONVERT (varchar(8000), v.notes) AS Notes, v.Email, v.EmailSubject,
	 CONVERT (varchar(8000), v.EmailBody) AS EmailBody, CONVERT (varchar(8000), 
	v.EmailAttachment) AS EmailAttachment, v.Contact,v.ContactMethod,
        c.Respond_Scheduling,@username,
          h.Type,h.RFQID,h.RFQDesc,h.RequestExpiryDate
	 FROM RFQ_Notification v
	 INNER JOIN RFQ_COST c 
	ON v.SUPPLIER = c.SUPPLIER 
	AND v.RFQ_HeaderID = c.RFQ_HeaderID 
	INNER JOIN RFQ_Working_Application a 
	ON v.RFQ_HeaderID = a.RFQ_HeaderID 
        join RFQ_VendorSelectionHeader  h
        on v.RFQ_HeaderID = h.ID
	WHERE (ISNULL(c.Respond_Scheduling, 'F') like @notified)
	AND (v.ContactMethod like @ContactMethod )  
	AND (a.UserID = @username) 
	AND (v.Type = @type)
	 and (ISNULL(c.StartDates, '') <> '')
end
else if @type = 'P' -- PO notification
begin
         insert RFQ_Working_Notification(Supplier,Supplier_ID, Supplier_Name,  Tel, Fax,
              Notes,Email,EmailSubject,EmailBody, EmailAttachment,Contact,ContactMethod,
               notified, username,Type,RFQID,RFQDesc,RequestExpiryDate)
	 SELECT DISTINCT v.SUPPLIER, v.SUPPLIER_ID, v.SUPPLIER_NAME, 
	 v.Tel, v.Fax, CONVERT (varchar(8000), v.notes) AS Notes,
	 v.Email, v.EmailSubject, CONVERT (varchar(8000), v.EmailBody) AS EmailBody, 
	CONVERT (varchar(8000), v.EmailAttachment) AS EmailAttachment, v.Contact,
        ContactMethod,POed,@username,
          h.Type,h.RFQID,h.RFQDesc,h.RequestExpiryDate
	 FROM RFQ_Notification v 
	INNER JOIN CMS_Contract_Management_Supp c 
	ON v.SUPPLIER = c.SUPPLIER 
	AND v.CMSS_ID = c.CMSS_ID 
	INNER JOIN RFQ_Working_Application a 
	ON v.CMSS_ID = a.CMSS_ID 
        join RFQ_COST   t   
        on c.RFQC_ID = t.RFQC_ID
         join RFQ_VendorSelectionHeader  h
        on t.RFQ_HeaderID = h.ID
	WHERE (ISNULL(c.POed, 'F') like @notified )
	AND (ISNULL(c.PO, '') <> '') 
	AND (v.ContactMethod like @ContactMethod) 
	AND (a.UserID = @username) 
	AND (v.Type = @type)
end
   

-- select * from RFQ_Working_Notification
update RFQ_Working_Notification
set CompanyName = @companyName,
RunDesc = case when @notified = 'F' then 'Show to be notified only'
               when @notified = 'T' then 'Show notified only'
               else    'Show All'   end,
TypeDesc = case when type = 'T' then 'Trade'
                when type = 'O' then 'Option' 
               else    'Material' end             
           
where username = @username









Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQUpdateBudget]') and xtype = 'P ')  
 drop Procedure spRFQUpdateBudget
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go






create   proc spRFQUpdateBudget

@RFQC_ID   int,  @trDB  varchar(50)
as



-- this stored procs may be changed in the future. 
-- It is just for updating RFQ budget for MATERIAL

-- declare @RFQC_ID   int,  @trDB  varchar(50)
-- 
-- select @RFQC_ID = 5,@trDB  = 'TR_Beta'


declare @global  varchar(5), @str  varchar(2000),@BudgetSelected   varchar(2)

select  @global = h.rfqtype ,@BudgetSelected = c.BudgetSelected 
from  RFQ_COST c
join RFQ_VendorSElectionHeader  h
on h.ID = c.RFQ_HeaderID
where c.RFQC_ID = @RFQC_ID
and type = 'M'


select @global 'global'

select @BudgetSelected  '@BudgetSelected '

if isnull( @BudgetSelected,'') = 'T'
begin
	if  isnull(@global,'') = 'F'
	begin
	   print 'not global'
	   select   @str  = ' update ' + @trDB + '..HB_EST_MAT'  + 
	                   ' set EST_COST  =  c.cost from ' + 
	                   @trDB + '..HB_EST_MAT  e '+
	                   ' join RFQ_COST c
	                     on  RAW_LAND_CD = RAW_LAND_CD
	                     and e.phs_code = c.phs_code
	                     and e.subp_code = c.subp_code
	                     and e.Material_ID = c.Material_ID
	                    join RFQ_VendorSElectionHeader  h
	                    on h.ID = c.RFQ_HeaderID
	                    where c.RFQC_ID = ' +  
	                    ''+convert(varchar(20),@RFQC_ID)+'' 
	                  +  ' and type = ''M'''
	
	
	end
	
	else
	begin
	
	   print 'Global'
	   select   @str  = ' update ' + @trDB + '..HB_EST_MAT'  + 
	                   ' set EST_COST  =  c.cost from ' + 
	                   @trDB + '..HB_EST_MAT  e '+
	                   ' join RFQ_COST c
	                     on  RAW_LAND_CD = RAW_LAND_CD
	                     and e.Material_ID = c.Material_ID
	                    join RFQ_VendorSElectionHeader  h
	                    on h.ID = c.RFQ_HeaderID
	                    where c.RFQC_ID = ' +  
	                    ''+convert(varchar(20),@RFQC_ID)+'' 
	                  +  ' and type = ''M'''
	end
	
	--print @str
	
	exec (@str)
end










Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQUpdateCost]') and xtype = 'P ')  
 drop Procedure spRFQUpdateCost
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
















CREATE            proc [dbo].[spRFQUpdateCost]

        @rfqType    varchar(5),
        @Vendor_SelectionID int ,
        @trDB   varchar(20),
        @hrDB   varchar(50)

as

-- declare  @rfqType    varchar(5), @Vendor_SelectionID int ,
--         @trDB   varchar(20)
-- 
-- 
-- select @Vendor_SelectionID = 322,  @trDB = 'TR_RealEstate'


declare @count   int, @str   varchar(8000)



select @count = count(*) from RFQ_COST 
 where Vendor_SelectionID = @Vendor_SelectionID


if isnull( @count,0) = 0
begin
         print 'inserting'
        

     -----------------------------------------------------------
--       declare @Vendor_SelectionID int, @trDB   varchar(20),@str   varchar(8000)
--    
--       select @Vendor_SelectionID = 321,  @trDB = 'TR_RealEstate'
      ----------------------------------------------------
      --1.set TRADE_ID = 9999 temp
      insert RFQ_COST( RAW_LAND_CD, SUPPLIER, RFQC_TYPE_MOE, Model_ID, 
	            phs_code, subp_code, COST,MAT_SIB ,TARGET_VOLUME, DATE_EFFECTIVE,
	            DATE_EXPIRE,DATE_RFQ, RFQ_HeaderID, Vendor_SelectionID,TRADE_ID,
                     SUPPLIER_ID,SUPPLIER_NAME,
                    ModelNameID,ModelNameDesc,HoldingDesc,ModelDesc, Option_ID, Material_ID, RFQ_ID,
                    RFQ_BY,MAJ_GROUP_ID,GROUP_DESC,SUB_GROUP_ID ,SUB_GROUP_DESC,SHORT_DESC,EXP_DESC,
                    MATGROUP_ID,MATGROUP_DESC,MAT_CODE,MAT_SHORT_DESC, qty, CostType)
                    select a.HoldingID,SUPPLIER,h.type,a.ModelID, isnull(l.MajorCode,''),
                    isnull(l.MinorCode,''),v.COST, MAT_SIB ,TARGET_VOLUME, 
	            DATE_EFFECTIVE,DATE_EXPIRE,GetDate(), h.ID,v.ID ,
                    case when h.type = 'M' then -1 else 9999 end,
                     v.SUPPLIER_ID, v.SupplierName,
                    ModelNameID,ModelNameDesc,HoldingDesc,ModelDesc,Option_ID, Material_ID, RFQID,
                    Userid,MAJ_GROUP_ID,GROUP_DESC,SUB_GROUP_ID ,SUB_GROUP_DESC,SHORT_DESC,EXP_DESC,
                     MATGROUP_ID,MATGROUP_DESC,MAT_CODE,MAT_SHORT_DESC, l.qty, l.type
           	     FROM  RFQ_VendorSelectionLog l 
                    JOIN  RFQ_VendorsSelected v ON v.LOG_ID = l.ID AND l.HeaderID = v.HeaderID  
               	    JOIN  RFQ_VendorSelectionHeader h ON l.HeaderID = h.ID  
	            JOIN  RFQ_VSH_Application a ON l.HeaderID = a.HeaderID AND a.ID = l.VA_ID
 	            WHERE  v.ID =  @Vendor_SelectionID 
    
         
         -- 2. update Trade_ID in HB_RFQ_COST table
        
          ---------------------------------------
--           declare   @str   varchar(8000),@RFQC_ID  int, @trDB   varchar(20)
--           select @RFQC_ID = 645, @trDb = 'TR_realestate'
          ----------------------------------------
                select @str = 'update RFQ_COST
                       set TRADE_ID = s.TSUP_TM_ID
                       FROM  ' + @trDB + '..HB_HCP_SUPPLIERS s
                       join   RFQ_COST  c
                       on s.SUPPLIER = c.SUPPLIER
                       and s.TSUP_HCP_ID = c.RAW_LAND_CD
                       where  (s.TSUP_TM_TYPE = ''T'') AND (s.TSUP_HCP_TYPE = ''H'')
                       and c.Vendor_SelectionID =  ' + ''+convert(varchar(10), @Vendor_SelectionID)+'' +
                       ' and  TRADE_ID = ''9999'''
      --  print @str 
        exec (@str)
     

    

end 
else    -- updating
begin

     print 'updating'
       -----------------------------------------------------------
--      declare @Vendor_SelectionID int, @trDB   varchar(20),@str   varchar(8000)
--    
--       select @Vendor_SelectionID = 321,  @trDB = 'TR_RealEstate'
      -------------------------------------------------------------------
                     update RFQ_COST
                     set COST =  v.COSt ,
                     MAT_SIB = v.MAT_SIB, 
                     TARGET_VOLUME = v.TARGET_VOLUME ,
DATE_EFFECTIVE = v.DATE_EFFECTIVE,
                     DATE_EXPIRE = v.DATE_EXPIRE,
                     DATE_RFQ = getdate(),
                     notes  = v.notes
                     from RFQ_VendorsSelected v 
                     join RFQ_COST   c
                     on v.ID = c.Vendor_SelectionID
                     where Vendor_SelectionID = @Vendor_SelectionID
    --  exec( @str)
  
end
-- update RANKS and maximum homes for each supplier
select @str = 'update RFQ_COST
               set RANKING = s.RANKING, MAX_HOMES =s.MAX_HOMES
               FROM  ' + @trDB + '..SUPPLIER_MASTER s
                       join   RFQ_COST  c
                       on s.SUPPLIER = c.SUPPLIER '  +
              ' where isnull(c.RANKING,0) = 0 '

exec( @str)


-- update phase description and subphase description in RFQ_COST table

-- declare         @hrDB   varchar(50)
-- 
-- select @hrDB = 'hr_realestate'

select @str = 'update RFQ_Cost 
              set phs_desc = p.phs_desc 
              from rfq_cost  c
              join ' + @hrDB + '..phase  p
              on c.phs_code = p.phs_code
              where isnull(c.phs_desc,'''') =  '''' '
exec( @str)

select @str =  'update RFQ_Cost 
               set subp_desc = p.subp_desc
               from rfq_cost  c
               join ' + @hrDB  + '..subphase  p
               on c.subp_code = p.subp_code
                where isnull(c.subp_desc,'''') =  '''''
exec( @str)



















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spRFQUpdateRepondedFlag]') and xtype = 'P ')  
 drop Procedure spRFQUpdateRepondedFlag
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go














CREATE      proc spRFQUpdateRepondedFlag

@headerID   int, @majorCode varchar(20),@minorCode  varchar(20),
        @supplier   varchar(20),
        @typeID  int, @rfqtype   varchar(2), @global  varchar(2)

as
-- 
-- declare @headerID   int, @majorCode varchar(20),@minorCode  varchar(20),
--         @supplier   varchar(20)
-- declare @typeID  int, @rfqtype   varchar(2), @global  varchar(2)
-- select @rfqType = 'M',  @global = 'T', @typeID = 16


declare @supp  int, @response int


if (@rfqtype   = 'M' ) and (isnull(@global,'F') = 'T')
begin    -- material (elevation base on material group)
   print ('material global')
   select @response = count (v.COST) 
	from RFQ_VendorsSelected v
	join RFQ_VendorSelectionLog  l
	        on v.Log_ID = l.ID
	where  v.headerid = @headerID
	and supplier = @supplier
        and l.MATGROUP_ID = @typeID
	
	select  @supp  = count (supplier) 
	from RFQ_VendorsSelected v
	join RFQ_VendorSelectionLog  l
	        on v.Log_ID = l.ID
	where  v.headerid = @headerID
	and l.MATGROUP_ID = @typeID
	and supplier = @supplier
	
	if ( isnull(@supp,0) = isnull(@response,0))
	begin
	   select 'respond'
	   update  RFQ_VendorsSelected 
	   set Responded = 'T'
	   from RFQ_VendorsSelected v
	  join RFQ_VendorSelectionLog  l
	        on v.Log_ID = l.ID
	   where v.headerid = @headerID
	   and l.MATGROUP_ID = @typeID
	   and supplier = @supplier
	   and  isnull(Responded,'F') <> 'T'
	end
	else
	  select 'not  respond'
end

else   -- option (Global & elevation) and trade RFQ base on major code and minor code ) 
begin

	select @response = count (v.COST) 
	from RFQ_VendorsSelected v
	join RFQ_VendorSelectionLog  l
	        on v.Log_ID = l.ID
	where  v.headerid = @headerID
	and l.majorcode = @majorCode
	and isnull(l.minorcode,'') = @minorCode
	and supplier = @supplier
	
	
	select  @supp  = count (supplier) 
	from RFQ_VendorsSelected v
	join RFQ_VendorSelectionLog  l
	        on v.Log_ID = l.ID
	where  v.headerid = @headerID
	and l.majorcode = @majorCode
	and isnull(l.minorcode,'') = @minorCode
	and supplier = @supplier
	
	if ( isnull(@supp,0) = isnull(@response,0))
	begin
	   select 'respond'
	   update  RFQ_VendorsSelected 
	   set Responded = 'T'
	   from RFQ_VendorsSelected v
	  join RFQ_VendorSelectionLog  l
	        on v.Log_ID = l.ID
	   where v.headerid = @headerID
	   and l.majorcode = @majorCode
	   and isnull(l.minorcode,'') = @minorCode
	   and supplier = @supplier
	   and  isnull(Responded,'F') <> 'T'
	end
	else
	  select 'not  respond'
end














Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[svSP_MostPopularContact]') and xtype = 'P ')  
 drop Procedure svSP_MostPopularContact
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE    PROCEDURE dbo.svSP_MostPopularContact
(@QuoteID int)

AS

BEGIN
DECLARE
	@Contact varchar(128)
	SET @Contact = (SELECT TOP 1 KnownAs AS Contact
			FROM svIncident I
			LEFT JOIN Contact C ON C.ID = I.ContactID 
			WHERE QuoteID = @QuoteID
			GROUP BY QuoteID, KnownAs 
			ORDER BY COUNT(*) DESC)
	IF @Contact IS NULL
	BEGIN
		SELECT		@Contact = C.KnownAs
		FROM		scLead		L
		LEFT JOIN	scQuote	Q ON Q.LeadID = L.ID
		LEFT JOIN	Contact C ON C.ID = L.Contact_ID
		WHERE 		Q.ID = @QuoteID
	END
	
	SELECT @Contact

END




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[svSP_MostPopularContactID]') and xtype = 'P ')  
 drop Procedure svSP_MostPopularContactID
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE    PROCEDURE dbo.svSP_MostPopularContactID
(@QuoteID int)

AS

BEGIN
DECLARE
	@Contact int
	SET @Contact = (SELECT TOP 1 I.ContactID AS Contact
			FROM svIncident I
			LEFT JOIN Contact C ON C.ID = I.ContactID 
			WHERE QuoteID = @QuoteID
			GROUP BY QuoteID, I.ContactID
			ORDER BY COUNT(*) DESC)
	IF @Contact IS NULL
	BEGIN
		SELECT		@Contact = C.ID
		FROM		scLead		L
		LEFT JOIN	scQuote	Q ON Q.LeadID = L.ID
		LEFT JOIN	Contact C ON C.ID = L.Contact_ID
		WHERE 		Q.ID = @QuoteID
	END
	
	SELECT @Contact

END





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[svSPCheckData]') and xtype = 'P ')  
 drop Procedure svSPCheckData
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE  PROCEDURE [dbo].[svSPCheckData]

AS

select 

Q.ID,
null KnownAs,
MDP.Proj_Name,
C.HumanDBName,
C.TreasuryDBName
from scQuote Q

LEFT OUTER JOIN scLead L			ON L.ID = Q.LeadID
LEFT OUTER JOIN MSP_DashBoard_Projects MDP 	ON ( MDP.Link_ID = Q.ID and MDP.SourceFlavour = 'nbgServiceCenter' )
LEFT OUTER JOIN Companies C			ON C.AutoID = Q.CompanyID 
 
WHERE Q.Status = 'C'




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[svSPClearMainData]') and xtype = 'P ')  
 drop Procedure svSPClearMainData
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE   PROCEDURE dbo.svSPClearMainData

AS

BEGIN


DELETE FROM svNoteAttachments

DELETE FROM svNotes

DELETE FROM svCallbacks

DELETE FROM svTask

DELETE FROM svIncident

DELETE FROM svNoteAttachments




END






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[svSPUpdateTask]') and xtype = 'P ')  
 drop Procedure svSPUpdateTask
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE  PROCEDURE dbo.svSPUpdateTask
	@Proj_ID					int,
	@Task_UID				int,
	@Task_Name				varchar(255),
	@PlannedStartDate	DateTime,
	@PlannedFinishDate	DateTime,
	@ActualStartDate		DateTime,
	@ActualFinishDate		DateTime
	
AS
BEGIN
	exec MSP_BACKUP_TASK @Proj_ID, @Task_UID
	
	if @ActualFinishDate IS NOT NULL
	BEGIN
		UPDATE	MSP_TASKS
		SET				TASK_NAME					= @Task_Name,
							TASK_PCT_COMP			= 100,
							TASK_START_DATE		= @PlannedStartDate,
							TASK_FINISH_DATE	= @PlannedFinishDate,
							TASK_ACT_START		= @ActualStartDate,
							TASK_ACT_FINISH		= @ActualFinishDate
		WHERE		PROJ_ID							= @Proj_ID
		AND			TASK_UID							= @Task_UID	
	END
	ELSE
	BEGIN
		UPDATE	MSP_TASKS
		SET				TASK_NAME					= @Task_Name,
							TASK_PCT_COMP			= 0,
							TASK_START_DATE		= @PlannedStartDate,
							TASK_FINISH_DATE	= @PlannedFinishDate,
							TASK_ACT_START		= @ActualStartDate,
							TASK_ACT_FINISH		= Null
		WHERE		PROJ_ID							= @Proj_ID
		AND			TASK_UID							= @Task_UID	
	END
	
	UPDATE	MSP_Projects
	SET				PROJ_EXT_EDITED = 1
	WHERE		PROJ_ID			= @Proj_ID
END






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Tools_CleanUpSequence]') and xtype = 'P ')  
 drop Procedure Tools_CleanUpSequence
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create procedure Tools_CleanUpSequence
	@Table nvarchar(max),
	@idCol nvarchar(max),
	@SeqCol nvarchar(max),
    @WhereClause nvarchar(max)
as

--exec CleanUpSequence @Table = N'PPM_PublishExpectedAccomplishments',
--	@idCol = N'id',
--	@SeqCol = N'Seq',
--    @WhereClause = N'PPM_PublishPeriodID = 2 and ApplicablePeriod = 1'

--declare @Table nvarchar(max) = N'PPM_PublishExpectedAccomplishments',
--	@idCol nvarchar(max) = N'id',
--	@SeqCol nvarchar(max) = N'Seq',
--    @WhereClause nvarchar(max) = N'PPM_PublishPeriodID = 2 and ApplicablePeriod = 1'

declare @sql nvarchar(max)

set @sql = 
N'update ' + @table + N'
set ' + @SeqCol + N' = NewSeq
from (select ' + @idCol + N', ROW_NUMBER() over (order by ' + @SeqCol + N') [NewSeq] from ' + @Table + N'
where ' + @WhereClause + N') i
where i.' + @idCol + N' = ' + @Table + N'.' + @idCol +' and ' + @WhereClause

exec sp_executesql @sql



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Tools_ReorderSeq]') and xtype = 'P ')  
 drop Procedure Tools_ReorderSeq
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

--/****** Object:  StoredProcedure [dbo].[Tools_ReorderSeq]    Script Date: 05/26/16 3:24:34 PM ******/
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER OFF
--GO

CREATE procedure [dbo].[Tools_ReorderSeq] 
	@id int, 
	@new_seq int,
	@Table nvarchar(max),
	@idCol nvarchar(max),
	@SeqCol nvarchar(max),
    @WhereClause nvarchar(max)
as 
begin

	--declare
	--	@id int = 9, 
	--	@new_seq int = 5,
	--	@Table nvarchar(max) = 'AttachmentStatus',
	--	@idCol nvarchar(max) = 'id',
	--	@SeqCol nvarchar(max) = 'Seq',
	--    @WhereClause nvarchar(max) = 'pri_id = 59'

	declare @sql nvarchar(max)

	set @sql =	
	
	'declare @old_seq int, @id int = ' + convert(nvarchar(20), @id) + '

	select @old_seq = ' + @SeqCol + '
	from ' + @Table + '
	where ' + @idCol + ' = @id

	if( (@new_seq <> @old_seq) or (@old_seq is null and @new_seq is not null) or (@old_seq is not null and @new_seq is null) )
	begin	
		select @old_seq=ISNULL(@old_seq, 9999)

		if(@new_seq > @old_seq)
		begin
			update ' + @Table + '
			set ' + @SeqCol + '=Seq-1
			where ' + @SeqCol + ' <= @new_seq and ' + @idCol + '<>@id  and ' + @WhereClause + '
		end

		update ' + @Table + '
		set ' + @SeqCol + '=' + @SeqCol + ' + 1
		where ' + @SeqCol + ' >= @new_seq and ' + @WhereClause + '

		update ' + @Table + ' 
		set ' + @SeqCol + ' = @new_seq
		where ' + @idCol + ' = @id

		exec Tools_CleanUpSequence @Table = ''' + @Table + ''', @idCol = ''' + @idCol + ''', @SeqCol = ''' + @SeqCol + ''', @WhereClause = ''' + replace(@WhereClause, '''', '''''') + '''

	end '
	exec sp_executesql @sql, N'@new_seq int ', @new_seq 

end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[UpdateUpdatesLog]') and xtype = 'P ')  
 drop Procedure UpdateUpdatesLog
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create procedure UpdateUpdatesLog 
	@LogID int,
	@VersionInfo varchar(50) = null,
	@FileDateUpdated datetime,
	@FileName varchar(255),
	@FileSize bigint,
	@DownloadState varchar(20),
	@StartDownload datetime = null,
	@CompleteDownload datetime = null,
	@StartUATDeploy datetime = null,
	@CompleteUATDeploy datetime = null,
	@StartProductionDeploy datetime = null,
	@CompleteProductionDeploy datetime = null,
	@UATUpdating bit = 0,
	@ProductionUpdating bit = 0,
	@UATContactID int = null,
	@ProductionContactID int = null
	
as
begin
	Update Updates_Log 
	set
	VersionInfo = @VersionInfo,
	FileDateUpdated = @FileDateUpdated, Filename = @FileName, FileSize = @FileSize, 
	DownloadState = @DownloadState, StartDownload = @StartDownload, CompleteDownload = @CompleteDownload, 
	StartUATDeploy = @StartUATDeploy, CompleteUATDeploy = @CompleteUATDeploy, 
	StartProductionDeploy = @StartProductionDeploy, CompleteProductionDeploy = @CompleteProductionDeploy,
	UATUpdating = @UATUpdating, ProductionUpdating = @ProductionUpdating, UATContactID = @UATContactID,
	ProductionContactID = @ProductionContactID
	where LogID = @LogID


end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WEB_DBA_Index_Removal_Consideration]') and xtype = 'P ')  
 drop Procedure WEB_DBA_Index_Removal_Consideration
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc WEB_DBA_Index_Removal_Consideration as
if not exists(select * from DBA_UnusedIndexes where DATEADD(d, DATEDIFF(d, 0, getdate()), 0) = DATEADD(d, DATEDIFF(d, 0, daterun), 0))
begin
	insert DBA_UnusedIndexes
	(Factor, DatabaseName, TableName, IndexName, DateRun, database_id, object_id, index_id, user_seeks, user_scans, user_lookups, user_updates, 
	last_user_seek, last_user_scan, last_user_lookup, last_user_update, system_seeks, system_scans, system_lookups, system_updates, 
	last_system_seek, last_system_scan, last_system_lookup, last_system_update, is_primary_key, is_unique)
	SELECT cast((user_seeks + user_scans + user_lookups) as float)/ cast( case when user_updates = 0 then 1 else user_updates end as float) Factor, 
	d.name [DatabaseName], '' TableName, '' IndexName, getdate() DateRun, 
	s.database_id, s.object_id, s.index_id, s.user_seeks, s.user_scans, s.user_lookups, s.user_updates, s.last_user_seek, s.last_user_scan, s.last_user_lookup, 
	s.last_user_update, s.system_seeks, s.system_scans, s.system_lookups, s.system_updates, s.last_system_seek, s.last_system_scan, s.last_system_lookup, s.last_system_update, 
	0 is_primary_key, 0 is_unique
	from sys.dm_db_index_usage_stats s 
	join sys.databases d on d.database_id = s.database_id
	where user_seeks + user_scans + user_lookups + user_updates > 0
	and cast((user_seeks + user_scans + user_lookups) as float)/ cast( case when user_updates = 0 then 1 else user_updates end as float) < 1
	order by cast((user_seeks + user_scans + user_lookups) as float)/ cast( case when user_updates = 0 then 1 else user_updates end as float) desc
end 

declare @SQL varchar(max), @Count int, @Database varchar(max)
select @Count = 0

while exists (select * from DBA_UnusedIndexes where [TableName] = '' and @Count < 1000)--support a maximum of 1000 databases (change if you like though, this is only to prevent a run away in case of an unexpected event resulting in the Table never being found)
begin
	select @Database = MAX([DatabaseName]) from DBA_UnusedIndexes where TableName = ''
	select @SQL = ' update DBA_UnusedIndexes set 
	TableName = isnull((select o.name from ' + @Database + '.sys.objects o where o.OBJECT_ID = DBA_UnusedIndexes.object_id),''!!ERROR!!''),
	IndexName = isnull((select i.name from ' + @Database + '.sys.indexes i where i.OBJECT_ID = DBA_UnusedIndexes.object_id and i.INDEX_ID = DBA_UnusedIndexes.index_id),''!!ERROR!!''),
	is_primary_key = isnull((select i.is_primary_key from ' + @Database + '.sys.indexes i where i.OBJECT_ID = DBA_UnusedIndexes.object_id and i.INDEX_ID = DBA_UnusedIndexes.index_id),0),
	is_unique = isnull((select i.is_unique from ' + @Database + '.sys.indexes i where i.OBJECT_ID = DBA_UnusedIndexes.object_id and i.INDEX_ID = DBA_UnusedIndexes.index_id),0)
	where [DatabaseName] = ''' + @Database + ''''
	exec (@SQL)
	update DBA_UnusedIndexes set TableName = '!!ERROR!!' where isnull(TableName,'') = '' and [DatabaseName] = @Database	
	select @Count = @Count + 1
end

--do not allow pk removals... seems hokey to do this thru a delete but since the indexes are database specific, we don't know it's a PK until the exec above is called
delete DBA_UnusedIndexes where isnull(is_primary_key,0) = 1
select 'The following dataset contains candidates for index removal consideration'
select * from DBA_UnusedIndexes where DATEADD(d, DATEDIFF(d, 0, getdate()), 0) = DATEADD(d, DATEDIFF(d, 0, daterun), 0)

/* commented out code clears the table
	truncate table DBA_UnusedIndexes
*/

/*	commented code inside this block indescriminately marks all zero factor indexes for deletion

	update DBA_UnusedIndexes set MarkedForDeletion = 1 where Factor = 0 

*/

/*	commented code inside this block generates the runable sql to drop indexes based on MarkedForDeletionSatus

	select distinct 'drop index ' + IndexName + ' on ' + DatabaseName + '.dbo.' + TableName
	from DBA_UnusedIndexes where MarkedForDeletion = 1

*/


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WEB_DBA_Missing_Indexes]') and xtype = 'P ')  
 drop Procedure WEB_DBA_Missing_Indexes
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[WEB_DBA_Missing_Indexes] @UseDBOnly bit = 0 as
--declare @UseDBOnly bit select @UseDBOnly = 0

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#MI'))
drop table #MI
CREATE TABLE #MI(
	id int not null identity(1,1) primary key,
	[Affected Table] [sysname] NULL,
	[SQL Statement] [nvarchar](4000) NULL,
	[Seeks] [bigint] NOT NULL,
	[Scans] [bigint] NOT NULL,
	[Impact] [bigint] NULL,
	[Last Accessed] [datetime] NULL,
	[Database] [sysname] NOT NULL,
	[Discovered Date] datetime not null default getdate(),
	[Selected] [bit] NULL,
	[database_id] [int] NOT NULL,
	[object_id] [int] NOT NULL)

insert #MI([Affected Table], [SQL Statement], Seeks, Scans, Impact, [Last Accessed], 
[Database], [Discovered Date], Selected, database_id, object_id)
SELECT null,
        CAST(ddmid.index_handle AS VARCHAR(10))
        + ' On ' + ddmid.STATEMENT 
        + ' (' + IsNull(ddmid.equality_columns,'') 
        + CASE WHEN ddmid.equality_columns IS Not Null 
            And ddmid.inequality_columns IS Not Null THEN ',' 
                ELSE '' END 
        + IsNull(ddmid.inequality_columns, '')
        + ')' 
        + IsNull(' Include (' + ddmid.included_columns + ');', ';'
        ) AS [SQL Statement], ddmigs.user_seeks [Seeks], 
        ddmigs.user_scans [Scans], 
        CAST((ddmigs.user_seeks + ddmigs.user_scans) * ddmigs.avg_user_impact AS bigINT) AS 'Impact', 
        ddmigs.last_user_seek [Last Accessed],
        d.name [Database], GETDATE(), CAST (0 as bit) [Selected], 
        d.database_id, ddmid.object_id
FROM sys.dm_db_missing_index_groups AS ddmig
INNER JOIN sys.dm_db_missing_index_group_stats AS ddmigs ON ddmigs.group_handle = ddmig.index_group_handle
INNER JOIN sys.dm_db_missing_index_details AS ddmid ON ddmig.index_handle = ddmid.index_handle
inner join sys.databases d on d.database_id = ddmid.database_id
WHERE ddmid.database_id = case when @UseDBOnly = 1 then DB_ID() else ddmid.database_id end

declare @SQL varchar(max), @Count int, @Database varchar(max)
select @Count = 0

while exists (select * from #MI where [Affected Table] is null and @Count < 1000)--support a maximum of 1000 databases (change if you like though, this is only to prevent a run away in case of an unexpected event resulting in the Table never being found)
begin
	select @Database = MAX([Database]) from #MI where [Affected Table] is null
	select @SQL = ' update #MI set [Affected Table] = isnull((select t.name from ' + @Database + '.sys.tables t where t.OBJECT_ID = #MI.object_id),''!!ERROR!!'') where [Database] = ''' + @Database + ''''
	exec (@SQL)
	update #MI set [Affected Table] = '!!ERROR!!' where isnull([Affected Table],'') = '' and [Database] = @Database	
	select @Count = @Count + 1
end

update #MI set [SQL Statement] = 'Create NonClustered Index IX_' + [Affected Table] + '_ReflexGenerated_' + ISNULL([SQL Statement],'')

insert DBA_MissingIndexes([Affected Table], [SQL Statement], Seeks, Scans, Impact, [Last Accessed], 
[Database], [Discovered Date], Selected, database_id, object_id)
SELECT [Affected Table], [SQL Statement], Seeks, Scans, Impact, [Last Accessed], 
[Database], [Discovered Date], Selected, database_id, object_id
from #MI mi where mi.[SQL Statement] not in (Select [SQL Statement] from DBA_MissingIndexes)

update DBA_MissingIndexes set Seeks = mi.Seeks, Scans = mi.scans, Impact = mi.Impact, [Last Assessed Date] = GETDATE()
from DBA_MissingIndexes dmi 
join #MI mi on dmi.[SQL Statement] = mi.[SQL Statement]

select * from DBA_MissingIndexes
    



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WEB_DBA_MissingIndexCreation]') and xtype = 'P ')  
 drop Procedure WEB_DBA_MissingIndexCreation
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[WEB_DBA_MissingIndexCreation] as

declare @SQL varchar(max), @Count int, @Database varchar(max), @Index varchar(max), @Id int
select @Count = 0

while exists (select * from DBA_MissingIndexes mi where mi.Selected = 1 and @Count < 1000)--support a maximum of 1000 databases (change if you like though, this is only to prevent a run away in case of an unexpected event resulting in the Table never being found)
begin
	select top 1 @Database = [Database], @SQL = mi.[SQL Statement], @Id = id
	from DBA_MissingIndexes mi where mi.Selected = 1 
	
	select @SQL = 
	'use ' + @Database + char(13) + char(10) + @SQL 
	begin try
		exec (@SQL)	
		update DBA_MissingIndexes set Selected = 0, [Resolution Date] = GETDATE(), Resolution = 'Applied' where id = @Id
	end try
	begin catch		
		update DBA_MissingIndexes set 
		Selected = 0, [Resolution Date] = GETDATE(), Resolution = 'Failed', ErrorMessage = 
		isnull(cast(ERROR_NUMBER() as varchar(20)),'N/A') + 
		', Line:' + isnull(cast(ERROR_LINE() as varchar(20)),'N/A') + 
		', Proc:' + isnull(ERROR_PROCEDURE(),'N/A') + 
		', Error Message:' + isnull(ERROR_MESSAGE(),'N/A')
		where id = @Id
	end catch
	print @SQL
	select @Count = @Count + 1
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WEB_DBA_UnusedIndexRemoval]') and xtype = 'P ')  
 drop Procedure WEB_DBA_UnusedIndexRemoval
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE proc [dbo].[WEB_DBA_UnusedIndexRemoval] @N int as


declare @SQL varchar(max), @Count int, @Database varchar(max), @Index varchar(max), @Id int
select @Count = 0

while exists (select * from DBA_UnusedIndexes  mi where isnull(mi.MarkedForDeletion,0) = 1 and @Count < 1000)--support a maximum of 1000 databases (change if you like though, this is only to prevent a run away in case of an unexpected event resulting in the Table never being found)
begin
	select top 1 @Database = [DatabaseName], @SQL = '
	drop index ' + IndexName + ' on ' + Tablename, 
	@Id = id
	from DBA_UnusedIndexes  mi where mi.MarkedForDeletion = 1 
	
	select @SQL = 
	'use ' + @Database + char(13) + char(10) + @SQL 
	begin try
		exec (@SQL)	
		update DBA_UnusedIndexes  set MarkedForDeletion = 0, [Resolution Date] = GETDATE(), Resolution = 'Applied' where id = @Id
	end try
	begin catch
		update DBA_UnusedIndexes  set MarkedForDeletion = 0, [Resolution Date] = GETDATE(), Resolution = 'Failed' where id = @Id
	end catch
	print @SQL
	select @Count = @Count + 1
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WF_Validation]') and xtype = 'P ')  
 drop Procedure WF_Validation
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 


create proc [dbo].[WF_Validation] @approval_id int, @message varchar(150) output
as
begin
	declare @approval_level_id int, @level_desc varchar(50), @work_flow varchar(50), @ApprovalType varchar(1)

	select @work_flow=work_flow 
	from WS_Approval_WorkFlow 
	where Approval_ID=@approval_id

	declare cur_app cursor for
	select Approval_Level_ID, Level_Description, isnull(Approval_Type,'C')
	from WS_Approval_Levels 
	where Approval_ID=@approval_id 
	order by Level_ID
	
	open cur_app fetch cur_app into @approval_level_id, @level_desc, @ApprovalType
	while @@fetch_status=0
	begin
		if( @ApprovalType = 'C' )
		begin
			if not exists( select * from WS_Approval_Contacts where ISNULL(Is_Active,'F') = 'T' and Approval_Level_ID=@approval_level_id )
			begin
				select @message = 'Work Flow '+@work_flow+' Approval Level - "' + @level_desc + '" does not have any active approval contacts setup.'
				close cur_app
				deallocate cur_app
				goto FINISH
			end
		end
		else if( @ApprovalType = 'S' )
		begin
			if not exists( select * from WS_Approval_Stakeholders where ISNULL(Is_Active,'F') = 'T' and Approval_Level_ID=@approval_level_id )
			begin
				select @message = 'Work Flow '+@work_flow+' Approval Level - "' + @level_desc + '" does not have any active approval stakeholders setup.'
				close cur_app
				deallocate cur_app
				goto FINISH
			end
		end
	
		fetch cur_app into @approval_level_id, @level_desc, @ApprovalType
	end			
	close cur_app
	deallocate cur_app
		
	FINISH:

	select @message=ISNULL(@message,'OK')
	if( @message = '' )
		select @message = 'OK'
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_CommunitiesFill]') and xtype = 'P ')  
 drop Procedure WS_CommunitiesFill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec WS_CommunitiesFill
CREATE proc [dbo].[WS_CommunitiesFill]
as
begin
	delete from WS_Community_Co
	delete from WS_Communities
	
	declare @companyID int, @tr_db varchar(500), @sql varchar(max)

	declare cur_co cursor for
	select autoID, TreasuryDBName from companies where isnull(active,0) = 1

	open cur_co fetch cur_co into @companyID, @tr_db
	while @@fetch_status=0
	begin	
		select @sql = 'insert into WS_Communities (communities)
			select c.communities 
			from '+@tr_db+'..LD_Communities c
			left outer join WS_Communities t on t.communities=c.communities
			where t.WS_Co_ID is null
			
			insert into WS_Community_Co (WS_Co_ID, company_id, communities_id)
			select t.WS_Co_ID, '+CAST(@companyID as varchar)+', c.communities_id
			from '+@tr_db+'..LD_Communities c
			join WS_Communities t on t.communities=c.communities '
		exec(@sql)

		fetch cur_co into @companyID, @tr_db
	end			
	close cur_co
	deallocate cur_co
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_CompanyAccess]') and xtype = 'P ')  
 drop Procedure WS_CompanyAccess
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



--  exec WS_CompanyAccess 'E', 278
CREATE proc [dbo].[WS_CompanyAccess] @CSI varchar(1), @ContactID int
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#company'))
		drop table #company
	
	create table #company (
		company_id int,
		tr_db varchar(500),
		target_id int
	)
	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#company_access'))
		drop table #company_access
	
	create table #company_access (
		company_id int
	)

	declare @companyID int, @tr_db varchar(500), @SQL varchar(max)

	if( @CSI = 'I' )
	begin
		insert into #company (company_id, target_id)
		select AutoID, -1
		from companies
		where Active = 1
		--select CompanyID, TargetID from Relations where Target='Employee' AND ItemType='Contact' AND ItemID=@ContactID
	end
	else if( @CSI = 'C' )
	begin
		insert into #company (company_id, target_id)
		select CompanyID, TargetID from Relations where Target='Customer' AND ItemType='Contact' AND ItemID=@ContactID
	end
	else if( @CSI = 'S' )	
	begin
		insert into #company (company_id, target_id)
		select CompanyID, TargetID from Relations where Target='Supplier' AND ItemType='Contact' AND ItemID=@ContactID
	end
	else if( @CSI = 'E' )	
	begin
		insert into #company (company_id, target_id)
		select CompanyID, TargetID from Relations where Target='Employee' AND ItemType='Contact' AND ItemID=@ContactID
		
		insert into #company_access (company_id)
		select CompanyID from Relations where Target='Employee' AND ItemType='Contact' AND ItemID=@ContactID
	end
	
	update t set tr_db=TreasuryDBName
	from #company t
	join companies c on c.autoid=t.company_id
	
	declare cur_co cursor for 
	select company_id, tr_db
	from #company
	order by company_id

	open cur_co fetch cur_co into @companyID, @tr_db
	while @@fetch_status=0
	begin
		if( @CSI = 'I' )
		begin
			select @SQL = '
			if exists ( select * from '+@tr_db+'..mluser where isnull(inactive,''N'')=''N'' and contactID = '+cast(@ContactID as varchar)+')
			begin
				insert into #company_access (company_id)	
				select '+cast(@companyID as varchar)+'
			end'			
			exec(@SQL)
			--insert into #company_access (company_id)
			--select CompanyID from Relations where Target='Employee' AND ItemType='Contact' AND ItemID=@ContactID
		end
		else if( @CSI = 'C' )
		begin		
			select @SQL = '	
			if exists( select * 
				from Relations r
				join '+@tr_db+'..CUSTOMERS c on r.TargetID=c.CUSTOMER_ID and r.Target = ''Customer''
				join '+@tr_db+'..ws_custservicecenter w on c.CUSTOMER_ID=w.CUSTOMER_ID				
				where r.CompanyID='+cast(@companyID as varchar)+' and r.ItemID='+cast(@ContactID as varchar)+' and r.ItemType=''Contact'')
			begin
				insert into #company_access (company_id)
				select '+cast(@companyID as varchar)+'
			end'
			exec(@SQL)
		end
		else if( @CSI = 'S' )	
		begin	
			select @SQL = '			
			if exists( select * 
				from Relations r
				join '+@tr_db+'..SUPPLIER_MASTER s on r.TargetID=s.SUPPLIER_ID and r.Target = ''Supplier''
				join '+@tr_db+'..ws_supservicecenter w on s.SUPPLIER=w.SUPPLIER
				where r.CompanyID='+cast(@companyID as varchar)+' and r.ItemID='+cast(@ContactID as varchar)+' and r.ItemType=''Contact'')
			begin
				insert into #company_access (company_id)
				select '+cast(@companyID as varchar)+'
			end'
			exec(@SQL)
		end
		--else if( @CSI = 'E' )	-- Not required because Employees will always only have access to one company based on the relation table
		--begin	
		--	select @SQL = '			
		--	if exists( select * 
		--		from Relations r
		--		join '+@tr_db+'..employee e on r.TargetID=e.emp_no and r.Target = ''Employee''
		--		join '+@tr_db+'..WS_PayGrpServiceCenter w on e.emp_pay_group=w.pg_code
		--		where r.CompanyID='+cast(@companyID as varchar)+' and r.ItemID='+cast(@ContactID as varchar)+' and r.ItemType=''Contact'')
		--	begin
		--		insert into #company_access (company_id)
		--		select '+cast(@companyID as varchar)+'
		--	end'
		--	exec(@SQL)
		--end
		
		fetch cur_co into @companyID, @tr_db
	end
	close cur_co
	deallocate cur_co
	
	select company_id from #company_access
end





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_ContactCustPref_Get]') and xtype = 'P ')  
 drop Procedure WS_ContactCustPref_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
-- exec WS_ContactCustPref_Get 83, 5695
create proc WS_ContactCustPref_Get @session_id int, @contact_id int
as
begin
	delete from WS_Sess_CustContactPref where session_id=@session_id
	
	declare @dim_type varchar(5)
	
	select @dim_type=isnull((select OrderReq_DefDimType from Contact_WebPref where contact_id=@contact_id), 'I')
	
	insert into WS_Sess_CustContactPref (session_id, contact_id, dim_type)
	select @session_id, @contact_id, @dim_type
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_ContactCustPref_Save]') and xtype = 'P ')  
 drop Procedure WS_ContactCustPref_Save
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
-- exec WS_ContactCustPref_Save 83, 5695
create proc WS_ContactCustPref_Save @session_id int, @contact_id int
as
begin	
	declare @dim_type varchar(5)
	
	select @dim_type=isnull((select dim_type from WS_Sess_CustContactPref where session_id=@session_id), 'I')
	
	if exists( select * from Contact_WebPref where contact_id=@contact_id )
	begin
		update Contact_WebPref set OrderReq_DefDimType=@dim_type where contact_id=@contact_id
	end
	else
	begin
		insert into Contact_WebPref (contact_id, OrderReq_DefDimType)
		select @contact_id, @dim_type
	end
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_DB_KBI_Instance]') and xtype = 'P ')  
 drop Procedure WS_DB_KBI_Instance
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec WS_DB_KBI_Instance 1, 7
create proc WS_DB_KBI_Instance @SessionID int, @KBII_ID int
as
begin
	--select s.KBI_Instance_ID, @Run [RUN], isnull(c.companyShortName, 'N/A') AS Company,  kbi.Module, s.KBI,
	--	s.Period, s.[Current], s.[Target Value], s.Previous, 
	--	s.Direction, 
	--	s.Change, s.[Target Change], s.Updated_Date, i.source AS Owner
	--from Security_KBI_SUMMARY as s 
	--join Security_KBI_Instance as i on i.id = s.KBI_Instance_ID 
	--join Security_KBIs as kbi on kbi.id = i.SKBI_ID 
	--left outer join COMPANIES as c on c.AutoID = s.Company_ID
	--where i.ID = @KBII_ID

	update sess
	set sess.Run=0, sess.KBI=s.KBI, sess.Period=s.Period, sess.[Current]=s.[Current], sess.TargetValue=s.[Target Value], 
		sess.previous=s.Previous, sess.Direction=s.Direction, sess.Change=s.Change, sess.TargetChange=s.[Target Change], 
		sess.LastUpdated=s.Updated_Date, sess.Owner=i.source
	from WS_DB_KBI_Session sess
	join Security_KBI_SUMMARY as s on s.KBI_Instance_ID=sess.KBII_ID
	join Security_KBI_Instance as i on i.id = s.KBI_Instance_ID 
	join Security_KBIs as kbi on kbi.id = i.SKBI_ID 
	left outer join COMPANIES as c on c.AutoID = s.Company_ID
	where sess.KBII_ID = @KBII_ID and sess.Session_ID=@SessionID

	select Session_ID, KBII_ID, Run, Company, Module, KBI, Period, [Current], TargetValue, Previous, Direction,
		Change, TargetChange, LastUpdated, Owner
	from WS_DB_KBI_Session
	where Session_ID=@SessionID and KBII_ID=@KBII_ID
end
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_DB_KBI_MasterView]') and xtype = 'P ')  
 drop Procedure WS_DB_KBI_MasterView
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec WS_DB_KBI_MasterView 1
create proc WS_DB_KBI_MasterView @SessionID int
as
begin
	declare @ContactID int, @CompanyID int, @tr_db varchar(50), @nSql nvarchar(max), 
		@username varchar(10), @department varchar(10)

	delete from WS_DB_KBI_Session where Session_ID=@SessionID

	select @ContactID=ContactID, @CompanyID=CompanyID 
	from ws_session 
	where id = @SessionID

	select @tr_db=TreasuryDBName from companies where AutoID=@CompanyID

	set @nSql = 'select @username=NAME, @department=DEPARTMENT 
		from '+@tr_db+'.dbo.mluser 
		where ContactID=@ContactID'
    exec sp_executesql @nSql, N'@username varchar(10) OUT, @department varchar(10) OUT, @ContactID int ', 
		@username OUT, @department OUT, @ContactID
			
	insert into WS_DB_KBI_Session (Session_ID, KBII_ID, Run, Company, Module, KBI, Period, [Current], TargetValue, Previous, Direction,
		Change, TargetChange, LastUpdated, Owner)
	select @SessionID, s.KBI_Instance_ID, cast(0 as bit) [RUN], isnull(c.companyShortName, 'N/A') AS Company,  kbi.Module, s.KBI,
		s.Period, s.[Current], s.[Target Value], s.Previous, 
		s.Direction, 
		s.Change, s.[Target Change], s.Updated_Date, i.source AS Owner
	from Security_KBI_SUMMARY as s 
	join Security_KBI_Instance as i on i.id = s.KBI_Instance_ID 
	join Security_KBIs as kbi on kbi.id = i.SKBI_ID 
	left outer join COMPANIES as c on c.AutoID = s.Company_ID
	where ((i.Target = @username) AND (i.TargetType = 'User') AND (kbi.Active = 'T')) OR
		((i.Target = @department) AND (i.TargetType = 'Department') AND (kbi.Active = 'T')) OR
		((kbi.Active = 'T') AND (i.id in
			(select SKI_ID
			 from Security_KBI_Instance_Target as t
			 where ((Target = @username) AND (TargetType = 'User')) OR ((Target = @department) AND (TargetType = 'Department')))))
	order by kbi.Module, s.KBI
end
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_DB_KBI_Run]') and xtype = 'P ')  
 drop Procedure WS_DB_KBI_Run
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec WS_DB_KBI_Run 1, 7
CREATE proc [dbo].[WS_DB_KBI_Run] @SessionID int, @KBII_ID int
as
begin
	declare @ContactID int, @CompanyID int, @web_db varchar(50), @tr_db varchar(50), @nSql nvarchar(max), 
		@username varchar(10), @department varchar(10), @currentPeriod int, @StartOfFiscalYear datetime,
		@cs date, @ce date, @ps date, @pe date, @CompanySpecific varchar(1),
		@FillProcName varchar(1000), @KBICalcProcName varchar(1000), @flavour varchar(20), @exec_db varchar(50)

	select @ContactID=ContactID, @CompanyID=CompanyID 
	from ws_session 
	where id = @SessionID

	select @web_db=db_name(), @tr_db=TreasuryDBName from companies where AutoID=@CompanyID
	
	set @nSql = 'select @username=NAME, @department=DEPARTMENT 
		from '+@tr_db+'.dbo.mluser 
		where ContactID=@ContactID'
    exec sp_executesql @nSql, N'@username varchar(10) OUT, @department varchar(10) OUT, @ContactID int ', 
		@username OUT, @department OUT, @ContactID

	set @nSql = 'select top 1 @currentPeriod=period 
		from '+@tr_db+'.dbo.AR_PERIODS 
		where end_date > GETDATE() and period <> 13 
		order by end_date asc'
	exec sp_executesql @nSql, N'@currentPeriod int OUT ', @currentPeriod OUT

	exec sp_kbi_goals @KBII_ID, @currentPeriod, @username, @CompanyID

	-- Check if the KBI is currently running
	if not exists(select [startTime] from security_kbi_running where kbiInstance_ID = @KBII_ID )
	begin
		select @nSql = 'select @StartOfFiscalYear = DATEADD(dd,-DATEPART(dd,end_date)+1,END_DATE) 
			from '+@tr_db+'.dbo.GL_PERIODS 
			where PERIOD = 1 and DATEPART(YEAR,END_DATE) = DATEPART(YEAR,GETDATE())'
		exec sp_executesql @nSql, N'@StartOfFiscalYear datetime OUT', @StartOfFiscalYear OUT 

		select @cs = dbo.fn_Get_KBI_Date( [Todate?], Range, RangeScale, Gap, GapScale, 'CS', @currentPeriod, @StartOfFiscalYear)
		from Security_KBI_Instance 
		where ID=@KBII_ID

		select @ce = dbo.fn_Get_KBI_Date( [Todate?], Range, RangeScale, Gap, GapScale, 'CE', @currentPeriod, @StartOfFiscalYear)
		from Security_KBI_Instance 
		where ID=@KBII_ID

		select @ps = dbo.fn_Get_KBI_Date( [Todate?], Range, RangeScale, Gap, GapScale, 'PS', @currentPeriod, @StartOfFiscalYear)
		from Security_KBI_Instance 
		where ID=@KBII_ID

		select @pe = dbo.fn_Get_KBI_Date( [Todate?], Range, RangeScale, Gap, GapScale, 'PE', @currentPeriod, @StartOfFiscalYear)
		from Security_KBI_Instance 
		where ID=@KBII_ID
		

		insert into security_kbi_running (kbiInstance_ID, contactID, startTime) 
		select @KBII_ID, @ContactID, getdate()

		select @FillProcName=k.FillProcName, @KBICalcProcName=k.KBICalcProcName, @flavour=k.flavour 
		from Security_KBI_Instance i
		join Security_KBIs k on k.ID=i.SKBI_ID
		where i.ID=@KBII_ID

		if( @flavour = 'TR' )
			select @exec_db = @tr_db
		else if( @flavour = 'WEB' )
			select @exec_db = @web_db
		
		select @CompanySpecific=CompanySpecific from Security_KBI_Instance where ID=@KBII_ID
		if( isnull(@CompanySpecific,'F') = 'T' )
		begin
			select @nSql = 'exec '+@exec_db+'.dbo.'+@FillProcName+' '''+@web_db+''', '+cast(@CompanyID as varchar(15))+', '''+@username+''', '''+cast(@cs as varchar(50))+''', '''+cast(@ce as varchar(50))+''', '''+cast(@ps as varchar(50))+''', '''+cast(@pe as varchar(50))+''', '+cast(@KBII_ID as varchar(15))
			exec sp_executesql @nSql

			select @nSql = 'exec '+@exec_db+'.dbo.'+@KBICalcProcName+' '''+@web_db+''', '+cast(@CompanyID as varchar(15))+', '''+@username+''', '''+cast(@cs as varchar(50))+''', '''+cast(@ce as varchar(50))+''', '''+cast(@ps as varchar(50))+''', '''+cast(@pe as varchar(50))+''', '+cast(@KBII_ID as varchar(15))
			exec sp_executesql @nSql
		end
		else
		begin
			select @nSql = 'exec '+@exec_db+'.dbo.'+@FillProcName+' '''+@web_db+''', -1, '''+cast(@CompanyID as varchar(15))+''', '''+cast(@cs as varchar(50))+''', '''+cast(@ce as varchar(50))+''', '''+cast(@ps as varchar(50))+''', '''+cast(@pe as varchar(50))+''', '+cast(@KBII_ID as varchar(15))
			exec sp_executesql @nSql

			select @nSql = 'exec '+@exec_db+'.dbo.'+@KBICalcProcName+' '''+@web_db+''', -1, '''+cast(@CompanyID as varchar(15))+''', '''+cast(@cs as varchar(50))+''', '''+cast(@ce as varchar(50))+''', '''+cast(@ps as varchar(50))+''', '''+cast(@pe as varchar(50))+''', '+cast(@KBII_ID as varchar(15))
			exec sp_executesql @nSql
		end

		delete security_kbi_running where kbiInstance_ID = @KBII_ID
	end	
end
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_DB_KBI_Select]') and xtype = 'P ')  
 drop Procedure WS_DB_KBI_Select
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec WS_DB_KBI_Select 1, 0
create proc WS_DB_KBI_Select @SessionID int, @Select bit
as
begin
	update WS_DB_KBI_Session
	set Run=isnull(@Select,0)
	where Session_ID=@SessionID
end
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_DM_AddAttachment]') and xtype = 'P ')  
 drop Procedure WS_DM_AddAttachment
Go
SET QUOTED_IDENTIFIER ON
Go
SET ANSI_NULLS ON 
Go
 
 
-- exec WS_DM_AddAttachment 12, 7, 'TR', 'customers.customer_id', 41, 'FileName.pdf', null, 20, 'Comments'
create proc WS_DM_AddAttachment @CompanyID int, @ContactID int, @DBFlavour varchar(5), @TableDotField varchar(60), @IDValue int, 
	@FileName varchar(255), @FileData varbinary(max), @ContextItem_ID int, @Comment varchar(max), @ExternalOnly bit = 1
as
begin	
	declare @nsql nvarchar(max), @dm_db varchar(50), @tr_db varchar(50), @InternalOnly bit, @USE_DM bit, @FileRepository_ID int, @RelType varchar(15)
	
	select @USE_DM=ISNULL((select isnull(USE_DM_ON_PORTAL,0) from system_ctrl), 0)
	
	select @dm_db=dmdbname, @tr_db=TreasuryDBName from COMPANIES where AutoID=@CompanyID
	
	select @InternalOnly=case when ISNULL(@ExternalOnly,1) = 1 then 0 else 1 end
	
	if( @USE_DM = 1 )
	begin
		select @nsql = '
			if exists (select * from tempdb..sysobjects where id = object_id(N''tempdb..#tmp_exec''))
			drop table #tmp_exec

			CREATE TABLE #tmp_exec (   
				id int null
			)
			
			declare @FileRepository_ID int
				
			insert #tmp_exec
			exec '+@dm_db+'.dbo.CFS_AttachFile @FileName, @FileData, @ContactID, ''F'', null, null, @InternalOnly,
				''D'', null, null, null, ''F'', -1 
				
			select @FileRepository_ID=id from #tmp_exec	
			
			exec '+@dm_db+'.dbo.CFS_CreateFileLink @FileRepository_ID, @CompanyID, @DBFlavour, @TableDotField, @IDValue, @ContextItem_ID, 1, 
				''ATT'', @Comment, null, ''Attached'', null, null	
			'
		exec sp_executesql @nsql, N'@FileName varchar(255), @FileData varbinary(max), @ContactID int, @InternalOnly bit, 
			@CompanyID int, @DBFlavour varchar(5), @TableDotField varchar(60), @IDValue int, @ContextItem_ID int, @Comment varchar(max) ', 
			@FileName, @FileData, @ContactID, @InternalOnly, @CompanyID, @DBFlavour, @TableDotField, @IDValue, @ContextItem_ID, @Comment	
	end
	else 
	begin
		if( @TableDotField = 'WS_Sess_InvcSubm.SessionID' )
			select @RelType = 'WSINV_Sess'
		else if( @TableDotField = 'WS_INV_HEADER.WS_INV_ID' )
			select @RelType = 'WSINV'
		else if( @TableDotField = 'WS_PCPO_Sess_Hdr.pk_id' )
			select @RelType = 'WSPO_Sess'
		else if( @TableDotField = 'WS_PCPO_Hdr.ws_pcpo_id' )
			select @RelType = 'WSPO'
		else if( @TableDotField = 'WS_EMP_TimeClock.id' )
			select @RelType = 'ETC'
	
		select @nsql = '
			insert into '+@tr_db+'.dbo.CFS_FileRepository ([FileName], FileData, AddedBy, DateAdded, FileType, 
				Mime_type, InternalOnly, FileStatus, FileOrigin, OriginLink, OriginLink2, permanent_tf, CurrentTCSE_ID)
			select @FileName, @FileData, @ContactID, GETDATE(), ''F'', null, @InternalOnly, ''D'', null, null, null, ''F'', -1
			
			select @FileRepository_ID=SCOPE_IDENTITY()
			
			update r
			set r.Mime_Type=m.MimeType
			from '+@tr_db+'.dbo.CFS_FileRepository r 
			join '+@tr_db+'.dbo.CFS_MimeType m on m.Extension=r.Ext
			where r.ID=@FileRepository_ID
			
			insert into '+@tr_db+'.dbo.CFS_FileReleations (FileRepository_ID, RelType, RelType_ID, ContextItemID, FileOrigin, 
				TargetPrint, Comment, LinkOrigin)
			select @FileRepository_ID, @RelType, @IDValue, @ContextItem_ID, ''WEB'', ''ATT'', @Comment, ''Attached'''
		exec sp_executesql @nsql, N'@FileRepository_ID int, @RelType varchar(15), @FileName varchar(255), @FileData varbinary(max), 
			@ContactID int, @InternalOnly bit, @IDValue int, @ContextItem_ID int, @Comment varchar(max) ', 
			@FileRepository_ID, @RelType, @FileName, @FileData, @ContactID, @InternalOnly, @IDValue, @ContextItem_ID, @Comment	
	end
end 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_DM_AttachmentViewLabel]') and xtype = 'P ')  
 drop Procedure WS_DM_AttachmentViewLabel
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
 
-- exec WS_DM_AttachmentViewLabel 12, 'customers.customer_id', 41, 1
create proc WS_DM_AttachmentViewLabel @CompanyID int, @TableDotField varchar(60), @IDValue int, @ExternalOnly bit = 1
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Attachments'))
		drop table #Attachments

	create table #Attachments (   		
		FileRepository_ID int
	)
	
	declare @nsql nvarchar(max), @dm_db varchar(50), @tr_db varchar(50), @USE_DM bit, @RelType varchar(15)
	
	select @USE_DM=ISNULL((select isnull(USE_DM_ON_PORTAL,0) from system_ctrl), 0)
	
	select @dm_db=dmdbname, @tr_db=TreasuryDBName from COMPANIES where AutoID=@CompanyID
	
	if( @USE_DM = 1 )
	begin
		select @nsql = '
		insert into #Attachments (FileRepository_ID)
		select r.ID
		from '+@dm_db+'.dbo.CFS_FileRepository AS r 
		join '+@dm_db+'.dbo.CFS_FileLink AS l ON l.FileRepository_ID = r.ID
		left outer join ContextItem c on c.ID=l.ContextItem_ID
		where isnull(r.InternalOnly,0) = case when isnull(@ExternalOnly,1) = 1 then 0 else isnull(r.InternalOnly,0) end 
			and l.IDValue = @IDValue and l.TableDotField=@TableDotField and l.companyID=@CompanyID '
		
		exec sp_executesql @nsql, N'@IDValue int, @TableDotField varchar(60), @CompanyID int, @ExternalOnly bit ', 
			@IDValue, @TableDotField, @CompanyID, @ExternalOnly
	end
	else
	begin
		if( @TableDotField = 'WS_Sess_InvcSubm.SessionID' )
			select @RelType = 'WSINV_Sess'
		else if( @TableDotField = 'WS_INV_HEADER.WS_INV_ID' )
			select @RelType = 'WSINV'
		else if( @TableDotField = 'WS_PCPO_Sess_Hdr.pk_id' )
			select @RelType = 'WSPO_Sess'
		else if( @TableDotField = 'WS_PCPO_Hdr.ws_pcpo_id' )
			select @RelType = 'WSPO'
		else if( @TableDotField = 'WS_EMP_TimeClock.id' )
			select @RelType = 'ETC'
			
		select @nsql = '
		insert into #Attachments (FileRepository_ID)
		select r.ID
		from '+@tr_db+'.dbo.CFS_FileRepository AS r 
		join '+@tr_db+'.dbo.CFS_FileReleations AS l ON l.FileRepository_ID = r.ID
		left outer join ContextItem c on c.ID=l.ContextItemID
		where isnull(r.InternalOnly,0) = case when isnull(@ExternalOnly,1) = 1 then 0 else isnull(r.InternalOnly,0) end 
			and l.RelType_ID = @IDValue and l.RelType=@RelType '
		
		exec sp_executesql @nsql, N'@IDValue int, @RelType varchar(15), @ExternalOnly bit ', 
			@IDValue, @RelType, @ExternalOnly
	end
	
	select cast('View ('+cast(isnull((select COUNT(*) from #Attachments), 0) as varchar(17))+')' as varchar(25)) [Label]
end
 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_DM_ClearAttachments]') and xtype = 'P ')  
 drop Procedure WS_DM_ClearAttachments
Go
SET QUOTED_IDENTIFIER ON
Go
SET ANSI_NULLS ON 
Go
 
 

CREATE proc [dbo].[WS_DM_ClearAttachments] @CompanyID int, @TableDotField varchar(60), @IDValue int
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Attachments'))
		drop table #Attachments

	create table #Attachments (   		
		FileRepository_ID int,
		FileName varchar(255),
		TopicalArea varchar(100),
		DateAdded datetime,
		Contact varchar(100),
		InternalOnly bit,
		Comment varchar(max),
		Permanent bit,
		mime_type varchar(250),
		ext varchar(255)
	)
	
	declare @nsql nvarchar(max), @dm_db varchar(50), @tr_db varchar(50), @USE_DM bit, @RelType varchar(15)
	
	select @USE_DM=ISNULL((select isnull(USE_DM_ON_PORTAL,0) from system_ctrl), 0)
	
	select @dm_db=dmdbname, @tr_db=TreasuryDBName from COMPANIES where AutoID=@CompanyID
		
	if( @USE_DM = 1 )
	begin
		select @nsql = '
		insert into #Attachments (FileRepository_ID)
		select r.ID 
		from '+@dm_db+'.dbo.CFS_FileRepository AS r 
		join '+@dm_db+'.dbo.CFS_FileLink AS l ON l.FileRepository_ID = r.ID
		where l.IDValue = @IDValue and l.TableDotField=@TableDotField and l.companyID=@CompanyID 
		
		delete '+@dm_db+'.dbo.CFS_FileLink 
		where IDValue = @IDValue and TableDotField=@TableDotField and companyID=@CompanyID 
		
		delete r
		from '+@dm_db+'.dbo.CFS_FileRepository AS r 
		join #Attachments a on a.FileRepository_ID=r.ID '
		
		exec sp_executesql @nsql, N'@IDValue int, @TableDotField varchar(60), @CompanyID int ', @IDValue, @TableDotField, @CompanyID
	end
	else
	begin
		if( @TableDotField = 'WS_Sess_InvcSubm.SessionID' )
			select @RelType = 'WSINV_Sess'
		else if( @TableDotField = 'WS_INV_HEADER.WS_INV_ID' )
			select @RelType = 'WSINV'
		else if( @TableDotField = 'WS_PCPO_Sess_Hdr.pk_id' )
			select @RelType = 'WSPO_Sess'
		else if( @TableDotField = 'WS_PCPO_Hdr.ws_pcpo_id' )
			select @RelType = 'WSPO'
		else if( @TableDotField = 'WS_EMP_TimeClock.id' )
			select @RelType = 'ETC'
		
		select @nsql = '
		insert into #Attachments (FileRepository_ID)
		select r.ID 
		from '+@tr_db+'.dbo.CFS_FileRepository AS r 
		join '+@tr_db+'.dbo.CFS_FileReleations AS l ON l.FileRepository_ID = r.ID
		where l.RelType_ID = @IDValue and l.RelType=@RelType
		
		delete '+@tr_db+'.dbo.CFS_FileReleations 
		where RelType_ID = @IDValue and RelType=@RelType
		
		delete r
		from '+@tr_db+'.dbo.CFS_FileRepository AS r 
		join #Attachments a on a.FileRepository_ID=r.ID '
		
		exec sp_executesql @nsql, N'@IDValue int, @RelType varchar(15) ', @IDValue, @RelType
	end
end 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_DM_DeleteAttachment]') and xtype = 'P ')  
 drop Procedure WS_DM_DeleteAttachment
Go
SET QUOTED_IDENTIFIER ON
Go
SET ANSI_NULLS ON 
Go
 
-- exec WS_DM_DeleteAttachment 12, 4
CREATE proc [dbo].[WS_DM_DeleteAttachment] @CompanyID int, @FileRepository_ID int 
as
begin
	declare @nsql nvarchar(max), @dm_db varchar(50), @COUNT int, @message varchar(50), @success varchar(50), @unsuccess varchar(50),
		@tr_db varchar(50), @USE_DM bit, @RelType varchar(15)
	
	select @USE_DM=ISNULL((select isnull(USE_DM_ON_PORTAL,0) from system_ctrl), 0)
	
	select @dm_db=dmdbname, @tr_db=TreasuryDBName from COMPANIES where AutoID=@CompanyID
	
	select @success='Delete was successful.', @unsuccess='Delete was unsuccessful.'
	
	if( @USE_DM = 1 )
	begin
		select @nsql = '		
		if not exists( select * from '+@dm_db+'.dbo.CFS_FileRepository where ISNULL(permanent_tf,''F'') = ''T'' and ID = @FileRepository_ID )
		begin
			delete '+@dm_db+'.dbo.CFS_FileLink where FileRepository_ID = @FileRepository_ID
			delete '+@dm_db+'.dbo.CFS_FileRepository where ID = @FileRepository_ID
			select @COUNT=@@ROWCOUNT
		end 
		select @COUNT=isnull(@COUNT,0) '
		exec sp_executesql @nsql, N'@FileRepository_ID int, @COUNT int OUT ', @FileRepository_ID, @COUNT OUT
	end
	else
	begin			
		select @nsql = '		
		if not exists( select * from '+@tr_db+'.dbo.CFS_FileRepository where ISNULL(permanent_tf,''F'') = ''T'' and ID = @FileRepository_ID )
		begin
			delete '+@tr_db+'.dbo.CFS_FileReleations where FileRepository_ID = @FileRepository_ID
			delete '+@tr_db+'.dbo.CFS_FileRepository where ID = @FileRepository_ID
			select @COUNT=@@ROWCOUNT
		end 
		select @COUNT=isnull(@COUNT,0) '
		exec sp_executesql @nsql, N'@FileRepository_ID int, @COUNT int OUT ', @FileRepository_ID, @COUNT OUT
	end
	
	if( @COUNT > 0 )
		select @message=@success
	else
		select @message=@unsuccess
		
	select @message [Message]
end 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_DM_DownloadAttachment]') and xtype = 'P ')  
 drop Procedure WS_DM_DownloadAttachment
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
-- exec WS_DM_DownloadAttachment 12, 4
CREATE proc WS_DM_DownloadAttachment @CompanyID int, @FileRepository_ID int 
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Attachment'))
		drop table #Attachment

	create table #Attachment (   		
		FileData varbinary(max),
		FileName varchar(255),
		MimeType varchar(200)
	)
	
	declare @nsql nvarchar(max), @dm_db varchar(50), @tr_db varchar(50), @USE_DM bit
	
	select @USE_DM=ISNULL((select isnull(USE_DM_ON_PORTAL,0) from system_ctrl), 0)
	
	select @dm_db=dmdbname, @tr_db=TreasuryDBName from COMPANIES where AutoID=@CompanyID
	
	if( @USE_DM = 1 )
	begin
		select @nsql = '	
		insert into #Attachment (FileData, FileName, MimeType)
		select FileData, FileName, Mime_type
		from '+@dm_db+'.dbo.cfs_filerepository
		where ID=@FileRepository_ID'
		exec sp_executesql @nsql, N'@FileRepository_ID int ', @FileRepository_ID
	end
	else
	begin
		select @nsql = '	
		insert into #Attachment (FileData, FileName, MimeType)
		select FileData, FileName, Mime_type
		from '+@tr_db+'.dbo.cfs_filerepository
		where ID=@FileRepository_ID'
		exec sp_executesql @nsql, N'@FileRepository_ID int ', @FileRepository_ID
	end
	
	select FileData, FileName, MimeType from #Attachment
end 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_DM_GetTopicalArea]') and xtype = 'P ')  
 drop Procedure WS_DM_GetTopicalArea
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec WS_DM_GetTopicalArea 'S_PC_SubcPaySub', 12
CREATE proc [dbo].[WS_DM_GetTopicalArea] @calling_function varchar(100) = '', @company_id int = -1
as
begin
	declare @tr_db varchar(50), @sql varchar(max)
	select @tr_db=treasurydbname from companies where autoid=@company_id
	
	if( isnull(@calling_function,'') = 'S_PC_SubcPaySub' )
	begin
		select @sql = 
		'select distinct ci.ID, ci.Name
		from ContextGroup cg
		join ContextUsage cu on cg.ID = cu.ContextGroupID 
		join ContextItem ci ON cu.ContextItemID = ci.ID
		join '+@tr_db+'.dbo.SUPPLIER_SUBCON_INSUR_TYPE s on s.contextitemid=ci.id
		where cg.Name = ''Document Management''
		order by ci.Name'
		exec(@sql)
	end
	else
	begin
		select ci.ID, ci.Name
		from ContextGroup cg
		join ContextUsage cu on cg.ID = cu.ContextGroupID 
		join ContextItem ci ON cu.ContextItemID = ci.ID
		where cg.Name = 'Document Management'
		order by ci.Name
	end	
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_DM_ViewAttachments]') and xtype = 'P ')  
 drop Procedure WS_DM_ViewAttachments
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
 
-- exec WS_DM_ViewAttachments 12, 'customers.customer_id', 41, 1
create proc WS_DM_ViewAttachments @CompanyID int, @TableDotField varchar(60), @IDValue int, @ExternalOnly bit = 1
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Attachments'))
		drop table #Attachments

	create table #Attachments (   		
		FileRepository_ID int,
		FileName varchar(255),
		TopicalArea varchar(100),
		DateAdded datetime,
		Contact varchar(100),
		InternalOnly bit,
		Comment varchar(max),
		Permanent bit,
		mime_type varchar(250),
		ext varchar(255)
	)
	
	declare @nsql nvarchar(max), @dm_db varchar(50), @tr_db varchar(50), @USE_DM bit, @RelType varchar(15)
	
	select @USE_DM=ISNULL((select isnull(USE_DM_ON_PORTAL,0) from system_ctrl), 0)
	
	select @dm_db=dmdbname, @tr_db=TreasuryDBName from COMPANIES where AutoID=@CompanyID
	
	if( @USE_DM = 1 )
	begin
		select @nsql = '
		insert into #Attachments (FileRepository_ID, FileName, TopicalArea, DateAdded, Contact, InternalOnly, 
			Comment, Permanent, mime_type, ext)
		select r.ID [FileRepository_ID], r.FileName, c.Name [TopicalArea], r.DateAdded, 
			isnull(co.KnownAs, isnull(co.FirstName,'''')+ '' ''+isnull(co.LastName,'''')), r.InternalOnly, 
			l.Comment, case when isnull(r.permanent_tf,''F'') = ''T'' then 1 else 0 end [Permanent], r.mime_type, r.ext
		from '+@dm_db+'.dbo.CFS_FileRepository AS r 
		join '+@dm_db+'.dbo.CFS_FileLink AS l ON l.FileRepository_ID = r.ID
		join contact co on co.id=r.contactid
		left outer join ContextItem c on c.ID=l.ContextItem_ID
		where isnull(r.InternalOnly,0) = case when isnull(@ExternalOnly,1) = 1 then 0 else isnull(r.InternalOnly,0) end 
			and l.IDValue = @IDValue and l.TableDotField=@TableDotField and l.companyID=@CompanyID
		order by r.DateAdded'
		
		exec sp_executesql @nsql, N'@IDValue int, @TableDotField varchar(60), @CompanyID int, @ExternalOnly bit ', 
			@IDValue, @TableDotField, @CompanyID, @ExternalOnly
	end
	else
	begin
		if( @TableDotField = 'WS_Sess_InvcSubm.SessionID' )
			select @RelType = 'WSINV_Sess'
		else if( @TableDotField = 'WS_INV_HEADER.WS_INV_ID' )
			select @RelType = 'WSINV'
		else if( @TableDotField = 'WS_PCPO_Sess_Hdr.pk_id' )
			select @RelType = 'WSPO_Sess'
		else if( @TableDotField = 'WS_PCPO_Hdr.ws_pcpo_id' )
			select @RelType = 'WSPO'
		else if( @TableDotField = 'WS_EMP_TimeClock.id' )
			select @RelType = 'ETC'
	
		select @nsql = '
		insert into #Attachments (FileRepository_ID, FileName, TopicalArea, DateAdded, Contact, InternalOnly, 
			Comment, Permanent, mime_type, ext)
		select r.ID [FileRepository_ID], r.FileName, c.Name [TopicalArea], r.DateAdded, 
			isnull(co.KnownAs, isnull(co.FirstName,'''')+ '' ''+isnull(co.LastName,'''')), r.InternalOnly, 
			l.Comment, case when isnull(r.permanent_tf,''F'') = ''T'' then 1 else 0 end [Permanent], r.mime_type, r.ext
		from '+@tr_db+'.dbo.CFS_FileRepository AS r 
		join '+@tr_db+'.dbo.CFS_FileReleations AS l ON l.FileRepository_ID = r.ID
		join contact co on co.id=r.addedby
		left outer join ContextItem c on c.ID=l.ContextItemID
		where isnull(r.InternalOnly,0) = case when isnull(@ExternalOnly,1) = 1 then 0 else isnull(r.InternalOnly,0) end 
			and l.RelType_ID = @IDValue and l.RelType=@RelType
		order by r.DateAdded
		
		update a
		set a.Mime_Type=m.MimeType
		from #Attachments a
		join '+@tr_db+'.dbo.CFS_FileRepository r on r.ID=a.FileRepository_ID
		join '+@tr_db+'.dbo.CFS_MimeType m on m.Extension=r.Ext '
		
		exec sp_executesql @nsql, N'@IDValue int, @RelType varchar(15), @ExternalOnly bit ', 
			@IDValue, @RelType, @ExternalOnly
	end
	
	select FileRepository_ID, FileName, TopicalArea, DateAdded, Contact, InternalOnly, Comment, Permanent, mime_type, ext 
	from #Attachments		
	order by DateAdded desc
end 



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_AP_Get]') and xtype = 'P ')  
 drop Procedure WS_FLEM_AP_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

-- exec WS_FLEM_AP_Get 12
create proc WS_FLEM_AP_Get @CompanyId int
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ap_inv_header'))
		drop table #ap_inv_header

	create table #ap_inv_header (   
		company_id int,
		ap_inv_header_id int,
		pri_id int,
		time_ticket varchar(15),
		InvDate datetime,
		InvNo varchar(15),
		SupplierCode varchar(10),
		PONo varchar(20),
		InvAmt decimal(19,4),
		MarkupAmt decimal(19,4),
		BillAmt decimal(19,4)
	)

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ap_gl_alloc'))
		drop table #ap_gl_alloc

	create table #ap_gl_alloc (   
		company_id int,
		ap_gl_alloc_id int,
		ap_inv_header_id int,
		Seq int, 
		Description varchar(150),
		Reference varchar(150),
		Amount decimal(19,4),
		MarkupPct decimal(19,4),
		MarkupAmt decimal(19,4),
		BillAmt decimal(19,4)
	)

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#project'))
		drop table #project

	create table #project (   
		company_id int,
		pri_id int
	)

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#project_markup'))
		drop table #project_markup

	create table #project_markup (   
		company_id int,
		pri_id int,
		lem_comp varchar(1),
		pct money
	)

	declare @nSQL nvarchar(max), @tr_db varchar(50), @company_id int
	
	declare cur_co cursor for	
	select treasurydbname, autoid 
	from companies
	where autoid=@CompanyId
	
	open cur_co 
	fetch cur_co into @tr_db, @company_id
	while @@fetch_status=0
	begin
		select @nSQL = '
		insert into #ap_inv_header (company_id, ap_inv_header_id, pri_id)
		select @company_id, a.ap_inv_header_id, a.NonProjPO_Pri_ID 
		from '+@tr_db+'.dbo.ap_inv_header a
		where a.ACCRUAL_FLAG=''A'' and isnull(a.NonProjPO_Pri_ID,-1) <> -1 

		insert into #ap_inv_header (company_id, ap_inv_header_id, pri_id)
		select @company_id, a.ap_inv_header_id, p.pri_num 
		from '+@tr_db+'.dbo.ap_inv_header a
		left outer join #ap_inv_header t on t.ap_inv_header_id=a.ap_inv_header_id and t.company_id=@company_id
		join '+@tr_db+'.dbo.po_header p on p.po_id=a.po_id
		where a.ACCRUAL_FLAG=''A'' and isnull(p.pri_num,-1) <> -1 and t.ap_inv_header_id is null

		update t
		set t.time_ticket=(select top 1 time_ticket 
						   from '+@tr_db+'.dbo.ap_gl_alloc d 
						   where d.ap_inv_header_id=t.ap_inv_header_id and time_ticket is not null and t.company_id=@company_id)
		from #ap_inv_header t
		where t.company_id=@company_id

		delete from #ap_inv_header where time_ticket is not null and company_id=@company_id

		delete a 
		from #ap_inv_header a 
		where (select count(*) 
			   from '+@tr_db+'.dbo.ap_gl_alloc d 
			   where d.ap_inv_header_id=a.ap_inv_header_id and d.billable = ''T'' and a.company_id=@company_id) = 0 
		and a.company_id=@company_id
	
		insert into #project (company_id, pri_id)
		select distinct company_id, pri_id 
		from #ap_inv_header
		where company_id=@company_id

		insert into #project_markup (company_id, pri_id, lem_comp, pct)
		select @company_id, t.pri_id, ''L'', isnull(Markup_Labor_Pct,0)
		from #project t
		join '+@tr_db+'.dbo.proj_header p on p.pri_id=t.pri_id and t.company_id=@company_id
		union
		select @company_id, t.pri_id, ''E'', isnull(Markup_Eqip_Pct,0)
		from #project t
		join '+@tr_db+'.dbo.proj_header p on p.pri_id=t.pri_id and t.company_id=@company_id
		union
		select @company_id, t.pri_id, ''M'', isnull(Markup_Mat_Pct,0)
		from #project t
		join '+@tr_db+'.dbo.proj_header p on p.pri_id=t.pri_id and t.company_id=@company_id
		union
		select @company_id, t.pri_id, ''O'', isnull(Markup_Other_Pct,0)
		from #project t
		join '+@tr_db+'.dbo.proj_header p on p.pri_id=t.pri_id and t.company_id=@company_id
		union
		select @company_id, t.pri_id, ''S'', isnull(Markup_Sub_Pct,0)
		from #project t
		join '+@tr_db+'.dbo.proj_header p on p.pri_id=t.pri_id and t.company_id=@company_id
	
 
		update t
		set t.InvDate=h.inv_date, t.InvNo=h.inv_no, t.SupplierCode=h.supplier, t.PONo=p.po, 
			t.InvAmt=0, t.MarkupAmt=0, t.BillAmt=0
		from #ap_inv_header t
		join '+@tr_db+'.dbo.ap_inv_header h on h.ap_inv_header_id=t.ap_inv_header_id
		left outer join '+@tr_db+'.dbo.po_header p on p.po_id=h.po_id
		left outer join '+@tr_db+'.dbo.proj_header ph1 on ph1.pri_id=p.pri_num
		left outer join '+@tr_db+'.dbo.proj_header ph2 on ph2.pri_id=h.NonProjPO_Pri_ID
		where t.company_id=@company_id

		

		insert into #ap_gl_alloc (company_id, ap_gl_alloc_id, ap_inv_header_id, Seq, Description, Reference, Amount, MarkupPct, MarkupAmt, BillAmt)
		select @company_id, d.ap_gl_alloc_id, d.ap_inv_header_id, d.seq, pd.part_no_desc [Description], d.reference, d.amount, m.pct [MarkupPct], 
			round(d.amount * (m.pct * .01), 2) [MarkupAmt], d.amount + round(d.amount * (m.pct * .01), 2) [BillAmt]
		from #ap_inv_header t
		join '+@tr_db+'.dbo.ap_gl_alloc d on d.ap_inv_header_id=t.ap_inv_header_id
		join #project_markup m on m.pri_id=t.pri_id and m.lem_comp=d.lem_comp and m.company_id=t.company_id
		join '+@tr_db+'.dbo.po_rec_detail rd on rd.po_rec_detail_id=d.po_rec_detail_id
		join '+@tr_db+'.dbo.po_detail pd on pd.po_detail_id=rd.po_detail_id
		where isnull(d.billable,''F'') = ''T'' and t.company_id=@company_id

		delete t 
		from #ap_gl_alloc t 
		join '+@tr_db+'.dbo.WS_PCDL_LEM_AP d on d.ap_gl_alloc_id = t.ap_gl_alloc_id
		where t.company_id=@company_id

		delete t 
		from #ap_gl_alloc t 
		join WS_SyncAPDet d on d.ap_gl_alloc_id = t.ap_gl_alloc_id and d.CompanyId=t.company_id and isnull(d.Deleted,0)=0
		join WS_Sync s on s.syncId=d.syncId
		where t.company_id=@company_id and s.status <> ''Cancelled''

		delete h
		from #ap_inv_header h
		where h.company_id=@company_id and 
			(select count(*) from #ap_gl_alloc d where d.ap_inv_header_id=h.ap_inv_header_id and d.company_id=@company_id) = 0

		update h
		set h.InvAmt=isnull((select sum(d.Amount) from #ap_gl_alloc d where d.ap_inv_header_id=h.ap_inv_header_id and d.company_id=@company_id),0),
			h.MarkupAmt=isnull((select sum(d.MarkupAmt) from #ap_gl_alloc d where d.ap_inv_header_id=h.ap_inv_header_id and d.company_id=@company_id),0),
			h.BillAmt=isnull((select sum(d.BillAmt) from #ap_gl_alloc d where d.ap_inv_header_id=h.ap_inv_header_id and d.company_id=@company_id),0)
		from #ap_inv_header h
		where h.company_id=@company_id'
		exec sp_executesql @nSQL, N'@company_id int ', @company_id
		
		fetch cur_co into @tr_db, @company_id
	end			
	close cur_co
	deallocate cur_co
	
		
	select company_id, ap_inv_header_id, pri_id, InvDate, InvNo, SupplierCode, PONo, InvAmt, MarkupAmt, BillAmt
	from #ap_inv_header
	order by company_id, ap_inv_header_id
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_APDet_Get]') and xtype = 'P ')  
 drop Procedure WS_FLEM_APDet_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

-- exec WS_FLEM_APDet_Get 12
create proc WS_FLEM_APDet_Get @CompanyId int
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ap_inv_header'))
		drop table #ap_inv_header

	create table #ap_inv_header (   
		company_id int,
		ap_inv_header_id int,
		pri_id int,
		time_ticket varchar(15)
	)

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ap_gl_alloc'))
		drop table #ap_gl_alloc

	create table #ap_gl_alloc (   
		company_id int,
		ap_gl_alloc_id int,
		ap_inv_header_id int,
		Seq int, 
		Description varchar(150),
		Reference varchar(150),
		Amount decimal(19,4),
		MarkupPct decimal(19,4),
		MarkupAmt decimal(19,4),
		BillAmt decimal(19,4),
		lv1id int,
		lv2id int,
		lv3id int,
		lv4id int
	)

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#project'))
		drop table #project

	create table #project (   
		company_id int,
		pri_id int
	)

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#project_markup'))
		drop table #project_markup

	create table #project_markup (   
		company_id int,
		pri_id int,
		lem_comp varchar(1),
		pct money
	)

	declare @nSQL nvarchar(max), @tr_db varchar(50), @company_id int
	
	declare cur_co cursor for	
	select treasurydbname, autoid 
	from companies
	where autoid=@CompanyId
	
	open cur_co 
	fetch cur_co into @tr_db, @company_id
	while @@fetch_status=0
	begin
		select @nSQL = '
		insert into #ap_inv_header (company_id, ap_inv_header_id, pri_id)
		select @company_id, a.ap_inv_header_id, a.NonProjPO_Pri_ID 
		from '+@tr_db+'.dbo.ap_inv_header a
		where a.ACCRUAL_FLAG=''A'' and isnull(a.NonProjPO_Pri_ID,-1) <> -1 

		insert into #ap_inv_header (company_id, ap_inv_header_id, pri_id)
		select @company_id, a.ap_inv_header_id, p.pri_num 
		from '+@tr_db+'.dbo.ap_inv_header a
		left outer join #ap_inv_header t on t.ap_inv_header_id=a.ap_inv_header_id and t.company_id=@company_id
		join '+@tr_db+'.dbo.po_header p on p.po_id=a.po_id
		where a.ACCRUAL_FLAG=''A'' and isnull(p.pri_num,-1) <> -1 and t.ap_inv_header_id is null

		update t
		set t.time_ticket=(select top 1 time_ticket 
						   from '+@tr_db+'.dbo.ap_gl_alloc d 
						   where d.ap_inv_header_id=t.ap_inv_header_id and time_ticket is not null and t.company_id=@company_id)
		from #ap_inv_header t
		where t.company_id=@company_id

		delete from #ap_inv_header where time_ticket is not null and company_id=@company_id

		delete a 
		from #ap_inv_header a 
		where (select count(*) 
			   from '+@tr_db+'.dbo.ap_gl_alloc d 
			   where d.ap_inv_header_id=a.ap_inv_header_id and d.billable = ''T'' and a.company_id=@company_id) = 0 
		and a.company_id=@company_id
	
		insert into #project (company_id, pri_id)
		select distinct company_id, pri_id 
		from #ap_inv_header
		where company_id=@company_id

		insert into #project_markup (company_id, pri_id, lem_comp, pct)
		select @company_id, t.pri_id, ''L'', isnull(Markup_Labor_Pct,0)
		from #project t
		join '+@tr_db+'.dbo.proj_header p on p.pri_id=t.pri_id and t.company_id=@company_id
		union
		select @company_id, t.pri_id, ''E'', isnull(Markup_Eqip_Pct,0)
		from #project t
		join '+@tr_db+'.dbo.proj_header p on p.pri_id=t.pri_id and t.company_id=@company_id
		union
		select @company_id, t.pri_id, ''M'', isnull(Markup_Mat_Pct,0)
		from #project t
		join '+@tr_db+'.dbo.proj_header p on p.pri_id=t.pri_id and t.company_id=@company_id
		union
		select @company_id, t.pri_id, ''O'', isnull(Markup_Other_Pct,0)
		from #project t
		join '+@tr_db+'.dbo.proj_header p on p.pri_id=t.pri_id and t.company_id=@company_id
		union
		select @company_id, t.pri_id, ''S'', isnull(Markup_Sub_Pct,0)
		from #project t
		join '+@tr_db+'.dbo.proj_header p on p.pri_id=t.pri_id and t.company_id=@company_id
	
		insert into #ap_gl_alloc (company_id, ap_gl_alloc_id, ap_inv_header_id, Seq, Description, Reference, Amount, MarkupPct, MarkupAmt, BillAmt,
			lv1id, lv2id, lv3id, lv4id)
		select @company_id, d.ap_gl_alloc_id, d.ap_inv_header_id, d.seq, pd.part_no_desc [Description], d.reference, d.amount, m.pct [MarkupPct], 
			round(d.amount * (m.pct * .01), 2) [MarkupAmt], d.amount + round(d.amount * (m.pct * .01), 2) [BillAmt],
			d.lv1id, d.lv2id, d.lv3id, d.lv4id
		from #ap_inv_header t
		join '+@tr_db+'.dbo.ap_gl_alloc d on d.ap_inv_header_id=t.ap_inv_header_id
		join #project_markup m on m.pri_id=t.pri_id and m.lem_comp=d.lem_comp and m.company_id=t.company_id
		join '+@tr_db+'.dbo.po_rec_detail rd on rd.po_rec_detail_id=d.po_rec_detail_id
		join '+@tr_db+'.dbo.po_detail pd on pd.po_detail_id=rd.po_detail_id
		where isnull(d.billable,''F'') = ''T'' and t.company_id=@company_id
		
		delete t 
		from #ap_gl_alloc t 
		join '+@tr_db+'.dbo.WS_PCDL_LEM_AP d on d.ap_gl_alloc_id = t.ap_gl_alloc_id
		where t.company_id=@company_id

		delete t 
		from #ap_gl_alloc t 
		join WS_SyncAPDet d on d.ap_gl_alloc_id = t.ap_gl_alloc_id and d.CompanyId=t.company_id and isnull(d.Deleted,0)=0
		join WS_Sync s on s.syncId=d.syncId
		where t.company_id=@company_id and s.status <> ''Cancelled'' '
		exec sp_executesql @nSQL, N'@company_id int ', @company_id
		
		fetch cur_co into @tr_db, @company_id
	end			
	close cur_co
	deallocate cur_co
	
			
	select company_id, ap_gl_alloc_id, ap_inv_header_id, Seq, Description, Reference, Amount, MarkupPct, MarkupAmt, BillAmt,
		lv1id, lv2id, lv3id, lv4id
	from #ap_gl_alloc
	order by company_id, ap_inv_header_id, Seq
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_APDet_PostPut]') and xtype = 'P ')  
 drop Procedure WS_FLEM_APDet_PostPut
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

create proc WS_FLEM_APDet_PostPut @SyncId int, @CompanyId int, @HeaderMatchId int, @ap_gl_alloc_id int, @Amount decimal(19,4), @MarkupPct decimal(19,4),
	@MarkupAmt decimal(19,4), @BillAmt decimal(19,4)
as
begin
	insert into WS_SyncAPDet (SyncId, CompanyId, HeaderMatchId, ap_gl_alloc_id, Amount, MarkupPct, MarkupAmt, BillAmt)
	select @SyncId, @CompanyId, @HeaderMatchId, @ap_gl_alloc_id, @Amount, @MarkupPct, @MarkupAmt, @BillAmt
end 



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_Attachment_PostPut]') and xtype = 'P ')  
 drop Procedure WS_FLEM_Attachment_PostPut
Go
SET QUOTED_IDENTIFIER ON
Go
SET ANSI_NULLS ON 
Go
 

create proc WS_FLEM_Attachment_PostPut @SyncId int, @MatchId int output, @LinkMatchId int, @CompanyId int, @ContextItemId int, @TableDotField varchar(60), 
	@Comment varchar(max), @FileName varchar(255), @FileData varbinary(max), @FileTypeDescription varchar(max), @DateAdded datetime, @MimeType varchar(200), 
	@ContactId int, @InternalOnly bit
as
begin
	if( @MatchId = -1 )
	begin 
		insert into WS_SyncAttachment(SyncId, LinkMatchId, CompanyId, ContextItemId, TableDotField, Comment, FileName, FileData, FileTypeDescription,  
			DateAdded, MimeType, ContactId, InternalOnly)
		select @SyncId, @LinkMatchId, @CompanyId, @ContextItemId, @TableDotField, @Comment, @FileName, @FileData, @FileTypeDescription,  
			@DateAdded, @MimeType, @ContactId, @InternalOnly

		select @MatchId=scope_identity()
	end
	else
	begin
		insert into WS_SyncAttachment(PrevMatchId, SyncId, LinkMatchId, CompanyId, ContextItemId, TableDotField, Comment, FileName, FileData, FileTypeDescription, 
			DateAdded, MimeType, ContactId, InternalOnly)
		select @MatchId, @SyncId, @LinkMatchId, @CompanyId, @ContextItemId, @TableDotField, @Comment, @FileName, @FileData, @FileTypeDescription, 
			@DateAdded, @MimeType, @ContactId, @InternalOnly
	end
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_ContextGroup_Get]') and xtype = 'P ')  
 drop Procedure WS_FLEM_ContextGroup_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

-- exec WS_FLEM_ContextGroup_Get
create proc WS_FLEM_ContextGroup_Get
as
begin
	select distinct g.ID, g.Name, g.IsSystem
	from ContextItem c 
	join ContextUsage u on u.ContextItemID=c.ID
	join ContextGroup g on g.ID=u.ContextGroupID
	where c.FieldServices = 1
	order by g.ID
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_ContextItem_Get]') and xtype = 'P ')  
 drop Procedure WS_FLEM_ContextItem_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

-- exec WS_FLEM_ContextItem_Get
create proc WS_FLEM_ContextItem_Get
as
begin
	select c.ID, c.ContextGroupID, c.Name, c.WordMergeDSN, c.IsSystem, c.FieldServices
	from ContextItem c 
	where c.FieldServices = 1
	order by c.ID
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_ContextUsage_Get]') and xtype = 'P ')  
 drop Procedure WS_FLEM_ContextUsage_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

-- exec WS_FLEM_ContextUsage_Get
create proc WS_FLEM_ContextUsage_Get
as
begin
	select distinct u.id, u.ContextItemID, u.ContextGroupID
	from ContextItem c 
	join ContextUsage u on u.ContextItemID=c.ID
	where c.FieldServices = 1
	order by u.ID
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_Defaults_Get]') and xtype = 'P ')  
 drop Procedure WS_FLEM_Defaults_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

-- exec WS_FLEM_Defaults_Get 369, 12
create proc WS_FLEM_Defaults_Get @contactId int, @CompanyId int
as
begin
	declare @tr_db varchar(50), @nSql nvarchar(max)

	select @tr_db=treasurydbname from companies where autoid = @CompanyId

	select @nSql = 'declare @username varchar(50)
		select @username=name from '+@tr_db+'.[dbo].[mluser] where contactId=@contactId

		exec '+@tr_db+'.[dbo].[PC_ProjectSearch] @username, ''PGC'', ''F'', null, null, ''A'', null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null 
		
		select d.pri_id, d.lv1id, d.lv2id, d.lv3id, d.lv4id, d.type
		from '+@tr_db+'.dbo.[PROJ_FLEMDefaults] d
		join '+@tr_db+'.[dbo].[working_proj_selected] w on w.pri_id=d.Pri_ID 
		where w.username=@username '
	exec sp_executesql @nSql, N'@CompanyId int, @contactId int ', @CompanyId, @contactId
end 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_DeleteHistory_Get]') and xtype = 'P ')  
 drop Procedure WS_FLEM_DeleteHistory_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

-- WS_FLEM_DeleteHistory_Get 8
create proc WS_FLEM_DeleteHistory_Get @SyncId int
as
begin
	select TableName, MatchId, CompanyId 
	from WS_SyncDeleteHistory 
	where SyncId=@SyncId and isnull(Success,0)=1
end 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_DeleteRecord]') and xtype = 'P ')  
 drop Procedure WS_FLEM_DeleteRecord
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

create proc WS_FLEM_DeleteRecord @SyncId int, @TableName varchar(50), @MatchId int, @CompanyId int
as
begin
	insert into WS_SyncDeleteHistory(SyncId, TableName, MatchId, CompanyId)
	select @SyncId, @TableName, @MatchId, @CompanyId
end 

	
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_EquipTimeEntry_PostPut]') and xtype = 'P ')  
 drop Procedure WS_FLEM_EquipTimeEntry_PostPut
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

create proc WS_FLEM_EquipTimeEntry_PostPut @SyncId int, @CompanyId int, @MatchId int output, @HeaderMatchId int, @EqpNum varchar(10), @Level1Id int, @Level2Id int,
	@Level3Id int, @Level4Id int, @Billable bit, @Quantity decimal(14,4), @BillCycle char(1), @BillAmount money, @EstId int
as
begin
	if( @MatchId = -1 )
	begin 
		insert into WS_SyncEquipTimeEntry(SyncId, CompanyId, HeaderMatchId, EqpNum, Level1Id, Level2Id, Level3Id, Level4Id, Billable, 
			Quantity, BillCycle, BillAmount, EstId)
		select @SyncId, @CompanyId, @HeaderMatchId, @EqpNum, @Level1Id, @Level2Id, @Level3Id, @Level4Id, @Billable, 
			@Quantity, @BillCycle, @BillAmount, @EstId

		select @MatchId=scope_identity()
	end
	else
	begin
		insert into WS_SyncEquipTimeEntry(PrevMatchId, SyncId, CompanyId, HeaderMatchId, EqpNum, Level1Id, Level2Id, Level3Id, Level4Id, Billable, 
			Quantity, BillCycle, BillAmount, EstId)
		select @MatchId, @SyncId, @CompanyId, @HeaderMatchId, @EqpNum, @Level1Id, @Level2Id, @Level3Id, @Level4Id, @Billable, 
			@Quantity, @BillCycle, @BillAmount, @EstId
	end
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_LabourTimeDetail_PostPut]') and xtype = 'P ')  
 drop Procedure WS_FLEM_LabourTimeDetail_PostPut
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

create proc WS_FLEM_LabourTimeDetail_PostPut @SyncId int, @CompanyId int, @EntryId int, @TimeCodeId int, @WorkHours decimal(10,4), @BillAmount money
as
begin
	insert into WS_SyncLabourTimeDetail (SyncId, CompanyId, EntryId, TimeCodeId, WorkHours, BillAmount)
	select @SyncId, @CompanyId, @EntryId, @TimeCodeId, @WorkHours, @BillAmount
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_LabourTimeEntry_PostPut]') and xtype = 'P ')  
 drop Procedure WS_FLEM_LabourTimeEntry_PostPut
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

create proc WS_FLEM_LabourTimeEntry_PostPut @SyncId int, @CompanyId int, @MatchId int output, @HeaderMatchId int, @EmpNum int, @Level1Id int, @Level2Id int,
	@Level3Id int, @Level4Id int, @Billable bit, @wcCode varchar(5), @TotalHours decimal(19, 4), @BillAmount money, @EstId int, @Manual bit, @IncludedHours decimal(19, 4)
as
begin
	if( @MatchId = -1 )
	begin 
		insert into WS_SyncLabourTimeEntry(SyncId, CompanyId, HeaderMatchId, EmpNum, Level1Id, Level2Id, Level3Id, Level4Id, Billable, 
			wc_code, TotalHours, BillAmount, EstId, Manual, IncludedHours)
		select @SyncId, @CompanyId, @HeaderMatchId, @EmpNum, @Level1Id, @Level2Id, @Level3Id, @Level4Id, @Billable, 
			@wcCode, @TotalHours, @BillAmount, @EstId, @Manual, @IncludedHours

		select @MatchId=scope_identity()
	end
	else
	begin
		insert into WS_SyncLabourTimeEntry(PrevMatchId, SyncId, CompanyId, HeaderMatchId, EmpNum, Level1Id, Level2Id, Level3Id, Level4Id, Billable, 
			wc_code, TotalHours, BillAmount, EstId, Manual, IncludedHours)
		select @MatchId, @SyncId, @CompanyId, @HeaderMatchId, @EmpNum, @Level1Id, @Level2Id, @Level3Id, @Level4Id, @Billable, 
			@wcCode, @TotalHours, @BillAmount, @EstId, @Manual, @IncludedHours
	end
end 



	
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_LEMEquip_Get]') and xtype = 'P ')  
 drop Procedure WS_FLEM_LEMEquip_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

-- exec WS_FLEM_LEMEquip_Get 5105, 12, null
create proc WS_FLEM_LEMEquip_Get @contactId int, @CompanyId int, @LastSyncTime datetime
as
begin
	declare @tr_db varchar(50), @nSql nvarchar(max)

	select @tr_db=treasurydbname from companies where autoid = @CompanyId

	select @nSql = '
	declare @NumDayFLEMSheetAvail int, @username varchar(10), @WS_PCDL_LogType_Equipment int 

	select @WS_PCDL_LogType_Equipment = 9
	select @NumDayFLEMSheetAvail=isnull(NumDayFLEMSheetAvail, 45) from system_ctrl

	select @username=name from '+@tr_db+'.[dbo].[mluser] where contactId=@contactId

	exec '+@tr_db+'.[dbo].[PC_ProjectSearch] @username, ''PGC'', ''F'', null, null, ''A'', null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null 
			
	if( @LastSyncTime is null or (datediff(dd, @LastSyncTime, getdate()) > @NumDayFLEMSheetAvail))
	begin
		select @LastSyncTime = cast(dateadd(dd, -@NumDayFLEMSheetAvail, getdate()) as date)
	end

	select t.MatchId, lh.MatchId [HeaderMatchId], t.emp_no, t.eqi_num, t.EstId, t.lv1_id, t.lv2_id, t.lv3_id, t.lv4_id, t.status, t.Billable, t.Quantity, t.BillCycle, 
		t.hrs_total, t.dollars_total, t.TimeStamp 
	from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] lh
	join '+@tr_db+'.[dbo].[working_proj_selected] w on w.pri_id=lh.Pri_ID 
	join '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] l on l.WS_PCDL_LogHeaderID=lh.id and l.DL_LogType_ID=@WS_PCDL_LogType_Equipment 
	join '+@tr_db+'.[dbo].[WS_EMP_TimeClock] t on t.WS_PCDL_LH_ID = l.DL_LogEntry_ID 
	where w.username=@username and isnull(t.TimeStamp, t.entry_date) >= @LastSyncTime and t.LEM=''E'' 
	order by t.MatchId, lh.MatchId '
	exec sp_executesql @nSql, N'@contactId int, @LastSyncTime datetime ', @contactId, @LastSyncTime
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_LEMHeader_Get]') and xtype = 'P ')  
 drop Procedure WS_FLEM_LEMHeader_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

-- exec WS_FLEM_LEMHeader_Get 371, 12, '2017-10-31 10:39:41.020'
create proc WS_FLEM_LEMHeader_Get @contactId int, @CompanyId int, @LastSyncTime datetime
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#LemHeader'))
		drop table #LemHeader

	create table #LemHeader (   
		MatchId int,
		LogDate datetime,
		LogStatus varchar(10),
		pri_ID int,
		LogCreatedBy int,
		TimeStamp datetime,
		LemNum varchar(20),
		Description varchar(max),
		ApprovalComments varchar(max)
	)

	declare @tr_db varchar(50), @nSql nvarchar(max)

	select @tr_db=treasurydbname from companies where autoid = @CompanyId

	select @nSql = '
	declare @NumDayFLEMSheetAvail int, @username varchar(10)

	select @NumDayFLEMSheetAvail=isnull(NumDayFLEMSheetAvail, 45) from system_ctrl

	select @username=name from '+@tr_db+'.[dbo].[mluser] where contactId=@contactId

	exec '+@tr_db+'.[dbo].[PC_ProjectSearch] @username, ''PGC'', ''F'', null, null, ''A'', null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null 
			
	if( @LastSyncTime is null or (datediff(dd, @LastSyncTime, getdate()) > @NumDayFLEMSheetAvail))
	begin
		select @LastSyncTime = cast(dateadd(dd, -@NumDayFLEMSheetAvail, getdate()) as date)
	end

	declare @LemStatus table (
		status varchar(10),
		display varchar(10)
	)

	insert into @LemStatus (status, display)
	select ''Submitted'', ''Pending''
	union
	select ''Approved'', ''Approved''
	union
	select ''Declined'', ''Declined''
	union
	select ''Billed'', ''Billed''
	union
	select ''Quarantine'', ''Quarantine''
		 
	insert into #LemHeader (MatchId, LogDate, LogStatus, pri_ID, LogCreatedBy, TimeStamp, LemNum, Description, ApprovalComments)
	select l.MatchId, l.LogDate, 
		case when (select count(*)
		from '+@tr_db+'.[dbo].[costing_TimeTicket] c
		join '+@tr_db+'.[dbo].[so_trn_hdr_proj] p on p.so_trn_proj_id=c.so_trn_proj_id
		join '+@tr_db+'.[dbo].[so_trn_hdr] s on s.invoice_id=p.invoice_id
		where c.ws_pcdl_lh_id=l.ID) > 0 then ''Billed'' else st.display end [LogStatus], 
		l.pri_ID, l.LogCreatedBy, l.TimeStamp, l.LemNum, l.Description, l.ApprovalComments
	from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] l
	join '+@tr_db+'.[dbo].[working_proj_selected] w on w.pri_id=l.Pri_ID 
	join @LemStatus st on st.status=l.logStatus
	where w.username=@username and l.IsFLEMSheet = 1 and isnull(l.TimeStamp, l.LogDate) >= @LastSyncTime 
	order by l.MatchId 

	delete t
	from #LemHeader t
	join '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] l on l.MatchId=t.MatchId
	join WS_SyncLogHeader w on isnull(w.PrevMatchId, w.MatchId)=t.MatchId
	where w.quarantine = 1

	insert into #LemHeader (MatchId, LogDate, LogStatus, pri_ID, LogCreatedBy, TimeStamp, LemNum, Description, ApprovalComments)
	select distinct isnull(w.PrevMatchId, w.MatchId), w.LogDate, 
		case when (select count(*)
		from '+@tr_db+'.[dbo].[costing_TimeTicket] c
		join '+@tr_db+'.[dbo].[so_trn_hdr_proj] p on p.so_trn_proj_id=c.so_trn_proj_id
		join '+@tr_db+'.[dbo].[so_trn_hdr] s on s.invoice_id=p.invoice_id
		where c.ws_pcdl_lh_id=isnull(l.ID,-1)) > 0 then ''Billed'' else st.display end [LogStatus], 
		w.ProjectId, w.ContactId, w.LogDate, w.LemNum, w.Description, ''''
	from WS_SyncLogHeader w
	join @LemStatus st on st.status=w.logStatus
	join '+@tr_db+'.[dbo].[working_proj_selected] p on p.pri_id=w.ProjectId
	left outer join '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] l on l.MatchId=isnull(w.PrevMatchId, w.MatchId)
	where w.CompanyId=@CompanyId and w.quarantine = 1 '
	exec sp_executesql @nSql, N'@contactId int, @LastSyncTime datetime, @CompanyId int ', @contactId, @LastSyncTime, @CompanyId

	select MatchId, LogDate, LogStatus, pri_ID, LogCreatedBy, TimeStamp, LemNum, Description, ApprovalComments
	from #LemHeader
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_LEMLab_Get]') and xtype = 'P ')  
 drop Procedure WS_FLEM_LEMLab_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

-- exec WS_FLEM_LEMLab_Get 371, 12, null
create proc WS_FLEM_LEMLab_Get @contactId int, @CompanyId int, @LastSyncTime datetime
as
begin
	declare @tr_db varchar(50), @nSql nvarchar(max)

	select @tr_db=treasurydbname from companies where autoid = @CompanyId

	select @nSql = '
	declare @NumDayFLEMSheetAvail int, @username varchar(10), @WS_PCDL_LogType_TimeEntry int 

	select @WS_PCDL_LogType_TimeEntry = 8
	select @NumDayFLEMSheetAvail=isnull(NumDayFLEMSheetAvail, 45) from system_ctrl

	select @username=name from '+@tr_db+'.[dbo].[mluser] where contactId=@contactId

	exec '+@tr_db+'.[dbo].[PC_ProjectSearch] @username, ''PGC'', ''F'', null, null, ''A'', null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null 
			
	if( @LastSyncTime is null or (datediff(dd, @LastSyncTime, getdate()) > @NumDayFLEMSheetAvail))
	begin
		select @LastSyncTime = cast(dateadd(dd, -@NumDayFLEMSheetAvail, getdate()) as date)
	end

	select t.MatchId, lh.MatchId [HeaderMatchId], t.emp_no, t.EstId, t.lv1_id, t.lv2_id, t.lv3_id, t.lv4_id, wc.wc_code, t.status, t.Billable, 
		t.hrs_total, t.dollars_total, t.TimeStamp, t.Manual, t.IncludedHours 
	from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] lh
	join '+@tr_db+'.[dbo].[working_proj_selected] w on w.pri_id=lh.Pri_ID 
	join '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] l on l.WS_PCDL_LogHeaderID=lh.id and l.DL_LogType_ID=@WS_PCDL_LogType_TimeEntry 
	join '+@tr_db+'.[dbo].[WS_EMP_TimeClock] t on t.WS_PCDL_LH_ID = l.DL_LogEntry_ID 
	join '+@tr_db+'.[dbo].[work_class] wc on wc.Id=t.Work_Class_ID 
	where w.username=@username and lh.IsFLEMSheet = 1 and isnull(t.TimeStamp, t.entry_date) >= @LastSyncTime and t.LEM=''L'' 
	order by t.MatchId, lh.MatchId '
	exec sp_executesql @nSql, N'@contactId int, @LastSyncTime datetime ', @contactId, @LastSyncTime
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_LEMLabHrs_Get]') and xtype = 'P ')  
 drop Procedure WS_FLEM_LEMLabHrs_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

-- exec WS_FLEM_LEMLabHrs_Get 27, 12, null
create proc WS_FLEM_LEMLabHrs_Get @contactId int, @CompanyId int, @LastSyncTime datetime
as
begin
	declare @tr_db varchar(50), @nSql nvarchar(max)

	select @tr_db=treasurydbname from companies where autoid = @CompanyId

	select @nSql = '
	declare @NumDayFLEMSheetAvail int, @username varchar(10), @WS_PCDL_LogType_TimeEntry int 

	select @WS_PCDL_LogType_TimeEntry = 8
	select @NumDayFLEMSheetAvail=isnull(NumDayFLEMSheetAvail, 45) from system_ctrl

	select @username=name from '+@tr_db+'.[dbo].[mluser] where contactId=@contactId

	exec '+@tr_db+'.[dbo].[PC_ProjectSearch] @username, ''PGC'', ''F'', null, null, ''A'', null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null 
			
	if( @LastSyncTime is null or (datediff(dd, @LastSyncTime, getdate()) > @NumDayFLEMSheetAvail))
	begin
		select @LastSyncTime = cast(dateadd(dd, -@NumDayFLEMSheetAvail, getdate()) as date)
	end

	select tc.id, t.MatchId [EntryMatchId], tc.time_code_id, 
		case when cd.ValueType = ''Hours'' then tc.HoursWorked else null end [WorkHours],
		case when cd.ValueType = ''Hours'' then tc.BillAmt else null end [BillRate],
		case when cd.ValueType = ''Hours'' then null else tc.HoursWorked end [Amount]
	from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] lh
	join '+@tr_db+'.[dbo].[working_proj_selected] w on w.pri_id=lh.Pri_ID 
	join '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] l on l.WS_PCDL_LogHeaderID=lh.id and l.DL_LogType_ID=@WS_PCDL_LogType_TimeEntry 
	join '+@tr_db+'.[dbo].[WS_EMP_TimeClock] t on t.WS_PCDL_LH_ID = l.DL_LogEntry_ID 
	join '+@tr_db+'.[dbo].[WS_EMP_TimeClockHours] tc on tc.ws_etc_id = t.id 
	join '+@tr_db+'.[dbo].[WS_EMP_Time_Code] cd on cd.id = tc.time_code_id
	where w.username=@username and isnull(t.TimeStamp, t.entry_date) >= @LastSyncTime and t.LEM=''L'' 
	order by tc.id '
	exec sp_executesql @nSql, N'@contactId int, @LastSyncTime datetime ', @contactId, @LastSyncTime
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_LogHeader_PostPut]') and xtype = 'P ')  
 drop Procedure WS_FLEM_LogHeader_PostPut
Go
SET QUOTED_IDENTIFIER ON
Go
SET ANSI_NULLS ON 
Go
 
 

create proc WS_FLEM_LogHeader_PostPut @SyncId int, @ContactId int, @CompanyId int, @MatchId int output, @LogDate datetime, @LogStatus varchar(10), 
	@ProjectId int, @LemNum varchar(20) output, @BillAmount decimal(19,4), @NonBillAmount decimal(19,4), @TotalAmount decimal(19,4), 
	@Description varchar(max), @EmailData varbinary(max)
as
begin
	if( @LogStatus in ('Pending', 'Declined', 'Approved'))
		select @LogStatus = 'Submitted'

	if( @MatchId = -1 )
	begin 
		if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#LemSeg'))
			drop table #LemSeg

		create table #LemSeg (
			id int identity(1,1),
			LemNum varchar(20),
			LemNumP1 varchar(20),
			ProjNo int,
			SeqPad varchar(20),
			Seq int default(0),
			SubSeq int default(0)
		)

		declare @nSql nvarchar(max), @tr_db varchar(50), @ProjNo int, @Seq int, @SubSeq int, @SeqPad varchar(4), @SubSeqPad varchar(2)
		
		select @tr_db=treasurydbname from companies where autoid = @CompanyId

		select @nSql = '
		insert into #LemSeg (LemNum, ProjNo)
		select LemNum, cast(substring(LemNum, 0, CHARINDEX(''-'', LemNum)) as int)
		from '+@tr_db+'.dbo.WS_PCDL_LogHeader 
		where IsFLEMSheet=1 and pri_id = @ProjectId'
		exec sp_executesql @nSql, N'@ProjectId int ', @ProjectId

		insert into #LemSeg (LemNum, ProjNo)
		select LemNum, cast(substring(LemNum, 0, CHARINDEX('-', LemNum)) as int)
		from WS_Sync s
		join WS_SyncLogHeader h on h.SyncId=s.SyncId
		where h.CompanyId=@CompanyId and h.ProjectId=@ProjectId and s.status <> 'Cancelled'
	
		update #LemSeg set LemNumP1=RIGHT(LemNum, LEN(LemNum) - (LEN(ProjNo) + 1)) where CHARINDEX('-', LemNum) > 0
	
		update #LemSeg set SeqPad=LemNumP1 where CHARINDEX('-', LemNumP1) = 0
		update #LemSeg set Seq=cast(LemNumP1 as int) where CHARINDEX('-', LemNumP1) = 0

		update #LemSeg set SeqPad=substring(LemNumP1, 0, CHARINDEX('-', LemNumP1)) where CHARINDEX('-', LemNumP1) > 0
		update #LemSeg set Seq=cast(substring(LemNumP1, 0, CHARINDEX('-', LemNumP1)) as int) where CHARINDEX('-', LemNumP1) > 0

		update #LemSeg set SubSeq=replace(LemNumP1, SeqPad+'-', '') where CHARINDEX('-', LemNumP1) > 0
		--update #LemSeg set SubSeq=cast(RIGHT(LemNumP1, LEN(LemNumP1) - (LEN(Seq) + 1)) as int) where CHARINDEX('-', LemNumP1) > 0

		if( (select count(*) from #LemSeg where LemNum=@Lemnum) > 1 )
		begin
			select top 1 @ProjNo=ProjNo, @Seq=Seq, @SubSeq=(SubSeq + 1)
			from #LemSeg 			
			order by ProjNo, Seq desc, SubSeq desc
			
			select @SeqPad = right('0000'+ rtrim(@Seq), 4)
			select @SubSeqPad = right('00'+ rtrim(@SubSeq), 2)

			select @Lemnum=cast(@ProjNo as varchar(15)) +'-'+ @SeqPad +'-'+ @SubSeqPad
		end

		insert into WS_SyncLogHeader(SyncId, ContactId, CompanyId, LogDate, LogStatus, ProjectId, LemNum, BillAmount, NonBillAmount, TotalAmount, 
			Description, EmailData)
		select @SyncId, @ContactId, @CompanyId, @LogDate, @LogStatus, @ProjectId, @LemNum, @BillAmount, @NonBillAmount, @TotalAmount, 
			@Description, @EmailData

		select @MatchId=scope_identity()
	end
	else
	begin
		insert into WS_SyncLogHeader(PrevMatchId, SyncId, ContactId, CompanyId, LogDate, LogStatus, ProjectId, LemNum, BillAmount, NonBillAmount, TotalAmount, 
			Description, EmailData)
		select @MatchId, @SyncId, @ContactId, @CompanyId, @LogDate, @LogStatus, @ProjectId, @LemNum, @BillAmount, @NonBillAmount, @TotalAmount, 
			@Description, @EmailData
	end
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_LVCostCode_Get]') and xtype = 'P ')  
 drop Procedure WS_FLEM_LVCostCode_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

-- exec WS_FLEM_LVCostCode_Get 369, 12
create proc WS_FLEM_LVCostCode_Get @contactId int, @CompanyId int
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#CostCode'))
		drop table #CostCode

	create table #CostCode (   
		company_id int,
		pri_id int,
		level_id int,
		cost_code varchar(15)
	)

	declare @tr_db varchar(50), @nSql nvarchar(max), @level varchar(5)

	select @tr_db=treasurydbname from companies where autoid = @CompanyId

	select @nSql = 'select @level=case when isnull(lv4_active_gc,''F'') = ''T'' then ''lv4Id'' when isnull(lv3_active_gc,''F'') = ''T'' then ''lv3Id''
		when isnull(lv2_active_gc,''F'') = ''T'' then ''lv2Id'' when isnull(lv1_active_gc,''F'') = ''T'' then ''lv1Id'' else '''' end
	from '+@tr_db+'.dbo.[proj_cntl] '
	exec sp_executesql @nSql, N'@level varchar(5) output ', @level output

	if( isnull(@level,'') <> '' )
	begin
		select @nSql = 'declare @username varchar(50)
		select @username=name from '+@tr_db+'.[dbo].[mluser] where contactId=@contactId

		exec '+@tr_db+'.[dbo].[PC_ProjectSearch] @username, ''PGC'', ''F'', null, null, ''A'', null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null 

		insert into #CostCode (company_id, pri_id, level_id, cost_code)
		select distinct @CompanyId, c.pri_id, c.'+@level+', c.cost_code
		from '+@tr_db+'.dbo.[costing_budget] c
		join '+@tr_db+'.[dbo].[working_proj_selected] w on w.pri_id=c.Pri_ID 
		where w.username=@username 
		order by c.pri_id, c.'+@level
		exec sp_executesql @nSql, N'@CompanyId int, @contactId int ', @CompanyId, @contactId
	end

	select company_id, pri_id, level_id, cost_code from #CostCode
end
 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_MobileSync_PostPut]') and xtype = 'P ')  
 drop Procedure WS_FLEM_MobileSync_PostPut
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

-- exec WS_FLEM_MobileSync_PostPut 12, '90-B1-1C-94-EA-8D'
create proc WS_FLEM_MobileSync_PostPut @CompanyId int, @ClientMac varchar(20)
as
begin
	if exists( select * from MobileSync where CompanyId=@CompanyId and ClientMac=@ClientMac )
	begin
		update MobileSync
		set LastSyncTime = getdate()
		where CompanyId=@CompanyId and ClientMac=@ClientMac
	end
	else
	begin
		insert into MobileSync (CompanyId, ClientMac, LastSyncTime)
		select @CompanyId, @ClientMac, getdate()
	end
end 



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_PODetail_PostPut]') and xtype = 'P ')  
 drop Procedure WS_FLEM_PODetail_PostPut
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 


create proc WS_FLEM_PODetail_PostPut @SyncId int, @CompanyId int, @MatchId int output, @HeaderMatchId int, @LineNum int, @Description varchar(150), @Level1Id int, @Level2Id int,
		@Level3Id int, @Level4Id int, @LEMComp varchar(1), @Billable bit, @Amount decimal(19, 4)
as
begin
	if( @MatchId = -1 )
	begin 
		insert into WS_SyncPODetail(SyncId, CompanyId, HeaderMatchId, LineNum, Description, Level1Id, Level2Id, Level3Id, Level4Id, LEMComp, Billable, Amount)
		select @SyncId, @CompanyId, @HeaderMatchId, @LineNum, @Description, @Level1Id, @Level2Id, @Level3Id, @Level4Id, @LEMComp, @Billable, @Amount

		select @MatchId=scope_identity()
	end
	else
	begin
		insert into WS_SyncPODetail(PrevMatchId, SyncId, CompanyId, HeaderMatchId, LineNum, Description, Level1Id, Level2Id, Level3Id, Level4Id, LEMComp, Billable, Amount)
		select @MatchId, @SyncId, @CompanyId, @HeaderMatchId, @LineNum, @Description, @Level1Id, @Level2Id, @Level3Id, @Level4Id, @LEMComp, @Billable, @Amount
	end
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_POHeader_Get]') and xtype = 'P ')  
 drop Procedure WS_FLEM_POHeader_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

-- exec WS_FLEM_POHeader_Get 26, 12
create proc WS_FLEM_POHeader_Get @SyncId int, @CompanyId int
as
begin
	declare @tr_db varchar(50), @nSql nvarchar(max)

	select @tr_db=treasurydbname from companies where autoid = @CompanyId

	select @nSql = '
	select p.MatchId, p.PO 
	from WS_SyncPOHeader w
	join '+@tr_db+'.[dbo].[po_header] p on p.MatchId=isnull(w.PrevMatchId, w.MatchId)
	where w.syncId=@SyncId '
	exec sp_executesql @nSql, N'@SyncId int ', @SyncId
end 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_POHeader_PostPut]') and xtype = 'P ')  
 drop Procedure WS_FLEM_POHeader_PostPut
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

-- exec WS_FLEM_POHeader_PostPut -1, -1, -1, '', '', '', -1
create proc WS_FLEM_POHeader_PostPut @SyncId int, @ContactId int, @CompanyId int, @MatchId int output, @PONum varchar(20) output, @PODate datetime, @SupplierCode varchar(10), @ProjectId int 
as
begin
	if( @MatchId = -1 )
	begin 
		insert into WS_SyncPOHeader(SyncId, ContactId, CompanyId, PONum, PODate, SupplierCode, ProjectId)
		select @SyncId, @ContactId, @CompanyId, @PONum, @PODate, @SupplierCode, @ProjectId

		select @MatchId=scope_identity()
	end
	else
	begin
		insert into WS_SyncPOHeader(PrevMatchId, SyncId, ContactId, CompanyId, PONum, PODate, SupplierCode, ProjectId)
		select @MatchId, @SyncId, @ContactId, @CompanyId, @PONum, @PODate, @SupplierCode, @ProjectId
	end
end 
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_ProjBudget_Get]') and xtype = 'P ')  
 drop Procedure WS_FLEM_ProjBudget_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

-- exec WS_FLEM_ProjBudget_Get 371, 12
create proc WS_FLEM_ProjBudget_Get @contactId int, @CompanyId int
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Budget'))
		drop table #Budget

	create table #Budget (   
		company_id int,
		pri_id int,
		lv1id int,
		lv2id int,
		lv3id int,
		lv4id int
	)

	declare @tr_db varchar(50), @nSql nvarchar(max)

	select @tr_db=treasurydbname from companies where autoid = @CompanyId

	
	select @nSql = 'declare @username varchar(50)
	select @username=name from '+@tr_db+'.[dbo].[mluser] where contactId=@contactId

	exec '+@tr_db+'.[dbo].[PC_ProjectSearch] @username, ''PGC'', ''F'', null, null, ''A'', null, null, null, null, null, null, null, null, null, 
	null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null 

	insert into #Budget (company_id, pri_id, lv1id, lv2id, lv3id, lv4id)
	select distinct @CompanyId, c.pri_id, c.lv1id, c.lv2id, c.lv3id, c.lv4id
	from '+@tr_db+'.dbo.[costing_budget] c
	join '+@tr_db+'.[dbo].[working_proj_selected] w on w.pri_id=c.Pri_ID 
	where w.username=@username 
	order by c.pri_id, c.lv1id, c.lv2id, c.lv3id, c.lv4id '
	exec sp_executesql @nSql, N'@CompanyId int, @contactId int ', @CompanyId, @contactId
	

	select company_id, pri_id, lv1id, lv2id, lv3id, lv4id from #Budget
end 


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_SecurityFunctionSync]') and xtype = 'P ')  
 drop Procedure WS_FLEM_SecurityFunctionSync
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

create proc WS_FLEM_SecurityFunctionSync 
as
begin
	declare @nSql nvarchar(max), @tr_db varchar(50), @CompanyId int
		
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#SecurityFunction'))
		drop table #SecurityFunction

	create table #SecurityFunction (   
		[ID] [int] NULL,
		[ParentID] [int] NULL,
		[Description] [varchar](100) NULL,
		[AltDescription] [varchar](100) NULL,
		[Level] [int] NULL,
		[Image] [int] NULL,
		[CompanyType] [varchar](5) NULL,
		[ApplicationFlavour] [varchar](10) NULL,
		[Discontinued] [bit] NULL,
		[UserControlType] [varchar](50) NULL,
		[KickinIt] [varchar](30) NULL,
		[cascades] [bit] NULL DEFAULT ((0)),
		[IsModule] [bit] NULL DEFAULT ((0)),
		[HelpBookmarkDocument] [varchar](200) NULL,
		[DestinationName] [varchar](200) NULL,
		[FieldServices] [bit] NULL
	) 

	select top 1 @tr_db=treasurydbname, @CompanyId=autoid
	from companies
	where active=1

	select @nSql = '
	insert into #SecurityFunction (ID, ParentID, Description, AltDescription, Level, Image, CompanyType, ApplicationFlavour, Discontinued, 
		UserControlType, KickinIt, cascades, IsModule, HelpBookmarkDocument, DestinationName, FieldServices)
	select ID, ParentID, Description, AltDescription, Level, Image, CompanyType, ApplicationFlavour, Discontinued, 
		UserControlType, KickinIt, cascades, IsModule, HelpBookmarkDocument, DestinationName, FieldServices
	from '+@tr_db+'.[dbo].[SecurityFunction]
	where FieldServices = 1
	order by id '
	exec(@nSql)

	select ID, ParentID, Description, AltDescription, Level, Image, CompanyType, ApplicationFlavour, Discontinued, 
		UserControlType, KickinIt, cascades, IsModule, HelpBookmarkDocument, DestinationName, FieldServices
	from #SecurityFunction
	order by id
end 
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_SecuritySync]') and xtype = 'P ')  
 drop Procedure WS_FLEM_SecuritySync
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

create proc WS_FLEM_SecuritySync 
as
begin
	declare @nSql nvarchar(max), @tr_db varchar(50), @CompanyId int
		
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#SECURITY'))
		drop table #SECURITY

	create table #SECURITY (   
		[DEPARTMENT] [varchar](10) NULL,
		[FUNCTION_ID] [int] NULL,
		[CompanyId] [int] NULL
	) 


	declare cur_co cursor for	
	select treasurydbname, autoid
	from companies
	where active=1
	
	open cur_co 
	fetch cur_co into @tr_db, @CompanyId
	while @@fetch_status=0
	begin
		select @nSql = '
		insert into #SECURITY (DEPARTMENT, FUNCTION_ID, CompanyId)
		select DEPARTMENT, FUNCTION_ID, @CompanyId
		from '+@tr_db+'.[dbo].[Security] s
		join '+@tr_db+'.[dbo].[SecurityFunction] f on f.id=s.FUNCTION_ID
		where f.FieldServices = 1 '
		exec sp_executesql @nSql, N'@CompanyId int ', @CompanyId

		fetch cur_co into @tr_db, @CompanyId
	end			
	close cur_co
	deallocate cur_co

	select DEPARTMENT, FUNCTION_ID, CompanyId from #SECURITY
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_FLEM_SyncCancel]') and xtype = 'P ')  
 drop Procedure WS_FLEM_SyncCancel
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 


-- exec WS_FLEM_SyncCancel 151
create proc WS_FLEM_SyncCancel @SyncId int
as
begin
	update WS_Sync
	set Status = 'Cancelled'
	where SyncId=@SyncId
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_NonPORouteValidation]') and xtype = 'P ')  
 drop Procedure WS_NonPORouteValidation
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[WS_NonPORouteValidation] @approval_id int, @message varchar(150) output
as
begin
	declare @approval_level_id int, @level_desc varchar(50), @work_flow varchar(50), @ApprovalType varchar(1)

	select @work_flow=work_flow from WS_Approval_WorkFlow where Approval_ID=@approval_id

	declare cur_app cursor for
	select Approval_Level_ID, Level_Description, isnull(Approval_Type,'C')
	from WS_Approval_Levels 
	where Approval_ID=@approval_id 
	order by Level_ID
	
	open cur_app fetch cur_app into @approval_level_id, @level_desc, @ApprovalType
	while @@fetch_status=0
	begin
		if( @ApprovalType = 'C' )
		begin
			if not exists( select * from WS_Approval_Contacts where ISNULL(Is_Active,'F') = 'T' and Approval_Level_ID=@approval_level_id )
			begin
				select @message = 'Work Flow '+@work_flow+' Approval Level - "' + @level_desc + '" does not have any active approval contacts setup.'
				close cur_app
				deallocate cur_app
				goto FINISH
			end
		end
		else if( @ApprovalType = 'S' )
		begin
			if not exists( select * from WS_Approval_Stakeholders where ISNULL(Is_Active,'F') = 'T' and Approval_Level_ID=@approval_level_id )
			begin
				select @message = 'Work Flow '+@work_flow+' Approval Level - "' + @level_desc + '" does not have any active approval stakeholders setup.'
				close cur_app
				deallocate cur_app
				goto FINISH
			end
		end
	
		fetch cur_app into @approval_level_id, @level_desc, @ApprovalType
	end			
	close cur_app
	deallocate cur_app
		
	FINISH:

	select @message=ISNULL(@message,'OK')
	if( @message = '' )
		select @message = 'OK'
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_ProjectFill]') and xtype = 'P ')  
 drop Procedure WS_ProjectFill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


-- exec WS_ProjectFill 2
CREATE proc [dbo].[WS_ProjectFill] @WS_Co_ID int
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#proj'))    
		drop table #proj    
	    
	CREATE TABLE #proj (  
	company_id int,
	pri_code int,
	pri_name varchar(50)
	)

	declare @communities_id int, @companyID int, @tr_db varchar(500), @sql varchar(max)

	declare cur_proj cursor for
	select tco.communities_id, c.TreasuryDBName, tco.company_id
	from WS_Communities tc
	join WS_Community_Co tco on tco.WS_Co_ID=tc.WS_Co_ID 
	join companies c on c.autoID=tco.company_id
	where tco.WS_Co_ID=@WS_Co_ID and isnull(c.active,0)=1

	open cur_proj fetch cur_proj into @communities_id, @tr_db, @companyID
	while @@fetch_status=0
	begin	
		select @sql = 'insert into #proj (company_id, pri_code, pri_name)
			select '+CAST(@companyID as varchar)+', p.pri_code, p.pri_name 
			from '+@tr_db+'..PROJ_DEV_INFO di
			join '+@tr_db+'..PROJ_HEADER p on p.pri_id=di.pri_id
			where di.COMMUNITIES_ID='+CAST(@communities_id as varchar)
			print @sql
		exec(@sql)

		fetch cur_proj into @communities_id, @tr_db, @companyID
	end			
	close cur_proj
	deallocate cur_proj
	
	select company_id, pri_code, pri_name 
	from #proj 
	order by pri_code, pri_name
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_Appointment_Get]') and xtype = 'P ')  
 drop Procedure WS_RM_Appointment_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE proc [dbo].[WS_RM_Appointment_Get] @SessionID int, @UserContactID int, @ContactHistoryID int, @ContactID int
as
begin
	declare @DateStr varchar(30)
	delete from WS_RM_Sess_Appointment where SessionID=@SessionID
	
	select @DateStr=CAST((DATEPART(mm, getdate())) as varchar)+'-'+CAST((DATEPART(dd, getdate())) as varchar)+'-'+CAST((DATEPART(yyyy, getdate())) as varchar)
	
	if( @ContactHistoryID = -1 )
	begin
		insert into WS_RM_Sess_Appointment (SessionID, Appointment, TopicalAreaID, AssignedTo, 
			AssignedBy, StartDate, EndDate, Note, ContactHistoryID, ContactID, UserContactID, [IsPrivate])
		select @SessionID, '['+isnull(c.KnownAs,substring((isnull(c.FirstName,'')+' '+isnull(c.LastName,'')),1,48) )+']', null, @UserContactID,
			c2.KnownAs, @DateStr, @DateStr, '', -1, @ContactID, @UserContactID, 0
		from contact c
		join contact c2 on c2.id=@UserContactID
		where c.id=@ContactID
	end
	else
	begin
		insert into WS_RM_Sess_Appointment (SessionID, Appointment, TopicalAreaID, AssignedTo, AssignedBy, StartDate, EndDate, Note, 
			ContactHistoryID, ContactID, UserContactID, [IsPrivate], RespondBy)
		select @SessionID, ch.Subject, ch.ContextItemId, ca.AssignedTo, c.Knownas, ca.StartDate, ca.EndDate, ch.Body, 
			@ContactHistoryID, @ContactID, @UserContactID, isnull(ch.isPrivate,0), ch.RespondBy
		from ContactHistory ch
		left outer join contact_aptsTasks ca on ca.contactHistoryID=ch.id
		left outer join contact c on c.id=ch.ContactOwnerID
		where ch.ID=@ContactHistoryID
	end
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_Appointment_Send]') and xtype = 'P ')  
 drop Procedure WS_RM_Appointment_Send
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[WS_RM_Appointment_Send] @SessionID int
as
begin
	declare @ContactHistoryID int, @PreviousAssigned int, @OUT_PKkey int
	
	if exists( select * from WS_RM_Sess_Appointment where SessionID=@SessionID and isnull(ContactHistoryID,-1) = -1 )
	begin
		--insert
		insert into ContactHistory (ContactID, ContactOwnerID, DateCreated, DateModified, Succeeded, Subject, Body, ContactType_ID, ContextItemId, 
			isPrivate, RespondBy)
		select w.ContactID, w.UserContactID, GETDATE(), GETDATE(), 1, w.Appointment, replace(w.Note, CHAR(10), CHAR(13)+CHAR(10)), 20 /**20=Appointment **/, w.TopicalAreaID, 
			w.IsPrivate, w.RespondBy
		from WS_RM_Sess_Appointment w
		where w.SessionID=@SessionID
		
		select @ContactHistoryID=@@IDENTITY
		
		insert into contact_aptsTasks (contactHistoryID, AssignedTo, StartDate, EndDate, pct_comp)
		select @ContactHistoryID, w.AssignedTo, w.StartDate, w.EndDate, 0
		from WS_RM_Sess_Appointment w
		where w.SessionID=@SessionID
		
		insert OutlookManagerNotification(LinkID, LinkType, Mgr_TriggerUDI, Mgr_SeenItYN, Mgr_TaskCompleteYN)
		select @ContactHistoryID, 'Appointment', 'I','N','N'
		
		select @OUT_PKkey=@@IDENTITY
	end
	else
	begin
		--update
		update ch
		set ch.DateModified=GETDATE(), ch.Subject=w.Appointment, ch.Body=replace(w.Note, CHAR(10), CHAR(13)+CHAR(10)), ch.ContextItemId=w.TopicalAreaID, ch.isPrivate=w.IsPrivate,
			ch.RespondBy=w.RespondBy
		from ContactHistory ch
		join WS_RM_Sess_Appointment w on w.ContactHistoryID=ch.ID
		where w.SessionID=@SessionID
		
		select @PreviousAssigned=ca.AssignedTo 
		from contact_aptsTasks ca
		join WS_RM_Sess_Appointment w on w.ContactHistoryID=ca.contactHistoryID
		where w.SessionID=@SessionID
		
		update ca
		set ca.AssignedTo=w.AssignedTo, ca.StartDate=w.StartDate, ca.EndDate=w.EndDate, ca.PreviousAssigned=@PreviousAssigned
		from contact_aptsTasks ca 
		join WS_RM_Sess_Appointment w on w.ContactHistoryID=ca.contactHistoryID
		where w.SessionID=@SessionID
		
		update o		
		set o.Mgr_TriggerUDI = 'U', o.Mgr_SeenItYN = 'N'
		from OutlookManagerNotification o
		join WS_RM_Sess_Appointment w on w.ContactHistoryID=o.LinkID and o.LinkType = 'Appointment'
		where w.SessionID=@SessionID
		
		select @OUT_PKkey=OUT_PKkey
		from OutlookManagerNotification o
		join WS_RM_Sess_Appointment w on w.ContactHistoryID=o.LinkID and o.LinkType = 'Appointment'
		where w.SessionID=@SessionID
	end
	
	delete from WS_RM_Sess_Appointment where SessionID=@SessionID
	
	select @OUT_PKkey [OUT_PKkey]
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_CoCon_Get]') and xtype = 'P ')  
 drop Procedure WS_RM_CoCon_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
-- exec WS_RM_CoCon_Get 9, 2, 12 --Customer
-- exec WS_RM_CoCon_Get 24, 1, 12 --Prospect
-- exec WS_RM_CoCon_Get 12, 1, 12 --Supplier
create proc WS_RM_CoCon_Get @ContactID int, @InstanceID int, @CompanyID int
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#CompanyContact'))
		drop table #CompanyContact
	create table #CompanyContact ( 
		CompanyName varchar(40),
		ContactName varchar(50)
	)
	
	declare @tr_db varchar(500), @nSQL nvarchar(max), @CompanyName varchar(40), @Type varchar(20), @KnownAs varchar(50)
	
	select @tr_db=TreasuryDBName from COMPANIES where AutoID=@CompanyID
	
	select @Type=Type, @KnownAs=isnull(KnownAs,'') from Contact where ID=@ContactID
	
	if( @Type = 'Customer' )
	begin
		set @nSQL = 'select @CompanyName = name from '+@tr_db+'..customers where customer_id = ' + CAST( @InstanceID as varchar)  
		exec sp_executesql @nSQL, N'@CompanyName varchar(40) OUT', @CompanyName OUT		
	end
	else if( @Type = 'Prospect' )
	begin
		set @nSQL = 'select @CompanyName = name from '+@tr_db+'..PROSPECTS where PROSPECT_ID = ' + CAST( @InstanceID as varchar)  
		exec sp_executesql @nSQL, N'@CompanyName varchar(40) OUT', @CompanyName OUT		
	end
	else if( @Type = 'Supplier' )
	begin
		set @nSQL = 'select @CompanyName = name from '+@tr_db+'..SUPPLIER_MASTER where SUPPLIER_ID = ' + CAST( @InstanceID as varchar)  
		exec sp_executesql @nSQL, N'@CompanyName varchar(40) OUT', @CompanyName OUT
	end
	
	insert into #CompanyContact (ContactName, CompanyName)
	select isnull(@KnownAs,''), isnull(@CompanyName,'')
	
	select CompanyName, ContactName from #CompanyContact
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_ContactAdd_Get]') and xtype = 'P ')  
 drop Procedure WS_RM_ContactAdd_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[WS_RM_ContactAdd_Get] @SessionID int, @UserContactID int, @Origin varchar(1), @OriginID int=-1, @CompanyID int=-1
as
begin	
	delete from WS_RM_Sess_Profile where SessionID=@SessionID
	
	declare @Company varchar(100), @phone varchar(64), @fax varchar(64), @tr_db varchar(100), @nsql nvarchar(max)
	
	select @tr_db=TreasuryDBName from COMPANIES	where autoid=@CompanyID
	
	if( @Origin = 'C' )
	begin
		set @nsql = 'select @Company=cu.NAME, @phone=cu.TELEPHONE, @fax=cu.FAX 
		from '+@tr_db+'..customers cu 
		where cu.customer_id='+cast(@OriginID as varchar)
		exec sp_executesql @nsql, N'@Company varchar(100) OUT, @phone varchar(64) OUT, @fax varchar(64) OUT', @Company OUT, @phone OUT, @fax OUT		
	end
	else if( @Origin = 'S' )
	begin
		set @nsql = 'select @Company=s.NAME, @phone=s.TEL, @fax=s.FAX 
		from '+@tr_db+'..supplier_master s 
		where s.supplier_id='+cast(@OriginID as varchar)
		exec sp_executesql @nsql, N'@Company varchar(100) OUT, @phone varchar(64) OUT, @fax varchar(64) OUT', @Company OUT, @phone OUT, @fax OUT		
	end
	else if( @Origin = 'P' )
	begin
		set @nsql = 'select @Company=p.NAME, @phone=p.TELEPHONE, @fax=p.FAX 
		from '+@tr_db+'..PROSPECTS p 
		where p.prospect_id='+cast(@OriginID as varchar)
		exec sp_executesql @nsql, N'@Company varchar(100) OUT, @phone varchar(64) OUT, @fax varchar(64) OUT', @Company OUT, @phone OUT, @fax OUT
	end
	
	insert into WS_RM_Sess_Profile (SessionID, ContactID, UserContactID, [Type], FirstName, LastName, KnownAs, JobTitle, BusinessCompany, 
		AssignedTo, Campaign, BusinessTelephoneNumber, Business_Phone_Extention, BusinessFaxNumber, MobileTelephoneNumber,
		HomeTelephoneNumber, Email1Address, OtherTelephoneNumber, BusinessStreet, BusinessCity, BusinessState, BusinessPostalCode,
		BusinessCountry)
	select @SessionID, -1, @UserContactID, case when @Origin = 'C' then 'Customer' when @Origin = 'P' then 'Prospect' when @Origin = 'S' then 'Supplier' end,
		'', '', '', '', @Company, 
		null, 0, @phone, '', @fax, '', '', '', '', '', '', '', '', ''	
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_ContactAdd_Send]') and xtype = 'P ')  
 drop Procedure WS_RM_ContactAdd_Send
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[WS_RM_ContactAdd_Send] @SessionID int, @OriginID int, @CompanyID int
as
begin	
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Notify'))
		drop table #Notify
	
	CREATE TABLE #Notify(
		OUT_PKkey int,
	)
	
	declare @ContactID int

	insert into Contact ([Type], FirstName, LastName, KnownAs, JobTitle, BusinessCompany, Owner_ID, PersonalEmailOnly, BusinessTelephoneNumber,
		Business_Phone_Extention, BusinessFaxNumber, MobileTelephoneNumber, HomeTelephoneNumber, Email1Address, OtherTelephoneNumber,
		BusinessStreet, BusinessCity, BusinessState, BusinessPostalCode, BusinessCountry)	
	select w.[Type], w.FirstName, w.LastName, w.KnownAs, w.JobTitle, w.BusinessCompany, w.AssignedTo, w.Campaign, w.BusinessTelephoneNumber,
		w.Business_Phone_Extention, w.BusinessFaxNumber, w.MobileTelephoneNumber, w.HomeTelephoneNumber, w.Email1Address, w.OtherTelephoneNumber,
		w.BusinessStreet, w.BusinessCity, w.BusinessState, w.BusinessPostalCode, w.BusinessCountry	
	from WS_RM_Sess_Profile w 
	where w.SessionID=@SessionID
	
	select @ContactID=scope_identity()
	
	insert into relations
	select c.[Type], @OriginID, 'Contact', @ContactID, @CompanyID
	from contact c
	where c.id=@ContactID
	
	delete from WS_RM_Sess_Profile where SessionID=@SessionID
	
	insert into #Notify
	exec sp_Dashboard_UpdateOLMNotification @ContactID, 'Contact', 'I'
	
	select OUT_PKkey from #Notify
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_Email_Get]') and xtype = 'P ')  
 drop Procedure WS_RM_Email_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[WS_RM_Email_Get] @SessionID int, @UserContactID int, @ContactHistoryID int, @ContactID int
as
begin
	declare @DateStr varchar(30)
	delete from WS_RM_Sess_Email where SessionID=@SessionID
	
	select @DateStr=CAST((DATEPART(mm, getdate())) as varchar)+'-'+CAST((DATEPART(dd, getdate())) as varchar)+'-'+CAST((DATEPART(yyyy, getdate())) as varchar)
	
	if( @ContactHistoryID = -1 )
	begin
		insert into WS_RM_Sess_Email (SessionID, ContactType_ID, Subject, ReminderDate, TopicalAreaID, DateCreated, ToContact, FromContact,
			EmailAddress, EmailType, Body, Status, ContactHistoryID, ContactID, UserContactID, [IsPrivate])
		select @SessionID, 2 /**2=Sent Email**/,'', null, null, GETDATE(), c.KnownAs, c2.KnownAs,
			c.Email1Address, null, '', 'Pending', @ContactHistoryID, @ContactID, @UserContactID, 0
		from contact c
		join contact c2 on c2.id=@UserContactID
		where c.id=@ContactID
	end
	else
	begin
		insert into WS_RM_Sess_Email (SessionID, ContactType_ID, Subject, ReminderDate, TopicalAreaID, DateCreated, ToContact, FromContact,
			EmailAddress, EmailType, Body, Status, ContactHistoryID, ContactID, UserContactID, [IsPrivate])
		select @SessionID, ch.ContactType_ID, ch.Subject, ch.RespondBy, ch.ContextItemId, ch.DateCreated, c.KnownAs, c2.KnownAs,
			ch.EmailAddress, ch.VisitType, ch.Body, case when isnull(ch.EmailStatus,'S') = 'S' then 'Sent' else 'Pending' end, 
			@ContactHistoryID, @ContactID, @UserContactID, isnull(ch.isPrivate,0)
		from ContactHistory ch
		left outer join contact c on c.id=ch.ContactID
		left outer join contact c2 on c2.id=ch.ContactOwnerID
		where ch.ID=@ContactHistoryID
	end
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_Email_Send]') and xtype = 'P ')  
 drop Procedure WS_RM_Email_Send
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[WS_RM_Email_Send] @SessionID int
as
begin
	declare @ContactHistoryID int, @PreviousAssigned int
	
	if exists( select * from WS_RM_Sess_Email where SessionID=@SessionID and isnull(ContactHistoryID,-1) = -1 )
	begin
		--insert
		insert into ContactHistory (ContactID, ContactOwnerID, DateCreated, DateModified, NumberOfVisits, Direction, EmailAddress, 
			Subject, Body, ContactType_ID, ContextItemId, RespondBy, EmailStatus, VisitType, [IsPrivate])
		select w.ContactID, w.UserContactID, w.DateCreated, GETDATE(), 1, 'Outgoing', w.EmailAddress, 
			w.Subject, replace(w.Body, CHAR(10), CHAR(13)+CHAR(10)), w.ContactType_ID, w.TopicalAreaID, w.ReminderDate, 'P', w.EmailType, w.IsPrivate
		from WS_RM_Sess_Email w
		where w.SessionID=@SessionID	
		
		select @ContactHistoryID=@@IDENTITY	
	end
	else
	begin
		--update
		update ch
		set ch.DateModified=GETDATE(), ch.Subject=w.Subject, ch.RespondBy=w.ReminderDate, ch.ContextItemId=w.TopicalAreaID,
			ch.VisitType=w.EmailType, ch.Body=replace(w.Body, CHAR(10), CHAR(13)+CHAR(10)), ch.isPrivate=w.IsPrivate
		from ContactHistory ch
		join WS_RM_Sess_Email w on w.ContactHistoryID=ch.ID
		where w.SessionID=@SessionID		
		
		select @ContactHistoryID=ch.ID
		from ContactHistory ch
		join WS_RM_Sess_Email w on w.ContactHistoryID=ch.ID
		where w.SessionID=@SessionID		
	end
	
	delete from WS_RM_Sess_Email where SessionID=@SessionID
	
	select @ContactHistoryID [ContactHistoryID]
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_Note_Get]') and xtype = 'P ')  
 drop Procedure WS_RM_Note_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[WS_RM_Note_Get] @SessionID int, @UserContactID int, @NoteID int, @ContactID int
as
begin
	declare @DateStr varchar(30)
	delete from WS_RM_Sess_Note where SessionID=@SessionID
	
	select @DateStr=CAST((DATEPART(mm, getdate())) as varchar)+'-'+CAST((DATEPART(dd, getdate())) as varchar)+'-'+CAST((DATEPART(yyyy, getdate())) as varchar)
	
	if( @NoteID = -1 )
	begin
		insert into WS_RM_Sess_Note (SessionID, NoteID, Content, TopicalAreaID, ContactID, UserContactID, DateCreated, [Owner], [Public])
		select @SessionID, -1, '['+isnull(c.KnownAs,substring((isnull(c.FirstName,'')+' '+isnull(c.LastName,'')),1,48) )+']', null, 
			@ContactID, @UserContactID, @DateStr, c2.KnownAs, 1			
		from contact c
		join contact c2 on c2.id=@UserContactID
		where c.id=@ContactID
	end
	else
	begin
		insert into WS_RM_Sess_Note (SessionID, NoteID, Content, TopicalAreaID, ContactID, UserContactID, DateCreated, [Owner], [Public], RespondBy)
		select @SessionID, n.ID, n.Content, n.ContextItemId, c.ID, @UserContactID, n.DateCreated, c2.KnownAs, n.[Public], n.RespondBy
		from Notes n
		join relations r on r.itemid=n.id and r.itemType='Notes' and r.Target='Contact' and r.TargetID=@ContactID
		join contact c on c.id=r.TargetID and r.Target='Contact'
		join contact c2 on c2.ID=n.Owner_ID
		where n.ID=@NoteID
	end
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_Note_Send]') and xtype = 'P ')  
 drop Procedure WS_RM_Note_Send
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[WS_RM_Note_Send] @SessionID int
as
begin
	declare @NoteID int, @OUT_PKkey int
	
	if exists( select * from WS_RM_Sess_Note where SessionID=@SessionID and isnull(NoteID,-1) = -1 )
	begin
		--insert
		insert into Notes (Content, [Public], Owner_ID, DateCreated, ContextItemID, RespondBy)
		select replace(w.Content, CHAR(10), CHAR(13)+CHAR(10)),  w.[Public], UserContactID, w.DateCreated, w.TopicalAreaID, w.RespondBy
		from WS_RM_Sess_Note w
		where w.SessionID=@SessionID
		
		select @NoteID=@@IDENTITY
		
		insert Relations(Target, TargetID, ItemType, ItemID)
		select 'Contact', w.ContactID, 'Notes', @NoteID
		from WS_RM_Sess_Note w
		where w.SessionID=@SessionID
		
		insert OutlookManagerNotification(LinkID, LinkType, Mgr_TriggerUDI, Mgr_SeenItYN, Mgr_TaskCompleteYN) 
		select @NoteID, 'Notes', 'I','N','N'
		
		select @OUT_PKkey=@@IDENTITY
	end
	else
	begin
		--update
		update n
		set n.Content=replace(w.Content, CHAR(10), CHAR(13)+CHAR(10)), n.[Public]=w.[Public], n.ContextItemId=w.TopicalAreaID, n.DateCreated=w.DateCreated,
			n.RespondBy=w.RespondBy
		from Notes n
		join WS_RM_Sess_Note w on w.NoteID=n.ID
		where w.SessionID=@SessionID
						
		update o		
		set o.Mgr_TriggerUDI = 'U', o.Mgr_SeenItYN = 'N'
		from OutlookManagerNotification o
		join WS_RM_Sess_Note w on w.NoteID=o.LinkID and o.LinkType = 'Notes'
		where w.SessionID=@SessionID
		
		select @OUT_PKkey=OUT_PKkey
		from OutlookManagerNotification o
		join WS_RM_Sess_Note w on w.NoteID=o.LinkID and o.LinkType = 'Notes'
		where w.SessionID=@SessionID
	end
	
	delete from WS_RM_Sess_Note where SessionID=@SessionID
	
	select @OUT_PKkey [OUT_PKkey]
end





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_OpportunityCommDefGet]') and xtype = 'P ')  
 drop Procedure WS_RM_OpportunityCommDefGet
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- WS_RM_OpportunityCommDefGet 1, 1, 7, 12
create proc WS_RM_OpportunityCommDefGet @SessionID int, @UserContactID int, @RM_Opportunity_ID int, @CompanyID int
as
begin
	declare @tr_db varchar(500), @sql varchar(max), @nsql nvarchar(max), @opp_target varchar(1), @opp_target_id int
	
	select @tr_db=treasuryDBName from companies where autoID=@CompanyID
	
	select @nsql = 'select @opp_target=opp_target, @opp_target_id=opp_target_id 
		from '+@tr_db+'..RM_Opportunity 
		where RM_Opportunity_ID = ' + CAST(@RM_Opportunity_ID as varchar)  		
	exec sp_executesql @nsql, N'@opp_target varchar(1) OUT, @opp_target_id int OUT', @opp_target OUT, @opp_target_id OUT

	delete from WS_RM_Sess_OppCommDef where SessionID=@SessionID
			
	insert into WS_RM_Sess_OppCommDef (SessionID, ComDefID, ContactID, Comm_Type_ID, Comm_Purpose_ID )
	select @SessionID, ID, CONTACT_ID, COMM_TYPE_ID, COMM_PURPOSE_ID
	from COMMUNICATION_DEFAULTS
	where (TYPE = @opp_target) AND (COMPANY_ID = @CompanyID) AND (SOURCE_ID = @opp_target_id)
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_OpportunityCommDefSend]') and xtype = 'P ')  
 drop Procedure WS_RM_OpportunityCommDefSend
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[WS_RM_OpportunityCommDefSend] @SessionID int, @UserContactID int, @RM_Opportunity_ID int, @CompanyID int
as
begin
	declare @tr_db varchar(500), @sql varchar(max), @nsql nvarchar(max), @opp_target varchar(1), @opp_target_id int
	
	select @tr_db=treasuryDBName from companies where autoID=@CompanyID
	
	select @nsql = 'select @opp_target=opp_target, @opp_target_id=opp_target_id 
		from '+@tr_db+'..RM_Opportunity 
		where RM_Opportunity_ID = ' + CAST(@RM_Opportunity_ID as varchar)  		
	exec sp_executesql @nsql, N'@opp_target varchar(1) OUT, @opp_target_id int OUT', @opp_target OUT, @opp_target_id OUT
	
	--delete records from web
	delete from COMMUNICATION_DEFAULTS
	where company_id=@CompanyID and type=@opp_target and source_id=@opp_target_id and ID not in (
		select ComDefID 
		from WS_RM_Sess_OppCommDef w
		where w.SessionID=@SessionID and ISNULL(ComDefID,-1) <> -1
	)
	
	--update existing records
	update c
	set c.CONTACT_ID=w.ContactID, c.COMM_TYPE_ID=w.Comm_Type_ID, c.COMM_PURPOSE_ID=w.Comm_Purpose_ID
	from COMMUNICATION_DEFAULTS c
	join WS_RM_Sess_OppCommDef w on w.ComDefID=c.id
	where w.SessionID=@SessionID
	
	--insert new ones
	insert into COMMUNICATION_DEFAULTS (TYPE, COMPANY_ID, SOURCE_ID, CONTACT_ID, COMM_TYPE_ID, COMM_PURPOSE_ID)
	select @opp_target, @CompanyID, @opp_target_id, w.ContactID, w.Comm_Type_ID, w.Comm_Purpose_ID
	from WS_RM_Sess_OppCommDef w
	where w.SessionID=@SessionID and ISNULL(ComDefID,-1) = -1
	
	delete from WS_RM_Sess_OppCommDef where SessionID=@SessionID
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_OpportunityContactGet]') and xtype = 'P ')  
 drop Procedure WS_RM_OpportunityContactGet
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec WS_RM_OpportunityContactGet 7, 12
create proc WS_RM_OpportunityContactGet @RM_Opportunity_ID int, @CompanyID int
as
begin
	declare @tr_db varchar(500), @sql varchar(max), @nsql nvarchar(max), @opp_target varchar(1), @opp_target_id int,
		@Type varchar(20)
	
	select @tr_db=treasuryDBName from companies where autoID=@CompanyID
	
	select @nsql = 'select @opp_target=opp_target, @opp_target_id=opp_target_id 
		from '+@tr_db+'..RM_Opportunity 
		where RM_Opportunity_ID = ' + CAST(@RM_Opportunity_ID as varchar)  		
	exec sp_executesql @nsql, N'@opp_target varchar(1) OUT, @opp_target_id int OUT', @opp_target OUT, @opp_target_id OUT
	
	select @Type=case when @opp_target='C' then 'Customer' when @opp_target='P' then 'Prospect' end
	
	select c.ID, c.KnownAs
	from relations r
	join contact c on c.id=r.itemID 
	where r.Target=@Type and r.TargetID=@opp_target_id and r.ItemType='Contact' and r.CompanyID=@CompanyID
		and ISNULL(c.inactive,'N') = 'N'
	order by c.KnownAs
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_OpportunityContactInternalGet]') and xtype = 'P ')  
 drop Procedure WS_RM_OpportunityContactInternalGet
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec WS_RM_OpportunityContactInternalGet 12
create proc WS_RM_OpportunityContactInternalGet @CompanyID int
as
begin
	declare @tr_db varchar(500), @sql varchar(max)
	
	select @tr_db=treasuryDBName from companies where autoID=@CompanyID
	
	select @sql = 
	'select c.ID, c.KnownAs, c.JobTitle, c.BusinessTelephoneNumber, c.Email1Address  
	from '+@tr_db+'..mluser m
	join contact c on m.ContactID=c.ID
	where c.[TYPE] = ''user'' and c.ID <> -1 and ISNULL(c.inactive,''N'') = ''N'' and ISNULL(m.InActive,''N'') = ''N''
	order by c.KnownAs'
	exec( @sql )
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_OpportunityContactTargetGet]') and xtype = 'P ')  
 drop Procedure WS_RM_OpportunityContactTargetGet
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec WS_RM_OpportunityContactTargetGet 7, 12
create proc WS_RM_OpportunityContactTargetGet @RM_Opportunity_ID int, @CompanyID int
as
begin
	declare @tr_db varchar(500), @sql varchar(max), @nsql nvarchar(max), @opp_target varchar(1), @opp_target_id int,
		@Type varchar(20)
	
	select @tr_db=treasuryDBName from companies where autoID=@CompanyID
	
	select @nsql = 'select @opp_target=opp_target, @opp_target_id=opp_target_id 
		from '+@tr_db+'..RM_Opportunity 
		where RM_Opportunity_ID = ' + CAST(@RM_Opportunity_ID as varchar)  		
	exec sp_executesql @nsql, N'@opp_target varchar(1) OUT, @opp_target_id int OUT', @opp_target OUT, @opp_target_id OUT
	
	select @Type=case when @opp_target='C' then 'Customer' when @opp_target='P' then 'Prospect' end
	
	select c.ID, c.KnownAs, c.JobTitle, c.BusinessTelephoneNumber, c.Email1Address 
	from relations r
	join contact c on c.id=r.itemID 
	where r.Target=@Type and r.TargetID=@opp_target_id and r.ItemType='Contact' and r.CompanyID=@CompanyID
		and ISNULL(c.inactive,'N') = 'N'
	order by c.KnownAs
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_OutstandingTaskApp_Get]') and xtype = 'P ')  
 drop Procedure WS_RM_OutstandingTaskApp_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec WS_RM_OutstandingTaskApp_Get 7, 12
CREATE proc [dbo].[WS_RM_OutstandingTaskApp_Get] @contactID int, @companyID int
as
begin

	declare @username varchar(50), @nsql nvarchar(max), @sql varchar(max), @tr_db varchar(500)
	
	select @tr_db=TreasuryDBName from companies where AutoID=@companyID
	
	select @nsql = 'select @username=name from '+@tr_db+'..mluser where contactID = ' + CAST( @contactID as varchar)  
	exec sp_executesql @nsql, N'@username varchar(50) OUT', @username OUT
	
	select @sql = 'exec '+@tr_db+'..sp_fill_mluser_supervisor '''+@username+''', '''+@username+''', 1'
	exec(@sql)
	
	exec SC_ContactHistoryViewer @username, @contactID, @companyID, null, null, null, null, null, null, null, null, null, 'o'

end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_Phone_Get]') and xtype = 'P ')  
 drop Procedure WS_RM_Phone_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[WS_RM_Phone_Get] @SessionID int, @UserContactID int, @ContactHistoryID int, @ContactID int
as
begin
	declare @DateStr varchar(30)
	delete from WS_RM_Sess_Phone where SessionID=@SessionID
	
	select @DateStr=CAST((DATEPART(mm, getdate())) as varchar)+'-'+CAST((DATEPART(dd, getdate())) as varchar)+'-'+CAST((DATEPART(yyyy, getdate())) as varchar)
	
	if( @ContactHistoryID = -1 )
	begin
		insert into WS_RM_Sess_Phone (SessionID, Subject, ReminderDate, TopicalAreaID, ContactType_ID, DateCreated, ToContact, FromContact,
			Succeeded, Note, Comments, ContactHistoryID, ContactID, UserContactID, [IsPrivate])
		select @SessionID, '', null, null, 4 /**4=Outgoing Phone Call **/, GETDATE(), c.KnownAs, c2.KnownAs,
			0, '', '', -1, @ContactID, @UserContactID, 0
		from contact c
		join contact c2 on c2.id=@UserContactID
		where c.id=@ContactID
	end
	else
	begin
		insert into WS_RM_Sess_Phone (SessionID, Subject, ReminderDate, TopicalAreaID, ContactType_ID, DateCreated, ToContact, FromContact,
			Succeeded, Note, Comments, ContactHistoryID, ContactID, UserContactID, [IsPrivate])
		select @SessionID, ch.Subject, ch.RespondBy, ch.ContextItemId, ch.ContactType_ID, ch.DateCreated, c.KnownAs, c2.KnownAs,
			ch.Succeeded, ch.Body, ch.ReminderComments, @ContactHistoryID, @ContactID, @UserContactID, ISNULL(ch.isprivate,0)
		from ContactHistory ch
		left outer join contact_aptsTasks ca on ca.contactHistoryID=ch.id
		left outer join contact c on c.id=ch.ContactID
		left outer join contact c2 on c2.id=ch.ContactOwnerID
		where ch.ID=@ContactHistoryID
	end
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_Phone_Send]') and xtype = 'P ')  
 drop Procedure WS_RM_Phone_Send
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[WS_RM_Phone_Send] @SessionID int
as
begin
	declare @ContactHistoryID int, @PreviousAssigned int
	
	if exists( select * from WS_RM_Sess_Phone where SessionID=@SessionID and isnull(ContactHistoryID,-1) = -1 )
	begin
		--insert
		insert into ContactHistory (ContactID, ContactOwnerID, DateCreated, DateModified, Succeeded, Subject, Body, ContactType_ID, 
			ContextItemId, RespondBy, ReminderComments, [IsPrivate])
		select w.ContactID, w.UserContactID, w.DateCreated, GETDATE(), w.Succeeded, w.Subject, replace(w.Note, CHAR(10), CHAR(13)+CHAR(10)), w.ContactType_ID, 
			w.TopicalAreaID, w.ReminderDate, replace(w.Comments, CHAR(10), CHAR(13)+CHAR(10)), w.IsPrivate
		from WS_RM_Sess_Phone w
		where w.SessionID=@SessionID		
	end
	else
	begin
		--update
		update ch
		set ch.DateModified=GETDATE(), ch.Subject=w.Subject, ch.RespondBy=w.ReminderDate, ch.ContextItemId=w.TopicalAreaID,
			ch.ContactType_ID=w.ContactType_ID, ch.DateCreated=w.DateCreated, ch.Succeeded=w.Succeeded,
			ch.Body=replace(w.Note, CHAR(10), CHAR(13)+CHAR(10)), ch.ReminderComments=replace(w.Comments, CHAR(10), CHAR(13)+CHAR(10)), ch.isPrivate=w.IsPrivate	
		from ContactHistory ch
		join WS_RM_Sess_Phone w on w.ContactHistoryID=ch.ID
		where w.SessionID=@SessionID		
	end
	
	delete from WS_RM_Sess_Phone where SessionID=@SessionID
end





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_Profile_Get]') and xtype = 'P ')  
 drop Procedure WS_RM_Profile_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create proc [dbo].[WS_RM_Profile_Get] @SessionID int, @UserContactID int, @ContactID int
as
begin
	declare @DateStr varchar(30)
	delete from WS_RM_Sess_Profile where SessionID=@SessionID
	
	select @DateStr=CAST((DATEPART(mm, getdate())) as varchar)+'-'+CAST((DATEPART(dd, getdate())) as varchar)+'-'+CAST((DATEPART(yyyy, getdate())) as varchar)
	
	insert into WS_RM_Sess_Profile (SessionID, ContactID, UserContactID, [Type], FirstName, LastName, KnownAs, JobTitle, BusinessCompany, 
		AssignedTo, Campaign, BusinessTelephoneNumber, Business_Phone_Extention, BusinessFaxNumber, MobileTelephoneNumber,
		HomeTelephoneNumber, Email1Address, OtherTelephoneNumber, BusinessStreet, BusinessCity, BusinessState, BusinessPostalCode,
		BusinessCountry)
	select @SessionID, ID, @UserContactID, [type], FirstName, LastName, KnownAs, JobTitle, BusinessCompany, 
		Owner_ID, PersonalEmailOnly, BusinessTelephoneNumber, Business_Phone_Extention, BusinessFaxNumber, MobileTelephoneNumber,
		HomeTelephoneNumber, Email1Address, OtherTelephoneNumber, BusinessStreet, BusinessCity, BusinessState, BusinessPostalCode,
		BusinessCountry
	from contact c
	where c.id=@ContactID
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_Profile_Send]') and xtype = 'P ')  
 drop Procedure WS_RM_Profile_Send
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[WS_RM_Profile_Send] @SessionID int
as
begin		
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Notify'))
		drop table #Notify
	
	CREATE TABLE #Notify(
		OUT_PKkey int,
	)
	
	declare @ContactID int
	
	select @ContactID=c.ID
	from Contact c
	join WS_RM_Sess_Profile w on w.ContactID=c.ID
	where w.SessionID=@SessionID
	
	update c
	set c.FirstName=w.FirstName,
		c.LastName=w.LastName,
		c.KnownAs=w.KnownAs,
		c.JobTitle=w.JobTitle,
		c.BusinessCompany=w.BusinessCompany,
		c.Owner_ID=w.AssignedTo,
		c.PersonalEmailOnly=w.Campaign, 
		c.BusinessTelephoneNumber=w.BusinessTelephoneNumber,
		c.Business_Phone_Extention=w.Business_Phone_Extention,
		c.BusinessFaxNumber=w.BusinessFaxNumber,
		c.MobileTelephoneNumber=w.MobileTelephoneNumber,
		c.HomeTelephoneNumber=w.HomeTelephoneNumber,
		c.Email1Address=w.Email1Address,
		c.OtherTelephoneNumber=w.OtherTelephoneNumber,
		c.BusinessStreet=w.BusinessStreet,
		c.BusinessCity=w.BusinessCity,
		c.BusinessState=w.BusinessState,
		c.BusinessPostalCode=w.BusinessPostalCode,
		c.BusinessCountry=w.BusinessCountry
	from Contact c
	join WS_RM_Sess_Profile w on w.ContactID=c.ID
	where w.SessionID=@SessionID	
	
	insert into #Notify
	exec sp_Dashboard_UpdateOLMNotification @ContactID, 'Contact', 'U'
	
	delete from WS_RM_Sess_Profile where SessionID=@SessionID
	
	select OUT_PKkey from #Notify
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_Task_Get]') and xtype = 'P ')  
 drop Procedure WS_RM_Task_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[WS_RM_Task_Get] @SessionID int, @UserContactID int, @ContactHistoryID int, @ContactID int
as
begin
	declare @DateStr varchar(30)
	delete from WS_RM_Sess_Task where SessionID=@SessionID
	
	select @DateStr=CAST((DATEPART(mm, getdate())) as varchar)+'-'+CAST((DATEPART(dd, getdate())) as varchar)+'-'+CAST((DATEPART(yyyy, getdate())) as varchar)
	
	if( @ContactHistoryID = -1 )
	begin
		insert into WS_RM_Sess_Task (SessionID, Task, TopicalAreaID, AssignedTo, 
			AssignedBy, StartDate, EndDate, PctComplete, Note, ContactHistoryID,
			ContactID, UserContactID, [IsPrivate])
		select @SessionID, '['+isnull(c.KnownAs,substring((isnull(c.FirstName,'')+' '+isnull(c.LastName,'')),1,48) )+']', null, @UserContactID,
			c2.KnownAs, @DateStr, @DateStr, 0, '', -1, @ContactID, @UserContactID, 0
		from contact c
		join contact c2 on c2.id=@UserContactID
		where c.id=@ContactID
	end
	else
	begin
		insert into WS_RM_Sess_Task (SessionID, Task, TopicalAreaID, AssignedTo, AssignedBy, StartDate, EndDate, PctComplete, Note, 
			ContactHistoryID, ContactID, UserContactID, [IsPrivate], RespondBy)
		select @SessionID, ch.Subject, ch.ContextItemId, ca.AssignedTo, c.Knownas, ca.StartDate, ca.EndDate, ca.pct_comp, ch.Body, 
			@ContactHistoryID, @ContactID, @UserContactID, isnull(ch.isPrivate,0), ch.RespondBy
		from ContactHistory ch
		left outer join contact_aptsTasks ca on ca.contactHistoryID=ch.id
		left outer join contact c on c.id=ch.ContactOwnerID
		where ch.ID=@ContactHistoryID
	end
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_Task_Send]') and xtype = 'P ')  
 drop Procedure WS_RM_Task_Send
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[WS_RM_Task_Send] @SessionID int
as
begin
	declare @ContactHistoryID int, @PreviousAssigned int, @OUT_PKkey int
	
	if exists( select * from WS_RM_Sess_Task where SessionID=@SessionID and isnull(ContactHistoryID,-1) = -1 )
	begin
		--insert
		insert into ContactHistory (ContactID, ContactOwnerID, DateCreated, DateModified, Succeeded, Subject, Body, ContactType_ID, ContextItemId, 
			[IsPrivate], RespondBy)
		select w.ContactID, w.UserContactID, GETDATE(), GETDATE(), 1, w.Task, replace(w.Note, CHAR(10), CHAR(13)+CHAR(10)), 18 /**18=Task **/, w.TopicalAreaID, 
			w.IsPrivate, w.RespondBy
		from WS_RM_Sess_Task w
		where w.SessionID=@SessionID
		
		select @ContactHistoryID=@@IDENTITY
		
		insert into contact_aptsTasks (contactHistoryID, AssignedTo, StartDate, EndDate, pct_comp)
		select @ContactHistoryID, w.AssignedTo, w.StartDate, w.EndDate, isnull(w.PctComplete,0)
		from WS_RM_Sess_Task w
		where w.SessionID=@SessionID
		
		insert OutlookManagerNotification(LinkID, LinkType, Mgr_TriggerUDI, Mgr_SeenItYN, Mgr_TaskCompleteYN)
		select @ContactHistoryID, 'Task', 'I','N','N'
		
		select @OUT_PKkey=@@IDENTITY
	end
	else
	begin
		--update
		update ch
		set ch.DateModified=GETDATE(), ch.Subject=w.Task, ch.Body=replace(w.Note, CHAR(10), CHAR(13)+CHAR(10)), ch.ContextItemId=w.TopicalAreaID, ch.isPrivate=w.IsPrivate,
			ch.RespondBy=w.RespondBy
		from ContactHistory ch
		join WS_RM_Sess_Task w on w.ContactHistoryID=ch.ID
		where w.SessionID=@SessionID
		
		select @PreviousAssigned=ca.AssignedTo 
		from contact_aptsTasks ca
		join WS_RM_Sess_Task w on w.ContactHistoryID=ca.contactHistoryID
		where w.SessionID=@SessionID
		
		update ca
		set ca.AssignedTo=w.AssignedTo, ca.StartDate=w.StartDate, ca.EndDate=w.EndDate, ca.pct_comp=w.PctComplete, ca.PreviousAssigned=@PreviousAssigned
		from contact_aptsTasks ca 
		join WS_RM_Sess_Task w on w.ContactHistoryID=ca.contactHistoryID
		where w.SessionID=@SessionID
		
		update o		
		set o.Mgr_TriggerUDI = 'U', o.Mgr_SeenItYN = 'N'
		from OutlookManagerNotification o
		join WS_RM_Sess_Task w on w.ContactHistoryID=o.LinkID and o.LinkType = 'Task'
		where w.SessionID=@SessionID
		
		select @OUT_PKkey=OUT_PKkey
		from OutlookManagerNotification o
		join WS_RM_Sess_Task w on w.ContactHistoryID=o.LinkID and o.LinkType = 'Task'
		where w.SessionID=@SessionID
	end
	
	delete from WS_RM_Sess_Task where SessionID=@SessionID
	
	select @OUT_PKkey [OUT_PKkey]
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_Visit_Get]') and xtype = 'P ')  
 drop Procedure WS_RM_Visit_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[WS_RM_Visit_Get] @SessionID int, @UserContactID int, @ContactHistoryID int, @ContactID int
as
begin
	declare @DateStr varchar(30)
	delete from WS_RM_Sess_Visit where SessionID=@SessionID
	
	select @DateStr=CAST((DATEPART(mm, getdate())) as varchar)+'-'+CAST((DATEPART(dd, getdate())) as varchar)+'-'+CAST((DATEPART(yyyy, getdate())) as varchar)
	
	if( @ContactHistoryID = -1 )
	begin
		insert into WS_RM_Sess_Visit (SessionID, Subject, ReminderDate, TopicalAreaID, ContactType_ID, DateCreated, VisitedContact, VisitorContact,
			Succeeded, Note, Comments, ContactHistoryID, ContactID, UserContactID, [IsPrivate])
		select @SessionID, '', null, null, 8 /**8=Visiting **/, GETDATE(), c.KnownAs, c2.KnownAs,
			0, '', '', -1, @ContactID, @UserContactID, 0
		from contact c
		join contact c2 on c2.id=@UserContactID
		where c.id=@ContactID
	end
	else
	begin
		insert into WS_RM_Sess_Visit (SessionID, Subject, ReminderDate, TopicalAreaID, ContactType_ID, DateCreated, VisitedContact, VisitorContact,
			Succeeded, Note, Comments, ContactHistoryID, ContactID, UserContactID, [IsPrivate])
		select @SessionID, ch.Subject, ch.RespondBy, ch.ContextItemId, ch.ContactType_ID, ch.DateCreated, c.KnownAs, c2.KnownAs,
			ch.Succeeded, ch.Body, ch.ReminderComments, @ContactHistoryID, @ContactID, @UserContactID, ISNULL(ch.isprivate,0)
		from ContactHistory ch
		left outer join contact_aptsTasks ca on ca.contactHistoryID=ch.id
		left outer join contact c on c.id=ch.ContactID
		left outer join contact c2 on c2.id=ch.ContactOwnerID
		where ch.ID=@ContactHistoryID
	end
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_RM_Visit_Send]') and xtype = 'P ')  
 drop Procedure WS_RM_Visit_Send
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE proc [dbo].[WS_RM_Visit_Send] @SessionID int
as
begin
	declare @ContactHistoryID int, @PreviousAssigned int
	
	if exists( select * from WS_RM_Sess_Visit where SessionID=@SessionID and isnull(ContactHistoryID,-1) = -1 )
	begin
		--insert
		insert into ContactHistory (ContactID, ContactOwnerID, DateCreated, DateModified, Succeeded, Subject, Body, ContactType_ID, 
			ContextItemId, RespondBy, ReminderComments, [IsPrivate])
		select w.ContactID, w.UserContactID, w.DateCreated, GETDATE(), w.Succeeded, w.Subject, replace(w.Note, CHAR(10), CHAR(13)+CHAR(10)), w.ContactType_ID, 
			w.TopicalAreaID, w.ReminderDate, replace(w.Comments, CHAR(10), CHAR(13)+CHAR(10)), w.IsPrivate
		from WS_RM_Sess_Visit w
		where w.SessionID=@SessionID		
	end
	else
	begin
		--update
		update ch
		set ch.DateModified=GETDATE(), ch.Subject=w.Subject, ch.RespondBy=w.ReminderDate, ch.ContextItemId=w.TopicalAreaID,
			ch.ContactType_ID=w.ContactType_ID, ch.DateCreated=w.DateCreated, ch.Succeeded=w.Succeeded,
			ch.Body=replace(w.Note, CHAR(10), CHAR(13)+CHAR(10)), ch.ReminderComments=replace(w.Comments, CHAR(10), CHAR(13)+CHAR(10)), ch.isPrivate=w.IsPrivate		
		from ContactHistory ch
		join WS_RM_Sess_Visit w on w.ContactHistoryID=ch.ID
		where w.SessionID=@SessionID		
	end
	
	delete from WS_RM_Sess_Visit where SessionID=@SessionID
end





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_Routing_CancelThirdPartySale]') and xtype = 'P ')  
 drop Procedure WS_Routing_CancelThirdPartySale
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[WS_Routing_CancelThirdPartySale]
@ID int,
@Status char(1)
as

--declare 
--@ID int,
--@Status char(1)

--select @id =374


begin

declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@modref varchar(100),
	@stat varchar(50)

    
	select @CompanyID=CompanyID from approvals_requested where id = @id

	select @tr_db= treasurydbname  from companies where autoid = @CompanyID
	 

	select @modref=module_reference_id, @stat=status from approvals_requested where id=@id

    
	if( @stat = 'declined' )
	begin
		
        set @sql ='update '+@tr_db+'..WS_SUB_TASK_HDR set status =''D''  where WS_ST_ID='+@modref+' 
        
        declare @notes varchar(8000), @contact_id int, @an_id int
        select top 1 @notes=ISNULL(n.notes,''''), @contact_id=c.contact_id
        from Approval_Notification n
        join Approval_Contacts c on c.id=n.ac_id
        where n.ar_id = '+CAST(@id as varchar)+' 
        order by n.response_date desc 
        
        update '+@tr_db+'..PROJ_LOT_AGREEMENT_3rdParty_Purchaser_Hist set request_approved=''F'' where WS_ST_ID='+@modref+'
                
        insert into '+@tr_db+'..WS_EVENT_HISTORY (DETAIL_ID, EVENT_DATE, CONTACT_ID, EVENT, NOTES, ST_TYPE_ID)
		select '+@modref+', GETDATE(), @contact_id,  ''Cancel third party sale request declined.'', @notes, 11' --11 = Request to Cancel 3rd Party Sale
	    exec( @sql )		
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='update '+@tr_db+'..WS_SUB_TASK_HDR set status =''A''  where WS_ST_ID='+@modref+'
		
		declare @agreement_id int
		select @agreement_id=agreement_id from '+@tr_db+'..WS_SUB_TASK_HDR where WS_ST_ID='+@modref+'
		
		declare @notes varchar(8000), @contact_id int, @an_id int
        select top 1 @notes=ISNULL(n.notes,''''), @contact_id=c.contact_id
        from Approval_Notification n
        join Approval_Contacts c on c.id=n.ac_id
        where n.ar_id = '+CAST(@id as varchar)+' 
        order by n.response_date desc 
              
		update '+@tr_db+'..proj_lot_agreement
		set third_party_purchase=null, third_party_purchase_date=null, 
		thrird_party_purchaser_id=null, thrird_party_purchaser2_id=null, 
		thrird_party_purchaser3_id=null, thrird_party_purchaser4_id=null, 
		thrird_party_purchaser5_id=null, thrird_party_purchaser6_id=null		
		where agreement_id=@agreement_id 
		
		update '+@tr_db+'..PROJ_LOT_AGREEMENT_3rdParty_Purchaser_Hist set request_approved=''T'' where WS_ST_ID='+@modref+'
                
        insert into '+@tr_db+'..WS_EVENT_HISTORY (DETAIL_ID, EVENT_DATE, CONTACT_ID, EVENT, NOTES, ST_TYPE_ID)
		select '+@modref+', GETDATE(), @contact_id,  ''Cancel third party sale request approved.'', @notes, 11' --11 = Request to Cancel 3rd Party Sale
	    exec( @sql )
	end

end


 








Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_Routing_HomeSubmission]') and xtype = 'P ')  
 drop Procedure WS_Routing_HomeSubmission
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[WS_Routing_HomeSubmission]
@ID int,
@Status char(1)
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#trdbs')) 
		drop table #trdbs 
	
	create table #trdbs(tr_db varchar(500), company_id int)

	declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@WS_ST_ID varchar(100),
	@stat varchar(50),
	@cur_tr_db varchar(100),
	@nSql nvarchar(max),
	@Model_Submission_ID int,
	@customer_code varchar(10),
	@cur_company_id int,
	@notes varchar(8000),
	@contactID int

    
	select @CompanyID=CompanyID from approvals_requested where id=@id

	select @tr_db=treasurydbname from companies where autoid=@CompanyID	 
	
	select @contactID=last_changed_by_id, @WS_ST_ID=module_reference_id, @stat=status, @notes=replace(ISNULL(last_changed_by_notes,''), '''', '''''') from approvals_requested where id=@id
    
	if( @stat = 'declined' )
	begin		
        set @sql ='declare @WS_HomeSubmission_ID int
        select @WS_HomeSubmission_ID=HomeSubmission_ID	
		from '+@tr_db+'..WS_SUB_TASK_HDR where WS_ST_ID='+@WS_ST_ID+'
        
        update '+@tr_db+'..WS_SUB_TASK_HDR set status =''D'' where WS_ST_ID='+@WS_ST_ID+'
        
        update '+@tr_db+'..WS_HomeSubmission set Status=''D'' where id=@WS_HomeSubmission_ID
        
        insert into '+@tr_db+'..WS_EVENT_HISTORY (DETAIL_ID, EVENT_DATE, CONTACT_ID, EVENT, NOTES, ST_TYPE_ID)
		select '+@WS_ST_ID+', GETDATE(), '+CAST(@contactID as varchar)+',  ''Home submission request declined.'', '''+@notes+''', 10' --10 = Home Submission
	    exec( @sql )		
	end
	else if( @stat = 'approved' )
	begin
		set @sql ='declare @WS_HomeSubmission_ID int, @model varchar(50), @elevation varchar(5), @builder_id int, @OLD_WS_ST_ID int,
		@Builder_Models_ID int, @spec_home varchar(1), @show_home varchar(1), @agreement_id int, @Lot_Pair_ID int, @proj_lot_id int,
		@HomeSub_Task_ID int
		
		select @HomeSub_Task_ID=10 --WS_SUB_TASK_TYPE ID for Home Submission
		
		select @WS_HomeSubmission_ID=HomeSubmission_ID, @builder_id=BUILDER_ID 		
		from '+@tr_db+'..WS_SUB_TASK_HDR where WS_ST_ID='+@WS_ST_ID+'
		
		select @model=model, @elevation=elevation, @spec_home=spec_home, @show_home=show_home, @agreement_id=agreement_id, @proj_lot_id=proj_lot_id 
		from '+@tr_db+'..WS_HomeSubmission where id=@WS_HomeSubmission_ID
		
		select @Builder_Models_ID=Builder_Models_ID 
		from '+@tr_db+'..LD_Builder_Models where Description=@model and Elevation=@elevation and customer_id=@builder_id
		
		
		
		select @OLD_WS_ST_ID=ws_st_id from '+@tr_db+'..ws_sub_task_hdr where ST_TYPE_ID=@HomeSub_Task_ID and proj_lot_id=@proj_lot_id and STATUS=''A''
						
		update '+@tr_db+'..ws_sub_task_hdr set STATUS=''D'' where WS_ST_ID=@OLD_WS_ST_ID
		
		insert into '+@tr_db+'..WS_EVENT_HISTORY (DETAIL_ID, EVENT_DATE, CONTACT_ID, EVENT, NOTES, ST_TYPE_ID) 
		select @OLD_WS_ST_ID, GETDATE(), -1, ''Home submission declined, new submission has been made.'', '''', @HomeSub_Task_ID 
		
		update '+@tr_db+'..WS_SUB_TASK_HDR set status =''A'' where WS_ST_ID='+@WS_ST_ID+'
				
		if exists( select * from '+@tr_db+'..LD_Lot_Pair_Det where proj_lot_id=@proj_lot_id	)
		begin		
			select @Lot_Pair_ID=Lot_Pair_ID from '+@tr_db+'..LD_Lot_Pair_Det where proj_lot_id=@proj_lot_id		
			
			update a 
			set a.builder_models_id=@Builder_Models_ID, a.model_desc=@model, a.elevation=@elevation, a.homebuilder_id=@builder_id, 
				a.SpecHome=case when ISNULL(@spec_home,''F'') = ''T'' then 1 else 0 end, 
				a.ShowHome=case when ISNULL(@show_home,''F'') = ''T'' then 1 else 0 end 
			from '+@tr_db+'..PROJ_LOT_AGREEMENT a
			join '+@tr_db+'..PROJ_LOT l on l.proj_lot_id=a.proj_lot_id
			join '+@tr_db+'..LD_Lot_Pair_Det p on p.proj_lot_id=l.proj_lot_id
			where p.Lot_Pair_ID=@Lot_Pair_ID and a.agreement_status_id <> 2
			
			delete r 
			from '+@tr_db+'..PROJ_LOT_AGREEMENT_REPRULES r
			join '+@tr_db+'..PROJ_LOT_AGREEMENT a on a.agreement_id=r.agreement_id
			join '+@tr_db+'..PROJ_LOT l on l.proj_lot_id=a.proj_lot_id
			join '+@tr_db+'..LD_Lot_Pair_Det p on p.proj_lot_id=l.proj_lot_id
			where p.Lot_Pair_ID=@Lot_Pair_ID and a.agreement_status_id <> 2
			
			insert into '+@tr_db+'..PROJ_LOT_AGREEMENT_REPRULES (agreement_id, WS_RR_ID, WS_RR_DET_ID)
			select a.agreement_id, h.WS_RR_ID, h.WS_RR_DET_ID 
			from '+@tr_db+'..PROJ_LOT_AGREEMENT a 
			join '+@tr_db+'..PROJ_LOT l on l.proj_lot_id=a.proj_lot_id
			join '+@tr_db+'..LD_Lot_Pair_Det p on p.proj_lot_id=l.proj_lot_id
			join '+@tr_db+'..WS_HomeSubRepRules h on h.agreement_id=@agreement_id
			where p.Lot_Pair_ID=@Lot_Pair_ID and a.agreement_status_id <> 2
		end
		else
		begin
			update a 
			set a.builder_models_id=@Builder_Models_ID, a.model_desc=@model, a.elevation=@elevation, a.homebuilder_id=@builder_id, 
				a.SpecHome=case when ISNULL(@spec_home,''F'') = ''T'' then 1 else 0 end, 
				a.ShowHome=case when ISNULL(@show_home,''F'') = ''T'' then 1 else 0 end 
			from '+@tr_db+'..PROJ_LOT_AGREEMENT a
			where a.proj_lot_id=@proj_lot_id and a.agreement_status_id <> 2
			
			delete from '+@tr_db+'..PROJ_LOT_AGREEMENT_REPRULES where agreement_id=@agreement_id

			insert into '+@tr_db+'..PROJ_LOT_AGREEMENT_REPRULES (agreement_id, WS_RR_ID, WS_RR_DET_ID)
			select @agreement_id, WS_RR_ID, WS_RR_DET_ID 
			from '+@tr_db+'..WS_HomeSubRepRules 
			where agreement_id=@agreement_id
		end
		
		update '+@tr_db+'..WS_HomeSubmission set Status=''A'' where id=@WS_HomeSubmission_ID
		
		insert into '+@tr_db+'..WS_EVENT_HISTORY (DETAIL_ID, EVENT_DATE, CONTACT_ID, EVENT, NOTES, ST_TYPE_ID)
		select '+@WS_ST_ID+', GETDATE(), '+CAST(@contactID as varchar)+',  ''Home submission request approved.'', '''+@notes+''', 10' --10 = Home Submission
        exec( @sql)        		
	end
end












Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_Routing_ModelSubmission]') and xtype = 'P ')  
 drop Procedure WS_Routing_ModelSubmission
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE proc [dbo].[WS_Routing_ModelSubmission]
@ID int,
@Status char(1)
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#trdbs')) 
		drop table #trdbs 
	
	create table #trdbs(tr_db varchar(500), company_id int)

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#tmpImage')) 
		drop table #tmpImage 
		
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ChatLink')) 
		drop table #ChatLink 
	
	create table #ChatLink(LinkID int)
	
	create table #tmpImage(
		Seq int identity(1,1),
		Ref_ID int,
		Picture varbinary(max)
	)

	declare 
	@tr_db varchar(100),
	@sql varchar(8000),
	@CompanyID int,
	@WS_ST_ID varchar(100),
	@stat varchar(50),
	@cur_tr_db varchar(100),
	@nSql nvarchar(max),
	@Model_Submission_ID int,
	@customer_code varchar(10),
	@cur_company_id int,
	@ChatLink_Sub int

    
	select @CompanyID=CompanyID from approvals_requested where id=@id

	select @tr_db=treasurydbname from companies where autoid=@CompanyID	 

	select @WS_ST_ID=module_reference_id, @stat=status from approvals_requested where id=@id

    
	if( @stat = 'declined' )
	begin		
        set @sql ='update '+@tr_db+'..WS_SUB_TASK_HDR set status =''D'' where WS_ST_ID='+@WS_ST_ID+'
        
        declare @notes varchar(8000), @contact_id int, @an_id int
        select top 1 @notes=ISNULL(n.notes,''''), @contact_id=c.contact_id
        from Approval_Notification n
        join Approval_Contacts c on c.id=n.ac_id
        where n.ar_id = '+CAST(@id as varchar)+' 
        order by n.response_date desc
        
        insert into '+@tr_db+'..WS_EVENT_HISTORY (DETAIL_ID, EVENT_DATE, CONTACT_ID, EVENT, NOTES, ST_TYPE_ID)
		select '+@WS_ST_ID+', GETDATE(), @contact_id,  ''Model submission request declined.'', @notes, 2' --2 = Model Submission
	    exec( @sql )		
	end
	else if( @stat = 'approved' )
	begin
	
		select @sql =
		'insert #ChatLink
		exec '+@tr_db+'.dbo.sp_WS_ChatFieldLinkGetID ''WS_SUB_TASK_HDR.WS_ST_ID'', ''Submissions'''
		exec(@sql)
		select @ChatLink_Sub=LinkID from #ChatLink
	
		set @sql ='update '+@tr_db+'..WS_SUB_TASK_HDR set status =''A'' where WS_ST_ID='+@WS_ST_ID+'
		
		insert into #tmpImage (Picture)
		select CAtch_Image 
		from '+@tr_db+'.dbo.WS_ChatAttachment 
		where catch_type in (''image/bmp'', ''image/gif'', ''image/jpeg'', ''image/png'')
		and CLog_FieldLink_ID='+cast(@ChatLink_Sub as varchar(20))+' and CLog_IDValue='+@WS_ST_ID+'
		order by CAtch_ID
		
		declare @notes varchar(8000), @contact_id int, @an_id int
        select top 1 @notes=ISNULL(n.notes,''''), @contact_id=c.contact_id
        from Approval_Notification n
        join Approval_Contacts c on c.id=n.ac_id
        where n.ar_id = '+CAST(@id as varchar)+' 
        order by n.response_date desc
        
        insert into '+@tr_db+'..WS_EVENT_HISTORY (DETAIL_ID, EVENT_DATE, CONTACT_ID, EVENT, NOTES, ST_TYPE_ID)
		select '+@WS_ST_ID+', GETDATE(), @contact_id,  ''Model submission request approved.'', @notes, 2' --2 = Model Submission'
        exec( @sql)
        		
		select @nSql = N'select @Model_Submission_ID=Model_Submission_ID from '+@tr_db+'..WS_Model_Submission where WS_ST_ID = ' + @WS_ST_ID
		exec sp_executesql @nSql, N'@Model_Submission_ID int OUT ', @Model_Submission_ID OUT
		
		select @nSql = N'select @customer_code=c.customer_code 
			from '+@tr_db+'..customers c 
			join '+@tr_db+'..ws_sub_task_hdr w on w.builder_id=c.customer_id 
			where w.ws_st_id=' + @WS_ST_ID
		exec sp_executesql @nSql, N'@customer_code varchar(10) OUT ', @customer_code OUT
				
		select @sql =
		'
		insert into #trdbs ( tr_db, company_id )
		select distinct cp.TreasuryDBName, co.Company_id
		from WS_Communities c
		join WS_Community_Co co on c.WS_Co_ID=co.WS_Co_ID
		join COMPANIES cp on cp.AutoID=co.Company_id
		join '+@tr_db+'..WS_Model_Submission_Communities w on w.Communities=c.communities
		where w.Model_Submission_ID='+cast(@Model_Submission_ID as varchar)+'
		order by co.Company_id'
		exec(@sql)

		declare curCo cursor for 
		select tr_db, company_id from #trdbs
		order by company_id

		open curCo 
		fetch curCo into @cur_tr_db, @cur_company_id
		while @@fetch_status=0
		begin
			
			select @sql =			
			'if exists( select * from '+@cur_tr_db+'.dbo.customers where customer_code='''+@customer_code+''' )
			begin							
				declare @Builder_Models_ID int, @customer_id int
				
				select @customer_id=customer_id from '+@cur_tr_db+'.dbo.customers where customer_code='''+@customer_code+'''
				
				insert into '+@cur_tr_db+'.dbo.LD_Builder_Models (Code, Elevation, Description, customer_id, Model_Type_ID, Product_Type_ID, Model_Style_ID, WIDTH, SQ_FT)
				select ModelCode, Elevation, Description, @customer_id, Model_Type_ID, Product_Type_ID, Model_Style_ID, WIDTH, SQ_FT
				from '+@tr_db+'.dbo.WS_Model_Submission where Model_Submission_ID = '+cast(@Model_Submission_ID as varchar)+'
			    
				select @Builder_Models_ID=@@IDENTITY
				
				if( '''+@tr_db+''' = '''+@cur_tr_db+''' )
				begin
					insert '+@tr_db+'.dbo.LD_Builder_Models_Lot_SubClass ( Builder_Models_ID, Lot_Sub_Class_ID )	
					select @Builder_Models_ID, Lot_Sub_Class_ID
					from '+@tr_db+'.dbo.WS_Model_Submission where Model_Submission_ID = '+cast(@Model_Submission_ID as varchar)+'
				end
				
				update #tmpImage set Ref_ID = @Builder_Models_ID
	
				insert into '+@cur_tr_db+'.dbo.PictureViewer (Module_ID, SubModule, Ref_ID, Sequence, Picture)
				select 45, ''Builder Model Image'', Ref_ID, Seq, Picture
				from #tmpImage
				order by Seq	
			    
				insert into '+@cur_tr_db+'.dbo.LD_Builder_Models_Communities(Builder_Models_ID, Communities_ID)
				select @Builder_Models_ID, l.Communities_ID
				from '+@tr_db+'.dbo.WS_Model_Submission_Communities c
				join '+@cur_tr_db+'.dbo.LD_Communities l on l.Communities=c.Communities
				where c.Model_Submission_ID = '+cast(@Model_Submission_ID as varchar)+'
			end'
			exec( @sql )
			
			fetch curCo into @cur_tr_db, @cur_company_id
		end 
		close curCo
		deallocate curCo    

	end
end









Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_Session_Get]') and xtype = 'P ')  
 drop Procedure WS_Session_Get
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
-- exec WS_Session_Get 1
create proc WS_Session_Get @ID int
as
begin
	SELECT id, SessionDate, SessionStatus, ClosedAt, ContactID, CompanyID
	FROM WS_Session
	WHERE id = @ID
end
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_SessionFill]') and xtype = 'P ')  
 drop Procedure WS_SessionFill
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

-- exec WS_SessionFill 7, 12
CREATE proc WS_SessionFill @ContactID int, @CompanyID int
as
begin
	--close last session
	UPDATE WS_Session 
	SET SessionStatus = 'C', ClosedAt = getdate()
	WHERE ContactID = @ContactID and SessionStatus = 'O'

	insert WS_Session(ContactID, SessionStatus, SessionDate, ClosedAt, CompanyID)
	select @ContactID, 'O', getdate(), null, @CompanyID

	declare @SessionID int = scope_identity()

	select @SessionID [SessionID]
end
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_SyncEnd]') and xtype = 'P ')  
 drop Procedure WS_SyncEnd
Go
SET QUOTED_IDENTIFIER ON
Go
SET ANSI_NULLS ON 
Go
 


/*
	declare @syncid int
	select @syncid=1244-- max(SyncId) from WS_Sync 
	select * from WS_Sync where syncid=@syncid
	select * from WS_SyncLogHeader where syncid=@syncid
	select * from WS_SyncLabourTimeEntry where syncid=@syncid
	select * from WS_SyncLabourTimeDetail where syncid=@syncid
	select * from WS_SyncEquipTimeEntry where syncid=@syncid
	select * from WS_SyncAPDet where syncid=@syncid
	select * from WS_SyncPOHeader where syncid=@syncid
	select * from WS_SyncPODetail where syncid=@syncid
	select * from WS_SyncAttachment where syncid=@syncid
	select * from WS_SyncDeleteHistory where syncid=@syncid
		
	begin tran	
		exec WS_SyncEnd 30
	rollback tran
*/
CREATE proc [dbo].[WS_SyncEnd] @SyncId int, @Quarantine bit = 0
as
begin
	declare @nSql nvarchar(max), @tr_db varchar(50), @TimeStamp datetime, @dm_db varchar(50), @dm_server varchar(50), @MatchId int, @PrevMatchId int, 
		@ContactId int, @CompanyId int, @LogDate datetime, @LogStatus varchar(10), @ProjectId int, @LemNum varchar(20), @BillAmount decimal(19,4), 
		@Description varchar(max), @HeaderMatchId int, @EmpNum int, @Level1Id int, @Level2Id int, @Level3Id int, @Level4Id int, @Billable bit, 
		@wc_code varchar(5), @LemStatus char(1), @TotalHours decimal(19, 4), @EstId int, @Manual bit, @IncludedHours decimal(19, 4), @EntryId int, 
		@TimeCodeId int, @WorkHours decimal(10,4), @EqpNum varchar(10), @Quantity decimal(14,4), @BillCycle char(1), @PONum varchar(20), @PODate datetime, 
		@SupplierCode varchar(10), @ap_gl_alloc_id int, @Amount decimal(19,4), @MarkupPct decimal(19,4), @MarkupAmt decimal(19,4), @BillAmt decimal(19,4), 
		@LinkMatchId int, @ContextItemId int, @TableDotField varchar(60), @Comment varchar(max), @FileName varchar(255), @FileData varbinary(max), 
		@FileTypeDescription varchar(max), @AddedBy varchar(10), @DateAdded datetime, @MimeType varchar(200), @TableName varchar(50), @DeleteHistoryId int, 
		@PreviousLogStatus varchar(10), @WS_PCDL_LH_ID int, @SendApprovedAlert bit, @SendApprovalAlert bit, @SendReApprovalAlert bit, @AAP_ID int, 
		@AlertDetails varchar(8000), @ClientMac varchar(20), @InternalOnly bit, @NonBillAmount decimal(19,4), @TotalAmount decimal(19,4) 
	
	select @TimeStamp=getdate()		

	if( @Quarantine = 0 )
	begin
		-- Pickup Any Records For Quarantines First
		exec WS_SyncQuarantine @SyncId
	end

	-- LEM Header - WS_SyncLogHeader
	declare cur_LH cursor for	
	select MatchId, isnull(PrevMatchId,-1), ContactId, CompanyId, LogDate, 
		case when @Quarantine = 1 then 'Submitted' else LogStatus end, ProjectId, LemNum, 
		BillAmount, NonBillAmount, TotalAmount, Description
	from WS_SyncLogHeader 
	where SyncId = @SyncId and isnull(Quarantine,0)=@Quarantine

	open cur_LH 
	fetch cur_LH into @MatchId, @PrevMatchId, @ContactId, @CompanyId, @LogDate, @LogStatus, @ProjectId, @LemNum, 
		@BillAmount, @NonBillAmount, @TotalAmount, @Description
	while @@fetch_status=0
	begin
		select @tr_db=treasurydbname from companies where autoid = @CompanyId
		select @SendApprovedAlert = 0, @SendApprovalAlert = 0, @SendReApprovalAlert = 0, @AAP_ID = -1

		if( @PrevMatchId = -1 )
		begin 		
			-- insert
			select @nSql = '
			insert into '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] (Pri_ID, LogDate, LogStatus, LogCreatedBy, TimeCount, WeatherCount, GeneralCount, 
				SubcontractorCount, EquipmentCount, InspectionCount, DeliveryCount, OtherCount, [TimeStamp], LemNum, MatchId, IsFLEMSheet, 
				BillAmount, NonBillAmount, TotalAmount, Description)
			select @ProjectId, @LogDate, @LogStatus, @ContactId, 0, 0, 0,
				0, 0, 0, 0, 0, @TimeStamp, @LemNum, @MatchId, 1, @BillAmount, @NonBillAmount, @TotalAmount, @Description
			
			select @WS_PCDL_LH_ID=scope_identity()

			insert into '+@tr_db+'.[dbo].[costing_TimeTicket] (pri_id, afe_no, cust_cost_code, time_ticket, total_costs, bill_amount, status, WS_PCDL_LH_ID)
			select @ProjectId, '''', '''', @LemNum, 0, @BillAmount, ''P'', @WS_PCDL_LH_ID '
			exec sp_executesql @nSql, N'@MatchId int, @ProjectId int, @LogDate datetime, @LogStatus varchar(10), @ContactId int, @TimeStamp datetime, 
				@LemNum varchar(20), @BillAmount decimal(19,4), @NonBillAmount decimal(19,4), @TotalAmount decimal(19,4), @WS_PCDL_LH_ID int OUT, 
				@Description varchar(max) ', 
				@MatchId, @ProjectId, @LogDate, @LogStatus, @ContactId, @TimeStamp, @LemNum, 
				@BillAmount, @NonBillAmount, @TotalAmount, @WS_PCDL_LH_ID OUT, @Description
			
			if(@LogStatus = 'Approved')
			begin
				set @SendApprovedAlert = 1
			end
			else
			begin
				select @SendApprovalAlert = 1
			end
		end
		else
		begin
			select @nSql = '
			select @PreviousLogStatus = LogStatus from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@PrevMatchId
			if exists( select * from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@PrevMatchId and LogStatus <> ''Billed'')
			begin
				select @WS_PCDL_LH_ID=ID
				from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] 
				where MatchId=@PrevMatchId

				update '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] 
				set Pri_ID=@ProjectId, LogDate=@LogDate, LogStatus=@LogStatus, [TimeStamp]=@TimeStamp, LemNum=@LemNum, BillAmount=@BillAmount, 
					NonBillAmount=@NonBillAmount, TotalAmount=@TotalAmount, Description=@Description
				where MatchId=@PrevMatchId
				
				update t 
				set t.bill_amount=@BillAmount, t.time_ticket=@LemNum, t.pri_id=@ProjectId
				from '+@tr_db+'.[dbo].[costing_TimeTicket] t
				join '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] w on w.ID=t.WS_PCDL_LH_ID
				where w.MatchId=@PrevMatchId
			end '
			exec sp_executesql @nSql, N'@PrevMatchId int, @ProjectId int, @LogDate datetime, @LogStatus varchar(10), @TimeStamp datetime, @LemNum varchar(20), 
				@BillAmount decimal(19,4), @NonBillAmount decimal(19,4), @TotalAmount decimal(19,4), @PreviousLogStatus varchar(10) OUT, @Description varchar(max), 
				@WS_PCDL_LH_ID int OUT ', 
				@PrevMatchId, @ProjectId, @LogDate, @LogStatus, @TimeStamp, @LemNum, 
				@BillAmount, @NonBillAmount, @TotalAmount, @PreviousLogStatus OUT, @Description, @WS_PCDL_LH_ID OUT
	
			if(@LogStatus = 'Approved' and @LogStatus != @PreviousLogStatus)
			begin
				set @SendApprovedAlert = 1
			end
			else
			begin
				select @SendReApprovalAlert = 1
			end
		end
		
		if(@SendApprovedAlert = 1 or @SendApprovalAlert = 1 or @SendReApprovalAlert = 1)
		begin
			if(@SendApprovedAlert = 1)
			begin				
				select @AAP_ID = 91
				set @AlertDetails = 'LEM sheet has been approved in the field.'
			end
			else if(@SendApprovalAlert = 1)
			begin			
				select @AAP_ID = 92
				set @AlertDetails = 'A new LEM sheet has been submitted from the field.'
			end
			else if(@SendReApprovalAlert = 1)
			begin
				select @AAP_ID = 93
				set @AlertDetails = 'An existing LEM sheet has been re-submitted from the field.'
			end

			set @nSql = '
			declare @AlertUsername varchar(50) = ''WS_FLEM_Approval_AppDec'', @mod_code varchar(50), @mod_desc varchar(150)
			if exists( select * from '+@tr_db+'.[dbo].AlertPointRequired where id = @AAP_ID and isnull(required,''F'') = ''T'' )
			begin
				delete from '+@tr_db+'.[dbo].working_alert_contacts where USERNAME = @AlertUsername

				--add customer contact to alert notification
				insert into '+@tr_db+'.[dbo].working_alert_contacts (USERNAME, contact_id, AAP_ID)	
				select @AlertUsername, c.customer_contact, @AAP_ID 
				from '+@tr_db+'.[dbo].WS_PCDL_LogHeader w
				join '+@tr_db+'.[dbo].PROJ_HEADER h on w.Pri_ID = h.pri_id
				join '+@tr_db+'.[dbo].PROJ_CONTACTS c on h.pri_id = c.pri_id
				where c.customer_contact is not null

				--add project manager to alert notification
				insert into '+@tr_db+'.[dbo].working_alert_contacts (USERNAME, contact_id, AAP_ID)	
				select @AlertUsername, c.proj_manager, @AAP_ID 
				from '+@tr_db+'.[dbo].WS_PCDL_LogHeader w
				join '+@tr_db+'.[dbo].PROJ_HEADER h on w.Pri_ID = h.pri_id
				join '+@tr_db+'.[dbo].PROJ_CONTACTS c on h.pri_id = c.pri_id
				where c.proj_manager is not null

				select @mod_code = w.LemNum, @mod_desc = h.pri_name  
				from '+@tr_db+'.[dbo].WS_PCDL_LogHeader w
				join '+@tr_db+'.[dbo].PROJ_HEADER h on w.Pri_ID = h.pri_id
				where w.id = @WS_PCDL_LH_ID

				exec '+@tr_db+'.[dbo].AlertSend @AlertUsername, @AAP_ID, ''D'', @mod_code, @mod_desc, @AlertDetails, @WS_PCDL_LH_ID, ''T''
			end '	
			exec sp_executesql @nSql, N'@WS_PCDL_LH_ID int, @AAP_ID int, @AlertDetails varchar(8000) ', @WS_PCDL_LH_ID, @AAP_ID, @AlertDetails
		end

		fetch cur_LH into @MatchId, @PrevMatchId, @ContactId, @CompanyId, @LogDate, @LogStatus, @ProjectId, @LemNum, 
			@BillAmount, @NonBillAmount, @TotalAmount, @Description
	end			
	close cur_LH
	deallocate cur_LH

	
	-- LEM Detail Labor - WS_SyncLabourTimeEntry
	declare cur_LD cursor for	
	select MatchId, isnull(PrevMatchId,-1), CompanyId, HeaderMatchId, EmpNum, Level1Id, Level2Id, Level3Id, Level4Id, Billable, 
			wc_code, LemStatus, TotalHours, BillAmount, EstId, Manual, IncludedHours
	from WS_SyncLabourTimeEntry 
	where SyncId = @SyncId and isnull(Quarantine,0)=@Quarantine
		
	open cur_LD 
	fetch cur_LD into @MatchId, @PrevMatchId, @CompanyId, @HeaderMatchId, @EmpNum, @Level1Id, @Level2Id, @Level3Id, @Level4Id, @Billable, 
		@wc_code, @LemStatus, @TotalHours, @BillAmount, @EstId, @Manual, @IncludedHours
	while @@fetch_status=0
	begin
		select @tr_db=treasurydbname from companies where autoid = @CompanyId

		if( @PrevMatchId = -1 )
		begin		
			-- insert
			select @nSql = '
			declare @DL_LogEntry_ID int, @WS_PCDL_LogType_TimeEntry int, @LogHeaderId int, @pri_id int, @WorkClassId int, @CO_Pri_Id int 
			select @WS_PCDL_LogType_TimeEntry = 8
			select @WorkClassId=ID from '+@tr_db+'.[dbo].[work_class] where wc_code = @wc_code

			select @CO_Pri_Id=CO_Ref_Pri_ID from '+@tr_db+'.[dbo].[EST_Header] where IsChangeOrder=1 and Id=@EstId
						
			if exists( select * from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId and LogStatus <> ''Billed'')
			begin
				select @LogHeaderId=id, @pri_id=pri_id from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId

				if not exists( select * from '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] where DL_LogType_ID=@WS_PCDL_LogType_TimeEntry 
					and WS_PCDL_LogHeaderID=@LogHeaderId and Emp_NO=@EmpNum and Work_Class_ID=@WorkClassId)
				begin 
					insert into '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] (DL_LogType_ID, pri_id, contact_id, log_date, last_contact_id, last_log_date, WS_PCDL_LogHeaderID, 
						Emp_NO, Work_Class_ID)
					select @WS_PCDL_LogType_TimeEntry, Pri_ID, LogCreatedBy, LogDate, LogCreatedBy, LogDate, @LogHeaderId, @EmpNum, @WorkClassId  
					from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader]
					where id=@LogHeaderId
				
					select @DL_LogEntry_ID=scope_identity()
				end
				else
				begin 
					select @DL_LogEntry_ID=DL_LogEntry_ID 
					from '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] 
					where DL_LogType_ID=@WS_PCDL_LogType_TimeEntry and WS_PCDL_LogHeaderID = @LogHeaderId
						and Emp_NO=@EmpNum and Work_Class_ID=@WorkClassId
				end


				insert into '+@tr_db+'.[dbo].[WS_EMP_TimeClock] (emp_no, time_in, act_time_in, time_out, act_time_out, last_edit_emp_no, 
					comments, approved_tf, released_tf, shift_id, exception_tf, lunch_duration, hrs_wrkd, hrs_reg, hrs_ot, hrs_dt, banked_ot_tf, time_code_id, 
					time_request_id, manual_tf, entry_date, status, lv1_id, lv2_id, lv3_id, lv4_id, Work_Class_ID, AFE, CCCode, TimeTicketNumber, NonProject, 
					WS_PCDL_LH_ID, CostingReference, LEM, hrs_total, dollars_total, Billable, [TimeStamp], EstId, MatchId, Manual, IncludedHours, CO_Pri_Id)
				select @EmpNum, null, null, null, null, null, 
					null, ''F'', ''T'', null, null, null, null, null, null, null, null, null,
					null, ''F'', getdate(), ''U'', @Level1Id, @Level2Id, @Level3Id, @Level4Id, @WorkClassId, null, 
					(	select top 1 cost_code 
						from '+@tr_db+'.[dbo].costing_budget c 
						where isnull(c.pri_id,-1)=isnull(@pri_id,-1) 
							and isnull(c.lv1id,-1)=isnull(@Level1Id,-1)
							and isnull(c.lv2id,-1)=isnull(@Level2Id,-1)
							and isnull(c.lv3id,-1)=isnull(@Level3Id,-1)
							and isnull(c.lv4id,-1)=isnull(@Level4Id,-1)
					), 
					null, 0, @DL_LogEntry_ID,
					'+@tr_db+'.[dbo].fn_ProjWOReference(isnull(@CO_Pri_Id, @pri_id), @Level1Id, @Level2Id, @Level3Id, @Level4Id, ''L'', '''', null),
					''L'', @TotalHours, @BillAmount, @Billable, @TimeStamp, @EstId, @MatchId, @Manual, @IncludedHours, @CO_Pri_Id

				if exists(select * from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId and isnull(LEMApproved,0)=1)
				begin				
					-- Flag Labor where time has been updated
					update WS_SyncLabourTimeEntry set emp_time=1 where MatchId=@MatchId			
				end	
			end '

			exec sp_executesql @nSql, N'@MatchId int, @HeaderMatchId int, @EmpNum int, @Level1Id int, @Level2Id int, @Level3Id int, @Level4Id int, 
				@Billable bit, @wc_code varchar(5), @LemStatus char(1), @TotalHours decimal(19, 4), @BillAmount money, @TimeStamp datetime, @EstId int,
				@Manual bit, @IncludedHours decimal(19, 4) ', 
				@MatchId, @HeaderMatchId, @EmpNum, @Level1Id, @Level2Id, @Level3Id, @Level4Id, 
					@Billable, @wc_code, @LemStatus, @TotalHours, @BillAmount, @TimeStamp, @EstId, @Manual, @IncludedHours 
		end
		else
		begin
			-- update
			select @nSql = 'declare @WorkClassId int, @pri_id int, @CO_Pri_Id int,
				@WS_PCDL_LogType_TimeEntry int, @LogHeaderId int, @DL_LogEntry_ID int

			select @WorkClassId=ID from '+@tr_db+'.[dbo].[work_class] where wc_code = @wc_code
			select @WS_PCDL_LogType_TimeEntry = 8

			select @CO_Pri_Id=CO_Ref_Pri_ID from '+@tr_db+'.[dbo].[EST_Header] where IsChangeOrder=1 and Id=@EstId
			
			if exists( select * from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId and LogStatus <> ''Billed'')
			begin
				select @pri_id=pri_id from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId
				select @LogHeaderId=id from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId

				if not exists(select * from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId and isnull(LEMApproved,0)=1)
				begin
					if not exists( select * from '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] where DL_LogType_ID=@WS_PCDL_LogType_TimeEntry 
					and WS_PCDL_LogHeaderID=@LogHeaderId and Emp_NO=@EmpNum and Work_Class_ID=@WorkClassId)
					begin 
						insert into '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] (DL_LogType_ID, pri_id, contact_id, log_date, last_contact_id, last_log_date, WS_PCDL_LogHeaderID, 
							Emp_NO, Work_Class_ID)
						select @WS_PCDL_LogType_TimeEntry, Pri_ID, LogCreatedBy, LogDate, LogCreatedBy, LogDate, @LogHeaderId, @EmpNum, @WorkClassId  
						from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader]
						where id=@LogHeaderId
				
						select @DL_LogEntry_ID=scope_identity()
					end

					update '+@tr_db+'.[dbo].[WS_EMP_TimeClock]
					set emp_no=@EmpNum, time_in=time_in, act_time_in=act_time_in, time_out=time_out, act_time_out=act_time_out, last_edit_emp_no=last_edit_emp_no, 
						comments=comments, approved_tf=approved_tf, released_tf=''T'', shift_id=shift_id, exception_tf=exception_tf, lunch_duration=lunch_duration, 
						hrs_wrkd=hrs_wrkd, hrs_reg=hrs_reg, hrs_ot=hrs_ot, hrs_dt=hrs_dt, banked_ot_tf=banked_ot_tf, time_code_id=time_code_id, time_request_id=time_request_id, 
						manual_tf=manual_tf, entry_date=entry_date, lv1_id=@Level1Id, lv2_id=@Level2Id, lv3_id=@Level3Id, lv4_id=@Level4Id, 
						Work_Class_ID=@WorkClassId, AFE=AFE, 
						CCCode=
						(	select top 1 cost_code 
							from '+@tr_db+'.[dbo].costing_budget c 
							where isnull(c.pri_id,-1)=isnull(@pri_id,-1) 
								and isnull(c.lv1id,-1)=isnull(@Level1Id,-1)
								and isnull(c.lv2id,-1)=isnull(@Level2Id,-1)
								and isnull(c.lv3id,-1)=isnull(@Level3Id,-1)
								and isnull(c.lv4id,-1)=isnull(@Level4Id,-1)
						), 
						TimeTicketNumber=TimeTicketNumber, NonProject=NonProject, WS_PCDL_LH_ID=isnull(@DL_LogEntry_ID, WS_PCDL_LH_ID), 
						CostingReference='+@tr_db+'.[dbo].fn_ProjWOReference(isnull(@CO_Pri_Id, @pri_id), @Level1Id, @Level2Id, @Level3Id, @Level4Id, ''L'', '''', null), 
						LEM=LEM, hrs_total=@TotalHours, dollars_total=@BillAmount, Billable=@Billable, [TimeStamp]=@TimeStamp, EstId=@EstId,
						Manual=@Manual, IncludedHours=@IncludedHours, CO_Pri_Id=@CO_Pri_Id
					where MatchId=@PrevMatchId and LEM=''L''
				end	
				else
				begin				
					-- Flag Labor & Labor Detail where time has been updated
					update WS_SyncLabourTimeEntry set emp_time=1 where SyncId=@SyncId and MatchId=@MatchId
					update WS_SyncLabourTimeDetail set emp_time=1 where SyncId=@SyncId and EntryId=@MatchId				
				end				
			end '
			exec sp_executesql @nSql, N'@SyncId int, @MatchId int, @PrevMatchId int, @HeaderMatchId int, @EmpNum int, @Level1Id int, @Level2Id int, @Level3Id int, 
				@Level4Id int, @Billable bit, @wc_code varchar(5), @LemStatus char(1), @TotalHours decimal(19, 4), @BillAmount money, @TimeStamp datetime, 
				@EstId int, @Manual bit, @IncludedHours decimal(19, 4) ', 
				@SyncId, @MatchId, @PrevMatchId, @HeaderMatchId, @EmpNum, @Level1Id, @Level2Id, @Level3Id, @Level4Id, 
					@Billable, @wc_code, @LemStatus, @TotalHours, @BillAmount, @TimeStamp, @EstId, @Manual, @IncludedHours
		end

		fetch cur_LD into @MatchId, @PrevMatchId, @CompanyId, @HeaderMatchId, @EmpNum, @Level1Id, @Level2Id, @Level3Id, @Level4Id, @Billable, 
			@wc_code, @LemStatus, @TotalHours, @BillAmount, @EstId, @Manual, @IncludedHours
	end			
	close cur_LD
	deallocate cur_LD


	-- LEM Detail Labor Detail - WS_SyncLabourTimeDetail
	declare cur_LDD cursor for	
	select CompanyId, EntryId, TimeCodeId, WorkHours, BillAmount
	from WS_SyncLabourTimeDetail 
	where SyncId = @SyncId and isnull(emp_time,0)=0 and isnull(Quarantine,0)=@Quarantine
	
	open cur_LDD 
	fetch cur_LDD into @CompanyId, @EntryId, @TimeCodeId, @WorkHours, @BillAmount
	while @@fetch_status=0
	begin
		select @tr_db=treasurydbname from companies where autoid = @CompanyId

		select @nSql = '
		declare @TimeClockId int

		if exists( select * from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] lh
			join '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] le on le.WS_PCDL_LogHeaderID=lh.id
			join '+@tr_db+'.[dbo].[WS_EMP_TimeClock] tc on tc.WS_PCDL_LH_ID=le.DL_LogEntry_ID
			where tc.MatchId=@EntryId and tc.LEM=''L'' and lh.LogStatus <> ''Billed'')
		begin
			select @TimeClockId=ID from '+@tr_db+'.[dbo].[WS_EMP_TimeClock] where MatchId=@EntryId and LEM=''L''

			if not exists( select * from '+@tr_db+'.[dbo].[WS_EMP_TimeClockHours] where WS_ETC_ID = @TimeClockId and time_code_id=@TimeCodeId )
			begin
				insert into '+@tr_db+'.[dbo].[WS_EMP_TimeClockHours] (WS_ETC_ID, time_code_id, HoursWorked, BillAmt)
				select @TimeClockId, @TimeCodeId, @WorkHours, @BillAmount
			end
			else
			begin
				update '+@tr_db+'.[dbo].[WS_EMP_TimeClockHours]
				set HoursWorked=@WorkHours, BillAmt=@BillAmount
				where WS_ETC_ID=@TimeClockId and time_code_id=@TimeCodeId
			end
		end '
		exec sp_executesql @nSql, N'@EntryId int, @TimeCodeId int, @WorkHours decimal(10,4), @BillAmount money ', 
			@EntryId, @TimeCodeId, @WorkHours, @BillAmount

	fetch cur_LDD into @CompanyId, @EntryId, @TimeCodeId, @WorkHours, @BillAmount
	end			
	close cur_LDD
	deallocate cur_LDD


	-- LEM Detail Equipment - WS_SyncEquipTimeEntry
	declare cur_ED cursor for	
	select MatchId, isnull(PrevMatchId,-1), CompanyId, HeaderMatchId, EqpNum, Level1Id, Level2Id, Level3Id, Level4Id, Billable, 
			Quantity, LemStatus, BillCycle, BillAmount, EstId
	from WS_SyncEquipTimeEntry 
	where SyncId = @SyncId and isnull(Quarantine,0)=@Quarantine

	open cur_ED 
	fetch cur_ED into @MatchId, @PrevMatchId, @CompanyId, @HeaderMatchId, @EqpNum, @Level1Id, @Level2Id, @Level3Id, @Level4Id, @Billable, 
		@Quantity, @LemStatus, @BillCycle, @BillAmount, @EstId
	while @@fetch_status=0
	begin
		select @tr_db=treasurydbname from companies where autoid = @CompanyId

		if( @PrevMatchId = -1 )
		begin
			-- insert
			select @nSql = '
			declare @DL_LogEntry_ID int, @WS_PCDL_LogType_Equipment int, @LogHeaderId int, @pri_id int, @CO_Pri_Id int
			select @WS_PCDL_LogType_Equipment = 9
			select @CO_Pri_Id=CO_Ref_Pri_ID from '+@tr_db+'.[dbo].[EST_Header] where IsChangeOrder=1 and Id=@EstId
			
			if exists( select * from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId and LogStatus <> ''Billed'')
			begin
				select @LogHeaderId=id, @pri_id=pri_id from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId
		
				if not exists( select * from '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] where DL_LogType_ID=@WS_PCDL_LogType_Equipment 
					and WS_PCDL_LogHeaderID=@LogHeaderId and eqi_num=@EqpNum )
				begin 
					insert into '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] (DL_LogType_ID, pri_id, contact_id, log_date, last_contact_id, last_log_date, WS_PCDL_LogHeaderID, 
						eqi_num)
					select @WS_PCDL_LogType_Equipment, Pri_ID, LogCreatedBy, LogDate, LogCreatedBy, LogDate, @LogHeaderId, @EqpNum 
					from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader]
					where id=@LogHeaderId
				
					select @DL_LogEntry_ID=scope_identity()
				end
				else
				begin 
					select @DL_LogEntry_ID=DL_LogEntry_ID 
					from '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] 
					where DL_LogType_ID=@WS_PCDL_LogType_Equipment and WS_PCDL_LogHeaderID = @LogHeaderId and eqi_num=@EqpNum
				end

				insert into '+@tr_db+'.[dbo].[WS_EMP_TimeClock] (eqi_num, time_in, act_time_in, time_out, act_time_out, lv3_id, last_edit_emp_no, 
					comments, approved_tf, released_tf, shift_id, exception_tf, lunch_duration, hrs_wrkd, hrs_reg, hrs_ot, hrs_dt, banked_ot_tf, time_code_id, 
					time_request_id, manual_tf, entry_date, status, lv1_id, lv2_id, lv4_id, Work_Class_ID, AFE, CCCode, TimeTicketNumber, NonProject, WS_PCDL_LH_ID, 
					CostingReference, LEM, Quantity, BillCycle, dollars_total, Billable, [TimeStamp], EstId, MatchId, CO_Pri_Id)
				select @EqpNum, null, null, null, null, @Level3Id, null, 
					null, ''F'', ''T'', null, null, null, null, null, null, null, null, null,
					null, ''F'', getdate(), ''U'', @Level1Id, @Level2Id, @Level4Id, null, null, 
					(	select top 1 cost_code 
						from '+@tr_db+'.[dbo].costing_budget c 
						where isnull(c.pri_id,-1)=isnull(@pri_id,-1) 
							and isnull(c.lv1id,-1)=isnull(@Level1Id,-1)
							and isnull(c.lv2id,-1)=isnull(@Level2Id,-1)
							and isnull(c.lv3id,-1)=isnull(@Level3Id,-1)
							and isnull(c.lv4id,-1)=isnull(@Level4Id,-1)
					), 
					null, 0, @DL_LogEntry_ID,
					'+@tr_db+'.[dbo].fn_ProjWOReference(isnull(@CO_Pri_Id, @pri_id), @Level1Id, @Level2Id, @Level3Id, @Level4Id, ''E'', '''', null), 
					''E'', @Quantity, @BillCycle, @BillAmount, @Billable, @TimeStamp, @EstId, @MatchId, @CO_Pri_Id

				if exists(select * from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId and isnull(LEMApproved,0)=1)
				begin				
					-- Flag equipment where equip or emp owned time has been processed
					update WS_SyncEquipTimeEntry set emp_time=1 where MatchId=@MatchId		
				end	
			end '			
			exec sp_executesql @nSql, N'@MatchId int, @HeaderMatchId int, @EqpNum varchar(10), @Level1Id int, @Level2Id int, @Level3Id int, @Level4Id int, 
				@Billable bit, @Quantity decimal(14,4), @LemStatus char(1), @BillCycle char(1), @BillAmount money, @TimeStamp datetime, @EstId int ', 
				@MatchId, @HeaderMatchId, @EqpNum, @Level1Id, @Level2Id, @Level3Id, @Level4Id, 
					@Billable, @Quantity, @LemStatus, @BillCycle, @BillAmount, @TimeStamp, @EstId
		end
		else
		begin
			-- update
			select @nSql = '
			declare @pri_id int, @WS_PCDL_LogType_Equipment int, @LogHeaderId int, @DL_LogEntry_ID int, @CO_Pri_Id int 
			select @WS_PCDL_LogType_Equipment = 9
			select @CO_Pri_Id=CO_Ref_Pri_ID from '+@tr_db+'.[dbo].[EST_Header] where IsChangeOrder=1 and Id=@EstId

			if exists( select * from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId and LogStatus <> ''Billed'')
			begin
				select @LogHeaderId=id from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId
				select @pri_id=pri_id from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId

				if not exists(select * from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId and isnull(LEMApproved,0)=1)
				begin
					if not exists( select * from '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] where DL_LogType_ID=@WS_PCDL_LogType_Equipment 
						and WS_PCDL_LogHeaderID=@LogHeaderId and eqi_num=@EqpNum )
					begin 
						insert into '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] (DL_LogType_ID, pri_id, contact_id, log_date, last_contact_id, last_log_date, WS_PCDL_LogHeaderID, 
							eqi_num)
						select @WS_PCDL_LogType_Equipment, Pri_ID, LogCreatedBy, LogDate, LogCreatedBy, LogDate, @LogHeaderId, @EqpNum 
						from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader]
						where id=@LogHeaderId
				
						select @DL_LogEntry_ID=scope_identity()
					end

					update '+@tr_db+'.[dbo].[WS_EMP_TimeClock]
					set eqi_num=@EqpNum, time_in=time_in, act_time_in=act_time_in, time_out=time_out, act_time_out=act_time_out, lv3_id=@Level3Id, last_edit_emp_no=last_edit_emp_no, 
						comments=comments, approved_tf=approved_tf, released_tf=''T'', shift_id=shift_id, exception_tf=exception_tf, lunch_duration=lunch_duration, hrs_wrkd=hrs_wrkd, hrs_reg=hrs_reg, hrs_ot=hrs_ot, hrs_dt=hrs_dt, banked_ot_tf=banked_ot_tf, time_code_id=time_code_id, 
						time_request_id=time_request_id, manual_tf=manual_tf, entry_date=entry_date, lv1_id=@Level1Id, lv2_id=@Level2Id, lv4_id=@Level4Id, Work_Class_ID=Work_Class_ID, AFE=AFE, 
						CCCode=
						(	select top 1 cost_code 
							from '+@tr_db+'.[dbo].costing_budget c 
							where isnull(c.pri_id,-1)=isnull(@pri_id,-1) 
								and isnull(c.lv1id,-1)=isnull(@Level1Id,-1)
								and isnull(c.lv2id,-1)=isnull(@Level2Id,-1)
								and isnull(c.lv3id,-1)=isnull(@Level3Id,-1)
								and isnull(c.lv4id,-1)=isnull(@Level4Id,-1)
						), 
						TimeTicketNumber=TimeTicketNumber, NonProject=NonProject, WS_PCDL_LH_ID=isnull(@DL_LogEntry_ID,WS_PCDL_LH_ID), 
						CostingReference='+@tr_db+'.[dbo].fn_ProjWOReference(isnull(@CO_Pri_Id, @pri_id), @Level1Id, @Level2Id, @Level3Id, @Level4Id, ''E'', '''', null), 
						LEM=LEM, hrs_total=hrs_total, Quantity=@Quantity, BillCycle=@BillCycle, dollars_total=@BillAmount, Billable=@Billable, [TimeStamp]=@TimeStamp, EstId=@EstId, CO_Pri_Id=@CO_Pri_Id
					where MatchId=@PrevMatchId and LEM=''E''
				end
				else
				begin
					-- Flag equipment where equip or emp owned time has been processed
					update WS_SyncEquipTimeEntry set emp_time=1 where MatchId=@MatchId
				end
			end '
			exec sp_executesql @nSql, N'@MatchId int, @PrevMatchId int, @HeaderMatchId int, @EqpNum varchar(10), @Level1Id int, @Level2Id int, @Level3Id int, 
				@Level4Id int, @Billable bit, @Quantity decimal(14,4), @LemStatus char(1), @BillCycle char(1), @BillAmount money, @TimeStamp datetime, @EstId int ', 
				@MatchId, @PrevMatchId, @HeaderMatchId, @EqpNum, @Level1Id, @Level2Id, @Level3Id, @Level4Id, 
					@Billable, @Quantity, @LemStatus, @BillCycle, @BillAmount, @TimeStamp, @EstId
		end

		fetch cur_ED into @MatchId, @PrevMatchId, @CompanyId, @HeaderMatchId, @EqpNum, @Level1Id, @Level2Id, @Level3Id, @Level4Id, @Billable, 
			@Quantity, @LemStatus, @BillCycle, @BillAmount, @EstId
	end			
	close cur_ED
	deallocate cur_ED
	
	

	-- LEM AP Detail - WS_SyncAPDet
	declare cur_AP cursor for	
	select CompanyId, HeaderMatchId, ap_gl_alloc_id, Amount, MarkupPct, MarkupAmt, BillAmt
	from WS_SyncAPDet 
	where SyncId = @SyncId and isnull(Quarantine,0)=@Quarantine
	
	open cur_AP 
	fetch cur_AP into @CompanyId, @HeaderMatchId, @ap_gl_alloc_id, @Amount, @MarkupPct, @MarkupAmt, @BillAmt
	while @@fetch_status=0
	begin
		select @tr_db=treasurydbname from companies where autoid = @CompanyId

		-- insert
		select @nSql = '
		declare @LogHeaderId int
		
		if exists( select * from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId and LogStatus <> ''Billed'')
		begin	
			select @LogHeaderId=id from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId

			insert into '+@tr_db+'.[dbo].[WS_PCDL_LEM_AP] (WS_PCDL_LogHeaderId, ap_gl_alloc_id, Amount, MarkupPct, MarkupAmt, BillAmt)
			select @LogHeaderId, @ap_gl_alloc_id, @Amount, @MarkupPct, @MarkupAmt, @BillAmt

			update a
			set a.time_ticket=p.LemNum,
				a.COST_CODE=
					(select top 1 cost_code 
					from '+@tr_db+'.[dbo].costing_budget c 
					where isnull(c.pri_id,-1)=isnull(a.pri_id,-1) 
						and isnull(c.lv1id,-1)=isnull(a.lv1id,-1)
						and isnull(c.lv2id,-1)=isnull(a.lv2id,-1)
						and isnull(c.lv3id,-1)=isnull(a.lv3id,-1)
						and isnull(c.lv4id,-1)=isnull(a.lv4id,-1))
			from '+@tr_db+'.[dbo].ap_gl_alloc a
			join '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] p on p.MatchId=@HeaderMatchId
			where isnull(a.time_ticket,'''') = '''' and a.ap_gl_alloc_id=@ap_gl_alloc_id
			
			update a
			set a.time_ticket=p.LemNum,
				a.cust_cost_code=
					(select top 1 cost_code 
					from '+@tr_db+'.[dbo].costing_budget c 
					where isnull(c.pri_id,-1)=isnull(a.pri_id,-1) 
						and isnull(c.lv1id,-1)=isnull(a.lv1id,-1)
						and isnull(c.lv2id,-1)=isnull(a.lv2id,-1)
						and isnull(c.lv3id,-1)=isnull(a.lv3id,-1)
						and isnull(c.lv4id,-1)=isnull(a.lv4id,-1))
			from '+@tr_db+'.[dbo].costing_actuals a
			join '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] p on p.MatchId=@HeaderMatchId
			where isnull(a.time_ticket,'''') = '''' and a.ap_gl_alloc_id=@ap_gl_alloc_id

		end '			
		exec sp_executesql @nSql, N'@HeaderMatchId int, @ap_gl_alloc_id int, @Amount decimal(19,4), @MarkupPct decimal(19,4), 
			@MarkupAmt decimal(19,4), @BillAmt decimal(19,4) ', 
			@HeaderMatchId, @ap_gl_alloc_id, @Amount, @MarkupPct, @MarkupAmt, @BillAmt
		

		fetch cur_AP into @CompanyId, @HeaderMatchId, @ap_gl_alloc_id, @Amount, @MarkupPct, @MarkupAmt, @BillAmt
	end			
	close cur_AP
	deallocate cur_AP



	-- PO Header - WS_SyncPOHeader
	declare cur_POH cursor for	
	select distinct CompanyId
	from WS_SyncPOHeader 
	where SyncId = @SyncId and isnull(Quarantine,0)=@Quarantine
	
	open cur_POH 
	fetch cur_POH into @CompanyId
	while @@fetch_status=0
	begin
		select @tr_db=treasurydbname from companies where autoid = @CompanyId

		if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#po_header'))
			drop table #po_header
		
		create table #po_header (  
			[ID] [int] identity(0,1), 
			[PO_ID] [int] NULL,
			[PO] [varchar](20) NULL,
			[SUPPLIER] [varchar](10) NULL, 
			[SUPP_NAME] [varchar](40) NULL, 
			[WHSE_ID] [int] NULL, 
			[PO_ADD1] [varchar](40) NULL, 
			[PO_ADD2] [varchar](40) NULL, 
			[PO_ADD3] [varchar](40) NULL, 
			[PO_CITY] [varchar](20) NULL, 
			[PO_STATE] [varchar](15) NULL, 
			[PO_ZIP] [varchar](10) NULL, 
			[DELIV_ADD1] [varchar](40) NULL, 
			[DELIV_ADD2] [varchar](40) NULL, 
			[DELIV_ADD3] [varchar](40) NULL, 
			[DELIV_CITY] [varchar](20) NULL, 
			[DELIV_STATE] [varchar](15) NULL, 
			[DELIV_ZIP] [varchar](10) NULL, 
			[ORDER_DATE] [datetime] NULL, 
			[ORG_DUE_DATE] [datetime] NULL, 
			[SHIPPING] [varchar](6) NULL, 
			[TAXABLE] [char](1) DEFAULT('F'), 
			[SALES_TAX_ID] [int] NULL, 
			[DISCOUNT] [varchar](6) NULL, 
			[TERMS_ID] [int] NULL, 
			[SHIPPING_FOB_ID] [int] NULL, 
			[FRT_TERMS_ID] [int] NULL, 
			[BUYER] [varchar](6) NULL, 
			[PO_TYPE] [varchar](6) DEFAULT('C'), 
			[PRINTED] [char](1) DEFAULT('F'), 
			[STATUS] [varchar](10) DEFAULT('Printed'), 
			[OPERATOR] [varchar](10) NULL,	
			[WHSE_SHIPTO_ID] [int] NULL, 
			[PRI_NUM] [int] NULL, 
			[PO_COUNTRY_ID] [int] NULL, 
			[DELIV_COUNTRY_ID] [int] NULL, 
			[EXCH_RATE] [float] NULL, 	
			[STOCK_PO] [char](1) DEFAULT('T'), 
			[PO_DIV] [varchar](6) NULL, 
			[HOLD_AMT] [money] DEFAULT(0), 
			[HOLD_PCT] [money] NULL, 
			[CONTRACT_PO] [char](1) DEFAULT ('T'),  
			[PO_FUNCTION] [varchar](1) DEFAULT('S'), 
			[CONTACT_ID] [int], 
			[PO_SupplyType_ID] [int] NULL, 
			[POSeq] [int],
			[MatchId] [int] 
		)
		

		if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#po_detail'))
			drop table #po_detail

		create table #po_detail (
			[ID] [int] identity(0,1), 
			[PO_ID] [int] NULL,
			[LINE_NUMBER] [smallint] NULL, 
			[PO_DETAIL_ID] [int] NULL,		
			[PART_NO_DESC] [varchar](150) NULL, 
			[QTY_ORDERED] [money] NULL,		
			[UOM] [varchar](6) NULL, 
			[CONVERTED_QTY] [decimal](15, 4) NULL, 
			[UNIT_PRICE] [float] NULL, 
			[CONV_UNIT_COST] [float] NULL, 
			[EXTENSION] [decimal](15, 4) NULL, 
			[ORIG_DUE_DATE] [datetime] NULL, 
			[GL_ACCOUNT] [varchar](21) NULL, 
			[TAXABLE] [char](1) NULL, 
			[ONETIME] [char](1) DEFAULT('T'), 
			[ONE_TIME_PARTNO] [varchar](30) DEFAULT('CONTRACT PO'), 
			[CLASS_ID] [int] NULL, 	
			[WEIGHT] [float] DEFAULT(0), 				
			[WHS_FLAG] [varchar](1) DEFAULT('F'), 
			[pri_id] [int] NULL, 
			[lv1id] [int] NULL, 
			[lv2id] [int] NULL, 
			[lv3id] [int] NULL, 
			[lv4id] [int] NULL, 
			[lem_comp] [varchar](1) NULL, 
			[reference] [varchar](150) NULL, 
			[billable] [varchar](1) NULL, 
			[CUST_COST_CODE] [varchar](15) NULL,
			[MatchId] int, 
			[HeaderMatchId] int 
		)

		if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#po_detail_delivery'))
			drop table #po_detail_delivery

		create table #po_detail_delivery (
			[PO_DETAIL_ID] [int],
			[QUANTITY] [money],
			[DELIVERY_DATE] [datetime],
			[LINE_NO] int,
			[MatchId] int 
		)

		select @nSql = '
		declare @POSeq int, @pri_id int, @Next_PO_ID int, @Next_PO_DETAIL_ID int, @FieldPOBuyer varchar(6)
	
		select @FieldPOBuyer=FieldPOBuyer from '+@tr_db+'.[dbo].po_setup

		-- Header
		insert into #po_header (MatchId, ORDER_DATE, ORG_DUE_DATE, SUPPLIER, PRI_NUM, CONTACT_ID, PO, POSeq)
		select MatchId, PODate, PODate, SupplierCode, ProjectId, ContactId, null, 
			ROW_NUMBER() OVER(PARTITION BY ProjectId order by MatchId) AS Row
		from WS_SyncPOHeader
		where SyncId = @SyncId and CompanyId=@CompanyId		


		declare curPO cursor for	
		select distinct pri_num
		from #po_header
	
		open curPO 
		fetch curPO into @pri_id
		while @@fetch_status=0
		begin
			select @POSeq='+@tr_db+'.[dbo].PO_NextProjPOSeq(@pri_id)

			update #po_header set POSeq=(POSeq-1) + @POSeq where pri_num=@pri_id

			fetch curPO into @pri_id
		end			
		close curPO
		deallocate curPO

		update t
		set t.po = ''P'' + 
			case when isnull(p.is_co,''F'') = ''T'' 
				then (select cast(ph.pri_code as varchar(10)) from '+@tr_db+'.[dbo].proj_header ph where ph.pri_id = p.co_pri_id) 
					+ ''-'' + cast(p.pri_code as varchar(10)) 
				else cast(p.pri_code as varchar(10)) end 
				+ ''-'' +  cast(POSeq as varchar(10)) 
		from #po_header t
		join '+@tr_db+'.[dbo].proj_header p on p.pri_id = t.PRI_NUM
		
		update t 
		set t.SUPP_NAME=s.name, t.SALES_TAX_ID=s.SALES_TAX_ID, t.SHIPPING=s.SHIPPING, t.TERMS_ID=s.TERMS_ID, t.FRT_TERMS_ID=s.FRT_TERMS_ID, 
			t.PO_ADD1=s.PO_ADD1, t.PO_ADD2=s.PO_ADD2, t.PO_ADD3=s.PO_ADD3, t.PO_CITY=s.PO_CITY, t.PO_STATE=s.PO_STATE, t.PO_ZIP=s.PO_ZIP, t.PO_COUNTRY_ID=s.PO_COUNTRY_ID,
			t.DISCOUNT=s.DISCOUNT, t.SHIPPING_FOB_ID=s.SHIPPING_FOB_ID, t.EXCH_RATE=c.EXCHANGE_RATE, t.HOLD_PCT=isnull(s.HOLD_PCT,0), t.PO_SupplyType_ID=s.PO_SupplyType_ID		
		from #po_header t
		join '+@tr_db+'.[dbo].supplier_master s on s.supplier=t.supplier
		left outer join '+@tr_db+'.[dbo].currency c on c.CURRENCY_ID=s.CURRENCY_ID
	
		update t 
		set t.WHSE_ID=p.pri_whs, t.PO_DIV=p.pri_division
		from #po_header t
		join '+@tr_db+'.[dbo].proj_header p on p.pri_id=t.PRI_NUM

		update t 
		set t.OPERATOR=m.name, t.BUYER=isnull(b.buyer, @FieldPOBuyer)
		from #po_header t
		join '+@tr_db+'.[dbo].mluser m on m.ContactID=t.CONTACT_ID
		left outer join '+@tr_db+'.[dbo].buyer b on b.BUYER=m.buyer
			
		if not exists ( select * from '+@tr_db+'.[dbo].system_ids where id_name = ''NEXT_PO_ID'' )
		begin
			insert into '+@tr_db+'.[dbo].system_ids (ID, ID_NAME)
			select 1, ''NEXT_PO_ID''
		end

		select @Next_PO_ID = id from '+@tr_db+'.[dbo].system_ids where id_name = ''NEXT_PO_ID''

		update #po_header set po_id = @Next_PO_ID + id

		if exists( select * from #po_header )
		begin
			update '+@tr_db+'.[dbo].system_ids 
			set id = (select max(po_id) from #po_header) + 1 
			where id_name = ''NEXT_PO_ID''
		end
		
		-- Detail
		insert into #po_detail (MatchId, HeaderMatchId, LINE_NUMBER, PART_NO_DESC, lv1id, lv2id, lv3id, lv4id, lem_comp,
			billable, CONVERTED_QTY, UNIT_PRICE, QTY_ORDERED, CONV_UNIT_COST, EXTENSION, UOM, CLASS_ID)
		select d.MatchId, d.HeaderMatchId, d.LineNum, d.Description, isnull(d.Level1Id,-1), isnull(d.Level2Id,-1), isnull(d.Level3Id,-1), isnull(d.Level4Id,-1), d.LEMComp, 
			case when isnull(d.billable,0) = 0 then ''F'' else ''T'' end, 1, 1, d.Amount, d.Amount, d.Amount,
			isnull((select isnull(PC_UOM, DefaultContractUOM )from '+@tr_db+'.[dbo].po_setup), ''EA''),
			isnull((select ONE_TIME_CLASS_DEFAULT from '+@tr_db+'.[dbo].so_setup), (select top 1 class_id from '+@tr_db+'.[dbo].class order by class_id))
		from WS_SyncPOHeader h
		join WS_SyncPODetail d on d.HeaderMatchId=h.MatchId and d.SyncId=h.SyncId
		where h.SyncId = @SyncId and h.CompanyId=@CompanyId 


		update td 
		set td.ORIG_DUE_DATE=t.ORG_DUE_DATE, td.TAXABLE=t.TAXABLE, td.pri_id=t.PRI_NUM, td.PO_ID=t.PO_ID
		from #po_detail td
		join #po_header t on t.MatchId=td.HeaderMatchId

		update td 
		set td.reference='+@tr_db+'.[dbo].fn_ProjWOReference(pri_id, lv1id, lv2id, lv3id, lv4id, lem_comp, ''A'', null),
			td.CUST_COST_CODE=
				(select top 1 cost_code 
				from '+@tr_db+'.[dbo].costing_budget c 
				where isnull(c.pri_id,-1)=isnull(td.pri_id,-1) 
					and isnull(c.lv1id,-1)=isnull(td.lv1id,-1)
					and isnull(c.lv2id,-1)=isnull(td.lv2id,-1)
					and isnull(c.lv3id,-1)=isnull(td.lv3id,-1)
					and isnull(c.lv4id,-1)=isnull(td.lv4id,-1))
		from #po_detail td
	
		update td 
		set td.GL_ACCOUNT=case when isnull(l1.lv1ID,-1) <> -1 
			then l1.DirecCostAccount
			else '+@tr_db+'.[dbo].fn_get_projwo_account(td.pri_id, td.lem_comp, case when isnull(p.pri_status,''A'') = ''L'' then ''E'' else ''W'' end) end
		from #po_detail td
		join '+@tr_db+'.[dbo].proj_header p on p.pri_id=td.pri_id
		left outer join '+@tr_db+'.[dbo].Level1_Codes l1 on l1.lv1ID=td.lv1id and l1.DirectCost = 1

		update td 
		set td.GL_ACCOUNT='+@tr_db+'.[dbo].SwapGLSegmentRC(td.GL_ACCOUNT, t.PO_DIV, p.pri_profit_center)
		from #po_detail td
		join #po_header t on t.MatchId=td.HeaderMatchId
		join '+@tr_db+'.[dbo].proj_header p on p.pri_id=td.pri_id

	
		if not exists ( select * from '+@tr_db+'.[dbo].system_ids where id_name = ''NEXT_PO_DETAIL_ID'' )
		begin
			insert into '+@tr_db+'.[dbo].system_ids (ID, ID_NAME)
			select 1, ''NEXT_PO_DETAIL_ID''
		end

		select @Next_PO_DETAIL_ID = id from '+@tr_db+'.[dbo].system_ids where id_name = ''NEXT_PO_DETAIL_ID''

		update #po_detail set po_detail_id = @Next_PO_DETAIL_ID + id

		if exists( select * from #po_detail )
		begin
			update '+@tr_db+'.[dbo].system_ids 
			set id = (select max(po_detail_id) from #po_detail) + 1 
			where id_name = ''NEXT_PO_DETAIL_ID''
		end 
		
		-- Detail Delivery
		insert into #po_detail_delivery (PO_DETAIL_ID, QUANTITY, DELIVERY_DATE, LINE_NO, MatchId)
		select PO_DETAIL_ID, CONVERTED_QTY, ORIG_DUE_DATE, 1, MatchId
		from #po_detail '
		exec sp_executesql @nSql, N'@SyncId int, @CompanyId int ', @SyncId, @CompanyId	
		
		select @nSql = '
		declare @po_id int, @operator varchar(10), @message varchar(500)

		insert into '+@tr_db+'.[dbo].PO_HEADER (PO_ID, PO, SUPPLIER, SUPP_NAME, WHSE_ID, PO_ADD1, PO_ADD2, PO_ADD3, PO_CITY, PO_STATE, PO_ZIP, DELIV_ADD1, DELIV_ADD2,
			DELIV_ADD3, DELIV_CITY, DELIV_STATE, DELIV_ZIP, ORDER_DATE, ORG_DUE_DATE, SHIPPING, TAXABLE, SALES_TAX_ID, DISCOUNT, TERMS_ID, SHIPPING_FOB_ID,
			FRT_TERMS_ID, BUYER, PO_TYPE, PRINTED, STATUS, OPERATOR, WHSE_SHIPTO_ID, PRI_NUM, PO_COUNTRY_ID, DELIV_COUNTRY_ID, EXCH_RATE, STOCK_PO,
			PO_DIV, HOLD_AMT, HOLD_PCT, CONTRACT_PO, PO_FUNCTION, CONTACT_ID, PO_SupplyType_ID, MatchId)
		select PO_ID, PO, SUPPLIER, SUPP_NAME, WHSE_ID, PO_ADD1, PO_ADD2, PO_ADD3, PO_CITY, PO_STATE, PO_ZIP, DELIV_ADD1, DELIV_ADD2,
			DELIV_ADD3, DELIV_CITY, DELIV_STATE, DELIV_ZIP, ORDER_DATE, ORG_DUE_DATE, SHIPPING, TAXABLE, SALES_TAX_ID, DISCOUNT, TERMS_ID, SHIPPING_FOB_ID,
			FRT_TERMS_ID, BUYER, PO_TYPE, PRINTED, STATUS, OPERATOR, WHSE_SHIPTO_ID, PRI_NUM, PO_COUNTRY_ID, DELIV_COUNTRY_ID, EXCH_RATE, STOCK_PO,
			PO_DIV, HOLD_AMT, HOLD_PCT, CONTRACT_PO, PO_FUNCTION, CONTACT_ID, PO_SupplyType_ID, MatchId
		from #po_header

		insert into '+@tr_db+'.[dbo].PO_DETAIL (PO_ID, LINE_NUMBER, PO_DETAIL_ID, PART_NO_DESC, QTY_ORDERED, UOM, CONVERTED_QTY, UNIT_PRICE, CONV_UNIT_COST, EXTENSION,
			ORIG_DUE_DATE, GL_ACCOUNT, TAXABLE, ONETIME, ONE_TIME_PARTNO, CLASS_ID, WEIGHT, WHS_FLAG, pri_id, lv1id, lv2id, lv3id, lv4id, lem_comp,
			reference, billable, MatchId, CUST_COST_CODE)
		select PO_ID, LINE_NUMBER, PO_DETAIL_ID, PART_NO_DESC, QTY_ORDERED, UOM, CONVERTED_QTY, UNIT_PRICE, CONV_UNIT_COST, EXTENSION,
			ORIG_DUE_DATE, GL_ACCOUNT, TAXABLE, ONETIME, ONE_TIME_PARTNO, CLASS_ID, WEIGHT, WHS_FLAG, pri_id, lv1id, lv2id, lv3id, lv4id, lem_comp,
			reference, billable, MatchId, CUST_COST_CODE
		from #po_detail

		insert into '+@tr_db+'.[dbo].PO_DETAIL_DELIVERY (PO_DETAIL_ID, QUANTITY, DELIVERY_DATE, LINE_NO)
		select PO_DETAIL_ID, QUANTITY, DELIVERY_DATE, LINE_NO
		from #po_detail_delivery

		
		declare curPO cursor for	
		select po_id, operator
		from #po_header
	
		open curPO 
		fetch curPO into @po_id, @operator
		while @@fetch_status=0
		begin
			exec '+@tr_db+'.[dbo].sp_POCalcLandedCost @po_id	
			exec '+@tr_db+'.[dbo].sp_PO_ContractPOAutoApproval @po_id, @operator, @message output 

			fetch curPO into @po_id, @operator
		end			
		close curPO
		deallocate curPO '		
		exec sp_executesql @nSql, N'@SyncId int, @CompanyId int ', @SyncId, @CompanyId	

		fetch cur_POH into @CompanyId
	end			
	close cur_POH
	deallocate cur_POH


	-- Attachments - WS_SyncAttachment
	declare cur_ATT cursor for	
	select MatchId, isnull(PrevMatchId,-1), LinkMatchId, CompanyId, ContextItemId, TableDotField, Comment, FileName, FileData, FileTypeDescription, AddedBy, 
		DateAdded, MimeType, ContactId, InternalOnly
	from WS_SyncAttachment 
	where SyncId = @SyncId and isnull(Quarantine,0)=@Quarantine
	
	open cur_ATT 
	fetch cur_ATT into @MatchId, @PrevMatchId, @LinkMatchId, @CompanyId, @ContextItemId, @TableDotField, @Comment, @FileName, @FileData, @FileTypeDescription, @AddedBy, 
		@DateAdded, @MimeType, @ContactId, @InternalOnly
	while @@fetch_status=0
	begin
		select @tr_db=treasurydbname, @dm_db=DMDBName, @dm_server=DMServer from companies where autoid = @CompanyId

		if( @PrevMatchId = -1 )
		begin
			-- insert
			select @nSql = '
			declare @FileRepository_ID int, @IDValue int

			if( @TableDotField = ''FieldPO.Id'')
			begin
				select @TableDotField = ''PO_HEADER.PO_ID''
				select @IDValue=PO_ID from '+@tr_db+'.dbo.PO_HEADER where MatchId=@LinkMatchId
			end
			else if( @TableDotField = ''LemHeader.Id'')
			begin
				select @TableDotField = ''WS_PCDL_LogHeader.id''
				select @IDValue=id from '+@tr_db+'.dbo.WS_PCDL_LogHeader where MatchId=@LinkMatchId
			end

			insert into '+@dm_server+'.'+@dm_db+'.dbo.[CFS_FileRepository] (FileName, FileData, FileTypeDescription, AddedBy, DateAdded, FileType,
				Mime_type, InternalOnly, FileStatus, permanent_tf, ContactId, MatchId)
			select @FileName, @FileData, @FileTypeDescription, @AddedBy, @DateAdded, ''F'', @MimeType, @InternalOnly, ''D'', ''F'', @ContactId, @MatchId

			select @FileRepository_ID=scope_identity()

			insert into '+@dm_server+'.'+@dm_db+'.dbo.[CFS_FileLink] (FileRepository_ID, CompanyID, DBFlavour, ContextItem_ID, IsOrigin, TableDotField, 
				IDValue, TargetPrint, Comment, LinkOrigin)
			select @FileRepository_ID, @CompanyId, ''TR'', @ContextItemId, 1, @TableDotField, 
				@IDValue, ''ATT'', @Comment, ''Attached'' '			
			exec sp_executesql @nSql, N'@MatchId int, @LinkMatchId int, @CompanyId int, @ContextItemId int, @TableDotField varchar(60), @Comment varchar(max), @FileName varchar(255), 
				@FileData varbinary(max), @FileTypeDescription varchar(max), @AddedBy varchar(10), @DateAdded datetime, @MimeType varchar(200), @ContactId int, @InternalOnly bit ', 
				@MatchId, @LinkMatchId, @CompanyId, @ContextItemId, @TableDotField, @Comment, @FileName, @FileData, @FileTypeDescription, @AddedBy, @DateAdded, @MimeType, @ContactId, @InternalOnly
		end
		else
		begin
			-- update
			select @nSql = 'declare @FileRepository_ID int, @valid bit = 0
			if( @TableDotField = ''LemHeader.Id'')
			begin
				if exists( select * from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@LinkMatchId and LogStatus <> ''Billed'')
				begin
					select @valid = 1
				end
			end
			else
			begin
				select @valid = 1
			end

			if( @valid = 1 )
			begin
				update '+@dm_server+'.'+@dm_db+'.dbo.[CFS_FileRepository]
				set FileName=@FileName, FileData=@FileData, FileTypeDescription=@FileTypeDescription, AddedBy=@AddedBy, DateAdded=@DateAdded, 
					Mime_type=@MimeType, InternalOnly=@InternalOnly, ContactId=@ContactId
				where MatchId=@PrevMatchId 

				select @FileRepository_ID=ID from '+@dm_server+'.'+@dm_db+'.dbo.[CFS_FileRepository] where MatchId=@PrevMatchId 

				update '+@dm_server+'.'+@dm_db+'.dbo.[CFS_FileLink]
				set CompanyID=@CompanyId, ContextItem_ID=@ContextItemId, Comment=@Comment
				where FileRepository_ID=@FileRepository_ID
			end '
			print @nSql
			exec sp_executesql @nSql, N'@PrevMatchId int, @LinkMatchId int, @CompanyId int, @ContextItemId int, @TableDotField varchar(60), @Comment varchar(max), @FileName varchar(255), 
				@FileData varbinary(max), @FileTypeDescription varchar(max), @AddedBy varchar(10), @DateAdded datetime, @MimeType varchar(200), @ContactId int, @InternalOnly bit ', 
				@PrevMatchId, @LinkMatchId, @CompanyId, @ContextItemId, @TableDotField, @Comment, @FileName, @FileData, @FileTypeDescription, @AddedBy, @DateAdded, @MimeType, @ContactId, @InternalOnly
		end

		fetch cur_ATT into @MatchId, @PrevMatchId, @LinkMatchId, @CompanyId, @ContextItemId, @TableDotField, @Comment, @FileName, @FileData, @FileTypeDescription, @AddedBy, 
			@DateAdded, @MimeType, @ContactId, @InternalOnly
	end			
	close cur_ATT
	deallocate cur_ATT


	-- Deletes - WS_SyncDeleteHistory
	declare @DeleteSeq table (
		seq int,
		tableName varchar(50)
	)

	insert into @DeleteSeq 
	select 1, 'LemHeaderAttach'
	union 
	select 2, 'LemAPUnselect'
	union 
	select 3, 'EquipTimeEntry'
	union 
	select 4, 'LabourTimeEntry'
	union 
	select 5, 'LemHeader'	
	
	declare cur_DEL cursor for	
	select w.Id, w.TableName, w.MatchId, w.CompanyId
	from WS_SyncDeleteHistory w
	join @DeleteSeq s on s.tableName=w.TableName
	where SyncId = @SyncId and isnull(Quarantine,0)=@Quarantine
	order by s.seq

	open cur_DEL 
	fetch cur_DEL into @DeleteHistoryId, @TableName, @MatchId, @CompanyId
	while @@fetch_status=0
	begin
		select @tr_db=treasurydbname, @dm_db=DMDBName, @dm_server=DMServer from companies where autoid = @CompanyId

		if(@TableName='LemHeaderAttach')
		begin
			select @nSql = '
			declare @HeaderMatchId int, @cnt int, @FileRepository_ID int

			select @HeaderMatchId=LinkMatchId from WS_SyncAttachment where MatchId=@MatchId
			if exists( select * from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId and LogStatus <> ''Billed'')
			begin
				select @FileRepository_ID=ID from '+@dm_server+'.'+@dm_db+'.dbo.[CFS_FileRepository] where MatchId=@MatchId

				select @cnt=count(*) from '+@dm_server+'.'+@dm_db+'.dbo.[CFS_FileLink] where FileRepository_ID=@FileRepository_ID

				delete from '+@dm_server+'.'+@dm_db+'.dbo.[CFS_FileLink] where TableDotField=''WS_PCDL_LogHeader.id'' and FileRepository_ID=@FileRepository_ID

				if( @cnt = 1 )
				begin
					delete from '+@dm_server+'.'+@dm_db+'.dbo.[CFS_FileRepository] where Id=@FileRepository_ID 
				end 

				update WS_SyncAttachment set Deleted = 1 where MatchId=@MatchId
				update WS_SyncAttachment set Deleted = 1 where PrevMatchId=@MatchId 
				update WS_SyncDeleteHistory set Success = 1 where id=@DeleteHistoryId 
			end '
			exec sp_executesql @nSql, N'@MatchId int, @DeleteHistoryId int ', @MatchId, @DeleteHistoryId
		end
		else if(@TableName='LemAPUnselect')
		begin
			select @nSql = '
			declare @LemNum varchar(20)

			if exists( select * 
				from '+@tr_db+'.[dbo].[ap_gl_alloc] d 
				join '+@tr_db+'.[dbo].[WS_PCDL_LEM_AP] w on w.ap_gl_alloc_id=d.ap_gl_alloc_id
				join '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] l on l.id=w.WS_PCDL_LogHeaderId
				where d.ap_inv_header_id=@MatchId and l.LogStatus <> ''Billed'' )
			begin
				select top 1 @LemNum=LemNum 
				from '+@tr_db+'.[dbo].[ap_gl_alloc] d 
				join '+@tr_db+'.[dbo].[WS_PCDL_LEM_AP] w on w.ap_gl_alloc_id=d.ap_gl_alloc_id
				join '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] l on l.id=w.WS_PCDL_LogHeaderId
				where d.ap_inv_header_id=@MatchId

				delete w 
				from '+@tr_db+'.[dbo].[WS_PCDL_LEM_AP] w
				join '+@tr_db+'.[dbo].[ap_gl_alloc] d on d.ap_gl_alloc_id=w.ap_gl_alloc_id
				where d.ap_inv_header_id = @MatchId
				
				update '+@tr_db+'.[dbo].[ap_gl_alloc] set time_ticket=null where ap_inv_header_id = @MatchId
				update c
				set c.time_ticket=null
				from '+@tr_db+'.[dbo].[costing_actuals] c 
				join '+@tr_db+'.[dbo].[ap_gl_alloc] d on d.ap_gl_alloc_id=c.ap_gl_alloc_id
				where d.ap_inv_header_id = @MatchId

				update tt
				set tt.total_costs=isnull((
					select sum(c.total_amount) 
					from '+@tr_db+'.[dbo].[costing_actuals] c
					where c.so_trn_id is null and c.pri_id=tt.pri_id and isnull(c.et_afe_number,'''')=tt.afe_no and 
						isnull(c.et_cust_cost_code,'''')=tt.cust_cost_code and isnull(c.et_time_ticket,'''')=tt.time_ticket 
					), 0)
				from '+@tr_db+'.[dbo].[costing_timeticket] tt
				where tt.time_ticket=@LemNum
								
				update w 
				set w.Deleted = 1
				from WS_SyncAPDet w  
				join '+@tr_db+'.[dbo].[ap_gl_alloc] d on d.ap_gl_alloc_id=w.ap_gl_alloc_id
				where d.ap_inv_header_id=@MatchId

				update WS_SyncDeleteHistory set Success = 1 where id=@DeleteHistoryId 
			end '
			exec sp_executesql @nSql, N'@MatchId int, @DeleteHistoryId int ', @MatchId, @DeleteHistoryId			
		end
		else if(@TableName='EquipTimeEntry')
		begin
			select @nSql = '
			declare @HeaderMatchId int, @DL_LogEntry_ID int, @LogHeaderId int, @EqpNum varchar(10), @cnt int, @TimeClock_ID int,
				@Converted int, @Accrued int, @Paid int

			select @HeaderMatchId=HeaderMatchId from WS_SyncEquipTimeEntry where MatchId=@MatchId
			if exists( select * from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId and LogStatus <> ''Billed'')
			begin
				select @LogHeaderId=id from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId

				select @DL_LogEntry_ID=WS_PCDL_LH_ID, @EqpNum=eqi_num, @TimeClock_ID=ID from '+@tr_db+'.[dbo].[WS_EMP_TimeClock] where MatchId=@MatchId and LEM=''E''

				-- Employee owned equip time
				select @Converted=count(*) from '+@tr_db+'.[dbo].[emp_time] where TimeClock_ID=@TimeClock_ID and et_accrual_flag=''U''
				select @Accrued=count(*) from '+@tr_db+'.[dbo].[emp_time] where TimeClock_ID=@TimeClock_ID and et_accrual_flag=''A''
				select @Paid=count(*) from '+@tr_db+'.[dbo].[emp_time_hist] where TimeClock_ID=@TimeClock_ID
				-- Equipment
				select @Converted=isnull(@Converted,0)+count(*) from '+@tr_db+'.[dbo].[emp_time_equip] where TimeClock_ID=@TimeClock_ID and et_accrual_flag=''U''
				select @Accrued=isnull(@Accrued,0)+count(*) from '+@tr_db+'.[dbo].[emp_time_eqip] where TimeClock_ID=@TimeClock_ID and et_accrual_flag=''A''
				select @Paid=isnull(@Paid,0)+count(*) from '+@tr_db+'.[dbo].[emp_time_equip_hist] where TimeClock_ID=@TimeClock_ID

				if( (@Converted + @Accrued + @Paid) = 0 )
				begin	
					select @cnt=count(*) from '+@tr_db+'.[dbo].[WS_EMP_TimeClock] where eqi_num=@EqpNum and WS_PCDL_LH_ID=@DL_LogEntry_ID

					delete from '+@tr_db+'.[dbo].[WS_EMP_TimeClock] where MatchId=@MatchId and LEM=''E''

					if( @cnt = 1 )
					begin
						delete from '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] where DL_LogEntry_ID=@DL_LogEntry_ID 
					end
									
					update WS_SyncEquipTimeEntry set Deleted = 1 where MatchId=@MatchId
					update WS_SyncEquipTimeEntry set Deleted = 1 where PrevMatchId=@MatchId 
					update WS_SyncDeleteHistory set Success = 1 where id=@DeleteHistoryId 
				end
				else
				begin
					-- Flag deleted equipment where equip or emp owned time has been processed
					update WS_SyncDeleteHistory 
					set emp_time=1 
					where id=@DeleteHistoryId 
				end
			end'
			exec sp_executesql @nSql, N'@MatchId int, @DeleteHistoryId int ', @MatchId, @DeleteHistoryId
		end
		else if(@TableName='LabourTimeEntry')
		begin
			select @nSql = '
			declare @HeaderMatchId int, @DL_LogEntry_ID int, @LogHeaderId int, @EmpNum int, @cnt int, @TimeClock_ID int,
				@Converted int, @Accrued int, @Paid int

			select @HeaderMatchId=HeaderMatchId from WS_SyncLabourTimeEntry where MatchId=@MatchId
			if exists( select * from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId and LogStatus <> ''Billed'')
			begin
				select @DL_LogEntry_ID=WS_PCDL_LH_ID, @EmpNum=emp_no, @TimeClock_ID=ID 
				from '+@tr_db+'.[dbo].[WS_EMP_TimeClock] 
				where MatchId=@MatchId and LEM=''L''

				select @Converted=count(*) from '+@tr_db+'.[dbo].[emp_time] where TimeClock_ID=@TimeClock_ID and et_accrual_flag=''U''
				select @Accrued=count(*) from '+@tr_db+'.[dbo].[emp_time] where TimeClock_ID=@TimeClock_ID and et_accrual_flag=''A''
				select @Paid=count(*) from '+@tr_db+'.[dbo].[emp_time_hist] where TimeClock_ID=@TimeClock_ID

				if( (@Converted + @Accrued + @Paid) = 0 )
				begin				
					select @LogHeaderId=id from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId

					select @cnt=count(*) from '+@tr_db+'.[dbo].[WS_EMP_TimeClock] where emp_no=@EmpNum and WS_PCDL_LH_ID=@DL_LogEntry_ID

					delete from '+@tr_db+'.[dbo].[WS_EMP_TimeClock] where MatchId=@MatchId and LEM=''L''
					delete from '+@tr_db+'.[dbo].[WS_EMP_TimeClockHours] where WS_ETC_ID = @TimeClock_ID

					if( @cnt = 1 )
					begin
						delete from '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] where DL_LogEntry_ID=@DL_LogEntry_ID 
					end

					update WS_SyncLabourTimeDetail set Deleted = 1 where EntryId=@MatchId
					update WS_SyncLabourTimeEntry set Deleted = 1 where MatchId=@MatchId
					update WS_SyncLabourTimeEntry set Deleted = 1 where PrevMatchId=@MatchId
					update WS_SyncDeleteHistory set Success = 1 where id=@DeleteHistoryId 
				end
				else
				begin									
					-- Flag Deleted Labor where time has been processed
					update WS_SyncDeleteHistory 
					set emp_time=1 
					where id=@DeleteHistoryId 								
				end
			end '	
			exec sp_executesql @nSql, N'@MatchId int, @DeleteHistoryId int ', @MatchId, @DeleteHistoryId
		end
		else if(@TableName='LemHeader')
		begin
			select @nSql = '
			declare @LemNum varchar(20), @WS_PCDL_LH_ID int

			if exists( select * from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@MatchId and LogStatus <> ''Billed'')
			begin
				-- do cascading deletes
				-- AP Det
				select @LemNum=LemNum, @WS_PCDL_LH_ID=ID from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@MatchId

				delete a
				from '+@tr_db+'.[dbo].[WS_PCDL_LEM_AP] a
				join WS_SyncAPDet w on w.ap_gl_alloc_id=a.ap_gl_alloc_id
				where w.HeaderMatchId=@MatchId

				update a
				set a.time_ticket=null
				from '+@tr_db+'.[dbo].[ap_gl_alloc] a
				join WS_SyncAPDet w on w.ap_gl_alloc_id=a.ap_gl_alloc_id
				where w.HeaderMatchId=@MatchId

				update c
				set c.time_ticket=null
				from '+@tr_db+'.[dbo].[costing_actuals] c
				join WS_SyncAPDet w on w.ap_gl_alloc_id=c.ap_gl_alloc_id
				where w.HeaderMatchId=@MatchId
									
				update tt
				set tt.total_costs=isnull((
					select sum(c.total_amount) 
					from '+@tr_db+'.[dbo].[costing_actuals] c
					where c.so_trn_id is null and c.pri_id=tt.pri_id and isnull(c.et_afe_number,'''')=tt.afe_no and 
						isnull(c.et_cust_cost_code,'''')=tt.cust_cost_code and isnull(c.et_time_ticket,'''')=tt.time_ticket 
					), 0)
				from '+@tr_db+'.[dbo].[costing_timeticket] tt
				where tt.time_ticket=@LemNum

				update WS_SyncAPDet set Deleted = 1 where HeaderMatchId=@MatchId
				

				-- Log Header
				delete from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@MatchId

				delete from '+@tr_db+'.[dbo].[costing_TimeTicket] where WS_PCDL_LH_ID=@WS_PCDL_LH_ID

				update WS_SyncLogHeader set Deleted = 1 where MatchId=@MatchId
				update WS_SyncLogHeader set Deleted = 1 where PrevMatchId=@MatchId 
				update WS_SyncDeleteHistory set Success = 1 where id=@DeleteHistoryId 
			end '
			exec sp_executesql @nSql, N'@MatchId int, @DeleteHistoryId int ', @MatchId, @DeleteHistoryId
		end

		fetch cur_DEL into @DeleteHistoryId, @TableName, @MatchId, @CompanyId
	end			
	close cur_DEL
	deallocate cur_DEL

	

	-- Updates to Labor where time has been processed
	declare cur_LAB_CO cursor for	
	select w.MatchId, w.CompanyId
	from WS_SyncLabourTimeEntry w
	where SyncId = @SyncId and isnull(emp_time,0)=1 and isnull(Quarantine,0)=@Quarantine

	open cur_LAB_CO 
	fetch cur_LAB_CO into @MatchId, @CompanyId
	while @@fetch_status=0
	begin
		exec WS_SyncEnd_UpdateLabor @MatchId

		fetch cur_LAB_CO into @MatchId, @CompanyId
	end			
	close cur_LAB_CO
	deallocate cur_LAB_CO
		

	-- Updates to Equipment where time has been processed
	declare cur_EQI_CO cursor for	
	select w.MatchId, w.CompanyId
	from WS_SyncEquipTimeEntry w
	where SyncId = @SyncId and isnull(emp_time,0)=1 and isnull(Quarantine,0)=@Quarantine

	open cur_EQI_CO 
	fetch cur_EQI_CO into @MatchId, @CompanyId
	while @@fetch_status=0
	begin		
		exec WS_SyncEnd_UpdateEquip @MatchId

		fetch cur_EQI_CO into @MatchId, @CompanyId
	end			
	close cur_EQI_CO
	deallocate cur_EQI_CO
					

	-- Deletes to Labor where time has been processed		
	declare cur_DEL_CO cursor for	
	select w.Id, w.TableName, w.MatchId, w.CompanyId
	from WS_SyncDeleteHistory w
	where SyncId = @SyncId and isnull(emp_time,0)=1 and isnull(Quarantine,0)=@Quarantine
	
	open cur_DEL_CO 
	fetch cur_DEL_CO into @DeleteHistoryId, @TableName, @MatchId, @CompanyId
	while @@fetch_status=0
	begin
		select @tr_db=treasurydbname from companies where autoid = @CompanyId

		if(@TableName='LabourTimeEntry')
		begin	
			exec WS_SyncEnd_DeleteLabor @MatchId, @CompanyId

			select @nSql = 'declare @TimeClock_ID int, @cnt int, @DL_LogEntry_ID int

			select @TimeClock_ID=ID, @DL_LogEntry_ID=WS_PCDL_LH_ID 
			from '+@tr_db+'.[dbo].[WS_EMP_TimeClock] 
			where MatchId=@MatchId and LEM=''L''

			select @cnt=count(*) from '+@tr_db+'.[dbo].[WS_EMP_TimeClock] where WS_PCDL_LH_ID=@DL_LogEntry_ID

			delete from '+@tr_db+'.[dbo].[WS_EMP_TimeClock] where ID=@TimeClock_ID
			delete from '+@tr_db+'.[dbo].[WS_EMP_TimeClockHours] where WS_ETC_ID = @TimeClock_ID

			if( @cnt = 1 )
			begin
				delete from '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] where DL_LogEntry_ID=@DL_LogEntry_ID 
			end '
			exec sp_executesql @nSql, N'@MatchId int ', @MatchId

			update WS_SyncLabourTimeDetail set Deleted = 1 where EntryId=@MatchId
			update WS_SyncLabourTimeEntry set Deleted = 1 where MatchId=@MatchId
			update WS_SyncLabourTimeEntry set Deleted = 1 where PrevMatchId=@MatchId
			update WS_SyncDeleteHistory set Success = 1 where id=@DeleteHistoryId
		end
		if(@TableName='EquipTimeEntry')
		begin
			exec WS_SyncEnd_DeleteEquip @MatchId, @CompanyId

			select @nSql = 'declare @TimeClock_ID int, @cnt int, @DL_LogEntry_ID int

			select @TimeClock_ID=ID, @DL_LogEntry_ID=WS_PCDL_LH_ID 
			from '+@tr_db+'.[dbo].[WS_EMP_TimeClock] 
			where MatchId=@MatchId and LEM=''E''

			select @cnt=count(*) from '+@tr_db+'.[dbo].[WS_EMP_TimeClock] where WS_PCDL_LH_ID=@DL_LogEntry_ID

			delete from '+@tr_db+'.[dbo].[WS_EMP_TimeClock] where where ID=@TimeClock_ID

			if( @cnt = 1 )
			begin
				delete from '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] where DL_LogEntry_ID=@DL_LogEntry_ID 
			end '

			update WS_SyncEquipTimeEntry set Deleted = 1 where MatchId=@MatchId
			update WS_SyncEquipTimeEntry set Deleted = 1 where PrevMatchId=@MatchId 
			update WS_SyncDeleteHistory set Success = 1 where id=@DeleteHistoryId 
		end

		fetch cur_DEL_CO into @DeleteHistoryId, @TableName, @MatchId, @CompanyId
	end			
	close cur_DEL_CO
	deallocate cur_DEL_CO
	

	update WS_Sync 
	set SyncComplete = getdate(), Status = 'Complete' 
	where SyncId=@SyncId

	-- Stamps the last time a client has synced
	select @ClientMac=ClientMac from WS_Sync where SyncId=@SyncId

	declare @SyncCompany table (
		CompanyId int
	)

	insert into @SyncCompany (CompanyId)
	select distinct CompanyId from WS_SyncLogHeader where syncid=@SyncId
	union 
	select distinct CompanyId from WS_SyncLabourTimeEntry where syncid=@SyncId
	union
	select distinct CompanyId from WS_SyncEquipTimeEntry where syncid=@SyncId
	union
	select distinct CompanyId from WS_SyncAPDet where syncid=@SyncId
	union
	select distinct CompanyId from WS_SyncPOHeader where syncid=@SyncId
	union
	select distinct CompanyId from WS_SyncAttachment where syncid=@SyncId
	union
	select distinct CompanyId from WS_SyncDeleteHistory where syncid=@SyncId

	if( @Quarantine = 1 )
	begin
		update WS_SyncLogHeader set Quarantine=0, LogStatus='Submitted' where syncid=@syncid
		update WS_SyncLabourTimeEntry set Quarantine=0 where syncid=@syncid
		update WS_SyncLabourTimeDetail set Quarantine=0 where syncid=@syncid
		update WS_SyncEquipTimeEntry set Quarantine=0 where syncid=@syncid
		update WS_SyncAPDet set Quarantine=0 where syncid=@syncid
		update WS_SyncPOHeader set Quarantine=0 where syncid=@syncid
		update WS_SyncPODetail set Quarantine=0 where syncid=@syncid
		update WS_SyncAttachment set Quarantine=0 where syncid=@syncid
		update WS_SyncDeleteHistory set Quarantine=0 where syncid=@syncid
	end
	else
	begin
		declare cur_SyncCo cursor for	
		select distinct CompanyId from @SyncCompany

		open cur_SyncCo 
		fetch cur_SyncCo into @CompanyId
		while @@fetch_status=0
		begin		
			exec WS_FLEM_MobileSync_PostPut @CompanyId, @ClientMac

			fetch cur_SyncCo into @CompanyId
		end			
		close cur_SyncCo
		deallocate cur_SyncCo
	end
end 



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_SyncEnd_DeleteEquip]') and xtype = 'P ')  
 drop Procedure WS_SyncEnd_DeleteEquip
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

create proc WS_SyncEnd_DeleteEquip @MatchId int, @CompanyId int
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#emp_time_del'))
		drop table #emp_time_del

	create table #emp_time_del(
		[id] [int] identity(1,1) primary key,
		[emp_co] [int],
		[emp_no] [int],
		[et_date] [datetime],
		[et_seq] [int],
		[et_time] [datetime],
		[et_type] [char](1),
		[et_pay_period] [int],
		[wc_code] [varchar](5),
		[et_afe_number] [char](15),
		[et_cust_cost_code] [char](15),
		[et_time_ticket] [char](20),
		[pri_num] [int],
		[pri_proj_id] [int],
		[phs_code] [char](5),
		[subp_code] [char](5),
		[prp_comp] [char](1),
		[prp_subcomp] [char](5),
		[eg_code] [varchar](5),
		[ec_code] [varchar](5),
		[tbh_num] [int],
		[tbd_row] [int],
		[tbd_col] [int],
		[et_pay_rate] [money],
		[et_pay_inst_qty] [numeric](18, 0),
		[et_pay_tot_hrs] [money],
		[et_pay_reg_hrs] [money],
		[et_pay_ot_hrs] [money],
		[et_pay_dt_hrs] [money],
		[et_travel_hrs] [money],
		[et_travel_rate] [money],
		[eqi_no] [varchar](10),
		[et_eq_rate] [money],
		[et_eq_hrs] [money],
		[et_eq_inst_qty] [numeric](18, 0),
		[et_desc] [char](30),
		[et_accrual_flag] [char](1),
		[et_gross_net_flag] [char](1),
		[et_units] [char](5),
		[et_account] [varchar](21),
		[et_ei_insure] [char](1),
		[et_cpp_pension] [char](1),
		[et_taxable] [char](1),
		[et_taxable_ben] [char](1),
		[et_calc_type] [char](1),
		[et_div] [varchar](6),
		[acct_year] [int],
		[acct_period] [int],
		[journal_id] [int],
		[rc_code] [char](4),
		[rc_job] [char](4),
		[rc_bill_type] [char](1),
		[rc_cost_code] [char](1),
		[ee_unit1] [char](1),
		[ee_unit2] [char](2),
		[ee_unit3] [char](9),
		[ee_sub] [char](15),
		[et_line_total] [float],
		[et_company_alias] [varchar](40),
		[emp_time_id] [float],
		[night_premium_flag] [char](1),
		[tac_id] [int],
		[area_id] [int],
		[entry_type] [char](1),
		[unit_inv_id] [int],
		[operator] [varchar](10),
		[send_cc] [varchar](10),
		[activity] [varchar](6),
		[rec_cc] [varchar](10),
		[rec_wbs] [varchar](24),
		[rec_alt1] [varchar](30),
		[rec_alt2] [varchar](60),
		[rec_order_num] [varchar](12),
		[netw_num] [varchar](12),
		[activity_num] [varchar](4),
		[emp_name] [varchar](60),
		[rte_te_id] [int],
		[et_profit_center] [varchar](6),
		[PRI_ID] [int],
		[lv1ID] [int],
		[lv2ID] [int],
		[lv3ID] [int],
		[lv4ID] [int],
		[pri_type] [varchar](5),
		[cost_reference] [varchar](150),
		[EXPENSE_TYPE] [varchar](1),
		[work_comments] [varchar](100),
		[SUB_CODE] [varchar](10),
		[TimeClock_ID] [int],
		[billable] [varchar](1),
		[wo_operation_id] [int],
		[CostingType] [varchar](1) 
	)

	declare @tr_db varchar(50), @nSql nvarchar(max)

	select @tr_db=treasurydbname from companies where autoid = @CompanyId

	select @nSql = 'declare @TimeClock_ID int, @DL_LogEntry_ID int

	select @TimeClock_ID=ID, @DL_LogEntry_ID=WS_PCDL_LH_ID 
	from WS_SyncEquipTimeEntry w
	join '+@tr_db+'.[dbo].[WS_EMP_TimeClock] t on t.MatchId=isnull(w.PrevMatchId, w.MatchId) and t.LEM=''E''
	where w.MatchId=@MatchId 

	-- Converted
	if exists( select * from '+@tr_db+'.[dbo].[emp_time] where TimeClock_ID=@TimeClock_ID and et_accrual_flag=''U'' )
	begin
		delete from '+@tr_db+'.[dbo].[emp_time] where TimeClock_ID=@TimeClock_ID and et_accrual_flag=''U''
	end
	if exists( select * from '+@tr_db+'.[dbo].[emp_time_equip] where TimeClock_ID=@TimeClock_ID and et_accrual_flag=''U'' )
	begin
		delete from '+@tr_db+'.[dbo].[emp_time_equip] where TimeClock_ID=@TimeClock_ID and et_accrual_flag=''U''
	end

	-- Accrued
	if exists( select * from '+@tr_db+'.[dbo].[emp_time] where TimeClock_ID=@TimeClock_ID and et_accrual_flag=''A'' )
	begin
		update '+@tr_db+'.[dbo].[emp_time] 
		set et_accrual_flag=''D''
		where TimeClock_ID=@TimeClock_ID and et_accrual_flag=''A'' 
	end
	if exists( select * from '+@tr_db+'.[dbo].[emp_time_equip] where TimeClock_ID=@TimeClock_ID and et_accrual_flag=''A'' )
	begin
		update '+@tr_db+'.[dbo].[emp_time_equip] 
		set et_accrual_flag=''D''
		where TimeClock_ID=@TimeClock_ID and et_accrual_flag=''A'' 
	end
	
	-- Paid
	if exists( select * from '+@tr_db+'.[dbo].[emp_time_hist] where TimeClock_ID=@TimeClock_ID )
	begin
		declare @Max_et_seq int, @Max_emp_time_id int
	
		insert into #emp_time_del (emp_co, emp_no, et_date, et_seq, et_time, et_type, et_pay_period, wc_code, et_afe_number, et_cust_cost_code, et_time_ticket, 
			pri_num, pri_proj_id, phs_code, subp_code, prp_comp, prp_subcomp, eg_code, ec_code, tbh_num, tbd_row, tbd_col, et_pay_rate, et_pay_inst_qty, 
			et_pay_tot_hrs, et_pay_reg_hrs, et_pay_ot_hrs, et_pay_dt_hrs, et_travel_hrs, et_travel_rate, eqi_no, et_eq_rate, et_eq_hrs, et_eq_inst_qty, 
			et_desc, et_accrual_flag, et_gross_net_flag, et_units, et_account, et_ei_insure, et_cpp_pension, et_taxable, et_taxable_ben, et_calc_type, et_div, 
			acct_year, acct_period, journal_id, rc_code, rc_job, rc_bill_type, rc_cost_code, ee_unit1, ee_unit2, ee_unit3, ee_sub, et_line_total, et_company_alias, 
			emp_time_id, night_premium_flag, tac_id, area_id, entry_type, unit_inv_id, operator, send_cc, activity, rec_cc, rec_wbs, rec_alt1, rec_alt2, 
			rec_order_num, netw_num, activity_num, emp_name, rte_te_id, et_profit_center, PRI_ID, lv1ID, lv2ID, lv3ID, lv4ID, pri_type, cost_reference, 
			EXPENSE_TYPE, work_comments, SUB_CODE, TimeClock_ID, billable, wo_operation_id, CostingType)
		select emp_co, emp_no, et_date, et_seq, et_time, et_type, et_pay_period, wc_code, et_afe_number, et_cust_cost_code, et_time_ticket, 
			pri_num, pri_proj_id, phs_code, subp_code, prp_comp, prp_subcomp, eg_code, ec_code, tbh_num, tbd_row, tbd_col, et_pay_rate, et_pay_inst_qty, 
			-et_pay_tot_hrs, -et_pay_reg_hrs, -et_pay_ot_hrs, -et_pay_dt_hrs, -et_travel_hrs, et_travel_rate, eqi_no, et_eq_rate, -et_eq_hrs, et_eq_inst_qty, 
			et_desc, ''U'', et_gross_net_flag, et_units, et_account, et_ei_insure, et_cpp_pension, et_taxable, et_taxable_ben, et_calc_type, et_div, 
			acct_year, acct_period, journal_id, rc_code, rc_job, rc_bill_type, rc_cost_code, ee_unit1, ee_unit2, ee_unit3, ee_sub, et_line_total, et_company_alias, 
			emp_time_id, night_premium_flag, tac_id, area_id, entry_type, unit_inv_id, operator, send_cc, activity, rec_cc, rec_wbs, rec_alt1, rec_alt2, 
			rec_order_num, netw_num, activity_num, emp_name, rte_te_id, et_profit_center, PRI_ID, lv1ID, lv2ID, lv3ID, lv4ID, pri_type, cost_reference, 
			EXPENSE_TYPE, work_comments, SUB_CODE, null, billable, wo_operation_id, CostingType
		from '+@tr_db+'.[dbo].[emp_time_hist]
		where TimeClock_ID=@TimeClock_ID

		update '+@tr_db+'.[dbo].[emp_time_hist]
		set TimeClock_ID=null
		where TimeClock_ID=@TimeClock_ID

		select @Max_et_seq = isnull((select max(et_seq) from '+@tr_db+'.[dbo].[emp_time]),0)

		if not exists ( select * from '+@tr_db+'.[dbo].[system_ids] where id_name = ''NEXT_EMP_TIME_ID'' )
		begin
			insert into '+@tr_db+'.[dbo].[system_ids] (ID, ID_NAME)
			select 1, ''NEXT_EMP_TIME_ID''
		end

		select @Max_emp_time_id = id from '+@tr_db+'.[dbo].[system_ids] where id_name = ''NEXT_EMP_TIME_ID''

		update #emp_time_del 
		set et_seq = @Max_et_seq + id,
			emp_time_id = @Max_emp_time_id + id,
			et_line_total = round(et_pay_rate * et_pay_tot_hrs,2)

		update '+@tr_db+'.[dbo].[system_ids] 
			set id = (select max(emp_time_id) from #emp_time_del) + 1 
			where id_name = ''NEXT_EMP_TIME_ID''

		insert into '+@tr_db+'.[dbo].[emp_time] (emp_co, emp_no, et_date, et_seq, et_time, et_type, et_pay_period, wc_code, et_afe_number, et_cust_cost_code, et_time_ticket, 
			pri_num, pri_proj_id, phs_code, subp_code, prp_comp, prp_subcomp, eg_code, ec_code, tbh_num, tbd_row, tbd_col, et_pay_rate, et_pay_inst_qty, 
			et_pay_tot_hrs, et_pay_reg_hrs, et_pay_ot_hrs, et_pay_dt_hrs, et_travel_hrs, et_travel_rate, eqi_no, et_eq_rate, et_eq_hrs, et_eq_inst_qty, 
			et_desc, et_accrual_flag, et_gross_net_flag, et_units, et_account, et_ei_insure, et_cpp_pension, et_taxable, et_taxable_ben, et_calc_type, et_div, 
			acct_year, acct_period, journal_id, rc_code, rc_job, rc_bill_type, rc_cost_code, ee_unit1, ee_unit2, ee_unit3, ee_sub, et_line_total, et_company_alias, 
			emp_time_id, night_premium_flag, tac_id, area_id, entry_type, unit_inv_id, operator, send_cc, activity, rec_cc, rec_wbs, rec_alt1, rec_alt2, 
			rec_order_num, netw_num, activity_num, emp_name, rte_te_id, et_profit_center, PRI_ID, lv1ID, lv2ID, lv3ID, lv4ID, pri_type, cost_reference, 
			EXPENSE_TYPE, work_comments, SUB_CODE, TimeClock_ID, billable, wo_operation_id, CostingType)
		select emp_co, emp_no, et_date, et_seq, et_time, et_type, et_pay_period, wc_code, et_afe_number, et_cust_cost_code, et_time_ticket, 
			pri_num, pri_proj_id, phs_code, subp_code, prp_comp, prp_subcomp, eg_code, ec_code, tbh_num, tbd_row, tbd_col, et_pay_rate, et_pay_inst_qty, 
			et_pay_tot_hrs, et_pay_reg_hrs, et_pay_ot_hrs, et_pay_dt_hrs, et_travel_hrs, et_travel_rate, eqi_no, et_eq_rate, et_eq_hrs, et_eq_inst_qty, 
			et_desc, et_accrual_flag, et_gross_net_flag, et_units, et_account, et_ei_insure, et_cpp_pension, et_taxable, et_taxable_ben, et_calc_type, et_div, 
			acct_year, acct_period, journal_id, rc_code, rc_job, rc_bill_type, rc_cost_code, ee_unit1, ee_unit2, ee_unit3, ee_sub, et_line_total, et_company_alias, 
			emp_time_id, night_premium_flag, tac_id, area_id, entry_type, unit_inv_id, operator, send_cc, activity, rec_cc, rec_wbs, rec_alt1, rec_alt2, 
			rec_order_num, netw_num, activity_num, emp_name, rte_te_id, et_profit_center, PRI_ID, lv1ID, lv2ID, lv3ID, lv4ID, pri_type, cost_reference, 
			EXPENSE_TYPE, work_comments, SUB_CODE, TimeClock_ID, billable, wo_operation_id, CostingType
		from #emp_time_del
	end 
	if exists( select * from '+@tr_db+'.[dbo].[emp_time_equip_hist] where TimeClock_ID=@TimeClock_ID )
	begin
		insert into '+@tr_db+'.[dbo].[emp_time_equip] (et_date, et_seq, et_afe_number, et_cust_cost_code, et_time_ticket, pri_num, pri_proj_id, phs_code, subp_code, 
			prp_comp, prp_subcomp, eqi_no, et_eq_rate, et_eq_hrs, et_eq_inst_qty, et_accrual_flag, acct_year, acct_period, journal_id, et_div, entry_type, 
			operator, PRI_ID, lv1ID, lv2ID, lv3ID, lv4ID, BillCycle, TimeClock_ID)
		select et_date, et_seq, et_afe_number, et_cust_cost_code, et_time_ticket, pri_num, pri_proj_id, phs_code, subp_code, 
			prp_comp, prp_subcomp, eqi_no, et_eq_rate, et_eq_hrs, et_eq_inst_qty, ''D'', acct_year, acct_period, journal_id, et_div, entry_type, 
			operator, PRI_ID, lv1ID, lv2ID, lv3ID, lv4ID, BillCycle, TimeClock_ID
		from '+@tr_db+'.[dbo].[emp_time_equip_hist] 
		where TimeClock_ID=@TimeClock_ID

		delete from '+@tr_db+'.[dbo].[emp_time_equip_hist] where TimeClock_ID=@TimeClock_ID
	end '
	exec sp_executesql @nSql, N'@MatchId int ', @MatchId
	
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_SyncEnd_DeleteLabor]') and xtype = 'P ')  
 drop Procedure WS_SyncEnd_DeleteLabor
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

create proc WS_SyncEnd_DeleteLabor @MatchId int, @CompanyId int
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#emp_time_del'))
		drop table #emp_time_del

	create table #emp_time_del(
		[id] [int] identity(1,1) primary key,
		[emp_co] [int],
		[emp_no] [int],
		[et_date] [datetime],
		[et_seq] [int],
		[et_time] [datetime],
		[et_type] [char](1),
		[et_pay_period] [int],
		[wc_code] [varchar](5),
		[et_afe_number] [char](15),
		[et_cust_cost_code] [char](15),
		[et_time_ticket] [char](20),
		[pri_num] [int],
		[pri_proj_id] [int],
		[phs_code] [char](5),
		[subp_code] [char](5),
		[prp_comp] [char](1),
		[prp_subcomp] [char](5),
		[eg_code] [varchar](5),
		[ec_code] [varchar](5),
		[tbh_num] [int],
		[tbd_row] [int],
		[tbd_col] [int],
		[et_pay_rate] [money],
		[et_pay_inst_qty] [numeric](18, 0),
		[et_pay_tot_hrs] [money],
		[et_pay_reg_hrs] [money],
		[et_pay_ot_hrs] [money],
		[et_pay_dt_hrs] [money],
		[et_travel_hrs] [money],
		[et_travel_rate] [money],
		[eqi_no] [varchar](10),
		[et_eq_rate] [money],
		[et_eq_hrs] [money],
		[et_eq_inst_qty] [numeric](18, 0),
		[et_desc] [char](30),
		[et_accrual_flag] [char](1),
		[et_gross_net_flag] [char](1),
		[et_units] [char](5),
		[et_account] [varchar](21),
		[et_ei_insure] [char](1),
		[et_cpp_pension] [char](1),
		[et_taxable] [char](1),
		[et_taxable_ben] [char](1),
		[et_calc_type] [char](1),
		[et_div] [varchar](6),
		[acct_year] [int],
		[acct_period] [int],
		[journal_id] [int],
		[rc_code] [char](4),
		[rc_job] [char](4),
		[rc_bill_type] [char](1),
		[rc_cost_code] [char](1),
		[ee_unit1] [char](1),
		[ee_unit2] [char](2),
		[ee_unit3] [char](9),
		[ee_sub] [char](15),
		[et_line_total] [float],
		[et_company_alias] [varchar](40),
		[emp_time_id] [float],
		[night_premium_flag] [char](1),
		[tac_id] [int],
		[area_id] [int],
		[entry_type] [char](1),
		[unit_inv_id] [int],
		[operator] [varchar](10),
		[send_cc] [varchar](10),
		[activity] [varchar](6),
		[rec_cc] [varchar](10),
		[rec_wbs] [varchar](24),
		[rec_alt1] [varchar](30),
		[rec_alt2] [varchar](60),
		[rec_order_num] [varchar](12),
		[netw_num] [varchar](12),
		[activity_num] [varchar](4),
		[emp_name] [varchar](60),
		[rte_te_id] [int],
		[et_profit_center] [varchar](6),
		[PRI_ID] [int],
		[lv1ID] [int],
		[lv2ID] [int],
		[lv3ID] [int],
		[lv4ID] [int],
		[pri_type] [varchar](5),
		[cost_reference] [varchar](150),
		[EXPENSE_TYPE] [varchar](1),
		[work_comments] [varchar](100),
		[SUB_CODE] [varchar](10),
		[TimeClock_ID] [int],
		[billable] [varchar](1),
		[wo_operation_id] [int],
		[CostingType] [varchar](1) 
	)

	declare @tr_db varchar(50), @nSql nvarchar(max)

	select @tr_db=treasurydbname from companies where autoid = @CompanyId

		
	select @nSql = 'declare @TimeClock_ID int, @DL_LogEntry_ID int
		
	select @TimeClock_ID=ID, @DL_LogEntry_ID=WS_PCDL_LH_ID 
	from WS_SyncLabourTimeEntry w
	join '+@tr_db+'.[dbo].[WS_EMP_TimeClock] t on t.MatchId=isnull(w.PrevMatchId, w.MatchId) and t.LEM=''L''
	where w.MatchId=@MatchId  
	
	-- Converted	
	if exists( select * from '+@tr_db+'.[dbo].[emp_time] where TimeClock_ID=@TimeClock_ID and et_accrual_flag=''U'' )
	begin
		delete from '+@tr_db+'.[dbo].[emp_time] where TimeClock_ID=@TimeClock_ID and et_accrual_flag=''U''
	end	
	-- Accrued
	if exists( select * from '+@tr_db+'.[dbo].[emp_time] where TimeClock_ID=@TimeClock_ID and et_accrual_flag=''A'' )
	begin
		update '+@tr_db+'.[dbo].[emp_time] 
		set et_accrual_flag=''D'', TimeClock_ID=null
		where TimeClock_ID=@TimeClock_ID and et_accrual_flag=''A'' 
	end	
	-- Paid
	if exists( select * from '+@tr_db+'.[dbo].[emp_time_hist] where TimeClock_ID=@TimeClock_ID )
	begin
		declare @Max_et_seq int, @Max_emp_time_id int
	
		insert into #emp_time_del (emp_co, emp_no, et_date, et_seq, et_time, et_type, et_pay_period, wc_code, et_afe_number, et_cust_cost_code, et_time_ticket, 
			pri_num, pri_proj_id, phs_code, subp_code, prp_comp, prp_subcomp, eg_code, ec_code, tbh_num, tbd_row, tbd_col, et_pay_rate, et_pay_inst_qty, 
			et_pay_tot_hrs, et_pay_reg_hrs, et_pay_ot_hrs, et_pay_dt_hrs, et_travel_hrs, et_travel_rate, eqi_no, et_eq_rate, et_eq_hrs, et_eq_inst_qty, 
			et_desc, et_accrual_flag, et_gross_net_flag, et_units, et_account, et_ei_insure, et_cpp_pension, et_taxable, et_taxable_ben, et_calc_type, et_div, 
			acct_year, acct_period, journal_id, rc_code, rc_job, rc_bill_type, rc_cost_code, ee_unit1, ee_unit2, ee_unit3, ee_sub, et_line_total, et_company_alias, 
			emp_time_id, night_premium_flag, tac_id, area_id, entry_type, unit_inv_id, operator, send_cc, activity, rec_cc, rec_wbs, rec_alt1, rec_alt2, 
			rec_order_num, netw_num, activity_num, emp_name, rte_te_id, et_profit_center, PRI_ID, lv1ID, lv2ID, lv3ID, lv4ID, pri_type, cost_reference, 
			EXPENSE_TYPE, work_comments, SUB_CODE, TimeClock_ID, billable, wo_operation_id, CostingType)
		select emp_co, emp_no, et_date, et_seq, et_time, et_type, et_pay_period, rtrim(wc_code), rtrim(et_afe_number), rtrim(et_cust_cost_code), rtrim(et_time_ticket), 
			pri_num, pri_proj_id, phs_code, subp_code, prp_comp, prp_subcomp, rtrim(eg_code), rtrim(ec_code), tbh_num, tbd_row, tbd_col, et_pay_rate, et_pay_inst_qty, 
			-et_pay_tot_hrs, -et_pay_reg_hrs, -et_pay_ot_hrs, -et_pay_dt_hrs, -et_travel_hrs, et_travel_rate, eqi_no, et_eq_rate, -et_eq_hrs, et_eq_inst_qty, 
			et_desc, ''U'', et_gross_net_flag, et_units, et_account, et_ei_insure, et_cpp_pension, et_taxable, et_taxable_ben, et_calc_type, et_div, 
			acct_year, acct_period, journal_id, rc_code, rc_job, rc_bill_type, rc_cost_code, ee_unit1, ee_unit2, ee_unit3, ee_sub, et_line_total, et_company_alias, 
			emp_time_id, night_premium_flag, tac_id, area_id, entry_type, unit_inv_id, operator, send_cc, activity, rec_cc, rec_wbs, rec_alt1, rec_alt2, 
			rec_order_num, netw_num, activity_num, emp_name, rte_te_id, et_profit_center, PRI_ID, lv1ID, lv2ID, lv3ID, lv4ID, pri_type, cost_reference, 
			EXPENSE_TYPE, work_comments, SUB_CODE, null, billable, wo_operation_id, CostingType
		from '+@tr_db+'.[dbo].[emp_time_hist]
		where TimeClock_ID=@TimeClock_ID

		update '+@tr_db+'.[dbo].[emp_time_hist]
		set TimeClock_ID=null
		where TimeClock_ID=@TimeClock_ID

		select @Max_et_seq = isnull((select max(et_seq) from '+@tr_db+'.[dbo].[emp_time]),0)

		if not exists ( select * from '+@tr_db+'.[dbo].[system_ids] where id_name = ''NEXT_EMP_TIME_ID'' )
		begin
			insert into '+@tr_db+'.[dbo].[system_ids] (ID, ID_NAME)
			select 1, ''NEXT_EMP_TIME_ID''
		end

		select @Max_emp_time_id = id from '+@tr_db+'.[dbo].[system_ids] where id_name = ''NEXT_EMP_TIME_ID''

		update #emp_time_del 
		set et_seq = @Max_et_seq + id,
			emp_time_id = @Max_emp_time_id + id,
			et_line_total = round(et_pay_rate * et_pay_tot_hrs,2)

		update '+@tr_db+'.[dbo].[system_ids] 
			set id = (select max(emp_time_id) from #emp_time_del) + 1 
			where id_name = ''NEXT_EMP_TIME_ID''

		insert into '+@tr_db+'.[dbo].[emp_time] (emp_co, emp_no, et_date, et_seq, et_time, et_type, et_pay_period, wc_code, et_afe_number, et_cust_cost_code, et_time_ticket, 
			pri_num, pri_proj_id, phs_code, subp_code, prp_comp, prp_subcomp, eg_code, ec_code, tbh_num, tbd_row, tbd_col, et_pay_rate, et_pay_inst_qty, 
			et_pay_tot_hrs, et_pay_reg_hrs, et_pay_ot_hrs, et_pay_dt_hrs, et_travel_hrs, et_travel_rate, eqi_no, et_eq_rate, et_eq_hrs, et_eq_inst_qty, 
			et_desc, et_accrual_flag, et_gross_net_flag, et_units, et_account, et_ei_insure, et_cpp_pension, et_taxable, et_taxable_ben, et_calc_type, et_div, 
			acct_year, acct_period, journal_id, rc_code, rc_job, rc_bill_type, rc_cost_code, ee_unit1, ee_unit2, ee_unit3, ee_sub, et_line_total, et_company_alias, 
			emp_time_id, night_premium_flag, tac_id, area_id, entry_type, unit_inv_id, operator, send_cc, activity, rec_cc, rec_wbs, rec_alt1, rec_alt2, 
			rec_order_num, netw_num, activity_num, emp_name, rte_te_id, et_profit_center, PRI_ID, lv1ID, lv2ID, lv3ID, lv4ID, pri_type, cost_reference, 
			EXPENSE_TYPE, work_comments, SUB_CODE, TimeClock_ID, billable, wo_operation_id, CostingType)
		select emp_co, emp_no, et_date, et_seq, et_time, et_type, et_pay_period, wc_code, et_afe_number, et_cust_cost_code, et_time_ticket, 
			pri_num, pri_proj_id, phs_code, subp_code, prp_comp, prp_subcomp, eg_code, ec_code, tbh_num, tbd_row, tbd_col, et_pay_rate, et_pay_inst_qty, 
			et_pay_tot_hrs, et_pay_reg_hrs, et_pay_ot_hrs, et_pay_dt_hrs, et_travel_hrs, et_travel_rate, eqi_no, et_eq_rate, et_eq_hrs, et_eq_inst_qty, 
			et_desc, et_accrual_flag, et_gross_net_flag, et_units, et_account, et_ei_insure, et_cpp_pension, et_taxable, et_taxable_ben, et_calc_type, et_div, 
			acct_year, acct_period, journal_id, rc_code, rc_job, rc_bill_type, rc_cost_code, ee_unit1, ee_unit2, ee_unit3, ee_sub, et_line_total, et_company_alias, 
			emp_time_id, night_premium_flag, tac_id, area_id, entry_type, unit_inv_id, operator, send_cc, activity, rec_cc, rec_wbs, rec_alt1, rec_alt2, 
			rec_order_num, netw_num, activity_num, emp_name, rte_te_id, et_profit_center, PRI_ID, lv1ID, lv2ID, lv3ID, lv4ID, pri_type, cost_reference, 
			EXPENSE_TYPE, work_comments, SUB_CODE, TimeClock_ID, billable, wo_operation_id, CostingType
		from #emp_time_del
	end '
	
	exec sp_executesql @nSql, N'@MatchId int ', @MatchId

end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_SyncEnd_UpdateEquip]') and xtype = 'P ')  
 drop Procedure WS_SyncEnd_UpdateEquip
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

create proc WS_SyncEnd_UpdateEquip @MatchId int
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#emp_time'))
		drop table #emp_time

	create table #emp_time(
		id int not null identity(1,1) primary key,
		[emp_co] [int] NOT NULL,
		[emp_no] [int] NOT NULL,
		[et_date] [datetime] NOT NULL,
		[et_seq] [int] NULL,
		[et_time] [datetime] NULL,
		[wc_code] [varchar](5) NULL,
		[et_afe_number] [char](15) NULL,
		[et_cust_cost_code] [char](15) NULL,
		[et_time_ticket] [char](20) NULL,
		[prp_comp] [char](1) NULL,
		[eg_code] [varchar](5) NULL,--comes from earn_code
		[ec_code] [varchar](5) NULL,--comes from earn_code
		[tbh_num] [int] NULL,--comes from earn_code
		[tbd_row] [int] NULL,--emp_earn
		[tbd_col] [int] NULL,--emp_earn
		[et_pay_rate] [money] NULL,--emp_earn
		[et_pay_tot_hrs] [money] NULL,--1 for dollars + full amount for pay_rate
		[et_pay_reg_hrs] [money] NULL,
		[et_desc] [char](30) NULL,--ec_desc on earn_code?
		[et_accrual_flag] [char](1) NULL,--U
		[et_gross_net_flag] [char](1) NULL,--'N'
		[et_units] [char](5) NULL,--on earn code
		[et_account] [varchar](21) NULL,--comes from emp_earn
		[et_ei_insure] [char](1) NULL,--comes from emp_earn
		[et_cpp_pension] [char](1) NULL,--comes from emp_earn
		[et_taxable] [char](1) NULL,--comes from emp_earn
		[et_taxable_ben] [char](1) NULL,--comes from emp_earn
		[et_calc_type] [char](1) NULL,--comes from emp_earn
		[et_div] [varchar](6) NULL,--? from project?
		[acct_year] [int] NULL,
		[acct_period] [int] NULL,
		[journal_id] [int] NULL,--null
		[et_line_total] [float] NULL,
		[emp_time_id] [float] NULL,--unique seq
		[night_premium_flag] [char](1) NULL,--F
		[entry_type] [char](1) NOT NULL DEFAULT ('S'),--S for non-project, C for costing?
		[operator] [varchar](10) NULL,
		[emp_name] [varchar](60) NULL,
		[et_profit_center] [varchar](6) NULL,--project
		[PRI_ID] [int] NULL,
		[lv1ID] [int] NULL,
		[lv2ID] [int] NULL,
		[lv3ID] [int] NULL,
		[lv4ID] [int] NULL,
		[pri_type] [varchar](5) NULL,
		[cost_reference] [varchar](150) NULL,
		[EXPENSE_TYPE] [varchar](1) NULL,
		[work_comments] [varchar](100) NULL,
		[SUB_CODE] [varchar](10) NULL,--emp_earn
		[TimeClock_ID] [int] NULL,
		[billable] [varchar](1) NULL,
		ValueType varchar(20)
	)


	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#emp_time_equip'))
		drop table #emp_time_equip

	create table #emp_time_equip (
		id int not null identity(1,1), 
		[et_date] [datetime] NOT NULL,
		[et_seq] [int] NULL,
		[et_afe_number] [char](15) NULL,
		[et_cust_cost_code] [char](15) NULL,
		[et_time_ticket] [char](20) NULL,
		[pri_num] [int] NULL,
		[pri_proj_id] [int] NULL,
		[phs_code] [char](5) NULL,
		[subp_code] [char](5) NULL,
		[prp_comp] [char](1) NULL,
		[prp_subcomp] [char](5) NULL,
		[eqi_no] [varchar](10) NULL,
		[et_eq_rate] [money] NULL,
		[et_eq_hrs] [money] NULL,
		[et_eq_inst_qty] [numeric](18, 0) NULL,
		[et_accrual_flag] [char](1) NULL,
		[acct_year] [int] NULL,
		[acct_period] [int] NULL,
		[journal_id] [int] NULL,
		[et_div] [varchar](6) NULL,
		[entry_type] [char](1) NULL,
		[operator] [varchar](10) NULL,
		[PRI_ID] [int] NULL,
		[lv1ID] [int] NULL,
		[lv2ID] [int] NULL,
		[lv3ID] [int] NULL,
		[lv4ID] [int] NULL,
		[pri_type] [varchar](5) NULL,
		[cost_reference] [varchar](150) NULL,
		[EXPENSE_TYPE] [varchar](1) NULL,
		[TimeClock_ID] [int],
		BillCycle char(1)
	)

	declare @nSql nvarchar(max), @tr_db varchar(50), @CompanyId int, @Valid bit, @HeaderMatchId int
		
	select @CompanyId=CompanyId, @HeaderMatchId=HeaderMatchId from WS_SyncLabourTimeEntry where MatchId=@MatchId
	select @tr_db=treasurydbname from companies where autoid = @CompanyId
		

	select @nSql = '
	declare @username varchar(50), @WS_PCDL_LogType_Equipment int 

	select @WS_PCDL_LogType_Equipment = 9

	select @username=m.name
	from WS_SyncEquipTimeEntry w
	join '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] lh on lh.MatchId=w.HeaderMatchId
	join '+@tr_db+'.[dbo].[mluser] m on m.contactid=lh.LogCreatedBy
	where w.MatchId=@MatchId

	insert into #emp_time_equip (et_date, et_seq, et_afe_number, et_cust_cost_code, et_time_ticket, 
		prp_comp, prp_subcomp, eqi_no, et_eq_rate, et_eq_hrs, et_accrual_flag, et_div,
		entry_type, operator, PRI_ID, lv1ID, lv2ID, lv3ID, lv4ID, pri_type, cost_reference, TimeClock_ID, BillCycle)
	select lh.LogDate, null /*et_seq*/, tc.afe, tc.cccode, lh.LemNum, 
		''E'', '''', w.EqpNum, '+@tr_db+'.dbo.GetEquipRate(''C'', ee.eqi_num, p.pri_id, w.BillCycle), w.Quantity, ''U'', p.pri_division,
		''C'', @username, p.pri_id, w.level1id, w.level2id, w.level3id, w.level4id, p.pri_type, '+@tr_db+'.dbo.fn_ProjWOReference(p.pri_id, w.level1id, w.level2id, w.level3id, w.level4id, ''E'', '''', null), tc.ID, w.BillCycle
	from WS_SyncEquipTimeEntry w 
	join '+@tr_db+'.[dbo].[WS_EMP_TimeClock] tc on tc.MatchId=isnull(w.PrevMatchId,w.MatchId) and tc.LEM=''E''
	join '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] lh on lh.MatchId=w.HeaderMatchId
	left outer join '+@tr_db+'.[dbo].[EST_Header] e on e.Id=w.estid and e.IsChangeOrder=1
	join '+@tr_db+'.[dbo].[proj_header] p on p.pri_id=isnull(e.CO_Ref_Pri_ID, lh.pri_id)
	join '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] le on le.WS_PCDL_LogHeaderID=lh.id and le.DL_LogType_ID=@WS_PCDL_LogType_Equipment	and le.eqi_num=w.eqpNum		
	join '+@tr_db+'.[dbo].[equip_id] ee on ee.eqi_num=w.EqpNum
	where w.MatchId=@MatchId
	
	-- Employee Owned Equipment
	insert #emp_time( emp_co, emp_no, et_date, et_seq, et_time, wc_code, et_afe_number, et_cust_cost_code, et_time_ticket, prp_comp,
		eg_code, ec_code, tbh_num, tbd_row, tbd_col, 
		et_pay_rate, et_pay_tot_hrs, et_pay_reg_hrs, 
		et_desc, et_accrual_flag, et_gross_net_flag, et_units, et_account, et_ei_insure, et_cpp_pension, et_taxable, et_taxable_ben, et_calc_type,
		et_div, acct_year, acct_period, journal_id, et_line_total, emp_time_id, night_premium_flag, entry_type, 
		operator, emp_name, et_profit_center, PRI_ID, lv1ID, lv2ID, lv3ID, lv4ID, pri_type, 
		cost_reference, 
		work_comments, SUB_CODE, TimeClock_ID, billable)
	select 1, emp.emp_no, lh.LogDate, null /*et_seq*/, lh.LogDate, emp.wc_code, tc.afe, tc.cccode, lh.LemNum, case ISNULL(ec.comp_code,'''') when '''' then ''L'' else ec.comp_code end, 
		ec.eg_code, ec.ec_code, ec.tbh_num, ee.tbd_row, ee.tbd_col, 	
		ee.ee_rate, round(isnull(u.hrly_equiv,1) * w.Quantity, 2), round(isnull(u.hrly_equiv,1) * w.Quantity, 2),
		cast(ec.ec_desc as varchar(30)), ''U'', ''N'', ec.ec_units, ee.ee_account, ee.ee_ei_insure, ee.ee_cpp_pension, ee.ee_taxable, ee.ee_taxable_ben, ee.ee_calc_type,
		p.pri_division, null, null, null, 0 /*recalc below*/, null /*uniq seq*/, ''F'', ''C'',
		@username, emp.emp_first_name + '' '' + emp.emp_last_name, p.pri_profit_center, null, null, null, null, null, null, null, 
		null, ee.SUB_CODE, tc.ID, 
		w.Billable
	from WS_SyncEquipTimeEntry w 
	join '+@tr_db+'.[dbo].[WS_EMP_TimeClock] tc on tc.MatchId=isnull(w.PrevMatchId,w.MatchId) and tc.LEM=''E''
	join '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] lh on lh.MatchId=w.HeaderMatchId
	left outer join '+@tr_db+'.[dbo].[EST_Header] e on e.Id=w.estid and e.IsChangeOrder=1
	join '+@tr_db+'.[dbo].[proj_header] p on p.pri_id=isnull(e.CO_Ref_Pri_ID, lh.pri_id)
	join '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] le on le.WS_PCDL_LogHeaderID=lh.id and le.DL_LogType_ID=@WS_PCDL_LogType_Equipment	and le.eqi_num=w.eqpNum			
	join '+@tr_db+'.[dbo].[equip_id] eq on eq.eqi_num=w.EqpNum
	join '+@tr_db+'.[dbo].[unit_time_measurement] u on u.TimeCode=w.BillCycle
	join '+@tr_db+'.[dbo].[equip_assign] ea on ea.eqi_num=eq.eqi_num and cast(lh.LogDate as date) between cast(ea.ea_date as date) and cast(isnull(ea.ea_release_date, dateadd(yy, 1, getdate())) as date)
	join '+@tr_db+'.[dbo].[employee] emp on emp.emp_no=ea.emp_no
	join '+@tr_db+'.[dbo].[earn_code] ec on ec.ec_code = ea.ec_code and ec.eg_code = ea.eg_code
	left outer join '+@tr_db+'.[dbo].[emp_earn] ee on ee.ec_code = ea.EC_CODE and ee.eg_code = ea.EG_CODE and ee.emp_no = emp.emp_no
	where w.MatchId=@MatchId and eq.own_type=''E'' '
	exec sp_executesql @nSql, N'@MatchId int ', @MatchId

	if exists (select * from #emp_time where et_account is null)
	begin
		select @Valid = 0
		-- Handle with quarantines *************************
		declare @quarantineMessage varchar(max)

		select @quarantineMessage = STUFF((select distinct ' Emp:' + cast([emp_no] as varchar(50)) + ' (' + [eg_code] + ', ' + [ec_code] + ')'
		from #emp_time
		where et_account is null
		FOR XML PATH('')), 1, 1, '') 
		select @quarantineMessage = Replace(@quarantineMessage, ' Emp:', char(13) + char(10) + ' Emp:')
		select @quarantineMessage = '***Error' + char(13) + char(10) + 
			'There are missing employee earning codes / accounts for: ' + char(13) + char(10) + ' ' + @quarantineMessage
		print @quarantineMessage
	end	
	else
	begin 
		select @Valid = 1

		-- Cleanup current emp_time/emp_time_hist (employee owned equipment) & emp_time_equip/emp_time_equip_hist
		exec WS_SyncEnd_DeleteEquip @MatchId, @CompanyId
		
		-- Update current LEM Equipment 
		select @nSql = 'declare @pri_id int, @WS_PCDL_LogType_Equipment int, @LogHeaderId int, @EqpNum varchar(10), @DL_LogEntry_ID int
		
		select @WS_PCDL_LogType_Equipment = 9
		select @LogHeaderId=id, @pri_id=pri_id from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId	

		select @EqpNum=w.EqpNum 
		from WS_SyncEquipTimeEntry w 
		where w.MatchId=@MatchId

		if not exists( select * from '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] where DL_LogType_ID=@WS_PCDL_LogType_Equipment 
			and WS_PCDL_LogHeaderID=@LogHeaderId and eqi_num=@EqpNum )
		begin 
			insert into '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] (DL_LogType_ID, pri_id, contact_id, log_date, last_contact_id, last_log_date, WS_PCDL_LogHeaderID, 
				eqi_num)
			select @WS_PCDL_LogType_Equipment, Pri_ID, LogCreatedBy, LogDate, LogCreatedBy, LogDate, @LogHeaderId, @EqpNum 
			from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader]
			where id=@LogHeaderId
				
			select @DL_LogEntry_ID=scope_identity()
		end

		update t
		set eqi_num=w.EqpNum, released_tf=''T'', lv1_id=w.Level1Id, lv2_id=w.Level2Id, lv3_id=w.Level3Id, lv4_id=w.Level4Id, 
			CostingReference='+@tr_db+'.[dbo].fn_ProjWOReference(isnull(e.pri_id, @pri_id), w.Level1Id, w.Level2Id, w.Level3Id, w.Level4Id, ''E'', '''', null), 
			Quantity=w.Quantity, BillCycle=w.BillCycle, dollars_total=w.BillAmount, Billable=w.Billable, [TimeStamp]=getdate(), EstId=w.EstId,
			t.WS_PCDL_LH_ID=isnull(@DL_LogEntry_ID, t.WS_PCDL_LH_ID), t.CO_Pri_Id=e.pri_id 
		from '+@tr_db+'.[dbo].[WS_EMP_TimeClock] t
		join WS_SyncEquipTimeEntry w on isnull(w.PrevMatchId, w.MatchId)=t.MatchId and t.LEM=''E''
		left outer join '+@tr_db+'.[dbo].[EST_Header] e on e.IsChangeOrder=1 and e.Id=w.EstId
		where w.MatchId=@MatchId '
		exec sp_executesql @nSql, N'@MatchId int, @HeaderMatchId int ', @MatchId, @HeaderMatchId	

		-- Add new emp_time & emp_time_equip
		select @nSql = '
		declare @Max_et_seq int, @Max_emp_time_id int, @Next_Equip_et_seq int
		select @Max_et_seq = isnull((select max(et_seq) from '+@tr_db+'.[dbo].[emp_time]),0)

		if exists( select * from #emp_time)
		begin
			if not exists ( select * from '+@tr_db+'.[dbo].[system_ids] where id_name = ''NEXT_EMP_TIME_ID'' )
			begin
				insert into '+@tr_db+'.[dbo].[system_ids] (ID, ID_NAME)
				select 1, ''NEXT_EMP_TIME_ID''
			end

			select @Max_emp_time_id = id from '+@tr_db+'.[dbo].[system_ids] where id_name = ''NEXT_EMP_TIME_ID''

			update #emp_time 
			set et_seq = @Max_et_seq + id,
				emp_time_id = @Max_emp_time_id + id,
				et_line_total = round(et_pay_rate * et_pay_tot_hrs, 2)

			update '+@tr_db+'.[dbo].[system_ids] 
			set id = (select max(emp_time_id) from #emp_time) + 1 
			where id_name = ''NEXT_EMP_TIME_ID''
	
			insert '+@tr_db+'.[dbo].[emp_time] ([emp_co], [emp_no], [et_date], [et_seq], [et_time], [wc_code], [et_afe_number], [et_cust_cost_code], [et_time_ticket], [prp_comp],
				[eg_code], [ec_code], [tbh_num], [tbd_row], [tbd_col], [et_pay_rate], [et_pay_tot_hrs], [et_pay_reg_hrs], [et_desc], [et_accrual_flag],
				[et_gross_net_flag], [et_units], [et_account], [et_ei_insure], [et_cpp_pension], [et_taxable], [et_taxable_ben], [et_calc_type], 
				[et_div], [acct_year], [acct_period], [journal_id], [et_line_total], [emp_time_id], [night_premium_flag], [entry_type], [operator],
				[emp_name], [et_profit_center], [PRI_ID], [lv1ID], [lv2ID], [lv3ID], [lv4ID], [pri_type], [cost_reference], [EXPENSE_TYPE], [work_comments],
				[SUB_CODE], [TimeClock_ID], [billable], [CostingType])
			select [emp_co], [emp_no], [et_date], [et_seq], [et_time], [wc_code], [et_afe_number], [et_cust_cost_code], [et_time_ticket], [prp_comp],
				[eg_code], [ec_code], [tbh_num], [tbd_row], [tbd_col], [et_pay_rate], [et_pay_tot_hrs], [et_pay_reg_hrs], [et_desc], [et_accrual_flag],
				[et_gross_net_flag], [et_units], [et_account], [et_ei_insure], [et_cpp_pension], [et_taxable], [et_taxable_ben], [et_calc_type], 
				[et_div], [acct_year], [acct_period], [journal_id], [et_line_total], [emp_time_id], [night_premium_flag], [entry_type], [operator],
				[emp_name], [et_profit_center], [PRI_ID], [lv1ID], [lv2ID], [lv3ID], [lv4ID], [pri_type], [cost_reference], [EXPENSE_TYPE], [work_comments],
				[SUB_CODE], [TimeClock_ID], [billable], null
			from #emp_time 
		end 
		
		if exists( select * from #emp_time_equip )
		begin
			-- create emp_time_equip records
			if not exists ( select * from '+@tr_db+'.[dbo].[system_ids] where id_name = ''NEXT_EMP_TIME_EQUIP_ID'' )
			begin
				insert into '+@tr_db+'.[dbo].[system_ids] (ID, ID_NAME)
				select 1, ''NEXT_EMP_TIME_EQUIP_ID''
			end
				
			select @Next_Equip_et_seq = id from '+@tr_db+'.[dbo].[system_ids] where id_name = ''NEXT_EMP_TIME_EQUIP_ID''

			update #emp_time_equip set et_seq = @Next_Equip_et_seq + id

			update '+@tr_db+'.[dbo].[system_ids] 
			set id = (select max(et_seq) from #emp_time_equip) + 1 
			where id_name = ''NEXT_EMP_TIME_EQUIP_ID''

			insert into '+@tr_db+'.[dbo].[emp_time_equip] (et_date, et_seq, et_afe_number, et_cust_cost_code, et_time_ticket, 
				prp_comp, prp_subcomp, eqi_no, et_eq_rate, et_eq_hrs, et_accrual_flag, et_div, 
				entry_type, operator, PRI_ID, lv1ID, lv2ID, lv3ID, lv4ID, pri_type, cost_reference, TimeClock_ID, BillCycle)
			select et_date, et_seq, et_afe_number, et_cust_cost_code, et_time_ticket, 
				prp_comp, prp_subcomp, eqi_no, et_eq_rate, et_eq_hrs, et_accrual_flag, et_div,
				entry_type, operator, PRI_ID, lv1ID, lv2ID, lv3ID, lv4ID, pri_type, cost_reference, TimeClock_ID, BillCycle 
			from #emp_time_equip
		end '
		exec sp_executesql @nSql 
	end
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_SyncEnd_UpdateLabor]') and xtype = 'P ')  
 drop Procedure WS_SyncEnd_UpdateLabor
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

create proc WS_SyncEnd_UpdateLabor @MatchId int
as
begin
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Component'))
		drop table #Component

	create table #Component (
		code varchar(1),
		description varchar(15)
	)

	insert into #Component (code, description)
	select 'L', 'Labor'
	union
	select 'E', 'Equipment'
	union
	select 'M', 'Material'
	union
	select 'O', 'Other'
	union
	select 'S', 'Subcontract'


	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#WS_EMP_TimeClockHours'))
		drop table #WS_EMP_TimeClockHours
	create table #WS_EMP_TimeClockHours (
		id int,
		MatchId int,
		time_code_id int,
		HoursWorked money,
		BillAmt money,
		seq int,
		ValueType varchar(20),
		IsHours bit
	)


	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Labor'))
		drop table #Labor

	create table #Labor (
		id int primary key identity(1,1),
		LEM_ID int,
		MatchId int,
		pri_id int,
		lv1_id int,
		lv2_id int, 
		lv3_id int,
		lv4_id int,
		TotalHrs decimal(19,4),
		BillAmount decimal(19,4),
		Billable bit,
		WTC1_Hrs decimal(19,4),
		WTC1_Rate decimal(19,4),
		WTC2_Hrs decimal(19,4),
		WTC2_Rate decimal(19,4),
		WTC3_Hrs decimal(19,4),
		WTC3_Rate decimal(19,4),
		WTC4_Hrs decimal(19,4),
		WTC4_Rate decimal(19,4),
		WTC5_Hrs decimal(19,4),
		WTC5_Rate decimal(19,4),
		WTC6_Hrs decimal(19,4),
		WTC6_Rate decimal(19,4),
		WTC7_Hrs decimal(19,4),
		WTC7_Rate decimal(19,4),
		WTC8_Hrs decimal(19,4),
		WTC8_Rate decimal(19,4),
		WTC9_Hrs decimal(19,4),
		WTC9_Rate decimal(19,4),
		WTC10_Hrs decimal(19,4),
		WTC10_Rate decimal(19,4),
		WTC11_Hrs decimal(19,4),
		WTC11_Rate decimal(19,4),
		WTC12_Hrs decimal(19,4),
		WTC12_Rate decimal(19,4),
		WTC13_Hrs decimal(19,4),
		WTC13_Rate decimal(19,4),
		WTC14_Hrs decimal(19,4),
		WTC14_Rate decimal(19,4),
		WTC15_Hrs decimal(19,4),
		WTC15_Rate decimal(19,4),
		WTC16_Hrs decimal(19,4),
		WTC16_Rate decimal(19,4),
		WTC17_Hrs decimal(19,4),
		WTC17_Rate decimal(19,4),
		WTC18_Hrs decimal(19,4),
		WTC18_Rate decimal(19,4),
		WTC19_Hrs decimal(19,4),
		WTC19_Rate decimal(19,4),
		WTC20_Hrs decimal(19,4),
		WTC20_Rate decimal(19,4),
		emp_no int,
		Work_Class_ID int
	)

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#emp_time'))
		drop table #emp_time

	create table #emp_time(
		id int not null identity(1,1) primary key,
		[emp_co] [int] NOT NULL,
		[emp_no] [int] NOT NULL,
		[et_date] [datetime] NOT NULL,
		[et_seq] [int] NULL,
		[et_time] [datetime] NULL,
		[wc_code] [varchar](5) NULL,
		[et_afe_number] [char](15) NULL,
		[et_cust_cost_code] [char](15) NULL,
		[et_time_ticket] [char](20) NULL,
		[prp_comp] [char](1) NULL,
		[eg_code] [varchar](5) NULL,--comes from earn_code
		[ec_code] [varchar](5) NULL,--comes from earn_code
		[tbh_num] [int] NULL,--comes from earn_code
		[tbd_row] [int] NULL,--emp_earn
		[tbd_col] [int] NULL,--emp_earn
		[et_pay_rate] [money] NULL,--emp_earn
		[et_pay_tot_hrs] [money] NULL,--1 for dollars + full amount for pay_rate
		[et_pay_reg_hrs] [money] NULL,
		[et_desc] [char](30) NULL,--ec_desc on earn_code?
		[et_accrual_flag] [char](1) NULL,--U
		[et_gross_net_flag] [char](1) NULL,--'N'
		[et_units] [char](5) NULL,--on earn code
		[et_account] [varchar](21) NULL,--comes from emp_earn
		[et_ei_insure] [char](1) NULL,--comes from emp_earn
		[et_cpp_pension] [char](1) NULL,--comes from emp_earn
		[et_taxable] [char](1) NULL,--comes from emp_earn
		[et_taxable_ben] [char](1) NULL,--comes from emp_earn
		[et_calc_type] [char](1) NULL,--comes from emp_earn
		[et_div] [varchar](6) NULL,--? from project?
		[acct_year] [int] NULL,
		[acct_period] [int] NULL,
		[journal_id] [int] NULL,--null
		[et_line_total] [float] NULL,
		[emp_time_id] [float] NULL,--unique seq
		[night_premium_flag] [char](1) NULL,--F
		[entry_type] [char](1) NOT NULL DEFAULT ('S'),--S for non-project, C for costing?
		[operator] [varchar](10) NULL,
		[emp_name] [varchar](60) NULL,
		[et_profit_center] [varchar](6) NULL,--project
		[PRI_ID] [int] NULL,
		[lv1ID] [int] NULL,
		[lv2ID] [int] NULL,
		[lv3ID] [int] NULL,
		[lv4ID] [int] NULL,
		[pri_type] [varchar](5) NULL,
		[cost_reference] [varchar](150) NULL,
		[EXPENSE_TYPE] [varchar](1) NULL,
		[work_comments] [varchar](100) NULL,
		[SUB_CODE] [varchar](10) NULL,--emp_earn
		[TimeClock_ID] [int] NULL,
		[billable] [varchar](1) NULL,
		ValueType varchar(20)
	)


	declare @nSql nvarchar(max), @tr_db varchar(50), @CompanyId int, @Seq int, @done bit, @username varchar(50), @Valid bit, @HeaderMatchId int
	
	select @CompanyId=CompanyId, @HeaderMatchId=HeaderMatchId from WS_SyncLabourTimeEntry where MatchId=@MatchId
	select @tr_db=treasurydbname from companies where autoid = @CompanyId

	select @nSql = '
	declare @WS_PCDL_LogType_TimeEntry int

	select @WS_PCDL_LogType_TimeEntry = 8

	select @username=m.name
	from WS_SyncLabourTimeEntry w
	join '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] lh on lh.MatchId=w.HeaderMatchId
	join '+@tr_db+'.[dbo].[mluser] m on m.contactid=lh.LogCreatedBy
	where w.MatchId=@MatchId

	insert into #Labor(LEM_ID, MatchId, pri_id, lv1_id, lv2_id, lv3_id, lv4_id, TotalHrs, 
		BillAmount, Billable, emp_no, Work_Class_ID,
		WTC1_Hrs, WTC2_Hrs, WTC3_Hrs, WTC4_Hrs, WTC5_Hrs, WTC6_Hrs, WTC7_Hrs, WTC8_Hrs, WTC9_Hrs, WTC10_Hrs, WTC11_Hrs, WTC12_Hrs, WTC13_Hrs, WTC14_Hrs,
		WTC15_Hrs, WTC16_Hrs, WTC17_Hrs, WTC18_Hrs, WTC19_Hrs, WTC20_Hrs,
		WTC1_Rate, WTC2_Rate, WTC3_Rate, WTC4_Rate, WTC5_Rate, WTC6_Rate, WTC7_Rate, WTC8_Rate, WTC9_Rate, WTC10_Rate, WTC11_Rate, WTC12_Rate, WTC13_Rate, WTC14_Rate,
		WTC15_Rate, WTC16_Rate, WTC17_Rate, WTC18_Rate, WTC19_Rate, WTC20_Rate) 		
	select lh.id, isnull(w.PrevMatchId,w.MatchId), p.pri_id, w.Level1Id, w.Level2Id, w.Level3Id, w.Level4Id, isnull(w.TotalHours,0), 
		isnull(w.BillAmount,0), w.Billable, ee.Emp_NO, wc.ID,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	from WS_SyncLabourTimeEntry w 
	join '+@tr_db+'.[dbo].[WS_EMP_TimeClock] tc on tc.MatchId=isnull(w.PrevMatchId,w.MatchId) and tc.LEM=''L''
	join '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] lh on lh.MatchId=w.HeaderMatchId
	left outer join '+@tr_db+'.[dbo].[EST_Header] e on e.Id=w.estid and e.IsChangeOrder=1
	join '+@tr_db+'.[dbo].[proj_header] p on p.pri_id=isnull(e.CO_Ref_Pri_ID, lh.pri_id)
	join '+@tr_db+'.[dbo].[work_class] wc on wc.wc_code=w.wc_code
	join '+@tr_db+'.[dbo].[employee] ee on ee.emp_no=w.EmpNum
	where w.MatchId=@MatchId
	
	
	insert into #WS_EMP_TimeClockHours (id, MatchId, time_code_id, HoursWorked, BillAmt, seq, ValueType, IsHours)
	select td.MatchId, td.EntryId, td.TimeCodeId, td.WorkHours, td.BillAmount, c.Seq, c.ValueType, case when isnull(c.ValueType,'''') = ''Hours'' then 1 else 0 end
	from WS_SyncLabourTimeEntry te 
	join WS_SyncLabourTimeDetail td on td.EntryId=isnull(te.PrevMatchId,te.MatchId) and td.SyncId=te.SyncId 
	join '+@tr_db+'.[dbo].[WS_EMP_Time_Code] c on c.id = td.TimeCodeId
	where te.MatchId=@MatchId
	'
	exec sp_executesql @nSql, N'@MatchId int, @username varchar(50) out ', @MatchId, @username out

	select @done = 0, @seq = 1
	while( @done = 0 )
	begin
		select @nSql = '
		-- Hours
		update ls 
		set
			ls.WTC'+cast(@seq as varchar(2))+'_Hrs = isnull((select sum(HoursWorked) from #WS_EMP_TimeClockHours tch where tch.MatchId = ls.MatchId and seq = @seq and IsHours=1),0)		
		from #Labor ls
		join '+@tr_db+'.[dbo].[WS_EMP_Time_Code] w on w.Seq=@seq and w.ValueType=''Hours''

		update ls 
		set
			ls.WTC'+cast(@seq as varchar(2))+'_Rate = isnull((select sum(BillAmt) from #WS_EMP_TimeClockHours tch where tch.MatchId = ls.MatchId and seq = @seq and IsHours=1),0)		
		from #Labor ls
		join '+@tr_db+'.[dbo].[WS_EMP_Time_Code] w on w.Seq=@seq and w.ValueType=''Hours''

		-- Dollars
		update ls 
		set
			ls.WTC'+cast(@seq as varchar(2))+'_Rate = isnull((select sum(HoursWorked) from #WS_EMP_TimeClockHours tch where tch.MatchId = ls.MatchId and seq = @seq and IsHours=0),0),
			ls.WTC'+cast(@seq as varchar(2))+'_Hrs = case when isnull((select sum(HoursWorked) from #WS_EMP_TimeClockHours tch where tch.MatchId = ls.MatchId and seq = @seq and IsHours=0),0) > 0 then 1 else 0 end
		from #Labor ls
		join '+@tr_db+'.[dbo].[WS_EMP_Time_Code] w on w.Seq=@seq and w.ValueType=''Dollars'' '
		exec sp_executesql @nSql, N'@seq int ', @seq
		
		if( @seq = 20 )
			select @done = 1
		select @seq = @seq + 1
	end

	select @done = 0, @Seq = 1 
	while( @done = 0 )
	begin
		select @nSql = '
		insert #emp_time( emp_co, emp_no, et_date, et_seq, et_time, wc_code, et_afe_number, et_cust_cost_code, et_time_ticket, prp_comp,
			eg_code, ec_code, tbh_num, tbd_row, tbd_col, 
			et_pay_rate, et_pay_tot_hrs, et_pay_reg_hrs, 
			et_desc, et_accrual_flag, et_gross_net_flag, et_units, et_account, et_ei_insure, et_cpp_pension, et_taxable, et_taxable_ben, et_calc_type,
			et_div, acct_year, acct_period, journal_id, et_line_total, emp_time_id, night_premium_flag, entry_type, 
			operator, emp_name, et_profit_center, PRI_ID, lv1ID, lv2ID, lv3ID, lv4ID, pri_type, 
			cost_reference, 
			work_comments, SUB_CODE, TimeClock_ID, billable, ValueType)
		select 1, l.emp_no, lh.LogDate, null /*et_seq*/, lh.LogDate, eee.wc_code, tc.afe, tc.cccode, lh.LemNum, case ISNULL(ec.comp_code,'''') when '''' then ''L'' else ec.comp_code end, 
			ec.eg_code, ec.ec_code, ec.tbh_num, ee.tbd_row, ee.tbd_col, 	
			ee.ee_rate,			
			case c.ValueType when ''Dollars'' then 1 else 
				case @seq 
					when 1 then l.wtc1_hrs when 2 then l.wtc2_hrs when 3 then l.wtc3_hrs when 4 then l.wtc4_hrs when 5 then l.wtc5_hrs when 6 then l.wtc6_hrs when 7 then l.wtc7_hrs when 8 then l.wtc8_hrs when 9 then l.wtc9_hrs when 10 then l.wtc10_hrs 
					when 11 then l.wtc11_hrs when 12 then l.wtc12_hrs when 13 then l.wtc13_hrs when 14 then l.wtc14_hrs when 15 then l.wtc15_hrs when 16 then l.wtc16_hrs when 17 then l.wtc17_hrs when 18 then l.wtc18_hrs when 19 then l.wtc19_hrs when 20 then l.wtc20_hrs
				end
			end, 		
			case c.ValueType when ''Dollars'' then 1 else
				case @seq 
					when 1 then l.wtc1_hrs when 2 then l.wtc2_hrs when 3 then l.wtc3_hrs when 4 then l.wtc4_hrs when 5 then l.wtc5_hrs when 6 then l.wtc6_hrs when 7 then l.wtc7_hrs when 8 then l.wtc8_hrs when 9 then l.wtc9_hrs when 10 then l.wtc10_hrs 
					when 11 then l.wtc11_hrs when 12 then l.wtc12_hrs when 13 then l.wtc13_hrs when 14 then l.wtc14_hrs when 15 then l.wtc15_hrs when 16 then l.wtc16_hrs when 17 then l.wtc17_hrs when 18 then l.wtc18_hrs when 19 then l.wtc19_hrs when 20 then l.wtc20_hrs
				end
			end,	
			cast(ec.ec_desc as varchar(30)), ''U'', ''N'', ec.ec_units, ee.ee_account, ee.ee_ei_insure, ee.ee_cpp_pension, ee.ee_taxable, ee.ee_taxable_ben, ee.ee_calc_type,
			ph.pri_division, null, null, null, 0 /*recalc below*/, null /*uniq seq*/, ''F'', ''C'',
			@username, eee.emp_first_name + '' '' + eee.emp_last_name, ph.pri_profit_center, ph.pri_id, l.lv1_id, l.lv2_id, l.lv3_id, l.lv4_id, ph.pri_type, 
			'+@tr_db+'.[dbo].fn_ProjWOReference(ph.pri_id, l.lv1_id, l.lv2_id, l.lv3_id, l.lv4_id, case ISNULL(ec.comp_code,'''') when '''' then ''L'' else ec.comp_code end, '''', null), 
			null, ee.SUB_CODE, tc.ID, 
			w.Billable, c.ValueType
		from #Labor l 
		join WS_SyncLabourTimeEntry w on w.MatchId=l.MatchId 
		join '+@tr_db+'.[dbo].[WS_EMP_TimeClock] tc on tc.MatchId=isnull(w.PrevMatchId,w.MatchId) and tc.LEM=''L''
		join '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] lh on lh.MatchId=w.HeaderMatchId
		join '+@tr_db+'.[dbo].[employee] eee on eee.emp_no=l.emp_no
		join '+@tr_db+'.[dbo].[PROJ_HEADER] ph on ph.pri_id = l.pri_id
		join '+@tr_db+'.[dbo].[WS_EMP_Time_Code] c on c.Seq = @Seq
		left outer join '+@tr_db+'.[dbo].[earn_code] ec on ec.ec_code = c.EC_CODE and ec.eg_code = c.EG_CODE
		left outer join '+@tr_db+'.[dbo].[emp_earn] ee on ee.ec_code = c.EC_CODE and ee.eg_code = c.EG_CODE and ee.emp_no = l.emp_no
		where isnull(case @seq 
			when 1 then l.wtc1_hrs 
			when 2 then l.wtc2_hrs
			when 3 then l.wtc3_hrs
			when 4 then l.wtc4_hrs 
			when 5 then l.wtc5_hrs
			when 6 then l.wtc6_hrs
			when 7 then l.wtc7_hrs
			when 8 then l.wtc8_hrs
			when 9 then l.wtc9_hrs
			when 10 then l.wtc10_hrs
			when 11 then l.wtc11_hrs
			when 12 then l.wtc12_hrs
			when 13 then l.wtc13_hrs
			when 14 then l.wtc14_hrs
			when 15 then l.wtc15_hrs
			when 16 then l.wtc16_hrs
			when 17 then l.wtc17_hrs
			when 18 then l.wtc18_hrs
			when 19 then l.wtc19_hrs
			when 20 then l.wtc20_hrs
			end,0) > 0 '
		exec sp_executesql @nSql, N'@seq int, @username varchar(10) ', @seq, @username
		
		if( @seq = 20 )
			select @done = 1
		select @seq = @seq + 1
	end


	if exists (select * from #emp_time where et_account is null)
	begin
		select @Valid = 0
		-- Handle with quarantines *************************
		declare @quarantineMessage varchar(max)

		select @quarantineMessage = STUFF((select distinct ' Emp:' + cast([emp_no] as varchar(50)) + ' (' + [eg_code] + ', ' + [ec_code] + ')'
		from #emp_time
		where et_account is null
		FOR XML PATH('')), 1, 1, '') 
		select @quarantineMessage = Replace(@quarantineMessage, ' Emp:', char(13) + char(10) + ' Emp:')
		select @quarantineMessage = '***Error' + char(13) + char(10) + 
			'There are missing employee earning codes / accounts for: ' + char(13) + char(10) + ' ' + @quarantineMessage
		print @quarantineMessage
	end
	else
	begin 
		select @Valid = 1

		-- Cleanup current emp_time & emp_time_hist
		exec WS_SyncEnd_DeleteLabor @MatchId, @CompanyId	

		-- Update current LEM Labor 
		select @nSql = 'declare @pri_id int, @WS_PCDL_LogType_TimeEntry int, @WorkClassId int, @EmpNum int, @LogHeaderId int, @DL_LogEntry_ID int

		select @WS_PCDL_LogType_TimeEntry = 8 
		select @LogHeaderId=id, @pri_id=pri_id from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader] where MatchId=@HeaderMatchId
			
		select @WorkClassId=wc.ID, @EmpNum=w.EmpNum 
		from WS_SyncLabourTimeEntry w 
		join '+@tr_db+'.[dbo].[work_class] wc on wc.wc_code=w.wc_code  
		where w.MatchId=@MatchId
	
		if not exists( select * from '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] where DL_LogType_ID=@WS_PCDL_LogType_TimeEntry 
			and WS_PCDL_LogHeaderID=@LogHeaderId and Emp_NO=@EmpNum and Work_Class_ID=@WorkClassId)
		begin 
			insert into '+@tr_db+'.[dbo].[WS_PCDL_LogEntry] (DL_LogType_ID, pri_id, contact_id, log_date, last_contact_id, last_log_date, WS_PCDL_LogHeaderID, 
				Emp_NO, Work_Class_ID)
			select @WS_PCDL_LogType_TimeEntry, Pri_ID, LogCreatedBy, LogDate, LogCreatedBy, LogDate, @LogHeaderId, @EmpNum, @WorkClassId  
			from '+@tr_db+'.[dbo].[WS_PCDL_LogHeader]
			where id=@LogHeaderId
				
			select @DL_LogEntry_ID=scope_identity()
		end

		update t 
		set t.emp_no=w.EmpNum, t.lv1_id=w.Level1Id, t.lv2_id=w.Level2Id, t.lv3_id=w.Level3Id, t.lv4_id=w.Level4Id, t.Work_Class_ID=wc.ID, 
			t.CostingReference='+@tr_db+'.[dbo].fn_ProjWOReference(isnull(e.pri_id, @pri_id), w.Level1Id, w.Level2Id, w.Level3Id, w.Level4Id, ''L'', '''', null), 
			t.hrs_total=w.TotalHours, t.dollars_total=w.BillAmount, t.Billable=w.Billable, t.[TimeStamp]=getdate(), t.EstId=w.EstId,
			t.Manual=w.Manual, t.IncludedHours=w.IncludedHours, t.WS_PCDL_LH_ID=isnull(@DL_LogEntry_ID, t.WS_PCDL_LH_ID), t.CO_Pri_Id=e.pri_id 
		from '+@tr_db+'.[dbo].[WS_EMP_TimeClock] t
		join WS_SyncLabourTimeEntry w on isnull(w.PrevMatchId, w.MatchId)=t.MatchId and t.LEM=''L''		
		left outer join '+@tr_db+'.[dbo].[EST_Header] e on e.IsChangeOrder=1 and e.Id=w.EstId
		left outer join '+@tr_db+'.[dbo].[work_class] wc on wc.wc_code=w.wc_code
		where w.MatchId=@MatchId '
		exec sp_executesql @nSql, N'@MatchId int, @HeaderMatchId int ', @MatchId, @HeaderMatchId

		-- Update current LEM Labor Detail
		select @nSql = '
		declare @TimeClockId int

		select @TimeClockId=ID from '+@tr_db+'.[dbo].[WS_EMP_TimeClock] where MatchId=@MatchId and LEM=''L''
		
		delete from '+@tr_db+'.[dbo].[WS_EMP_TimeClockHours] where WS_ETC_ID=@TimeClockId
		
		insert into '+@tr_db+'.[dbo].[WS_EMP_TimeClockHours] (WS_ETC_ID, time_code_id, HoursWorked, BillAmt)
		select @TimeClockId, wd.TimeCodeId, wd.WorkHours, wd.BillAmount 		
		from '+@tr_db+'.[dbo].[WS_EMP_TimeClock] t
		join WS_SyncLabourTimeEntry w on isnull(w.PrevMatchId, w.MatchId)=t.MatchId and t.LEM=''L''
		join WS_SyncLabourTimeDetail wd on wd.EntryId=isnull(w.PrevMatchId, w.MatchId) and wd.SyncId=w.SyncId
		where w.MatchId=@MatchId '
		exec sp_executesql @nSql, N'@MatchId int, @HeaderMatchId int ', @MatchId, @HeaderMatchId

		
		-- Add new emp_time
		select @nSql = '
		declare @Max_et_seq int, @Max_emp_time_id int
		select @Max_et_seq = isnull((select max(et_seq) from '+@tr_db+'.[dbo].[emp_time]),0)

		if exists( select * from #emp_time)
		begin
			if not exists ( select * from '+@tr_db+'.[dbo].[system_ids] where id_name = ''NEXT_EMP_TIME_ID'' )
			begin
				insert into '+@tr_db+'.[dbo].[system_ids] (ID, ID_NAME)
				select 1, ''NEXT_EMP_TIME_ID''
			end

			select @Max_emp_time_id = id from '+@tr_db+'.[dbo].[system_ids] where id_name = ''NEXT_EMP_TIME_ID''

			update #emp_time 
			set et_seq = @Max_et_seq + id,
				emp_time_id = @Max_emp_time_id + id,
				et_line_total = round(et_pay_rate * et_pay_tot_hrs, 2)

			update '+@tr_db+'.[dbo].[system_ids] 
			set id = (select max(emp_time_id) from #emp_time) + 1 
			where id_name = ''NEXT_EMP_TIME_ID''
	
			insert '+@tr_db+'.[dbo].[emp_time] ([emp_co], [emp_no], [et_date], [et_seq], [et_time], [wc_code], [et_afe_number], [et_cust_cost_code], [et_time_ticket], [prp_comp],
				[eg_code], [ec_code], [tbh_num], [tbd_row], [tbd_col], [et_pay_rate], [et_pay_tot_hrs], [et_pay_reg_hrs], [et_desc], [et_accrual_flag],
				[et_gross_net_flag], [et_units], [et_account], [et_ei_insure], [et_cpp_pension], [et_taxable], [et_taxable_ben], [et_calc_type], 
				[et_div], [acct_year], [acct_period], [journal_id], [et_line_total], [emp_time_id], [night_premium_flag], [entry_type], [operator],
				[emp_name], [et_profit_center], [PRI_ID], [lv1ID], [lv2ID], [lv3ID], [lv4ID], [pri_type], [cost_reference], [EXPENSE_TYPE], [work_comments],
				[SUB_CODE], [TimeClock_ID], [billable], [CostingType])
			select [emp_co], [emp_no], [et_date], [et_seq], [et_time], [wc_code], [et_afe_number], [et_cust_cost_code], [et_time_ticket], [prp_comp],
				[eg_code], [ec_code], [tbh_num], [tbd_row], [tbd_col], [et_pay_rate], [et_pay_tot_hrs], [et_pay_reg_hrs], [et_desc], [et_accrual_flag],
				[et_gross_net_flag], [et_units], [et_account], [et_ei_insure], [et_cpp_pension], [et_taxable], [et_taxable_ben], [et_calc_type], 
				[et_div], [acct_year], [acct_period], [journal_id], [et_line_total], [emp_time_id], [night_premium_flag], [entry_type], [operator],
				[emp_name], [et_profit_center], [PRI_ID], [lv1ID], [lv2ID], [lv3ID], [lv4ID], [pri_type], [cost_reference], [EXPENSE_TYPE], [work_comments],
				[SUB_CODE], [TimeClock_ID], [billable], ''P'' 
			from #emp_time 
		end '
		exec sp_executesql @nSql 
	end
end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_SyncInit]') and xtype = 'P ')  
 drop Procedure WS_SyncInit
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 

create proc WS_SyncInit @SyncId int output, @ClientMac varchar(20), @CompanyId int
as
begin	
	insert into WS_Sync (SyncStart, Status, ClientMac, CompanyId)
	select getdate(), 'In Progress', @ClientMac, @CompanyId

	select @SyncId=scope_identity()
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WS_SyncQuarantine]') and xtype = 'P ')  
 drop Procedure WS_SyncQuarantine
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
 
 

/*
	begin tran
	exec WS_SyncQuarantine 232
	rollback tran
*/
create proc WS_SyncQuarantine @SyncId int
as
begin
	declare @nSql nvarchar(max), @CompanyId int, @tr_db varchar(50), @level int

	select @CompanyId=CompanyId from WS_Sync where syncid=@syncid

	select @tr_db=treasurydbname from companies where autoid = @CompanyId

	select @nSql = '
	select @level=case when isnull(lv4_active_gc,''F'') = ''T'' then 4 when isnull(lv3_active_gc,''F'') = ''T'' then 3
		when isnull(lv2_active_gc,''F'') = ''T'' then 2 when isnull(lv1_active_gc,''F'') = ''T'' then 1 else 0 end
	from '+@tr_db+'.dbo.[proj_cntl] '
	exec sp_executesql @nSql, N'@level int output ', @level OUT


	-- flag any records already in quarantine
		update w
		set w.Quarantine=1 
		from WS_SyncLogHeader w 
		join WS_SyncLogHeader w2 on isnull(w2.PrevMatchId,w2.MatchId)=w.PrevMatchId
		where w.syncid=@syncid and w2.syncId <> @syncId and w2.Quarantine = 1


	-- Labor 
		-- Missing Earning codes for employee 
		select @nSql = '
		update w
		set w.Quarantine=1 
		from WS_SyncLogHeader w
		join WS_SyncLabourTimeEntry l on l.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and l.SyncId=w.SyncId		
		join WS_SyncLabourTimeDetail ld on ld.EntryId=isnull(l.PrevMatchId, l.MatchId) and l.SyncId=ld.SyncId
		join '+@tr_db+'.dbo.WS_EMP_Time_Code c on c.ID=ld.TimeCodeId
		left outer join '+@tr_db+'.[dbo].[earn_code] ec on ec.ec_code = c.EC_CODE and ec.eg_code = c.EG_CODE
		left outer join '+@tr_db+'.[dbo].[emp_earn] ee on ee.ec_code = c.EC_CODE and ee.eg_code = c.EG_CODE and ee.emp_no = l.EmpNum
		where w.syncid=@syncid and ee.ee_account is null and ld.WorkHours > 0 '
		exec sp_executesql @nSql, N'@syncid int ', @syncid		

		-- missing employee
		select @nSql = '
		update w
		set w.Quarantine=1 
		from WS_SyncLogHeader w 
		join WS_SyncLabourTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
		left outer join '+@tr_db+'.dbo.employee e on e.emp_no=t.EmpNum
		where w.syncid=@syncid and e.emp_no is null '
		exec sp_executesql @nSql, N'@syncid int ', @syncid	
						
		-- missing work class
		select @nSql = '
		update w
		set w.Quarantine=1 
		from WS_SyncLogHeader w 
		join WS_SyncLabourTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
		left outer join '+@tr_db+'.dbo.work_class wc on wc.wc_code=t.wc_code
		where w.syncid=@syncid and wc.wc_code is null '
		exec sp_executesql @nSql, N'@syncid int ', @syncid	
			
		-- missing level id 
		if( @level >= 1 )
		begin
			select @nSql = '
			update w
			set w.Quarantine=1 
			from WS_SyncLogHeader w 
			join WS_SyncLabourTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level1_Codes l on l.lv1ID=t.Level1Id
			where w.syncid=@syncid and l.lv1ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid	
		end

		if( @level >= 2 )
		begin
			select @nSql = '
			update w
			set w.Quarantine=1 
			from WS_SyncLogHeader w 
			join WS_SyncLabourTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level2_Codes l on l.lv2ID=t.Level2Id
			where w.syncid=@syncid and l.lv2ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid	
		end

		if( @level >= 3 )
		begin
			select @nSql = '
			update w
			set w.Quarantine=1 
			from WS_SyncLogHeader w 
			join WS_SyncLabourTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level3_Codes l on l.lv3ID=t.Level3Id
			where w.syncid=@syncid and l.lv3ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid	
		end

		if( @level = 4 )
		begin
			select @nSql = '
			update w
			set w.Quarantine=1 
			from WS_SyncLogHeader w 
			join WS_SyncLabourTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level4_Codes l on l.lv4ID=t.Level4Id
			where w.syncid=@syncid and l.lv4ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid	
		end
	
		
	-- Labor Detail
		-- missing time code id 
		select @nSql = '
		update w
		set w.Quarantine=1 
		from WS_SyncLogHeader w
		join WS_SyncLabourTimeEntry l on l.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and l.SyncId=w.SyncId		
		join WS_SyncLabourTimeDetail ld on ld.EntryId=isnull(l.PrevMatchId, l.MatchId) and l.SyncId=ld.SyncId
		left outer join '+@tr_db+'.dbo.WS_EMP_Time_Code tc on tc.ID=ld.TimeCodeId
		where w.syncid=@syncid and tc.ID is null '
		exec sp_executesql @nSql, N'@syncid int ', @syncid	


	-- Equipment
		-- Missing Equipment  
		select @nSql = '
		update w
		set w.Quarantine=1 
		from WS_SyncLogHeader w 
		join WS_SyncEquipTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
		left outer join '+@tr_db+'.dbo.equip_id e on e.eqi_num=t.EqpNum
		where w.syncid=@syncid and e.eqi_num is null '
		exec sp_executesql @nSql, N'@syncid int ', @syncid	

		-- Missing level id 
		if( @level >= 1 )
		begin
			select @nSql = '
			update w
			set w.Quarantine=1 
			from WS_SyncLogHeader w 
			join WS_SyncEquipTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level1_Codes l on l.lv1ID=t.Level1Id
			where w.syncid=@syncid and l.lv1ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid	
		end

		if( @level >= 2 )
		begin
			select @nSql = '
			update w
			set w.Quarantine=1 
			from WS_SyncLogHeader w 
			join WS_SyncEquipTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level2_Codes l on l.lv2ID=t.Level2Id
			where w.syncid=@syncid and l.lv2ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid	
		end

		if( @level >= 3 )
		begin
			select @nSql = '
			update w
			set w.Quarantine=1 
			from WS_SyncLogHeader w 
			join WS_SyncEquipTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level3_Codes l on l.lv3ID=t.Level3Id
			where w.syncid=@syncid and l.lv3ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid	
		end

		if( @level = 4 )
		begin
			select @nSql = '
			update w
			set w.Quarantine=1 
			from WS_SyncLogHeader w 
			join WS_SyncEquipTimeEntry t on t.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and t.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level4_Codes l on l.lv4ID=t.Level4Id
			where w.syncid=@syncid and l.lv4ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid	
		end

		-- Employee Owned Equipment -- Missing Earning codes for employee
		select @nSql = '
		update w
		set w.Quarantine=1 
		from WS_SyncLogHeader w
		join WS_SyncEquipTimeEntry l on l.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and l.SyncId=w.SyncId	
		join '+@tr_db+'.[dbo].[equip_id] e on e.eqi_num=l.EqpNum	
		join '+@tr_db+'.[dbo].[equip_assign] ea on ea.eqi_num=e.eqi_num and cast(w.LogDate as date) between cast(ea.ea_date as date) and cast(ea.ea_release_date as date)
		join '+@tr_db+'.[dbo].[employee] emp on emp.emp_no=ea.emp_no
		join '+@tr_db+'.[dbo].[earn_code] ec on ec.ec_code = ea.ec_code and ec.eg_code = ea.eg_code
		left outer join '+@tr_db+'.[dbo].[emp_earn] ee on ee.ec_code = ea.EC_CODE and ee.eg_code = ea.EG_CODE and ee.emp_no = emp.emp_no
		where w.syncid=@syncid and ee.ee_account is null '
		exec sp_executesql @nSql, N'@syncid int ', @syncid	


	-- Attachments 
		-- Missing ContextItem ID
		update w
		set w.Quarantine=1 
		from WS_SyncLogHeader w
		join WS_SyncAttachment a on a.LinkMatchId=isnull(w.PrevMatchId, w.MatchId) and a.TableDotField='LemHeader.Id' and a.SyncId=w.SyncId
		left outer join ContextItem c on c.ID=a.ContextItemId
		where w.syncid=@syncid and c.ID is null


	-- PO Header
		-- Missing Supplier Code
		select @nSql = '
		update w
		set w.Quarantine=1 
		from WS_SyncPOHeader w
		left outer join '+@tr_db+'.dbo.supplier_master s on s.Supplier=w.SupplierCode 
		where w.syncid=@syncid and s.Supplier is null '
		exec sp_executesql @nSql, N'@syncid int ', @syncid
		
	-- PO Det 
		-- Missing Level ID 
		if( @level >= 1 )
		begin
			select @nSql = '
			update w
			set w.Quarantine=1 
			from WS_SyncPOHeader w
			join WS_SyncPODetail d on d.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and d.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level1_Codes l on l.lv1ID=d.Level1Id
			where w.syncid=@syncid and l.lv1ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid
		end

		if( @level >= 2 )
		begin
			select @nSql = '
			update w
			set w.Quarantine=1 
			from WS_SyncPOHeader w
			join WS_SyncPODetail d on d.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and d.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level2_Codes l on l.lv2ID=d.Level2Id
			where w.syncid=@syncid and l.lv2ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid
		end

		if( @level >= 3 )
		begin
			select @nSql = '
			update w
			set w.Quarantine=1 
			from WS_SyncPOHeader w
			join WS_SyncPODetail d on d.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and d.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level3_Codes l on l.lv3ID=d.Level3Id
			where w.syncid=@syncid and l.lv3ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid
		end

		if( @level = 4 )
		begin
			select @nSql = '
			update w
			set w.Quarantine=1 
			from WS_SyncPOHeader w
			join WS_SyncPODetail d on d.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and d.SyncId=w.SyncId
			left outer join '+@tr_db+'.dbo.Level4_Codes l on l.lv4ID=d.Level4Id
			where w.syncid=@syncid and l.lv4ID is null '
			exec sp_executesql @nSql, N'@syncid int ', @syncid
		end

	-- Attachments 
		-- Missing ContextItem ID		
		update w
		set w.Quarantine=1 
		from WS_SyncPOHeader w
		join WS_SyncAttachment a on a.LinkMatchId=isnull(w.PrevMatchId, w.MatchId) and a.TableDotField='FieldPO.Id' and a.SyncId=w.SyncId
		left outer join ContextItem c on c.ID=a.ContextItemId
		where w.syncid=@syncid and c.ID is null



	-- Mark all other records that are part of the same lem sheet or po as quarantined
	-- LEM Sheet	
		-- Sheet
		update w
		set w.LogStatus='Quarantine' 
		from WS_SyncLogHeader w 
		where w.syncid=@syncid and w.Quarantine=1

		-- labor
		update l
		set l.Quarantine=1 
		from WS_SyncLabourTimeEntry l
		join WS_SyncLogHeader w on l.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and l.SyncId=w.SyncId		
		where w.syncid=@syncid and w.Quarantine=1

		-- labor det
		update ld
		set ld.Quarantine=1 
		from WS_SyncLabourTimeDetail ld
		join WS_SyncLabourTimeEntry l on ld.EntryId=isnull(l.PrevMatchId, l.MatchId) and l.SyncId=ld.SyncId
		join WS_SyncLogHeader w on l.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and l.SyncId=w.SyncId		
		where w.syncid=@syncid and w.Quarantine=1
		
		-- equipment
		update e
		set e.Quarantine=1 
		from WS_SyncEquipTimeEntry e
		join WS_SyncLogHeader w on e.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and e.SyncId=w.SyncId		
		where w.syncid=@syncid and w.Quarantine=1

		-- AP Detail
		update a
		set a.Quarantine=1 
		from WS_SyncAPDet a
		join WS_SyncLogHeader w on a.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and a.SyncId=w.SyncId		
		where w.syncid=@syncid and w.Quarantine=1
		
		-- attachments
		update a
		set a.Quarantine=1 
		from WS_SyncAttachment a
		join WS_SyncLogHeader w on a.LinkMatchId=isnull(w.PrevMatchId, w.MatchId) and a.TableDotField='LemHeader.Id' and a.SyncId=w.SyncId		
		where w.syncid=@syncid and w.Quarantine=1

		
	-- PO	
		-- po det
		update d
		set d.Quarantine=1 
		from WS_SyncPODetail d
		join WS_SyncPOHeader w on d.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and d.SyncId=w.SyncId		
		where w.syncid=@syncid and w.Quarantine=1

		-- attachments
		update a
		set a.Quarantine=1 
		from WS_SyncAttachment a
		join WS_SyncPOHeader w on a.LinkMatchId=isnull(w.PrevMatchId, w.MatchId) and a.TableDotField='FieldPO.Id' and a.SyncId=w.SyncId		
		where w.syncid=@syncid and w.Quarantine=1


	-- Delete History
		update d
		set d.Quarantine=1 
		from WS_SyncDeleteHistory d
		join WS_SyncLabourTimeEntry l on l.MatchId=d.MatchId and d.TableName='LabourTimeEntry'
		join WS_SyncLogHeader w on l.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and d.SyncId=w.SyncId	
		where d.SyncId=@syncId and w.Quarantine=1

		update d
		set d.Quarantine=1 
		from WS_SyncDeleteHistory d
		join WS_SyncEquipTimeEntry e on e.MatchId=d.MatchId and d.TableName='EquipTimeEntry'
		join WS_SyncLogHeader w on e.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and d.SyncId=w.SyncId	
		where d.SyncId=@syncId and w.Quarantine=1

		update d
		set d.Quarantine=1 
		from WS_SyncDeleteHistory d
		join WS_SyncAPDet a on a.MatchId=d.MatchId and d.TableName='LemAPUnselect'
		join WS_SyncLogHeader w on a.HeaderMatchId=isnull(w.PrevMatchId, w.MatchId) and d.SyncId=w.SyncId	
		where d.SyncId=@syncId and w.Quarantine=1


		if ( (select count(*) from WS_SyncLogHeader where SyncId=@SyncId and Quarantine = 1) +
			(select count(*) from WS_SyncPOHeader where SyncId=@SyncId and Quarantine = 1) > 0 )
		begin

			set @nSql = '
			declare @AlertUsername varchar(50) = ''WS_FLEM_Approval_AppDec'', @mod_code varchar(50), @mod_desc varchar(150), @AAP_ID int, @AlertDetails varchar(8000)
			select @AAP_ID = 95
			if exists( select * from '+@tr_db+'.[dbo].AlertPointRequired where id = @AAP_ID and isnull(required,''F'') = ''T'' )
			begin
				delete from '+@tr_db+'.[dbo].working_alert_contacts where USERNAME = @AlertUsername

				--add project manager to alert notification
				insert into '+@tr_db+'.[dbo].working_alert_contacts (USERNAME, contact_id, AAP_ID)	
				select @AlertUsername, c.proj_manager, @AAP_ID 
				from WS_SyncLogHeader s
				join '+@tr_db+'.[dbo].WS_PCDL_LogHeader w on w.MatchId=isnull(s.PrevMatchId, s.MatchId)
				join '+@tr_db+'.[dbo].PROJ_HEADER h on w.Pri_ID = h.pri_id
				join '+@tr_db+'.[dbo].PROJ_CONTACTS c on h.pri_id = c.pri_id
				where s.syncId=@syncId and c.proj_manager is not null

				insert into '+@tr_db+'.[dbo].working_alert_contacts (USERNAME, contact_id, AAP_ID)	
				select @AlertUsername, c.proj_manager, @AAP_ID 
				from WS_SyncPOHeader s
				join '+@tr_db+'.[dbo].PROJ_HEADER h on h.pri_id=s.ProjectId
				join '+@tr_db+'.[dbo].PROJ_CONTACTS c on h.pri_id = c.pri_id
				where s.syncId=@syncId and c.proj_manager is not null

				select @mod_code=cast(@syncId as varchar(50))
				select @mod_desc=''''
				select @AlertDetails=''Syncing from the field has resulting in some records being quarantined. Please review and correct.''				

				exec '+@tr_db+'.[dbo].AlertSend @AlertUsername, @AAP_ID, ''D'', @mod_code, @mod_desc, @AlertDetails, @syncId, ''T''
			end '			
			exec sp_executesql @nSql, N'@syncId int ', @syncId
		end
end 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[x_60_sp_Get_scCampaign]') and xtype = 'P ')  
 drop Procedure x_60_sp_Get_scCampaign
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
--select * from scReport_Options  
--exec sp_Get_scCampaign 'c04c73e9-aec9-4073-959a-3e4d9ef83122'  
  
Create proc [dbo].[x_60_sp_Get_scCampaign] @PCID varchar(500)  
as  
  
declare @sql_str as varchar(5000),  
 @sql varchar(2500),  
 @count int  
  
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Campaign'))  
drop table #Campaign  
  
create table #Campaign(  
 CampaignID int null,  
 Campaign_Desc varchar(128) null,  
 ProcessID int null,  
 Campaign_StartDate datetime null,  
 Campaign_EndDate datetime null,  
 SalesManID int null,  
 ContactID int null,  
 LeadID int null,  
 Lead_FirstName varchar(50) null,  
 Lead_LastName varchar(50) null,  
 Lead_DateAdded datetime null,  
 Process_Description varchar(64) null,  
 Process_Status varchar(50) null,  
 Process_As_Followup bit null,  
 Process_As_Campaign bit null,  
 CompanyName varchar(100) null  
)  
  
--select * from scProcess  
  
-- declare  
-- @CommunityID int, @CommunityDesc varchar(100),  
--select * from scCampaign c  
--join scCampaignees cs on cs.CampaignID=c.ID  
--join scProcessInstance pi on pi.linkid=c.id and pi.ProcessTypeInstance='Campaign'  
--join scLead l on l.ID=cs.LeadID  
--join Contact con on con.ID=l.Contact_ID  
--left outer join scProcess p on p.ID=pi.ProcessID  
--where c.id=60  
--left outer join scProcess p on p.ID=c.ProcessID  
--where con.type='Prospect'  
--and c.id=60  
--select * from scMethodInstance where pi_id=104  
--select * from scStep  
--  
  
set @sql_str='  
select  c.ID, c.Description, c.ProcessID, c.StartDate, c.EndDate, c.SalesManID, con.ID,  
 l.ID, con.FirstName, con.LastName, l.DateCreated, p.Description, pi.ProcessStatus, p.AsFollowup, p.AsCampaign,   
 co.Company_Name  
from scCampaign c  
join scCampaignees cs on cs.CampaignID=c.ID  
join scProcessInstance pi on pi.linkid=c.ID and pi.ProcessTypeInstance=''Campaign''  
join scLead l on l.ID=cs.LeadID  
join Contact con on con.ID=l.Contact_ID  
join scProcess p on p.ID=pi.ProcessID  
left outer join Companies co on co.AutoID=con.CompanyAutoID  
where con.type=''Prospect'''  
  
--join companies co on co.AutoID=con.CompanyAutoID  
  
if exists (select * from working_process where pcid=@PCID)  
set @sql_str=@sql_str+' and p.ID in (select Process_ID from working_process where pcid='''+@PCID+''')'  
  
if exists (select * from working_campaign where pcid=@PCID)  
set @sql_str=@sql_str+' and c.ID in (select ID from working_campaign where pcid='''+@PCID+''')'  
  
insert #Campaign(CampaignID, Campaign_Desc, ProcessID, Campaign_StartDate,  
 Campaign_EndDate, SalesManID, ContactID, LeadID, Lead_FirstName, Lead_LastName,  
 Lead_DateAdded, Process_Description, Process_Status,Process_As_Followup, Process_As_Campaign, CompanyName)  
exec(@sql_str)  
  
select * from #Campaign c  
join scReport_Options sc on sc.PCID=@PCID  
and c.Campaign_StartDate>=sc.start_date  
and c.Campaign_EndDate<=sc.end_date  
  
  




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[x_60_sp_Get_scCodes]') and xtype = 'P ')  
 drop Procedure x_60_sp_Get_scCodes
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go









--drop proc sp_Get_scCodes

--exec sp_Get_scCodes 'hm'
Create  proc [dbo].[x_60_sp_Get_scCodes] @PCID varchar(500)
as
declare @sql_str as varchar(5000)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Codes'))
drop table #Codes

create table #Codes(
 CatID int null,
 Category varchar(50) null,
 USCategory varchar(50) null, 
 CatCodeID int null, 
 Entry varchar(90) null,
 Description varchar(100) null,
 Additional varchar(100) null,
 ProcessID int null,
 AvailableYN bit null)


-- declare
-- @CommunityID int, @CommunityDesc varchar(100),


set @sql_str='
select  c.ID, c.Category, c.USCategory,
 cc.ID, cc.Entry, cc.Description, cc.Additional, cc.ProcessID, cc.AvailibleYN
from scCategories c
join scCatCodes cc on cc.CatID=c.ID
where 1=1'

if exists (select * from working_category where pcid=@PCID)
set @sql_str=@sql_str+' and c.ID in (select CatID from working_category where pcid='''+@PCID+''')'
--print @sql_str
insert #Codes( CatID, Category, USCategory, CatCodeID, Entry, Description,
 Additional, ProcessID, AvailableYN)
exec(@sql_str)


select * from #Codes
join scReport_Options on PCID=@PCID





















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[x_60_sp_Get_scInventory]') and xtype = 'P ')  
 drop Procedure x_60_sp_Get_scInventory
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go








--select * from scReport_Options
--insert scReport_Options(PCID,run_description,G1_FIELD,G2_FIELD)
--select 'hm','test60','Model','Type'

--exec sp_Get_scInventory 'e807c514-8d2c-4255-903e-f5674b00099b', 'N'
--drop proc sp_Get_scInventory

Create    proc [dbo].[x_60_sp_Get_scInventory] @PCID varchar(500), @ShowInstructions char(1)
as

declare @sql_str as varchar(5000),
        @sql as varchar(2000),
        @count as int

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Inventory'))
drop table #Inventory

create table #Inventory(
 InvID int null,
 AvailableForSale bit null,
 CivicAddress varchar(128) null,
 LotDesc varchar(128) null,
 BlockDesc varchar(128) null,
 PlanNo varchar(20) null,
 SaleType varchar(50) null,
 ModelNameDesc varchar(60) null,
 ModelDesc varchar(60) null,
 MLS_Num int null,
 LockBoxCombination varchar(25) null,
 ListingPrice money null,
 UseResale bit null,
 ShowingInstructions varchar(256) null,
 SaleQuoteID int null,
 HoldingDesc varchar(128) null,
 CommunityDesc varchar(128) null,
 PhaseDesc varchar(128) null,
 CompanyName varchar(50) null,
 G1_VALUE varchar(50) null,
 G2_VALUE varchar(50) null,
 G3_VALUE varchar(50) null,
 G1_DESC varchar(100) null,
 G2_DESC varchar(100) null,
 G3_DESC varchar(100) null)


-- declare
-- @CommunityID int, @CommunityDesc varchar(100),

--select * from inventory
--select * from companies
set @sql_str='
select  i.ID, i.AvailableForSale, i.CivicAddress, i.LotDesc, i.BlockDesc,
 i.PlanNo, i.SaleType, i.ModelNameDesc, i.ModelDesc, il.MLS_Num,
 il.LockBoxCombination, il.ListingPrice, il.UseResale, il.ShowingInstructions, i.SaleQuoteID,
 i.HoldingDesc, i.CommunityDesc, i.ProjectDesc, c.Company_Name
from inventory i
join companies c on c.autoid=i.companyid
left outer join scInventoryListings il on i.ID=il.InventoryID
where 1=1'

if exists (select * from working_company where pcid=@PCID)
set @sql_str=@sql_str+' and i.Companyid in (select company_id from working_company where pcid='''+@PCID+''')'

if exists (select * from working_model_name where pcid=@PCID)
set @sql_str=@sql_str+' and i.ModelNameDesc in (select hbmn.model_name from working_model_name wmn
join hb_model_name hbmn on hbmn.model_name_id=wmn.model_name_id where pcid='''+@PCID+''')'

if exists (select * from working_model where pcid=@PCID)
set @sql_str=@sql_str+' and i.ModelDesc in (select hbm.model_desc from working_model wm
join hb_model hbm on hbm.model_id=wm.model_id where pcid='''+@PCID+''')'

if exists (select * from working_holding where pcid=@PCID)
set @sql_str=@sql_str+' and i.HoldingDesc in (select hbrl.raw_land_desc from working_holding wh
join hb_raw_land hbrl on hbrl.raw_land_cd=wh.raw_land_cd where pcid='''+@PCID+''')'

if exists (select * from working_community where pcid=@PCID)
set @sql_str=@sql_str+' and i.CommunityDesc in (select community_desc from working_community wc
join hb_communities hbc on hbc.community_cd=wc.community_cd where pcid='''+@PCID+''')'

if exists (select * from working_project where pcid=@PCID)
set @sql_str=@sql_str+' and i.ProjectDesc in (select project_desc from working_project wp
join hb_project hbp on hbp.project_cd=wp.project_cd where pcid='''+@PCID+''')'

insert #Inventory(InvID, AvailableForSale, CivicAddress, LotDesc, BlockDesc,
 PlanNo, SaleType, ModelNameDesc, ModelDesc, MLS_Num, LockBoxCombination,
 ListingPrice, UseResale, ShowingInstructions, SaleQuoteID, HoldingDesc, CommunityDesc, PhaseDesc, CompanyName)
exec(@sql_str)

update #Inventory
set ListingPrice=isnull(s.FinalPrice,0) from scQuote s where InvID=s.InventoryID
--and #Inventory.UseResale=0

set @count=1    
while @count<=3    
begin    
 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Holding'')
 begin
 update #Inventory
 set g'+cast(@count as varchar)+'_value=HoldingDesc, g'+cast(@count as varchar)+'_desc=HoldingDesc
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Community'')
 begin
 update #Inventory
 set g'+cast(@count as varchar)+'_value=CommunityDesc, g'+cast(@count as varchar)+'_desc=CommunityDesc
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Phase'')
 begin
 update #Inventory
 set g'+cast(@count as varchar)+'_value=PhaseDesc, g'+cast(@count as varchar)+'_desc=PhaseDesc
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Model'')
 begin
 update #Inventory
 set g'+cast(@count as varchar)+'_value=ModelDesc, g'+cast(@count as varchar)+'_desc=ModelDesc    
 end'
 exec(@sql)

 set @sql='    
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Type'')
 begin
 update #Inventory
 set g'+cast(@count as varchar)+'_value=SaleType, g'+cast(@count as varchar)+'_desc=SaleType
 end'
 exec(@sql)

 set @sql='    
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Model/Elevation/Plan'')
 begin
 update #Inventory
 set g'+cast(@count as varchar)+'_value=ModelDesc+'' ''+ModelNameDesc, g'+cast(@count as varchar)+'_desc=ModelDesc+'' ''+ModelNameDesc
 end'
 exec(@sql)

 set @sql='    
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Status'')
 begin
 update #Inventory
 set g'+cast(@count as varchar)+'_value=''Status'', g'+cast(@count as varchar)+'_desc=''Status''
 end'
 exec(@sql)

-- select * from rpt_dynamic_grouping where rpt=95
 set @count=@count+1    
end

exec sp_UpdateSCRptGrouping @PCID

select * from #Inventory
join scReport_Options on PCID=@PCID























Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[x_60_sp_Get_scLeads]') and xtype = 'P ')  
 drop Procedure x_60_sp_Get_scLeads
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go














--select * from scReport_Options
--exec sp_Get_scLeads 'e807c514-8d2c-4255-903e-f5674b00099b'

Create        proc [dbo].[x_60_sp_Get_scLeads] @PCID varchar(500)
as

declare @sql_str as varchar(5000),
 @sql varchar(2500),
 @count int

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Leads'))
drop table #Leads

create table #Leads(
 LeadID int null,
 ContactName varchar(128) null,
 BusinessAddress varchar(128) null,
 BusinessCity varchar(128) null,
 BusinessState varchar(50) null,
 BusinessPostalCode varchar(50) null,
 BusinessPhone varchar(60) null,
 HomeAddress varchar(128) null,
 HomeCity varchar(128) null,
 HomeState varchar(50) null,
 HomePostalCode varchar(50) null,
 HomePhone varchar(60) null,
 Email varchar(128) null,
 Salesperson varchar(50) null,
 CompanyName varchar(100) null,
G1_VALUE varchar(50) null,
G2_VALUE varchar(50) null,
G3_VALUE varchar(50) null,
G1_DESC varchar(50) null,
G2_DESC varchar(50) null,
G3_DESC varchar(50) null)


-- declare
-- @CommunityID int, @CommunityDesc varchar(100),

--select * from scLead
--select * from Contact where id=573
--select * from scQuote

set @sql_str='
select  l.ID, c.KnownAs,
 c.BusinessStreet, c.BusinessCity, c.BusinessState, c.BusinessPostalCode, c.BusinessTelephoneNumber,
 c.HomeStreet, c.HomeCity, c.HomeState, c.HomePostalCode, c.PrimaryTelephoneNumber, c.Email1Address,
 sls.FirstName+'' ''+sls.LastName, ''''
from scLead l
join contact c on c.ID=l.Contact_ID
join contact sls on c.Owner_ID=sls.ID
where c.type=''Prospect'''

if exists (select * from working_company where pcid=@PCID)
set @sql_str=@sql_str+' and c.CompanyAutoID in (select company_id from working_company where pcid='''+@PCID+''')'

if exists (select * from working_city where pcid=@PCID)
set @sql_str=@sql_str+' and c.BusinessCity in (select City from working_city wc
where pcid='''+@PCID+''')'
if exists (select * from working_province where pcid=@PCID)
set @sql_str=@sql_str+' and l.BusinessState in (select Province from working_province wp
where pcid='''+@PCID+''')'
if exists (select * from working_contact where pcid=@PCID)
set @sql_str=@sql_str+' and c.ID in (select ID from working_contact where pcid='''+@PCID+''')'


insert #Leads(LeadID, ContactName, BusinessAddress, BusinessCity, BusinessState, BusinessPostalCode, BusinessPhone,
 HomeAddress, HomeCity, HomeState, HomePostalCode, HomePhone, Email, Salesperson, CompanyName)
exec(@sql_str)


set @count=1    
while @count<=3    
begin    
 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''City'')
 begin
 update #Leads
 set g'+cast(@count as varchar)+'_value=BusinessCity, g'+cast(@count as varchar)+'_desc=BusinessCity
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''State/Province'')
 begin
 update #Leads
 set g'+cast(@count as varchar)+'_value=BusinessState, g'+cast(@count as varchar)+'_desc=BusinessState
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Contact Name'')
 begin
 update #Leads
 set g'+cast(@count as varchar)+'_value=ContactName, g'+cast(@count as varchar)+'_desc=ContactName
 end'
 exec(@sql)

 set @sql='
 if exists (select * from scReport_Options ro    
 where ro.PCID='''+cast(@PCID as varchar(500))+'''
 and ro.g'+cast(@count as varchar)+'_field=''Salesperson'')
 begin
 update #Leads
 set g'+cast(@count as varchar)+'_value=Salesperson, g'+cast(@count as varchar)+'_desc=Salesperson
 end'
 exec(@sql)

-- select * from rpt_dynamic_grouping where rpt=96
 set @count=@count+1    
end

exec sp_UpdateSCRptGrouping @PCID

select * from #Leads
join scReport_Options on PCID=@PCID

























Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[x_60_sp_Get_scProcess]') and xtype = 'P ')  
 drop Procedure x_60_sp_Get_scProcess
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


--select * from scReport_Options  
--exec sp_Get_scProcess '2adeb87a-ef08-482c-a37f-88cfea064191'  
Create   proc [dbo].[x_60_sp_Get_scProcess] @PCID varchar(500)  
as  
  
declare @sql_str as varchar(5000),  
        @sql as varchar(2000),  
        @count as int  
  
if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Process'))  
drop table #Process  
  
create table #Process(  
 ProcessID int null,  
 ProcessType varchar(64) null,  
 Process_Description varchar(64) null,  
 Process_As_Followup bit null,  
 Process_As_Campaign bit null,  
 ProcessStartDate datetime null,  
 Status varchar(25) null,  
 ContactID int null,  
 LeadID int null,  
 Lead_FirstName varchar(50) null,  
 Lead_LastName varchar(50) null,  
 Lead_DateAdded datetime null,  
 MethodType varchar(50) null,  
 CampaignID int null,  
 Campaign_Desc varchar(128) null,  
 Campaign_StartDate datetime null,  
 Campaign_EndDate datetime null,  
 SalesManID int null,  
 CompanyName varchar(100) null)  
  
  
-- declare  
-- @CommunityID int, @CommunityDesc varchar(100),  
  
set @sql_str='  
select  p.ID, pi.ProcessTypeInstance, p.Description, p.AsFollowup, p.AsCampaign, pi.ProcessStartdate, pi.ProcessStatus, con.ID,  
 l.ID, con.FirstName, con.LastName, l.DateCreated, '''', c.ID, c.Description, c.StartDate, c.EndDate, c.SalesManID,  
 ''''  
from scProcess p  
join scProcessInstance pi on pi.ProcessID=p.ID  
join scLead l on pi.LinkID=l.ID  
join Contact con on l.Contact_ID=con.ID  
left outer join scCampaign c on p.ID=c.ProcessID  
where con.type=''Prospect'''  
--from scCampaign c  
--join scCampaignees cs on cs.CampaignID=c.ID  
--join scProcessInstance pi on pi.linkid=c.ID and pi.ProcessTypeInstance=''Campaign''  
--join scLead l on l.ID=cs.LeadID  
--join Contact con on con.ID=l.Contact_ID  
--join scProcess p on p.ID=pi.ProcessID  
--left outer join Companies co on co.AutoID=con.CompanyAutoID  
--where con.type=''Prospect'''  
  
if exists (select * from working_process where pcid=@PCID)  
set @sql_str=@sql_str+' and p.ID in (select Process_ID from working_process where pcid='''+@PCID+''')'  

  
insert #Process( ProcessID, ProcessType, Process_Description, Process_As_Followup, Process_As_Campaign, ProcessStartdate, Status, ContactID,  
 LeadID, Lead_FirstName, Lead_LastName, Lead_DateAdded, MethodType, CampaignID, Campaign_Desc, Campaign_StartDate,  
 Campaign_EndDate, SalesManID, CompanyName)  
exec(@sql_str)  
  
select * from #Process p  
join scReport_Options sc on PCID=@PCID  
and sc.start_date<=p.ProcessStartdate  
and sc.end_date>=p.ProcessStartdate  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[x_60scSPFillscMethodInstances]') and xtype = 'P ')  
 drop Procedure x_60scSPFillscMethodInstances
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE   Procedure [dbo].[x_60scSPFillscMethodInstances] (@ProcessInstanceID int, @Flavour varchar(15))
as

Declare @LinkID int
If (@Flavour = 'Campaign')
Begin
	Insert Into scMethodInstance (PI_ID, StepID,Status,LinkID,StartDate,LeadID)

	Select  @ProcessInstanceID, s.ID, 'New', 0,DATEADD(Day, OffSet, GetDate()),C.LeadID From scStep S
	Left Outer Join scProcessInstance PI on PI.ProcessID = S.ProcessID
	Left Outer Join scCampaignees C on C.CampaignID = PI.LinkID
	Left Outer Join scLead L on L.ID = C.LeadID
	Left Outer Join Contact CC on CC.ID = L.Contact_ID
	Where PI.ProcessTypeInstance = 'Campaign' AND S.Type = 'Each Lead' AND PI.ID = @ProcessInstanceID
	AND ((S.MethodType = 'Email' AND CC.PersonalEmailOnly = 1) OR (S.MethodType IN('Task','Letter')))

	Insert Into scMethodInstance (PI_ID, StepID,Status,LinkID,StartDate,LeadID)
	Select @ProcessInstanceID, s.ID, 'New',0,DATEADD(Day, Offset,GetDate()),0 From scStep s
	Left Outer Join scProcessInstance PI on PI.ProcessID = s.ProcessID
	Where s.Type = 'Entire Campaign' AND PI.ID = @ProcessInstanceID AND s.MethodType = 'Task'
	
	Update scCampaign set StartDate = GetDate() Where ID in (Select LinkID from scProcessInstance Where ID = @ProcessInstanceID)  AND ISNULL(StartDate,'') = ''
	
	
	Select  @LinkID = LinkID from scProcessInstance p where P.ID = @ProcessInstanceID

	Update scCampaign 
	Set EndDate = (Select DATEADD(Day, 1, Max(M.StartDate)) from scMethodInstance M Left Outer Join scProcessInstance P on P.ID = M.PI_ID Where P.LinkID = @LinkID)
	Where ID in (Select LinkID from scProcessInstance Where ID = @ProcessInstanceID) 
End

Else If (@Flavour = 'UpdateCampaign')
Begin
	Insert Into scMethodInstance (PI_ID, StepID,Status,LinkID,StartDate,LeadID)
	Select  @ProcessInstanceID, s.ID, 'New', 0,DATEADD(Day, OffSet, GetDate()),C.LeadID From scStep S
	Left Outer Join scProcessInstance PI on PI.ProcessID = S.ProcessID
	Left Outer Join scCampaignees C on C.CampaignID = PI.LinkID
	Left Outer Join scLead L on L.ID = C.LeadID
	Left Outer Join Contact CC on CC.ID = L.Contact_ID
	Where PI.ProcessTypeInstance = 'Campaign' AND S.Type = 'Each Lead' AND PI.ID = @ProcessInstanceID
	AND LeadID NOT IN (Select MC.LeadID from scProcessInstance PC
	left outer join scMethodInstance MC on MC.PI_ID = PC.ID
	Where PC.ProcessID = PI.ProcessID and PC.LinkID = PI.LinkID)
	AND ((S.MethodType = 'Email' AND CC.PersonalEmailOnly = 1) OR (S.MethodType IN('Task','Letter')))
	
	Select  @LinkID = LinkID from scProcessInstance p where P.ID = @ProcessInstanceID

	Update scCampaign 
	Set EndDate = (Select DATEADD(Day, 1, Max(M.StartDate)) from scMethodInstance M Left Outer Join scProcessInstance P on P.ID = M.PI_ID Where P.LinkID = @LinkID)
	Where ID in (Select LinkID from scProcessInstance Where ID = @ProcessInstanceID) 
End

Else
Begin
	Insert Into scMethodInstance (PI_ID, StepID, Status, LinkID, StartDate, LeadID)
	Select @ProcessInstanceID, S.ID, 'New', 0, DATEADD(Day, Offset, GetDate()), PI.LinkID from scStep S
	Left Outer Join scProcessInstance PI on PI.ProcessID = S.ProcessID
	Left Outer Join scLead L on PI.LinkID =L.ID
	Left Outer Join contact c on C.ID = L.Contact_ID
	Where PI.ID = @ProcessInstanceID AND S.MethodType = 'Email' AND C.PersonalEmailOnly = 1

	Insert Into scMethodInstance (PI_ID, StepID, Status, LinkID, StartDate, LeadID)
	Select @ProcessInstanceID, S.ID, 'New', 0, DATEADD(Day, Offset, GetDate()), PI.LinkID from scStep S
	Left Outer Join scProcessInstance PI on PI.ProcessID = S.ProcessID
	Left Outer Join scLead L on PI.LinkID =L.ID
	Left Outer Join contact c on C.ID = L.Contact_ID
	Where PI.ID = @ProcessInstanceID AND S.MethodType IN ('Task','Letter')
End

Update scProcessInstance Set ProcessStatus = 'Started', ProcessStartDate = GetDate() Where ID = @ProcessInstanceID





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[x_60scSPFilteredLeads]') and xtype = 'P ')  
 drop Procedure x_60scSPFilteredLeads
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE    procedure [dbo].[x_60scSPFilteredLeads] (@UserID int, @Flavour varchar(15))
AS

--IF NOT EXISTS (SELECT LeadID FROM working_FilteredLeads WHERE UserID = @UserID)
--BEGIN
--	INSERT INTO working_FilteredLeads (LeadID, UserID,Flavour)
--	SELECT l.ID, @UserID,@Flavour FROM scLead l INNER JOIN Contact c ON l.Contact_ID = c.ID 
--	--join working_sc_items w on w.original_contact_id=@UserID and w.item_type='L' and w.item_id=l.id
--	WHERE (l.IncompleteYN = 0)
--END

SELECT ISNULL(l.CorporateYN, 0) AS [Contact Type], c.ID AS [Contact ID], l.ID AS [Prospect ID], l.ParentID, ISNULL(c.FirstName, '') AS [First Name], ISNULL(c.LastName, '') AS [Last Name], ISNULL(c.KnownAs, ISNULL(c.Title, '') + ISNULL(c.LastName, '') + CASE WHEN C.Lastname IS NULL THEN '' ELSE ', 
	    ' END + ISNULL(c.FirstName, '')) AS Name, CASE WHEN PrimaryTelephoneNumber IS NOT NULL THEN 'Primary - ' + PrimaryTelephoneNumber WHEN BusinessTelephoneNumber IS NOT NULL THEN 'Bus. - ' + BusinessTelephoneNumber WHEN HomeTelephoneNumber IS NOT NULL THEN 'Home - ' + HomeTelephoneNumber WHEN MobileTelephoneNumber IS NOT NULL THEN 'Cell - ' + MobileTelephoneNumber WHEN OtherTelephoneNumber IS NOT NULL THEN 'Other - ' + OtherTelephoneNumber END AS Phone FROM scLead l INNER JOIN Contact c ON l.Contact_ID = c.ID 
--join working_sc_items w on w.original_contact_id=@UserID and w.item_type='L' and w.item_id=l.id	
WHERE (l.IncompleteYN = 0) AND l.ID IN (Select LeadID from working_FilteredLeads where UserID =@UserID AND Flavour = @Flavour)







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[x_60sp_CMS_GetContractInfo]') and xtype = 'P ')  
 drop Procedure x_60sp_CMS_GetContractInfo
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE               proc [dbo].[x_60sp_CMS_GetContractInfo]   
 
 @WebDB   varchar(50),
 @TRDB   varchar(50)
 as
  
--  declare @WebDB   varchar(50),@TRDB   varchar(50)
--  select @WebDB = 'Web_Reflex', @TRDb = 'TR_RoyalOak'

declare       @str  varchar(1000)



if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#result '))  
drop table #result
create table #result
( 
   Type      varchar(10)   null,  -- 'Model', 'Option', 'Material'
   QuoteID       int null,
   LeadID         int null,
   RAW_LAND_CD    int null,
   COMMUNITY_CD    int null,
   PROJECT_CD    int null,
   MODEL_NAME_ID  int   null,
   MODEL_NAME  varchar (50)  null,
   MODEL_ID   int null,
   MODEL_SDESC  varchar(50) null,
   MODEL_DESC   varchar(50) null,
   RFQC_ID   int null,
   MAJ_GROUP_ID   int null,  
   GROUP_DESC  varchar(50)  null,
   SUB_GROUP_ID   int null,
   SUB_GROUP_DESC   varchar(50),
   OPTION_ID  int null,
   SHORT_DESC     varchar (50) null,
   phs_code    varchar(10)  null,
   subp_code    varchar(10)  null,
   selected    varchar(1)   null,
   MATGROUP_ID   int null,
   MAT_GROUP     varchar(10) null, 
   MAT_GROUP_DESC  varchar(50) null,
   MATERIAL_ID  int null,
   MAT_CODE   varchar(30) null,
   MAT_SHORT_DESC  varchar(50)  null ,
   BADC  varchar(1) null,
   INTERNAL_EST    money null,
   EXP_DESC   text  null,
   Quanity money null
  
)

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#quote '))  
drop table #quote
create table #quote   --select * from #quote
  (
   QuoteID       int null,
   LeadID         int null,
   RAW_LAND_CD    int null,
   COMMUNITY_CD    int null,
   PROJECT_CD    int null,
   MODEL_NAME_ID  int   null,
   MODEL_ID   int null
 )




insert #quote (QuoteID,LeadID,RAW_LAND_CD,COMMUNITY_CD,PROJECT_CD,MODEL_NAME_ID,MODEL_ID )
               select ID ,LeadID,HoldingID, CommunityID,ProjectID,ModelNameID,ModelID 
               from   scQuote q join companies c on q.companyID = c.AutoID  
               where  TreasuryDBName =  @TRDB
                and Status = 'S' and ID not in ( select quoteID from  
                     CMS_Contract_Management )



--- type = model(elevation) ---------

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#Elevation '))  
drop table #Elevation
create table #Elevation 
  (
   Type      varchar(10)   null,  -- 'Model', 'Option', 'Material'
   RAW_LAND_CD    int null,
   MODEL_NAME_ID  int   null,
   MODEL_NAME  varchar (50)  null,
   MODEL_ID   int null,
   MODEL_SDESC  varchar(50) null,
   MODEL_DESC   varchar(50) null,
   RFQC_ID   int null,
   SHORT_DESC     varchar (50) null,
   phs_code    varchar(10)  null,
   subp_code    varchar(10)  null,
   BADC  varchar(1) null,
   INTERNAL_EST    money null
   )


insert  #Elevation(RAW_LAND_CD, MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC, 
        MODEL_DESC,phs_code,subp_code, BADC,INTERNAL_EST    )

select   m.RAW_LAND_CD, m.MODEL_NAME_ID, n.MODEL_NAME, m.MODEL_ID,
        m.MODEL_SDESC, m.MODEL_DESC, p.phs_code, p.subp_code,BADC,p.INTERNAL_EST
from HB_EST   p
left outer join HB_MODEL m
on m.MODEL_ID = p.MODEL_ID and p.Raw_Land_CD = m.Raw_Land_CD
left outer join HB_MODEL_NAME  n
on n.MODEL_NAME_ID = m.MODEL_NAME_ID
where BASE_MODEL = 'Y' and p.Raw_Land_CD in (Select Raw_Land_CD from #quote) and p.Option_ID = -1 and IsNull(p.EstimateLevel,'E') = 'E'

if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#BaseElevation '))  
drop table #BaseElevation
create table #BaseElevation(
   type      varchar(10)   null, 
    RAW_LAND_CD    int null, 
   MODEL_NAME_ID  int   null,
   MODEL_NAME  varchar (50)  null,
   MODEL_ID   int null,
   MODEL_SDESC  varchar(50) null,
   MODEL_DESC   varchar(50) null,
   phs_code    varchar(10)  null,
   subp_code    varchar(10)  null,
   RFQC_ID   int null,
   BADC  varchar(1) null,
 INTERNAL_EST    money null
)

insert #BaseElevation(RAW_LAND_CD, MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC,
       MODEL_DESC,phs_code,subp_code, BADC,INTERNAL_EST )

select  RAW_LAND_CD, MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC,
       MODEL_DESC,phs_code,subp_code,BADC,INTERNAL_EST
 from #Elevation


insert #Elevation(RAW_LAND_CD, MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC,MODEL_DESC,
        phs_code,subp_code, BADC,INTERNAL_EST)
select m.RAW_LAND_CD, m.MODEL_NAME_ID, n.MODEL_NAME, m.MODEL_ID,m.MODEL_SDESC,
        m.MODEL_DESC, b.phs_code,b.subp_code, BADC,b.INTERNAL_EST
from HB_MODEL_NAME  n
left outer join HB_MODEL m
on n.MODEL_NAME_ID = m.MODEL_NAME_ID
left outer join #BaseElevation b
on m.MODEL_NAME_ID = b.MODEL_NAME_ID and b.Raw_Land_CD = m.Raw_Land_CD
where BASE_MODEL = 'N' and m.Raw_Land_CD in (Select Raw_Land_CD from #quote)
order by m.MODEL_ID



update #Elevation
--select * 
set BADC = 'C',INTERNAL_EST = he.INTERNAL_EST
from #Elevation    e
left outer join HB_EST  he
on e.MODEL_ID = he.MODEL_ID and he.Raw_Land_CD = e.Raw_Land_CD
and e.phs_code  =  he.phs_code and e.subp_code = he.subp_code
where he.BADC = 'C' and IsNull(he.EstimateLevel,'E') = 'E'

Delete #Elevation
--Select he.BADC, *
from #Elevation    e
inner join HB_EST  he
on e.MODEL_ID = he.MODEL_ID and he.Raw_Land_CD = e.Raw_Land_CD
and e.phs_code  =  he.phs_code and IsNull(e.subp_code,'') = IsNull(he.subp_code,'')
Where he.BADC = 'D' and IsNull(he.EstimateLevel,'E') = 'E'

Insert into #Elevation (RAW_LAND_CD, MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC,MODEL_DESC,
        phs_code,subp_code, BADC,INTERNAL_EST)
select   m.RAW_LAND_CD, m.MODEL_NAME_ID, n.MODEL_NAME, m.MODEL_ID,
        m.MODEL_SDESC, m.MODEL_DESC, p.phs_code, p.subp_code,BADC,p.INTERNAL_EST
from HB_EST   p
left outer join HB_MODEL m
on m.MODEL_ID = p.MODEL_ID and p.Raw_Land_CD = m.Raw_Land_CD
left outer join HB_MODEL_NAME  n
on n.MODEL_NAME_ID = m.MODEL_NAME_ID
where BASE_MODEL = 'N' and 
p.Raw_Land_CD in (Select Raw_Land_CD from #quote) and p.Option_ID = -1 
and IsNull(p.EstimateLevel,'E') = 'E' and p.BADC = 'A'

insert #result (type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
       MODEL_ID, MODEL_NAME,MODEL_SDESC ,MODEL_DESC,phs_code,subp_code,BADC,INTERNAL_EST)
select 'E',q.QuoteID,q.LeadID,q.COMMUNITY_CD,q.RAW_LAND_CD,q.PROJECT_CD,q.MODEL_NAME_ID,
       q.MODEL_ID, e.MODEL_NAME,e.MODEL_SDESC ,e.MODEL_DESC,e.phs_code,e.subp_code,
       e.BADC,e.INTERNAL_EST
--select *
 from #quote  q
Left outer  join #Elevation e
on  q.MODEL_NAME_ID = e.MODEL_NAME_ID and
 q. MODEL_ID = e. MODEL_ID and q.Raw_Land_CD = e.Raw_Land_CD
order by q.LeadID, q.COMMUNITY_CD,q.RAW_LAND_CD,q.PROJECT_CD,q.MODEL_NAME_ID,q.MODEL_ID,
         e.phs_code, e.subp_code


----------------------- Material  (may needed in the future--------
 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#mat '))  
 drop table #mat
 create table #mat
   (
 
    RAW_LAND_CD    int null,
    MODEL_NAME_ID  int   null,
    MODEL_NAME  varchar (50)  null,
    MODEL_ID   int null,
    MODEL_SDESC  varchar(50) null,
    MODEL_DESC   varchar(50) null,
    phs_code    varchar(10)  null,
    subp_code    varchar(10)  null,
    MATGROUP_ID   int null,
    MAT_GROUP     varchar(10) null, 
    MAT_GROUP_DESC  varchar(50) null,
    MATERIAL_ID  int null,
    MAT_CODE   varchar(30) null,
    MAT_SHORT_DESC  varchar(50)  null,
	Quantity money null,
	Internal_Est money null
  )
 
 
 insert  #mat(RAW_LAND_CD, MODEL_NAME_ID, MODEL_NAME,MODEL_ID,MODEL_SDESC, 
         MODEL_DESC,phs_code,subp_code,
          MATGROUP_ID, MAT_GROUP, MAT_GROUP_DESC,
         MATERIAL_ID,MAT_CODE, MAT_SHORT_DESC, Quantity, Internal_Est   )
 
 select  m.RAW_LAND_CD,m.MODEL_NAME_ID, n.MODEL_NAME, m.MODEL_ID,
         m.MODEL_SDESC, m.MODEL_DESC, p.phs_code,  p.subp_code, 
         mat.MATGROUP_ID, mg.MAT_GROUP,  mg.GROUP_DESC,
         p.MATERIAL_ID,mat.MAT_CODE,  mat.MAT_SHORT_DESC, p.qty,
		 p.qty * p.EST_COST  
 --select *
 from HB_MAT_GROUP mg
 join HB_MATERIAL    mat
 on mg.MATGROUP_ID = mat.MATGROUP_ID
 left outer join  HB_EST_MAT   p
 on mat.MATERIAL_ID  = p.MATERIAL_ID 
 join HB_MODEL m
 on m.MODEL_ID = p.MODEL_ID and m.Raw_Land_CD = p.Raw_Land_CD
 join HB_MODEL_NAME  n
 on n.MODEL_NAME_ID = m.MODEL_NAME_ID
 where p.Model_ID <> -1 and m.Raw_Land_CD in (Select Raw_Land_CD from #quote)
 
 
 insert #result (type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
        MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC, phs_code,subp_code,
      MATGROUP_ID, MAT_GROUP, MAT_GROUP_DESC, MATERIAL_ID,MAT_CODE, MAT_SHORT_DESC, Quanity, INTERNAL_EST )
 select 'M',q.QuoteID,q.LeadID,q.COMMUNITY_CD,q.RAW_LAND_CD,q.PROJECT_CD,q.MODEL_NAME_ID,
        q.MODEL_ID, e.MODEL_NAME,e.MODEL_SDESC ,e.MODEL_DESC,e.phs_code,e.subp_code,
        e.MATGROUP_ID, e.MAT_GROUP, e.MAT_GROUP_DESC, e.MATERIAL_ID,e.MAT_CODE, e.MAT_SHORT_DESC,
		e.Quantity, e.Internal_Est
  from #quote  q
 join #mat e
 on  q.MODEL_NAME_ID = e.MODEL_NAME_ID and
  q. MODEL_ID = e. MODEL_ID and q.Raw_Land_CD = e.Raw_Land_CD
 order by q.LeadID, q.COMMUNITY_CD,q.RAW_LAND_CD,q.PROJECT_CD,q.MODEL_NAME_ID,q.MODEL_ID,
          e.phs_code, e.subp_code

----------------------------------Material-------





insert CMS_Contract_Management
              ( type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
               MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC,
               MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,
               MATGROUP_ID, MAT_GROUP, MAT_GROUP_DESC, MATERIAL_ID,MAT_CODE, MAT_SHORT_DESC,BADC,INTERNAL_EST,EXP_DESC,
			   Quanity)
               select type,QuoteID,LeadID,COMMUNITY_CD,RAW_LAND_CD,PROJECT_CD,MODEL_NAME_ID,
               MODEL_ID, MODEL_NAME,MODEL_SDESC,MODEL_DESC,OPTION_ID,SHORT_DESC, 
               MAJ_GROUP_ID, GROUP_DESC,SUB_GROUP_ID, SUB_GROUP_DESC, phs_code,subp_code,
               MATGROUP_ID, MAT_GROUP, MAT_GROUP_DESC, MATERIAL_ID,MAT_CODE, MAT_SHORT_DESC,
               BADC,INTERNAL_EST,EXP_DESC,Quanity from #result 



------------- type = Option--------------------

-- declare @str  varchar(1000),@WebDB varchar(20), @TRDB   varchar(50)
-- select @WebDB = 'web_adam',@TRDB  = 'tr_reflex_demo1'
select @str =' exec  ' + @WebDB  + '..sp_CMS_GetContractInfo_Option ' + ''''+@TRDB+''''   

--print @str
--exec (@str)

-------------------------------------------------












Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ConHistDelTrigger]') and xtype = 'TR')  
 drop Trigger ConHistDelTrigger
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create trigger ConHistDelTrigger
    on ContactHistory
    for delete
as
begin
	delete from ContactHistoryRelation
	where CHR_Type_CN='C' and ContactHistory_ID in (select deleted.id from deleted)
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ContactAptTaskUpdated]') and xtype = 'TR')  
 drop Trigger ContactAptTaskUpdated
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE trigger [dbo].[ContactAptTaskUpdated] on [dbo].[contact_AptsTasks] for update as
begin

/*
	This code updates a schedule task that is linked to either an outlook task or appointment
	
	It will sync:
	Start & End dates, %Complete, Subject & Body
	
	It will modify the ChangedExternal flag to 1 if the following are modified:
	1. StartDate
	2. EndDate
	3. PercentComplete
	
	Records with ChangedExternal set to 1 will be picked up by ReflexServices to recalculate the schedule:
		- Parent %Complete
		- Children start dates (and recursively, their children)	
		
		
	ChangedExternal bit not null default 0,
	ChangedBy varchar (100),
	ChangedDate
*/

	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#OLTasks'))
	drop table #OLTasks
	CREATE TABLE #OLTasks(
		id int not null identity(1,1) primary key,
		TaskID int,
		AptTaskID int,
		ReferenceID int,
		ReferenceType varchar(100),
		CompanyID int,
		Subject varchar(500),
		Body varchar(max),
		StartDate datetime,
		EndDate datetime,
		PercentComplete money,
		ChangedExternal bit,
		ChangedBy varchar(100),
		ChangedDate datetime)
		
	insert #OLTasks(TaskID, AptTaskID, ReferenceID, ReferenceType, CompanyID, Subject, Body, StartDate, EndDate, PercentComplete, 
	ChangedExternal, ChangedBy, ChangedDate)
	select h.ID, i.ID, h.ReferenceID, h.ReferenceType, h.CompanyID, h.Subject, h.Body, i.StartDate, i.EndDate, i.pct_comp, 
	1, 'ContactAptTaskUpdated', GETDATE()
	from inserted i
	left outer join deleted d on d.ID = i.id
	left outer join ContactHistory h on i.contactHistoryID = h.ID
	where h.ContactType_ID in (18,20)
	and h.ReferenceType = 'ST'
	and (
		--isnull(i.StartDate,GETDATE()) != isnull(d.StartDate,getdate())
		--or 
		--isnull(i.EndDate,GETDATE()) != isnull(d.EndDate,getdate())
		--or 
		isnull(i.pct_comp,0) != isnull(d.pct_comp,0)
		)
	
	--now update via company
	declare @CompanyID int, @TreasuryDBName varchar(max), @CompanyServerName varchar(max), @sql varchar(max)
	declare cur cursor for 
	select distinct CompanyID, TreasuryDBName, CompanyServerName
	from #OLTasks ol
	join COMPANIES c on c.AutoID = ol.CompanyID
	open cur
	fetch cur into @CompanyID, @TreasuryDBName, @CompanyServerName
	while @@fetch_status = 0
	begin
		select @sql = 'exec ' + @TreasuryDBName + '..SchedulingUpdateFromExternal ' + cast(@CompanyID as varchar(50))
		print @sql
		exec(@sql)
		
		fetch cur into @CompanyID, @TreasuryDBName, @CompanyServerName
	end
	close cur
	deallocate cur
    
	update ContactHistory set ChangedExternal = 1
	where ID in (select TaskID from #OLTasks)
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ContactHistoryUpdated]') and xtype = 'TR')  
 drop Trigger ContactHistoryUpdated
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE trigger [dbo].[ContactHistoryUpdated] on [dbo].[ContactHistory] for update as
begin

/*
	This code updates a schedule task that is linked to either an outlook task or appointment
	
	It will sync:
	Start & End dates, %Complete, Subject & Body
	
	It will modify the ChangedExternal flag to 1 if the following are modified:
	1. StartDate
	2. EndDate
	3. PercentComplete
	
	Records with ChangedExternal set to 1 will be picked up by ReflexServices to recalculate the schedule:
		- Parent %Complete
		- Children start dates (and recursively, their children)	
		
		
	ChangedExternal bit not null default 0,
	ChangedBy varchar (100),
	ChangedDate
*/
	if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#OLTasks'))
	drop table #OLTasks
	CREATE TABLE #OLTasks(
		id int not null identity(1,1) primary key,
		TaskID int,
		AptTaskID int,
		ReferenceID int,
		ReferenceType varchar(100),
		CompanyID int,
		Subject varchar(500),
		Body varchar(max),
		StartDate datetime,
		EndDate datetime,
		PercentComplete money,
		ChangedExternal bit,
		ChangedBy varchar(100),
		ChangedDate datetime)
		
	insert #OLTasks(TaskID, AptTaskID, ReferenceID, ReferenceType, CompanyID, Subject, Body, StartDate, EndDate, PercentComplete, 
	ChangedExternal, ChangedBy, ChangedDate)
	select 
	i.ID, at.ID, i.ReferenceID, i.ReferenceType, i.CompanyID, i.Subject, i.Body, at.StartDate, at.EndDate, at.pct_comp, 
	0, 'ContactHistoryUpdated', GETDATE()
	from inserted i	
	join deleted d on d.ID = i.ID
	join contact_AptsTasks at on at.contactHistoryID = i.ID
	where i.ContactType_ID in (18,20)
	and i.ReferenceType = 'ST'
	and i.ChangedExternal = d.ChangedExternal
		
	
	--now update via company
	declare @CompanyID int, @TreasuryDBName varchar(max), @CompanyServerName varchar(max), @sql varchar(max)
	declare cur cursor for 
	select distinct CompanyID, TreasuryDBName, CompanyServerName
	from #OLTasks ol
	join COMPANIES c on c.AutoID = ol.CompanyID
	open cur
	fetch cur into @CompanyID, @TreasuryDBName, @CompanyServerName
	while @@fetch_status = 0
	begin
		select @sql = 'exec ' + @TreasuryDBName + '..SchedulingUpdateFromExternal ' + cast(@CompanyID as varchar(50))
		print @sql
		exec(@sql)
		
		fetch cur into @CompanyID, @TreasuryDBName, @CompanyServerName
	end
	close cur
	deallocate cur    
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[InsertContextUsage]') and xtype = 'TR')  
 drop Trigger InsertContextUsage
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
Create TRIGGER dbo.InsertContextUsage 
   ON  dbo.ContextItem 
   AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

    Declare @ContextGroupID int
	Select @ContextGroupID = ContextGroupID from inserted

	If(IsNull(@ContextGroupID,-1) <> -1)
	Begin
		Insert Into ContextUsage(ContextGroupID,ContextItemID)
		Select ContextGroupID,ID From inserted
	End

END


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[NoteDelTrigger]') and xtype = 'TR')  
 drop Trigger NoteDelTrigger
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

create trigger NoteDelTrigger
    on Notes
    for delete
as
begin
	delete from ContactHistoryRelation
	where CHR_Type_CN='N' and ContactHistory_ID in (select deleted.id from deleted)
end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scLeadUpdate]') and xtype = 'TR')  
 drop Trigger scLeadUpdate
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE   TRIGGER scLeadUpdate
ON dbo.scLead
FOR UPDATE, INSERT
AS
BEGIN
	UPDATE scLead
	SET DateModified = GetDate()
	WHERE ID IN (SELECT ID FROM INSERTED)
END



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scPhone_SetDefaultFlag]') and xtype = 'TR')  
 drop Trigger scPhone_SetDefaultFlag
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE  TRIGGER scPhone_SetDefaultFlag ON [dbo].[scPhone] 
FOR INSERT, UPDATE
AS
--this makes sure that there is always one phone entry marked as default. and no more than one
DECLARE @DefaultYN		bit
DECLARE @LeadID		int
DECLARE @DefaultCount		int
SELECT	@DefaultYN	= DefaultYN,
	@LeadID	= LeadID
FROM	INSERTED
IF @DefaultYN = 1
BEGIN
	UPDATE scPhone
	SET 
	DefaultYN = 0 
	WHERE ID <> (SELECT ID FROM INSERTED)
END
SELECT	@DefaultCount = COUNT(*)
FROM	scPhone
WHERE	LeadID = @LeadID
AND DefaultYN = 1
IF @DefaultCount = 0 
BEGIN
	UPDATE	scPhone
	SET	DefaultYN = 1
	WHERE	ID = ( SELECT ID FROM INSERTED ) 
END



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scQuote_Trigger1]') and xtype = 'TR')  
 drop Trigger scQuote_Trigger1
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE TRIGGER scQuote_Trigger1
ON dbo.scQuote
FOR  UPDATE, INSERT
AS
	UPDATE	scQuote
	SET	Modified =getdate()
	WHERE	ID IN ( SELECT ID FROM Inserted )



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scStepInsert]') and xtype = 'TR')  
 drop Trigger scStepInsert
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE TRIGGER [dbo].[scStepInsert] ON [dbo].[scStep] 
FOR INSERT
AS
BEGIN
	UPDATE scStep
	SET StepNumber = (SELECT IsNull(MAX(StepNumber), 0)+1 FROM scStep WHERE ProcessID IN (SELECT ProcessID FROM INSERTED) AND ID <> (SELECT ID FROM INSERTED))
	WHERE ID IN (SELECT ID FROM INSERTED)
END




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scTAddress_SetDefaultFlag]') and xtype = 'TR')  
 drop Trigger scTAddress_SetDefaultFlag
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE TRIGGER scTAddress_SetDefaultFlag ON dbo.scAddress 
FOR INSERT, UPDATE
AS
--this makes sure that there is always one phone entry marked as default. and no more than one
DECLARE @DefaultYN		bit
DECLARE @LeadID		int
DECLARE @DefaultCount		int
SELECT	@DefaultYN	= DefaultYN,
	@LeadID	= LeadID
FROM	INSERTED
IF @DefaultYN = 1
BEGIN
	UPDATE scAddress
	SET 
	DefaultYN = 0 
	WHERE ID <> (SELECT ID FROM INSERTED)
END
SELECT	@DefaultCount = COUNT(*)
FROM	scAddress
WHERE	LeadID = @LeadID
AND DefaultYN = 1
IF @DefaultCount = 0 
BEGIN
	UPDATE	scAddress
	SET	DefaultYN = 1
	WHERE	ID = ( SELECT ID FROM INSERTED ) 
END



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scTEmail_SetDefaultFlag]') and xtype = 'TR')  
 drop Trigger scTEmail_SetDefaultFlag
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE TRIGGER scTEmail_SetDefaultFlag ON [dbo].[scEmail] 
FOR INSERT, UPDATE
AS
--this makes sure that there is always one email entry marked as default. and no more than one
DECLARE @DefaultYN		bit
DECLARE @LeadID		int
DECLARE @DefaultCount		int
SELECT	@DefaultYN	= DefaultYN,
	@LeadID	= LeadID
FROM	INSERTED
IF @DefaultYN = 1
BEGIN
	UPDATE scEmail
	SET 
	DefaultYN = 0 
	WHERE ID <> (SELECT ID FROM INSERTED)
END
SELECT	@DefaultCount = COUNT(*)
FROM	scEmail
WHERE	LeadID = @LeadID
AND DefaultYN = 1
IF @DefaultCount = 0 
BEGIN
	UPDATE	scEmail
	SET	DefaultYN = 1
	WHERE	ID = ( SELECT ID FROM INSERTED ) 
END



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_contact_aptstasks_updated]') and xtype = 'TR')  
 drop Trigger tr_contact_aptstasks_updated
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
create TRIGGER tr_contact_aptstasks_updated ON contact_aptstasks for update AS 
BEGIN
	/*
		Robg June 2012
		This tracks the previous mailbox owner of this item so that it may be deleted when re-assigned
	*/
	
	if update(AssignedTo)
		update contact_aptstasks set PreviousAssigned = d.AssignedTo
		from contact_aptstasks c 
		join deleted d on d.id = c.id	
END


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_DashboardDeleteMSPTASK]') and xtype = 'TR')  
 drop Trigger tr_DashboardDeleteMSPTASK
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE TRIGGER tr_DashboardDeleteMSPTASK
ON Working_NavBarProjectTaskAccess
FOR DELETE
AS 
BEGIN	
 declare @Proj_ID int, @PCID varchar(500)
 select @Proj_ID = Proj_ID, @PCID = PCID
 from deleted
 
-- delete Working_NavBarProjectTaskAccessDel
-- where PCID = @PCID
 
 insert Working_NavBarProjectTaskAccessDel(PCID, PROJ_ID, TASK_UID, TASK_ID)
 select PCID, PROJ_ID, TASK_UID, TASK_ID     
 from deleted

--   delete msp_tasks
--   where proj_id = @proj_id
--   and TASK_UID in (select task_UID from Working_NavBarProjectTaskAccessDel)
end

-- 
-- select * from Working_NavBarProjectTaskAccessDel
-- 
-- select * from msp_tasks




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_DashboardUpdateToMSPTASK]') and xtype = 'TR')  
 drop Trigger tr_DashboardUpdateToMSPTASK
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE TRIGGER tr_DashboardUpdateToMSPTASK
ON Working_NavBarProjectTaskAccess
FOR update
AS 
BEGIN	
 update MSP_TASKS
 set TASK_IS_MILESTONE=i.TASK_IS_MILESTONE, TASK_IS_CRITICAL=i.TASK_IS_CRITICAL,
 TASK_IS_SUMMARY=i.TASK_IS_SUMMARY, TASK_IS_RECURRING=i.TASK_IS_RECURRING,
 TASK_HAS_NOTES=i.TASK_HAS_NOTES,	TASK_OUTLINE_LEVEL=i.TASK_OUTLINE_LEVEL, 
 TASK_START_DATE=i.TASK_START_DATE, TASK_FINISH_DATE=i.TASK_FINISH_DATE, 
 TASK_ACT_START=i.TASK_ACT_START, TASK_ACT_FINISH=i.TASK_ACT_FINISH, 
	TASK_PRIORITY=i.TASK_PRIORITY, TASK_PCT_COMP=i.TASK_PCT_COMP, 
 TASK_DEADLINE=i.TASK_DEADLINE, TASK_COST=i.TASK_COST, TASK_FIXED_COST=i.TASK_FIXED_COST,
TASK_NAME=i.TASK_NAME
	from MSP_TASKS t
 join Inserted i
 on i.PROJ_ID = t.PROJ_ID
 and i.TASK_UID = t.TASK_UID

declare @r int
select @r = 1

update MSP_Dashboard_Tasks
set DS_ID = i.DS_ID
from MSP_Dashboard_Tasks t
 join Inserted i
 on i.PROJ_ID = t.PROJ_ID
 and i.TASK_UID = t.TASK_UID

end



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_DeleteContact]') and xtype = 'TR')  
 drop Trigger tr_DeleteContact
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE TRIGGER [dbo].[tr_DeleteContact]
ON [dbo].[Contact]
FOR delete
AS 
BEGIN	
 insert into [Contact_Deleted]([ID],[Type],[CompanyAutoID],[ExternalReference],[Windows_Login],[Modal_User],[FirstName],[LastName],[KnownAs],	[Greeting],
	[DefaultAddress],[Password],[AddressNarrative],[BusinessStreet],[BusinessCity],[BusinessPostalCode],[BusinessState],
	[BusinessCountry],[HomeStreet],[HomeCity],[HomePostalCode],[HomeState],[HomeCountry],[OtherStreet],[OtherCity],
	[OtherPostalCode],[OtherState],[OtherCountry],[PhoneNarrative],[PrimaryTelephoneNumber],[AssistantTelephoneNumber],
	[BusinessTelephoneNumber],[Business2TelephoneNumber],[HomeTelephoneNumber],[Home2TelephoneNumber],[MobileTelephoneNumber],
	[OtherTelephoneNumber],[PagerNumber],[FaxNarrative],[HomeFaxNumber],[BusinessFaxNumber],[OtherFaxNumber],[EmailNarrative],
	[Email1Address],[Email1DisplayName],[Email2Address],[Email2DisplayName],[Email3Address],[Email3DisplayName],[CorporateWebsite],
	[PersonalEmailOnly],[DefaultRFQContact],[DefaultAdHome],[Owner_ID],[Title],[JobTitle],[salesperson_access],[InActive],
	[LoginName],[Nickname],[SpousesName],[Suffix],[Birthday],[Anniversary],[BusinessCompany],[IMAddress],[IsRealtor],
	[Realtor],[CheckType],[Suspended],[IsArchitect],[IsEngineer],[IsEstimator],[IsFieldForman],[IsGenContractor],[IsProjAccountant],
	[IsProjManager],[IsSalesPerson],[business_phone_extention],[isPropertyManager],[isBuildingManager],[isMaintenanceManager],
	[isPropertyAccountant],[Proj_Manager_Manager_ID],[DateDeleted])
	
	select [ID],[Type],[CompanyAutoID],[ExternalReference],[Windows_Login],[Modal_User],[FirstName],[LastName],[KnownAs],	[Greeting],
	[DefaultAddress],[Password],[AddressNarrative],[BusinessStreet],[BusinessCity],[BusinessPostalCode],[BusinessState],
	[BusinessCountry],[HomeStreet],[HomeCity],[HomePostalCode],[HomeState],[HomeCountry],[OtherStreet],[OtherCity],
	[OtherPostalCode],[OtherState],[OtherCountry],[PhoneNarrative],[PrimaryTelephoneNumber],[AssistantTelephoneNumber],
	[BusinessTelephoneNumber],[Business2TelephoneNumber],[HomeTelephoneNumber],[Home2TelephoneNumber],[MobileTelephoneNumber],
	[OtherTelephoneNumber],[PagerNumber],[FaxNarrative],[HomeFaxNumber],[BusinessFaxNumber],[OtherFaxNumber],[EmailNarrative],
	[Email1Address],[Email1DisplayName],[Email2Address],[Email2DisplayName],[Email3Address],[Email3DisplayName],[CorporateWebsite],
	[PersonalEmailOnly],[DefaultRFQContact],[DefaultAdHome],[Owner_ID],[Title],[JobTitle],[salesperson_access],[InActive],
	[LoginName],[Nickname],[SpousesName],[Suffix],[Birthday],[Anniversary],[BusinessCompany],[IMAddress],[IsRealtor],
	[Realtor],[CheckType],[Suspended],[IsArchitect],[IsEngineer],[IsEstimator],[IsFieldForman],[IsGenContractor],[IsProjAccountant],
	[IsProjManager],[IsSalesPerson],[business_phone_extention],[isPropertyManager],[isBuildingManager],[isMaintenanceManager],
	[isPropertyAccountant],[Proj_Manager_Manager_ID],getdate()
	from deleted
end









Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_DeleteMSPProject]') and xtype = 'TR')  
 drop Trigger tr_DeleteMSPProject
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





CREATE     TRIGGER tr_DeleteMSPProject
ON MSP_PROJECTS
FOR delete
AS 
BEGIN	
 insert MSP_Log(Operation, LogDate, PROJ_MACHINE_ID, Project_ID, Project_Name, 
 Task_UID, Task_name)
 select 'Delete Project', getdate(), PROJ_MACHINE_ID, i.PROJ_ID, PROJ_NAME, null, null
 from deleted i



 --check to see if it relates to old project

/* the following doesn't work anymore ...  (vers msp2003)
 declare @DebugCreateDate datetime, @CreationDate datetime, @Inserted int, @Deleted int

 select @CreationDate = PROJ_CREATION_DATE, @Deleted = Proj_Id
 from deleted

 select @Inserted = Proj_ID
 from msp_projects
 where datepart(year, PROJ_CREATION_DATE) = datepart(year, @CreationDate)
 and datepart(month, PROJ_CREATION_DATE) = datepart(month, @CreationDate)
 and datepart(day, PROJ_CREATION_DATE) = datepart(day, @CreationDate)
 and datepart(hh, PROJ_CREATION_DATE) = datepart(hh, @CreationDate)
 and datepart(mi, PROJ_CREATION_DATE) = datepart(mi, @CreationDate)
 and Proj_ID <> @Deleted

 select @DebugCreateDate = PROJ_CREATION_DATE
 from msp_projects
 where Proj_ID <> @Deleted

insert Tracker select @DebugCreateDate
insert Tracker select @CreationDate
insert Tracker select 'insert' + cast(@Inserted as varchar(500))
insert Tracker select 'delete' + cast(@Deleted as varchar(500))
*/

 declare @Inserted int, @Deleted int, @ProjectName varchar(1000)

 select @Deleted = Proj_Id, @ProjectName = Proj_name
 from deleted

 select @Inserted = Proj_ID
 from msp_projects
 where @ProjectName = Proj_name + '_TEMP' 
 and Proj_ID <> @Deleted




 if isNull(@Inserted,-1) <> -1
 begin
  -- this is going to be removed and re-association must occur
--   update msp_dashboard_projects
--   set proj_id = @Inserted
--   where proj_id = @Deleted
-- 
--   update msp_dashboard_tasks
--   set proj_id = @Inserted
--   where proj_id = @Deleted

  delete Working_InsertStatus
  where Proj_ID = @Inserted or Proj_ID = @Deleted

  exec sp_InsertMSPTASKChecker

 end
 
 
end











































Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_DeleteMSPTASK]') and xtype = 'TR')  
 drop Trigger tr_DeleteMSPTASK
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE         TRIGGER tr_DeleteMSPTASK
ON dbo.MSP_TASKS
FOR delete
AS 
BEGIN	
 insert MSP_Log(Operation, LogDate, PROJ_MACHINE_ID, Project_ID, Project_Name, 
 Task_UID, Task_name)
 select 'Delete Task', getdate(), PROJ_MACHINE_ID, i.PROJ_ID, PROJ_NAME, Task_UID, Task_name
 from deleted i
 join MSP_projects p
 on p.PROJ_ID = i.PROJ_ID

 
 declare @is_Temp varchar(10)

 select @is_Temp = substring(max(PROJ_NAME), len(max(PROJ_NAME)) - 4, len(max(PROJ_NAME)))
 from deleted i
 join MSP_projects p
 on p.PROJ_ID = i.PROJ_ID

 if isNull(@is_Temp,'') <> '_Temp'
 begin
--   delete msp_dashboard_tasks 
--   where MDT_ID in (select MDT_ID from deleted d where d.proj_id = proj_id and d.task_uid = task_uid)

 update OutlookManagerNotification
 set 
 Mgr_TriggerUDI = 'D', Mgr_SeenItYN = 'N'  
 from OutlookManagerNotification o
 join msp_dashboard_tasks dt
 on dt.mdt_id = o.LinkID
 and o.LinkType = 'MSP_Dashboard_Tasks'
 join deleted d  
 on dt.Proj_ID = d.Proj_id
 and dt.Task_uid = d.Task_uid
 end



end






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_DeleteRelation]') and xtype = 'TR')  
 drop Trigger tr_DeleteRelation
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


create TRIGGER [dbo].[tr_DeleteRelation]
ON [dbo].[Relations]
FOR delete
AS 
BEGIN

insert into [Relations_Deleted]([ID],[Target],[TargetID],[ItemType],[ItemID],[CompanyID],[DateDeleted])
select [ID],[Target],[TargetID],[ItemType],[ItemID],[CompanyID],GETDATE()
from deleted



end

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_DeleteSCQuotecustom]') and xtype = 'TR')  
 drop Trigger tr_DeleteSCQuotecustom
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE TRIGGER [tr_DeleteSCQuotecustom]
ON [dbo].[scQuoteCustom]
FOR Delete
AS 
BEGIN	

 declare @ShortDescription varchar(80), @Description varchar(8000), 
 @Price varchar(100), @Status varchar(100), @QuoteID int, @CustomID int
 
 select @ShortDescription = ShortDescription, 
 @Description = [Description], @Price = cast(Price as varchar(100)), @QuoteID = QuoteID,
 @CustomID = id
 from deleted
 
 select @Status = Status
 from SCQuote
 where [id] = @QuoteID
 
 if @Status = 'S'
 begin
    declare @S varchar(8000)
    select @S = 'The custom option, ' + @ShortDescription + '(' + @Price + ')' +' was deselected. The particulars are ' + @Description + '.'

 		 declare @MaxDate datetime, @AuthorLog int, @Authorization varchar(100)
 		
	 	 select @MaxDate = max(SessionDate)
		  from scAuthorizeLog
		  where QuoteID = @QuoteID
		
	 	 select @AuthorLog = [id]
	 	 from scAuthorizeLog
		  where QuoteID = @QuoteID
		  and SessionDate = @MaxDate 

		 Declare @AddendumNum int
		 Select @AddendumNum = Case When max(IsNull(AddendumNum,0)) = 0 then 1 else max(IsNull(AddendumNum,0)) end from scAuthorizeLog Where QuoteID = @QuoteID

 		 insert scQuoteChangeLog([AuthorLog], [DidWhat], [WhichLogTable], [ExactlyWhen], AddendumNum)
	 	 select @AuthorLog, @S, 'scQuoteCustom', getdate(),@AddendumNum
		
		  declare @Id int
		  select @Id = @@Identity

    insert scQuoteCustom_log
    (QuoteID, ChangeLogID, ID, ShortDescription, Description, Price)
    select @QuoteID, @Id, @CustomID, @ShortDescription, @Description, cast(@Price as money)

 end

end 








Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_DeleteSCQuoteStructural]') and xtype = 'TR')  
 drop Trigger tr_DeleteSCQuoteStructural
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE  TRIGGER tr_DeleteSCQuoteStructural
ON SCQuoteStructural
FOR delete
AS 
BEGIN	


 declare @QuoteID int, @Opt_ID int, @CompanyID int, @Status char(1), @UpgradeID varchar(100),	
 @Price varchar(100),	@Pricem money

 select @QuoteID = QuoteID, @UpgradeID = Option_ID,	
 @Opt_ID = ID,	@Price = cast(Net as varchar(100)),	@Pricem = Net
 from deleted

 select @CompanyID = CompanyID, @Status = Status
 from scQuote
 where id = @QuoteID

 if @Status = 'S'
 begin

		 declare @MaxDate datetime, @AuthorLog int, @Authorization varchar(100)
		
		 select @MaxDate = max(SessionDate)
		 from scAuthorizeLog
		 where QuoteID = @QuoteID
		
		 select @AuthorLog = [id]
		 from scAuthorizeLog
		 where QuoteID = @QuoteID
		 and SessionDate = @MaxDate 


		  declare @Company varchar(500), @SubGroup varchar(500),
		  @newOptionDesc varchar(5000)

		  select @Company = TreasuryDBName
		  from companies
		  where AutoID = @CompanyID
		
		  if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ResultTRs'))
		  drop table #ResultTRs
		  create table #ResultTRs(result varchar(50) null)

		  exec('
		  insert #ResultTRs
				SELECT	SUB_GROUP_DESC
		  from ' + @Company + '..HB_Options o
    join ' + @Company + '..hb_opt_sub_group s
    on o.SUB_GROUP_ID = s.SUB_GROUP_ID
		  where Option_ID = ' + @UpgradeID)
		  select @SubGroup = result
		  from #ResultTRs
		  delete #ResultTRs


		  exec('
		  insert #ResultTRs
		  SELECT	Short_DESC
		  from ' + @Company + '..HB_Options
		  where Option_ID = ' + @UpgradeID)
		  select @newOptionDesc = result
		  from #ResultTRs
		  delete #ResultTRs
		  declare @S varchar(8000)
		  select @S = 'The ' + @SubGroup + ' upgrade of : ' + @newOptionDesc + '(' + @Price + ') was deselected'

		  insert scQuoteChangeLog([AuthorLog], [DidWhat], [WhichLogTable], [ExactlyWhen])
		  select @AuthorLog, @S, 'scQuoteStructural', getdate()
		
		  declare @Id int
		  select @Id = @@Identity		

		  insert scQuoteStructural_log 
    (QuoteID, ChangeLogID, [id], Option_ID, Net)
		  select 
    @QuoteID, @Id, @Opt_ID, @UpgradeID, @Pricem


 end
 
end






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_DeleteSCQuoteUpgrade]') and xtype = 'TR')  
 drop Trigger tr_DeleteSCQuoteUpgrade
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


create TRIGGER tr_DeleteSCQuoteUpgrade
ON SCQuoteUpgrade
FOR delete
AS 
BEGIN	

 declare @QuoteID int, @Opt_ID int, @CompanyID int, @Status char(1), @UpgradeID varchar(100),	
 @Price varchar(100),	@Pricem money

 select @QuoteID = QuoteID, @UpgradeID = UpgradeID,	
 @Opt_ID = ID,	@Price = cast(Price as varchar(100)),	@Pricem = Price
 from deleted

 select @CompanyID = CompanyID, @Status = Status
 from scQuote
 where id = @QuoteID

 if @Status = 'S'
 begin

		 declare @MaxDate datetime, @AuthorLog int, @Authorization varchar(100)
		
		 select @MaxDate = max(SessionDate)
		 from scAuthorizeLog
		 where QuoteID = @QuoteID
		
		 select @AuthorLog = [id]
		 from scAuthorizeLog
		 where QuoteID = @QuoteID
		 and SessionDate = @MaxDate 


		  declare @Company varchar(500), @SubGroup varchar(500),
		  @newOptionDesc varchar(5000)

		  select @Company = TreasuryDBName
		  from companies
		  where AutoID = @CompanyID
		
		  if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ResultTRu'))
		  drop table #ResultTRu
		  create table #ResultTRu(result varchar(50) null)

		  exec('
		  insert #ResultTRu
				SELECT	SUB_GROUP_DESC
		  from ' + @Company + '..HB_Options o
    join ' + @Company + '..hb_opt_sub_group s
    on o.SUB_GROUP_ID = s.SUB_GROUP_ID
		  where Option_ID = ' + @UpgradeID)
		  select @SubGroup = result
		  from #ResultTRu
		  delete #ResultTRu


		  exec('
		  insert #ResultTRu
		  SELECT	Short_DESC
		  from ' + @Company + '..HB_Options
		  where Option_ID = ' + @UpgradeID)
		  select @newOptionDesc = result
		  from #ResultTRu
		  delete #ResultTRu
		  declare @S varchar(8000)
		  select @S = 'The ' + @SubGroup + ' upgrade of : ' + @newOptionDesc + '(' + @Price + ') was deselected'

		  insert scQuoteChangeLog([AuthorLog], [DidWhat], [WhichLogTable], [ExactlyWhen])
		  select @AuthorLog, @S, 'scQuoteUpgrade', getdate()
		
		  declare @Id int
		  select @Id = @@Identity		

		  insert scQuoteUpgrade_log 
    (QuoteID, ChangeLogID, [id], UpgradeID, Price)
		  select 
    @QuoteID, @Id, @Opt_ID, @UpgradeID, @Pricem


 end
 
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_DeleteSQQuoteOption]') and xtype = 'TR')  
 drop Trigger tr_DeleteSQQuoteOption
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE Trigger [tr_DeleteSQQuoteOption] On [dbo].[scQuoteOptions]
For Delete
AS

 declare @QuoteID int, @Option_ID int, @CompanyID int, @Status char(1), @Sub_ID int

 Select @QuoteID = QuoteID, @Option_ID = Option_ID, @Sub_ID = Sub_ID
 From deleted

 select @CompanyID = CompanyID, @Status = Status
 from scQuote where id = @QuoteID

 if @Status = 'S'
   begin
	
	declare @MaxDate datetime, @AuthorLog int, @Authorization varchar(100)
	
	select @MaxDate = max(SessionDate)
	from scAuthorizeLog
	where QuoteID = @QuoteID
	
	select @AuthorLog = [id]
	from scAuthorizeLog
	where QuoteID = @QuoteID and SessionDate = @MaxDate

	declare @Short_Desc varchar(50), @SubGroupDesc varchar(50)

	Select @Short_Desc = SHORT_DESC
	From HB_OPTIONS Where OPTION_ID = @Option_ID

	Select @SubGroupDesc = SUB_GROUP_DESC
	From HB_OPT_SUB_GROUP Where SUB_GROUP_ID = @Sub_ID

	Select @SubGroupDesc as SubGroupDesc, @Short_Desc as Short_Desc

	declare @DidWhat varchar(8000)
	Select @DidWhat = 'New Option ' + @SubGroupDesc + ', ' + ISNULL(@Short_Desc, ' ') + ' Was Removed'
	
	Declare @AddendumNum int
	Select @AddendumNum = Case When max(IsNull(AddendumNum,0)) = 0 then 1 else max(IsNull(AddendumNum,0)) end from scAuthorizeLog Where QuoteID = @QuoteID

	insert scQuoteChangeLog([AuthorLog], [DidWhat], [WhichLogTable], [ExactlyWhen], AddendumNum)
	select @AuthorLog, @DidWhat, 'scQuoteOptions', getdate(),@AddendumNum

	declare @Id int
	select @Id = @@Identity

	insert into scQuoteOptions_Log (ChangeLogID, QuoteOptionsID, QuoteID, Alternate, HB_Elv_Opt_Id, 
										Option_ID, OriginalOption_ID, Major_ID, Sub_ID, UnitOfMeasure, 
										IsStructural, UnitQty, UnitPrice, UnitTotal, AllowanceQty, AllowancePrice, 
										AllowanceTotal, ReplaceId, PayableTotal, DepositPercent, DepositTotal, Removed)

	Select @Id, ID, QuoteID, Alternate, HB_Elv_Opt_Id, Option_ID, OriginalOption_ID, Major_ID, Sub_ID, UnitOfMeasure,
		   IsStructural, UnitQty, UnitPrice, UnitTotal, AllowanceQty, AllowancePrice, AllowanceTotal, ReplaceId,
		   PayableTotal, DepositPercent, DepositTotal, Removed
	From deleted
  end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_InsertContact]') and xtype = 'TR')  
 drop Trigger tr_InsertContact
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE TRIGGER [dbo].[tr_InsertContact]
ON [dbo].[Contact]
FOR insert
AS 
BEGIN	
 insert OutlookManagerNotification(LinkID, LinkType, Mgr_TriggerUDI, Mgr_SeenItYN, Mgr_TaskCompleteYN)
 select ID, 'Contact', 'I', 'Y', 'N' --just need to create the record (don't sync until saved)
 from inserted
end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_InsertMSPProject]') and xtype = 'TR')  
 drop Trigger tr_InsertMSPProject
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE TRIGGER tr_InsertMSPProject
ON MSP_PROJECTS
FOR insert
AS 
BEGIN	
 insert MSP_Log(Operation, LogDate, PROJ_MACHINE_ID, Project_ID, Project_Name, 
 Task_UID, Task_name)
 select 'Insert Project', getdate(), PROJ_MACHINE_ID, i.PROJ_ID, PROJ_NAME, null, null
 from inserted i

/* notes from bert
 need to disable the task insert trigger if the project is being copied over
 msp sometimes re-writes an entire project by copying all relevant data from proj 1 to proj 2

 first the orig project is renamed to "name" + "_temp"
 second, the new project is inserted

 the way to know if this is a copy over is that at this point the creation date of the inserted
 will match one in the db
*/
 --check to see if it relates to old project
 declare @CreationDate datetime, @Inserted int, @Original int

 select @CreationDate = PROJ_CREATION_DATE, @Inserted = Proj_Id
 from inserted

 insert Working_InsertStatus
 select 'Copy Over', @Inserted



 
 
end
































Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_InsertMSPTASK]') and xtype = 'TR')  
 drop Trigger tr_InsertMSPTASK
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE TRIGGER [dbo].[tr_InsertMSPTASK]
ON [dbo].[MSP_TASKS]
FOR insert
AS 
BEGIN	
 insert MSP_Log(Operation, LogDate, PROJ_MACHINE_ID, Project_ID, Project_Name, 
 Task_UID, Task_name)
 select 'Insert Task', getdate(), PROJ_MACHINE_ID, i.PROJ_ID, PROJ_NAME, Task_UID, Task_name
 from inserted i
 join MSP_projects p
 on p.PROJ_ID = i.PROJ_ID

 --find parent if this occurred outside of the dashboard (also find out if it's even dashboard relevant
 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#NewMSPTasks'))
 drop table #NewMSPTasks
 create table #NewMSPTasks(
 Proj_ID int,
 Task_UID int,
 TASK_OUTLINE_NUM varchar(255),
 PARENT_TASK_OUTLINE_NUM varchar(255) null,
 IsDone bit,
 Link_ID int null,
 Dashboard_TaskGroupID int null,
 TaskType varchar(50) null,
 SourceFlavour varchar(50) null,
 CodeType char(1) null,
 DMC_ID int null,
LeadID int)


 insert #NewMSPTasks(Proj_ID, Task_UID, TASK_OUTLINE_NUM, PARENT_TASK_OUTLINE_NUM, IsDone, Link_ID, DMC_ID)
 select t.Proj_ID, t.Task_UID, TASK_OUTLINE_NUM, TASK_OUTLINE_NUM, 0, Link_ID, DMC_ID
 from inserted t
 left outer join msp_dashboard_tasks d
 on t.Proj_id = d.Proj_id
 and t.Task_UID = d.Task_UID
 where d.Task_UID is null
 and isNUll(t.Task_UID,-1) > 0
 and t.Proj_ID not in (select Proj_ID from Working_InsertStatus)
 and isNull(TASK_OUTLINE_NUM,'') <> ''

 declare @Count int
 select @Count = count(*)
 from #NewMSPTasks
 where IsDone = 0

delete tracker


 while @Count > 0 
 begin 
  update #NewMSPTasks
  set PARENT_TASK_OUTLINE_NUM = substring(PARENT_TASK_OUTLINE_NUM, 1, len(PARENT_TASK_OUTLINE_NUM) - 1)
  where IsDone = 0

  update #NewMSPTasks
  set IsDone = case 
  when substring(PARENT_TASK_OUTLINE_NUM, len(PARENT_TASK_OUTLINE_NUM), len(PARENT_TASK_OUTLINE_NUM)) = '.' then 1 else 0 end,
  PARENT_TASK_OUTLINE_NUM = case 
  when substring(PARENT_TASK_OUTLINE_NUM, len(PARENT_TASK_OUTLINE_NUM), len(PARENT_TASK_OUTLINE_NUM)) = '.' then 
  substring(PARENT_TASK_OUTLINE_NUM, 1, len(PARENT_TASK_OUTLINE_NUM)-1) else PARENT_TASK_OUTLINE_NUM end
  where IsDone = 0

  update #NewMSPTasks
  set IsDone = case 
  when len(PARENT_TASK_OUTLINE_NUM) = 0 then 1 else 0 end
  where IsDone = 0  

  --now check to see if parent has dashboard info (could be a child of a new child)
  update #NewMSPTasks
  set Link_ID = d.Link_ID,
  Dashboard_TaskGroupID = d.Dashboard_TaskGroupID,
  TaskType = d.TaskType,
  SourceFlavour = d.SourceFlavour,
  DMC_ID = d.DMC_ID,
  CodeType = case 
   when d.CodeType = 'C' then 
     case when d.SourceFlavour = 'nbgInternal' then 'T' else 'P' end
			when d.CodeType = 'P' then 'P' 
			when d.CodeType = 'M' then 'T'
   when d.CodeType = 'T' then 'T'
   else 'T' end
  from #NewMSPTasks t
  join MSP_Tasks mt
  on t.PARENT_TASK_OUTLINE_NUM = mt.TASK_OUTLINE_NUM
  and t.proj_id = mt.proj_id
  join msp_dashboard_tasks d
  on mt.Proj_id = d.Proj_id
  and mt.Task_UID = d.Task_UID
  where isNUll(t.Task_UID,-1) > 0
  
  insert tracker
  select cast(@count as varchar(10)) + ' - ' + cast(Link_ID as varchar(20))
  from #NewMSPTasks

  select @Count = count(*)
  from #NewMSPTasks
  where IsDone = 0  
 end

insert msp_dashboard_tasks(PROJ_ID, Link_ID, Dashboard_TaskGroupID,
  TASK_UID, TaskType, SourceFlavour, CodeType, DS_ID, DMC_ID)
select Proj_ID, Link_ID, Dashboard_TaskGroupID, Task_UID, TaskType, 
SourceFlavour, CodeType, 1, DMC_ID
from #NewMSPTasks

declare @MDT_ID int
select @MDT_ID = isnull(max(MDT_ID),0)
from msp_dashboard_tasks


insert OutlookManagerNotification(LinkID, LinkTYpe, Mgr_TriggerUDI, Mgr_SeenItYN, Mgr_TaskCompleteYN)
select @MDT_ID, 'MSP_Dashboard_Tasks', 'I', 'N', 'N'


 
 
end


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_InsertSCQuoteAttributes]') and xtype = 'TR')  
 drop Trigger tr_InsertSCQuoteAttributes
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE    TRIGGER [tr_InsertSCQuoteAttributes]
ON [dbo].[scAttributes]
FOR insert
AS 
BEGIN	

 declare @QuoteID int, @Option_ID int, @OATYP_ID varchar(50), @Attr_ID int, @DES varchar(50),
 @CompanyID int, @Status char(1)

 select @QuoteID = QuoteID, @Option_ID = Option_ID,	@OATYP_ID = OATYP_ID, 
 @Attr_ID = Attr_ID, @DES = DES
 from inserted

 select @CompanyID = CompanyID, @Status = Status
 from scQuote
 where id = @QuoteID

 if @Status = 'S'
 begin

		 declare @MaxDate datetime, @AuthorLog int, @Authorization varchar(100)
		
		 select @MaxDate = max(SessionDate)
		 from scAuthorizeLog
		 where QuoteID = @QuoteID
		
		 select @AuthorLog = [id]
		 from scAuthorizeLog
		 where QuoteID = @QuoteID
		 and SessionDate = @MaxDate 


		  declare @Company varchar(500), @SubGroup varchar(500),
		  @AttGroup varchar(5000), @SQLStr varchar(8000)

-- 		  select @Company = TreasuryDBName
-- 		  from companies
-- 		  where AutoID = @CompanyID
		  Set @Company = ' '
		
		  if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ResultTRs'))
		  drop table #ResultTRs
		  create table #ResultTRs(result varchar(50) null)

		  insert #ResultTRs
		  SELECT SUB_GROUP_DESC
		  from HB_Options o join hb_opt_sub_group s on o.SUB_GROUP_ID = s.SUB_GROUP_ID where Option_ID = @Option_ID
--	select @SQLStr = '
--		  insert #ResultTRs
--				SELECT	SUB_GROUP_DESC
--		  from ' + @Company + '..HB_Options o
--    join ' + @Company + '..hb_opt_sub_group s
--    on o.SUB_GROUP_ID = s.SUB_GROUP_ID
--		  where Option_ID = ' + cast(@Option_ID as varchar(100))
--print @SqlStr
--exec(@SqlStr)
		  select @SubGroup = result
		  from #ResultTRs
		  delete #ResultTRs
print 'go2'

		 insert #ResultTRs
		 select OATYP_DESC
		 from hb_opt_attr_type
		 where OATYP_ID = Convert(int,@OATYP_ID)
--	select @SQLStr = '
--		  insert #ResultTRs
--    select OATYP_DESC
--    from ' + @Company + '..hb_opt_attr_type
--    where OATYP_ID = ' + @OATYP_ID
--print @SqlStr
--exec(@SqlStr)

		  select @AttGroup = result
		  from #ResultTRs
		  delete #ResultTRs
		  declare @S varchar(8000), @AddendumNum int
		  select @S = 'The ' + @SubGroup + '''s ' + @AttGroup + ' was changed to ' + @Des
		  Select @AddendumNum = Case When max(IsNull(AddendumNum,0)) = 0 then 1 else max(IsNull(AddendumNum,0)) end from scAuthorizeLog Where QuoteID = @QuoteID

print 'go3'
		  insert scQuoteChangeLog([AuthorLog], [DidWhat], [WhichLogTable], [ExactlyWhen], AddendumNum)
		  select @AuthorLog, @S, 'scAttributes', getdate(), @AddendumNum
		
		  declare @Id int
		  select @Id = @@Identity		


 end
 
end







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_InsertSCQuotecustom]') and xtype = 'TR')  
 drop Trigger tr_InsertSCQuotecustom
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE TRIGGER [tr_InsertSCQuotecustom]
ON [dbo].[scQuoteCustom]
FOR Insert
AS 
BEGIN	

 declare @ShortDescription varchar(80), @Description varchar(8000), 
 @Price varchar(100), @Status varchar(100), @QuoteID int, @CustomID int
 
 select @ShortDescription = ShortDescription, 
 @Description = [Description], @Price = cast(Price as varchar(100)), @QuoteID = QuoteID,
 @CustomID = id
 from inserted
 
 select @Status = Status
 from SCQuote
 where [id] = @QuoteID
 
 if @Status = 'S'
 begin
    declare @S varchar(8000)
    select @S = 'The custom option, ' + @ShortDescription + '(' + @Price + ')' +' was added. The particulars are ' + @Description + '.'

 		 declare @MaxDate datetime, @AuthorLog int, @Authorization varchar(100)
 		
	 	 select @MaxDate = max(SessionDate)
		  from scAuthorizeLog
		  where QuoteID = @QuoteID
		
	 	 select @AuthorLog = [id]
	 	 from scAuthorizeLog
		  where QuoteID = @QuoteID
		  and SessionDate = @MaxDate 

		 Declare @AddendumNum int
		 Select @AddendumNum = Case When max(IsNull(AddendumNum,0)) = 0 then 1 else max(IsNull(AddendumNum,0)) end from scAuthorizeLog Where QuoteID = @QuoteID

 		 insert scQuoteChangeLog([AuthorLog], [DidWhat], [WhichLogTable], [ExactlyWhen], AddendumNum)
	 	 select @AuthorLog, @S, 'scQuoteCustom', getdate(),@AddendumNum
		
		  declare @Id int
		  select @Id = @@Identity

    insert scQuoteCustom_log
    (QuoteID, ChangeLogID, ID, ShortDescription, Description, Price)
    select @QuoteID, @Id, @CustomID, @ShortDescription, @Description, cast(@Price as money)

 end

end 








Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_InsertSCQuoteOptions]') and xtype = 'TR')  
 drop Trigger tr_InsertSCQuoteOptions
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE Trigger [tr_InsertSCQuoteOptions] On [dbo].[scQuoteOptions]
For Insert
AS

 declare @QuoteID int, @Option_ID int, @CompanyID int, @Status char(1), @Sub_ID int

 Select @QuoteID = QuoteID, @Option_ID = Option_ID, @Sub_ID = Sub_ID
 From inserted

 select @CompanyID = CompanyID, @Status = Status
 from scQuote where id = @QuoteID

 if @Status = 'S'
 begin
		declare @MaxDate datetime, @AuthorLog int, @Authorization varchar(100)
		
		select @MaxDate = max(SessionDate)
		from scAuthorizeLog
		where QuoteID = @QuoteID
		
		select @AuthorLog = [id]
		from scAuthorizeLog
		where QuoteID = @QuoteID and SessionDate = @MaxDate

		declare @Short_Desc varchar(50), @SubGroupDesc varchar(50)

		Select @Short_Desc = SHORT_DESC
		From HB_OPTIONS Where OPTION_ID = @Option_ID

		Select @SubGroupDesc = SUB_GROUP_DESC
		From HB_OPT_SUB_GROUP Where SUB_GROUP_ID = @Sub_ID

		Select @SubGroupDesc as SubGroupDesc, @Short_Desc as Short_Desc

		declare @DidWhat varchar(8000)
		Select @DidWhat = 'New Option ' + @SubGroupDesc + ', ' + ISNULL(@Short_Desc, ' ') + ' Was Added'

		Declare @AddendumNum int
		Select @AddendumNum = Case When max(IsNull(AddendumNum,0)) = 0 then 1 else max(IsNull(AddendumNum,0)) end from scAuthorizeLog Where QuoteID = @QuoteID

		insert scQuoteChangeLog([AuthorLog], [DidWhat], [WhichLogTable], [ExactlyWhen], AddendumNum)
		select @AuthorLog, @DidWhat, 'scQuoteOptions', getdate(), @AddendumNum

	    declare @Id int
	    select @Id = @@Identity

		insert into scQuoteOptions_Log (ChangeLogID, QuoteOptionsID, QuoteID, Alternate, HB_Elv_Opt_Id, 
										Option_ID, OriginalOption_ID, Major_ID, Sub_ID, UnitOfMeasure, 
										IsStructural, UnitQty, UnitPrice, UnitTotal, AllowanceQty, AllowancePrice, 
										AllowanceTotal, ReplaceId, PayableTotal, DepositPercent, DepositTotal, Removed)

		Select @Id, ID, QuoteID, Alternate, HB_Elv_Opt_Id, Option_ID, OriginalOption_ID, Major_ID, Sub_ID, UnitOfMeasure,
			   IsStructural, UnitQty, UnitPrice, UnitTotal, AllowanceQty, AllowancePrice, AllowanceTotal, ReplaceId, PayableTotal,
			   DepositPercent, DepositTotal, Removed
		From inserted
 end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_InsertSCQuoteStructural]') and xtype = 'TR')  
 drop Trigger tr_InsertSCQuoteStructural
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE TRIGGER tr_InsertSCQuoteStructural
ON SCQuoteStructural
FOR insert
AS 
BEGIN	


 declare @QuoteID int, @Opt_ID int, @CompanyID int, @Status char(1), @UpgradeID varchar(100),	
 @Price varchar(100),	@Pricem money

 select @QuoteID = QuoteID, @UpgradeID = Option_ID,	
 @Opt_ID = ID,	@Price = cast(Net as varchar(100)),	@Pricem = Net
 from inserted

 select @CompanyID = CompanyID, @Status = Status
 from scQuote
 where id = @QuoteID

 if @Status = 'S'
 begin

		 declare @MaxDate datetime, @AuthorLog int, @Authorization varchar(100)
		
		 select @MaxDate = max(SessionDate)
		 from scAuthorizeLog
		 where QuoteID = @QuoteID
		
		 select @AuthorLog = [id]
		 from scAuthorizeLog
		 where QuoteID = @QuoteID
		 and SessionDate = @MaxDate 


		  declare @Company varchar(500), @SubGroup varchar(500),
		  @newOptionDesc varchar(5000)

		  select @Company = TreasuryDBName
		  from companies
		  where AutoID = @CompanyID
		
		  if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ResultTRs'))
		  drop table #ResultTRs
		  create table #ResultTRs(result varchar(50) null)

		  exec('
		  insert #ResultTRs
				SELECT	SUB_GROUP_DESC
		  from ' + @Company + '..HB_Options o
    join ' + @Company + '..hb_opt_sub_group s
    on o.SUB_GROUP_ID = s.SUB_GROUP_ID
		  where Option_ID = ' + @UpgradeID)
		  select @SubGroup = result
		  from #ResultTRs
		  delete #ResultTRs


		  exec('
		  insert #ResultTRs
		  SELECT	Short_DESC
		  from ' + @Company + '..HB_Options
		  where Option_ID = ' + @UpgradeID)
		  select @newOptionDesc = result
		  from #ResultTRs
		  delete #ResultTRs
		  declare @S varchar(8000)
		  select @S = 'The ' + @SubGroup + ' upgrade of : ' + @newOptionDesc + '(' + @Price + ') was selected'

		  insert scQuoteChangeLog([AuthorLog], [DidWhat], [WhichLogTable], [ExactlyWhen])
		  select @AuthorLog, @S, 'scQuoteStructural', getdate()
		
		  declare @Id int
		  select @Id = @@Identity		

		  insert scQuoteStructural_log 
    (QuoteID, ChangeLogID, [id], Option_ID, Net)
		  select 
    @QuoteID, @Id, @Opt_ID, @UpgradeID, @Pricem


 end
 
end





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_InsertSCQuoteUpgrade]') and xtype = 'TR')  
 drop Trigger tr_InsertSCQuoteUpgrade
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


create TRIGGER tr_InsertSCQuoteUpgrade
ON SCQuoteUpgrade
FOR insert
AS 
BEGIN	

 declare @QuoteID int, @Opt_ID int, @CompanyID int, @Status char(1), @UpgradeID varchar(100),	
 @Price varchar(100),	@Pricem money

 select @QuoteID = QuoteID, @UpgradeID = UpgradeID,	
 @Opt_ID = ID,	@Price = cast(Price as varchar(100)),	@Pricem = Price
 from inserted

 select @CompanyID = CompanyID, @Status = Status
 from scQuote
 where id = @QuoteID

 if @Status = 'S'
 begin

		 declare @MaxDate datetime, @AuthorLog int, @Authorization varchar(100)
		
		 select @MaxDate = max(SessionDate)
		 from scAuthorizeLog
		 where QuoteID = @QuoteID
		
		 select @AuthorLog = [id]
		 from scAuthorizeLog
		 where QuoteID = @QuoteID
		 and SessionDate = @MaxDate 


		  declare @Company varchar(500), @SubGroup varchar(500),
		  @newOptionDesc varchar(5000)

		  select @Company = TreasuryDBName
		  from companies
		  where AutoID = @CompanyID
		
		  if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ResultTRu'))
		  drop table #ResultTRu
		  create table #ResultTRu(result varchar(50) null)

		  exec('
		  insert #ResultTRu
				SELECT	SUB_GROUP_DESC
		  from ' + @Company + '..HB_Options o
    join ' + @Company + '..hb_opt_sub_group s
    on o.SUB_GROUP_ID = s.SUB_GROUP_ID
		  where Option_ID = ' + @UpgradeID)
		  select @SubGroup = result
		  from #ResultTRu
		  delete #ResultTRu


		  exec('
		  insert #ResultTRu
		  SELECT	Short_DESC
		  from ' + @Company + '..HB_Options
		  where Option_ID = ' + @UpgradeID)
		  select @newOptionDesc = result
		  from #ResultTRu
		  delete #ResultTRu
		  declare @S varchar(8000)
		  select @S = 'The ' + @SubGroup + ' upgrade of : ' + @newOptionDesc + '(' + @Price + ') was selected'

		  insert scQuoteChangeLog([AuthorLog], [DidWhat], [WhichLogTable], [ExactlyWhen])
		  select @AuthorLog, @S, 'scQuoteUpgrade', getdate()
		
		  declare @Id int
		  select @Id = @@Identity		

		  insert scQuoteUpgrade_log 
    (QuoteID, ChangeLogID, [id], UpgradeID, Price)
		  select 
    @QuoteID, @Id, @Opt_ID, @UpgradeID, @Pricem


 end
 
end





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_SetDateTime]') and xtype = 'TR')  
 drop Trigger tr_SetDateTime
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE TRIGGER tr_SetDateTime ON dbo.Dashboard_Notes 
FOR INSERT, UPDATE
AS
 update Dashboard_Notes
 set NoteDate = getdate()
 where Dashboard_NodesID in (select Dashboard_NodesID from inserted)



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_UpdateMSPProject]') and xtype = 'TR')  
 drop Trigger tr_UpdateMSPProject
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE    TRIGGER tr_UpdateMSPProject
ON MSP_PROJECTS
FOR update
AS 
BEGIN	
 insert MSP_Log(Operation, LogDate, PROJ_MACHINE_ID, Project_ID, Project_Name, 
 Task_UID, Task_name)
 select 'Update Project', getdate(), PROJ_MACHINE_ID, i.PROJ_ID, PROJ_NAME, null, null
 from inserted i

end




















Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_UpdateMSPTASK]') and xtype = 'TR')  
 drop Trigger tr_UpdateMSPTASK
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE        TRIGGER tr_UpdateMSPTASK
ON dbo.MSP_TASKS
FOR update
AS 
BEGIN	
 insert MSP_Log(Operation, LogDate, PROJ_MACHINE_ID, Project_ID, Project_Name, 
 Task_UID, Task_name)
 select 'Update Task', getdate(), PROJ_MACHINE_ID, i.PROJ_ID, PROJ_NAME, Task_UID, Task_name
 from inserted i
 join MSP_projects p
 on p.PROJ_ID = i.PROJ_ID


 --find parent if this occurred outside of the dashboard (also find out if it's even dashboard relevant
 if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#NewMSPTasks'))
 drop table #NewMSPTasks
 create table #NewMSPTasks(
 Proj_ID int,
 Task_UID int,
 TASK_OUTLINE_NUM varchar(255),
 PARENT_TASK_OUTLINE_NUM varchar(255) null,
 IsDone bit,
 Link_ID int null,
 Dashboard_TaskGroupID int null,
 TaskType varchar(50) null,
 SourceFlavour varchar(50) null,
 CodeType char(1) null,
 DMC_ID int null)


 insert #NewMSPTasks(Proj_ID, Task_UID, TASK_OUTLINE_NUM, PARENT_TASK_OUTLINE_NUM, IsDone, Link_ID, DMC_ID)
 select t.Proj_ID, t.Task_UID, TASK_OUTLINE_NUM, TASK_OUTLINE_NUM, 0, Link_ID, DMC_ID
 from inserted t
 left outer join msp_dashboard_tasks d
 on t.Proj_id = d.Proj_id
 and t.Task_UID = d.Task_UID
 where d.Task_UID is null
 and isNUll(t.Task_UID,-1) > 0
 and t.Proj_ID not in (select Proj_ID from Working_InsertStatus)
 and isNull(TASK_OUTLINE_NUM,'') <> ''

 declare @Count int
 select @Count = count(*)
 from #NewMSPTasks
 where IsDone = 0


 while @Count > 0 
 begin 
  update #NewMSPTasks
  set PARENT_TASK_OUTLINE_NUM = substring(PARENT_TASK_OUTLINE_NUM, 1, len(PARENT_TASK_OUTLINE_NUM) - 1)
  where IsDone = 0

  update #NewMSPTasks
  set IsDone = case 
  when substring(PARENT_TASK_OUTLINE_NUM, len(PARENT_TASK_OUTLINE_NUM), len(PARENT_TASK_OUTLINE_NUM)) = '.' then 1 else 0 end,
  PARENT_TASK_OUTLINE_NUM = case 
  when substring(PARENT_TASK_OUTLINE_NUM, len(PARENT_TASK_OUTLINE_NUM), len(PARENT_TASK_OUTLINE_NUM)) = '.' then 
  substring(PARENT_TASK_OUTLINE_NUM, 1, len(PARENT_TASK_OUTLINE_NUM)-1) else PARENT_TASK_OUTLINE_NUM end
  where IsDone = 0

  update #NewMSPTasks
  set IsDone = case 
  when len(PARENT_TASK_OUTLINE_NUM) = 0 then 1 else 0 end
  where IsDone = 0  

  --now check to see if parent has dashboard info (could be a child of a new child)
  update #NewMSPTasks
  set Link_ID = d.Link_ID,
  Dashboard_TaskGroupID = d.Dashboard_TaskGroupID,
  TaskType = d.TaskType,
  SourceFlavour = d.SourceFlavour,
  DMC_ID = d.DMC_ID,
  CodeType = case 
   when d.CodeType = 'C' then 
     case when d.SourceFlavour = 'nbgInternal' then 'T' else 'P' end
			when d.CodeType = 'P' then 'P' 
			when d.CodeType = 'M' then 'T'
   when d.CodeType = 'T' then 'T'
   else 'T' end
  from #NewMSPTasks t
  join MSP_Tasks mt
  on t.PARENT_TASK_OUTLINE_NUM = mt.TASK_OUTLINE_NUM
  and t.proj_id = mt.proj_id
  join msp_dashboard_tasks d
  on mt.Proj_id = d.Proj_id
  and mt.Task_UID = d.Task_UID
  where isNUll(t.Task_UID,-1) > 0
  
  insert tracker
  select cast(@count as varchar(10)) + ' - ' + cast(Link_ID as varchar(20))
  from #NewMSPTasks

  select @Count = count(*)
  from #NewMSPTasks
  where IsDone = 0  
 end

update msp_dashboard_tasks
set Link_ID = n.Link_ID,
Dashboard_TaskGroupID = n.Dashboard_TaskGroupID,
CodeType = case when isNull(n.Link_ID,'') = '' then 'P' when isnull(n.Dashboard_TaskGroupID,'') = '' then 'C' else 'T' end,
DMC_ID = n.DMC_ID
from msp_dashboard_tasks t
join  #NewMSPTasks n
on t.PROJ_ID = n.PROJ_ID
and t.TASK_UID = n.TASK_UID


update OutlookManagerNotification
set 
Mgr_TriggerUDI = case 
when Mgr_TriggerUDI = 'I' and Mgr_SeenItYN = 'N' then 'I' else 'U' end,
Mgr_SeenItYN = 'N'
from OutlookManagerNotification o
join msp_dashboard_tasks t
on t.mdt_id = o.LinkID
and o.LinkType = 'MSP_Dashboard_Tasks'
join  inserted n
on t.PROJ_ID = n.PROJ_ID
and t.TASK_UID = n.TASK_UID







end






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_UpdateSCQuote]') and xtype = 'TR')  
 drop Trigger tr_UpdateSCQuote
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE   TRIGGER [dbo].[tr_UpdateSCQuote]
ON [dbo].[scQuote]
FOR Update
AS 
BEGIN	

 declare @QuoteID int, @CompanyID int, @Status char(1),
 @HoldingID  varchar(100),	@CommunityID  varchar(100),	@ProjectID  varchar(100),	
 @LotID  varchar(100),	@LotGuesstimate  varchar(100), @ModelID varchar(100),	
 @ModelNameID  varchar(100),	@GoodUntilDate  varchar(100), 
 @FinalPrice  varchar(100), @GST  varchar(100), @GSTRebate  varchar(100), 
 @GSTTotal  varchar(100), @SaleType varchar(50), 
 

 @Status2 char(1), @HoldingID2  varchar(100),	@CommunityID2  varchar(100),	@ProjectID2  varchar(100),	
 @LotID2  varchar(100),	@LotGuesstimate2  varchar(100), @ModelID2  varchar(100),	
 @ModelNameID2  varchar(100),	@GoodUntilDate2  varchar(100), @FinalPrice2  varchar(100),
 @GST2  varchar(100), @GSTRebate2  varchar(100), @GSTTotal2  varchar(100)

 select @QuoteID = ID, @CompanyID = CompanyID, @Status = Status, @HoldingID = HoldingID,	
 @CommunityID = CommunityID,	 @ProjectID = ProjectID,	@LotID = LotID,	
 @LotGuesstimate = cast(LotGuesstimate as varchar(100)), @ModelID = ModelID,	
 @ModelNameID = ModelNameID,	@GoodUntilDate = GoodUntilDate, 
 @FinalPrice = cast(FinalPrice as varchar(100)), @GST = cast(GST as varchar(100)), 
 @GSTRebate = cast(GSTRebate as varchar(100)), @GSTTotal = cast(GSTTotal as varchar(100)),
 @SaleType = SaleType
 from inserted

 select @Status2 = Status, @HoldingID2 = HoldingID,	@CommunityID2 = CommunityID,	
 @ProjectID2 = ProjectID,	@LotID2 = LotID,	@LotGuesstimate2 = cast(LotGuesstimate as varchar(100)), 
 @ModelID2 = ModelID,	@ModelNameID2 = ModelNameID,	@GoodUntilDate2 = GoodUntilDate, 
 @FinalPrice2 = cast(FinalPrice as varchar(100)), @GST2 = cast(GST as varchar(100)), 
 @GSTRebate2 = cast(GSTRebate as varchar(100)), @GSTTotal2 = cast(GSTTotal as varchar(100))
 from deleted


 if @Status2 = 'S' AND @SaleType != 'Inventory'
 begin


		 declare @MaxDate datetime, @AuthorLog int, @Authorization varchar(100)
		
		 select @MaxDate = max(SessionDate)
		 from scAuthorizeLog
		 where QuoteID = @QuoteID
		
		 select @AuthorLog = [id]
		 from scAuthorizeLog
		 where QuoteID = @QuoteID
		 and SessionDate = @MaxDate 

		
		 if (@HoldingID2 <> @HoldingID) or	(@CommunityID2 <> @CommunityID) or
		 (@ProjectID2 <> @ProjectID) or	(@LotID2 <> @LotID) or	(@LotGuesstimate2 <> @LotGuesstimate) or
		 (@ModelID2 <> @ModelID) or	(@ModelNameID2 <> @ModelNameID) or (@GoodUntilDate2 <> @GoodUntilDate) or
   (@FinalPrice  <> @FinalPrice2) or (@GST <> @GST2) or (@GSTRebate <> @GSTRebate2) or 
   (@GSTTotal <> @GSTTotal2)
		 begin

exec sp_logit 'tr_UpdateSCQuote A Change has been detected'

		  declare @Company varchar(500), 
		  @Holding varchar(500), @Community varchar(500),	
		  @Project varchar(500),	@Lot varchar(500), 
		  @Model varchar(500), @Elevation varchar(500),
		
		  @Holding2 varchar(500), @Community2 varchar(500),	
		  @Project2 varchar(500),	@Lot2 varchar(500), 
		  @Model2 varchar(500), @Elevation2 varchar(500)
		
		  select @Company = TreasuryDBName
		  from companies
		  where AutoID = @CompanyID

		  Set @Company = ' '
		
		  if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ResultTR'))
		  drop table #ResultTR
		  create table #ResultTR(result varchar(50) null)
		
		  exec('
		  insert #ResultTR
		  select RAW_LAND_DESC
		  from ' + @Company + '..hb_raw_land
		  where Raw_Land_CD = ' + @HoldingID)
		  select @Holding = result
		  from #ResultTR
		  delete #ResultTR
		
		  exec('
		  insert #ResultTR
		  select COMMUNITY_DESC
		  from ' + @Company + '..hb_communities
		  where COMMUNITY_CD = ' + @CommunityID
		  + ' and Raw_Land_CD = ' + @HoldingID)
		  select @Community = result
		  from #ResultTR
		  delete #ResultTR
		
		  exec('
		  insert #ResultTR
		  select PROJECT_DESC
		  from ' + @Company + '..hb_project
		  where PROJECT_CD = ' + @ProjectID 
		  + ' and Raw_Land_CD = ' + @HoldingID 
		  + ' and COMMUNITY_CD = ' + @CommunityID )
		  select @Project = result
		  from #ResultTR
		  delete #ResultTR
		
		  exec('
		  insert #ResultTR
		  select isnull(PLAN_NO,''No Plan'') + '':'' + isNull(BLOCK,''No Block'') + '':'' + isNull(Lot,''No Lot'')
		  from ' + @Company + '..hb_lots
		  where Lot_ID = ' + @LotID
		  + ' and PROJECT_CD = ' + @ProjectID)
		  select @Lot = result
		  from #ResultTR
		  delete #ResultTR

exec sp_logit @Lot
		
		  exec('
		  insert #ResultTR
		  select MODEL_NAME
		  from ' + @Company + '..hb_Model_Name
		  where MODEL_NAME_ID = ' + @ModelNameID)
		  select @Model = result
		  from #ResultTR
		  delete #ResultTR
		
		  exec('
		  insert #ResultTR
		  select MODEL_SDESC
		  from ' + @Company + '..hb_Model
		  where MODEL_NAME_ID = ' + @ModelNameID
		  + ' and MODEL_ID = ' + @ModelID)
		  select @Elevation = result
		  from #ResultTR
		  delete #ResultTR


		
		-- now do the original
		  exec('
		  insert #ResultTR
		  select RAW_LAND_DESC
		  from ' + @Company + '..hb_raw_land
		  where Raw_Land_CD = ' + @HoldingID2)
		  select @Holding2 = result
		  from #ResultTR
		  delete #ResultTR
		
		  exec('
		  insert #ResultTR
		  select COMMUNITY_DESC
		  from ' + @Company + '..hb_communities
		  where COMMUNITY_CD = ' + @CommunityID2
		  + ' and Raw_Land_CD = ' + @HoldingID2)
		  select @Community2 = result
		  from #ResultTR
		  delete #ResultTR
		
		  exec('
		  insert #ResultTR
		  select PROJECT_DESC
		  from ' + @Company + '..hb_project
		  where PROJECT_CD = ' + @ProjectID2
		  + ' and Raw_Land_CD = ' + @HoldingID2
		  + ' and COMMUNITY_CD = ' + @CommunityID2)
		  select @Project2 = result
		  from #ResultTR
		  delete #ResultTR
		
		  exec('
		  insert #ResultTR
		  select isnull(PLAN_NO,''No Plan'') + '':'' + isNull(BLOCK,''No Block'') + '':'' + isNull(Lot,''No Lot'')
		  from ' + @Company + '..hb_lots
		  where Lot_ID = ' + @LotID2
		  + ' and PROJECT_CD = ' + @ProjectID2)
		  select @Lot2 = result
		  from #ResultTR
		  delete #ResultTR


exec sp_logit @Lot2
		
		  exec('
		  insert #ResultTR
		  select MODEL_NAME
		  from ' + @Company + '..hb_Model_Name
		  where MODEL_NAME_ID = ' + @ModelNameID2)
		  select @Model2 = result
		  from #ResultTR
		  delete #ResultTR
		
		  exec('
		  insert #ResultTR
		  select MODEL_SDESC
		  from ' + @Company + '..hb_Model
		  where MODEL_NAME_ID = ' + @ModelNameID2
		  + ' and MODEL_ID = ' + @ModelID2)
		  select @Elevation2 = result
		  from #ResultTR
		  delete #ResultTR
		
		  declare @S varchar(8000)
		  select @S = ''
		
		  if @Holding <> @Holding2 
		   select @S = @S + 'Holding was changed from ' + rtrim(@Holding2) + ' to ' + rtrim(@Holding) + ' and '
		
		  if @Community <> @Community2 
		   select @S = @S + 'Community was changed from ' + rtrim(@Community2) + ' to ' + rtrim(@Community) + ' and '
		
		  if @Project <> @Project2 
		   select @S = @S + 'Project was changed from ' + rtrim(@Project2) + ' to ' + rtrim(@Project) + ' and '
		
		  if @Lot <> @Lot2 
		   select @S = @S + 'Lot was changed from ' + rtrim(@Lot2) + ' to ' + rtrim(@Lot) + ' and '
		
		  if @Model <> @Model2 
		   select @S = @S + 'Model was changed from ' + rtrim(@Model2) + ' to ' + rtrim(@Model) + ' and '
		
		  if @Elevation <> @Elevation2 
		   select @S = @S + 'Elevation was changed from ' + rtrim(@Elevation2) + ' to ' + rtrim(@Elevation) + ' and '
		
		  if @GoodUntilDate <> @GoodUntilDate2
		   select @S = @S + 'Good until date was changed from ' + @GoodUntilDate2 + ' to ' + @GoodUntilDate + ' and '
		 
		  if @FinalPrice <> @FinalPrice2
		   select @S = @S + 'Final price was changed from ' + cast(@FinalPrice2 as varchar(50)) + ' to ' + cast(@FinalPrice as varchar(50)) + ' and '
		
		  if @GST <> @GST2
		   select @S = @S + 'GST was changed from ' + cast(@GST2 as varchar(50)) + ' to ' + cast(@GST as varchar(50)) + ' and '
		
		  if @GSTRebate <> @GSTRebate2
		   select @S = @S + 'GST rebate was changed from ' + cast(@GSTRebate2 as varchar(50)) + ' to ' + cast(@GSTRebate as varchar(50)) + ' and '
		
		  if @GSTTotal <> @GSTTotal2
		   select @S = @S + 'GST total was changed from ' + cast(@GSTTotal2 as varchar(50)) + ' to ' + cast(@GSTTotal as varchar(50)) + ' and '
		
		  --kill the last 'and '
		  if len(@S) > 5
		  select @S = substring(@S, 1, len(@S)-4)


		
		 Declare @AddendumNum int
		 Select @AddendumNum = Case When max(IsNull(AddendumNum,0)) = 0 then 1 else max(IsNull(AddendumNum,0)) end from scAuthorizeLog Where QuoteID = @QuoteID

		 insert scQuoteChangeLog([AuthorLog], [DidWhat], [WhichLogTable], [ExactlyWhen], AddendumNum)
		 select @AuthorLog, @S, 'scQuote', getdate(), @AddendumNum
		
		 declare @Id int
		 select @Id = @@Identity
		
		 insert scQuote_log(QuoteID, ChangeLogID, [HoldingID],	[CommunityID],
			[ProjectID],	[LotID],	[LotGuesstimate],	[ModelID],	[ModelNameID],
			[GoodUntilDate],	[FinalPrice],	[GST],	[GSTRebate],	[GSTTotal])
		 select @QuoteID, @Id, @HoldingID2,	@CommunityID2,	
		 @ProjectID2,	@LotID2,	cast(@LotGuesstimate2 as money), @ModelID2,	@ModelNameID2,	
		 @GoodUntilDate2, cast(@FinalPrice2 as money), cast(@GST2 as money), 
		 cast(@GSTRebate2 as money), cast(@GSTTotal2 as money)

select @s = @s + 'tr_UpdateSCQuote '
exec sp_logit @S


exec sp_logit 'tr_UpdateSCQuote Finished job'

  end 

 end
 
end









Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_UpdateSCQuotecustom]') and xtype = 'TR')  
 drop Trigger tr_UpdateSCQuotecustom
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE TRIGGER [tr_UpdateSCQuotecustom]
ON [dbo].[scQuoteCustom]
FOR Update
AS 
BEGIN	

 declare @ShortDescription varchar(80), @Description varchar(8000), 
 @Price varchar(100), @ShortDescription2 varchar(80), @Description2 varchar(8000), 
 @Price2 varchar(100), @Status varchar(100), @QuoteID int, @CustomID int
 
 select @ShortDescription = ShortDescription, 
 @Description = [Description], @Price = cast(Price as varchar(100)), @QuoteID = QuoteID,
 @CustomID = id
 from inserted
 
 select @ShortDescription2 = ShortDescription, 
 @Description2 = [Description], @Price2 = cast(Price as varchar(100))
 from deleted

 select @Status = Status
 from SCQuote
 where [id] = @QuoteID
 
 if @Status = 'S'
 begin
 	 if (@ShortDescription2 <> @ShortDescription) or	(@Description2 <> @Description) or
		 (@Price2 <> @Price) 
		 begin  
    declare @S varchar(8000)
    select @S = ''
    if (@ShortDescription2 <> @ShortDescription) 
     select @S = @S + 'Description was changed from ' + rtrim(@ShortDescription2) + ' to ' + rtrim(@ShortDescription) + ' and '
    if (@Description2 <> @Description) 
     select @S = @S + 'Details were changed from ' + rtrim(@Description2) + ' to ' + rtrim(@Description) + ' and '
		  if (@Price2 <> @Price) 
     select @S = @S + 'The price was changed from ' + rtrim(@Price2) + ' to ' + rtrim(@Price) + ' and '

		  if len(@S) > 5
		  select @S = substring(@S, 1, len(@S)-4)

 		 declare @MaxDate datetime, @AuthorLog int, @Authorization varchar(100)
 		
	 	 select @MaxDate = max(SessionDate)
		  from scAuthorizeLog
		  where QuoteID = @QuoteID
		
	 	 select @AuthorLog = [id]
	 	 from scAuthorizeLog
		  where QuoteID = @QuoteID
		  and SessionDate = @MaxDate 

		 Declare @AddendumNum int
		 Select @AddendumNum = Case When max(IsNull(AddendumNum,0)) = 0 then 1 else max(IsNull(AddendumNum,0)) end from scAuthorizeLog Where QuoteID = @QuoteID

 		 insert scQuoteChangeLog([AuthorLog], [DidWhat], [WhichLogTable], [ExactlyWhen], AddendumNum)
	 	 select @AuthorLog, @S, 'scQuoteCustom', getdate(),@AddendumNum
		
		  declare @Id int
		  select @Id = @@Identity

    insert scQuoteCustom_log
    (QuoteID, ChangeLogID, ID, ShortDescription, Description, Price)
    select @QuoteID, @Id, @CustomID, @ShortDescription, @Description, cast(@Price as money)

   end
 end

end 





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_UpdateSCQuoteOption]') and xtype = 'TR')  
 drop Trigger tr_UpdateSCQuoteOption
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE TRIGGER tr_UpdateSCQuoteOption
ON SCQuoteOption
FOR Update
AS 
BEGIN	
exec sp_logit 'in the house'
 
 declare @QuoteID int, @CompanyID int, @Status char(1), @OriginalOption_ID varchar(100),	
 @Option_ID varchar(100),	@Allowance varchar(50), @Net varchar(100),	@OptID varchar(100), 
 @Netm money, @Allowancem money, 

 @Option_ID2 varchar(100),	@Allowance2 varchar(50), @Net2 varchar(100),	@OptID2 varchar(100), 
 @Netm2 money, @Allowancem2 money

 select @QuoteID = QuoteID, @OriginalOption_ID = OriginalOption_ID,	
 @Option_ID = Option_ID,	@Net = cast(Net as varchar(100)),	
 @Allowance = cast(Allowance as varchar(100)),	@OptID = ID, 
 @Netm = Net, @Allowancem = Allowance
 from inserted

 select @QuoteID = case when isnull(@QuoteID,-1) = -1 then QuoteID else @QuoteID end,
 @Option_ID2 = Option_ID,	@Net2 = cast(Net as varchar(100)),	
 @Allowance2 = cast(Allowance as varchar(100)),	@OptID2 = ID, 
 @Netm2 = Net, @Allowancem2 = Allowance
 from deleted

 select @CompanyID = CompanyID, @Status = Status
 from scQuote
 where id = @QuoteID

 if @Status = 'S'
 begin

		 declare @MaxDate datetime, @AuthorLog int, @Authorization varchar(100)
		
		 select @MaxDate = max(SessionDate)
		 from scAuthorizeLog
		 where QuoteID = @QuoteID
		
		 select @AuthorLog = [id]
		 from scAuthorizeLog
		 where QuoteID = @QuoteID
		 and SessionDate = @MaxDate 

   --if the Option_ID = 0 then the option is deselected
	  --if the Option_ID <> OriginalOption_ID then an alternate was chosen
   --an alternate could also have been replaced with another alternate

exec sp_logit 'tr_UpdateSCQuoteOption before'
		
		 if (@Option_ID2 <> @Option_ID) or (@Option_ID = 0)
		 begin

exec sp_logit 'tr_UpdateSCQuoteOption A Change has been detected'

		  declare @Company varchar(500), 
		  @newOptionDesc varchar(5000),	@oldOptionDesc varchar(5000),	
		  @defaultOptionDesc varchar(5000), @SubGroup varchar(5000)

		  select @Company = TreasuryDBName
		  from companies
		  where AutoID = @CompanyID
		
		  if exists (select * from tempdb..sysobjects where id = object_id(N'tempdb..#ResultTRo'))
		  drop table #ResultTRo
		  create table #ResultTRo(result varchar(50) null)
		


		  exec('
		  insert #ResultTRo
				SELECT	SUB_GROUP_DESC
		  from ' + @Company + '..HB_Options o
    join ' + @Company + '..hb_opt_sub_group s
    on o.SUB_GROUP_ID = s.SUB_GROUP_ID
		  where Option_ID = ' + @OriginalOption_ID)
		  select @SubGroup = result
		  from #ResultTRo
		  delete #ResultTRo


		  exec('
		  insert #ResultTRo
		  SELECT	Short_DESC
		  from ' + @Company + '..HB_Options
		  where Option_ID = ' + @Option_ID)
		  select @newOptionDesc = result
		  from #ResultTRo
		  delete #ResultTRo

		  exec('
		  insert #ResultTRo
		  SELECT	Short_DESC
		  from ' + @Company + '..HB_Options
		  where Option_ID = ' + @Option_ID2)
		  select @oldOptionDesc = result
		  from #ResultTRo
		  delete #ResultTRo

		  exec('
		  insert #ResultTRo
		  SELECT	Short_DESC
		  from ' + @Company + '..HB_Options
		  where Option_ID = ' + @OriginalOption_ID)
		  select @defaultOptionDesc = result
		  from #ResultTRo
		  delete #ResultTRo

		
		  declare @S varchar(8000)
		  select @S = ''

    if @Option_ID2 = 0 and @Option_ID <> 0 -- used to be none and now a selection has been made
    begin 
     if @Option_ID = @OriginalOption_ID -- the default was reselected
     begin
      select @S = 'The default ' + rtrim(@SubGroup) + ', ' + rtrim(@defaultOptionDesc) + 
      '(' + @Allowance + ') was selected'
     end
     else -- an alternate was chosen
     begin
      select @S = 'An alternate ' + rtrim(@SubGroup) + ', ' + rtrim(@newOptionDesc) + 
      '(' + @Allowance + ') was selected'
     end
    end
    if @Option_ID = 0
    begin 
      select @S = 'The ' + rtrim(@SubGroup) + ', ' + rtrim(@oldOptionDesc) + 
						'(' + @Allowance2 + ') was deselected'
    end
    if @Option_ID2 <> 0 and @Option_ID <> 0 -- a different alternate
    begin 
     if @Option_ID <> @OriginalOption_ID
      select @S = 'A different alternate ' + rtrim(@SubGroup) + ', ' + rtrim(@newOptionDesc) + 
      '(' + @Allowance + ') was changed from ' + rtrim(@oldOptionDesc) + '(' + @Allowance2 + ')'
     else 
      select @S = 'The default ' + rtrim(@SubGroup) + ', ' + rtrim(@newOptionDesc) + 
      '(' + @Allowance + ') was changed from ' + rtrim(@oldOptionDesc) + '(' + @Allowance2 + ')'
    end
		
		  insert scQuoteChangeLog([AuthorLog], [DidWhat], [WhichLogTable], [ExactlyWhen])
		  select @AuthorLog, @S, 'scQuoteOption', getdate()
		
		  declare @Id int
		  select @Id = @@Identity		

		  insert scQuoteOption_log 
    (QuoteID, ChangeLogID, [id], option_id, OriginalOption_ID, Allowance, Net)
		  select 
    @QuoteID, @Id, @OptID, @option_id2, @OriginalOption_ID, @Allowancem2, @Netm2 

  end 

 end
 
end





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_UpdateSCQuoteOptions]') and xtype = 'TR')  
 drop Trigger tr_UpdateSCQuoteOptions
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE Trigger [tr_UpdateSCQuoteOptions] On [dbo].[scQuoteOptions]
For Update
AS

 -----------------------------------------New Option Information-------------------------------------------

 declare @QuoteID int, @Option_ID int, @CompanyID int, @Status char(1), @Sub_ID int, @Alternate varchar(10),
		 @UnitQty int, @UnitPrice money, @Removed bit

 Select @QuoteID = QuoteID, @Option_ID = Option_ID, @Sub_ID = Sub_ID, @Alternate = Alternate, @UnitQty = UnitQty,
		@UnitPrice = UnitPrice, @Removed = Removed
 From inserted
	Select @Removed
 -----------------------------------------Old Option Information-------------------------------------------

 declare @OldOption_ID int, @OldSub_ID int, @OldAlternate varchar(10), @OldUnitQty int, @OldUnitPrice money

 Select @OldOption_ID = Option_ID, @OldSub_ID = Sub_ID, @OldAlternate = Alternate, @OldUnitQty = UnitQty,
		@OldUnitPrice = UnitPrice
 From deleted

 ----------------------------------------------------------------------------------------------------------

 select @CompanyID = CompanyID, @Status = Status
 from scQuote where id = @QuoteID

 if @Status = 'S'
 begin
		declare @MaxDate datetime, @AuthorLog int, @Authorization varchar(100)
		
		select @MaxDate = max(SessionDate)
		from scAuthorizeLog
		where QuoteID = @QuoteID
		
		select @AuthorLog = [id]
		from scAuthorizeLog
		where QuoteID = @QuoteID and SessionDate = @MaxDate

		-----------New Option Information----------

		declare @Short_Desc varchar(50), @SubGroupDesc varchar(50)

		Select @Short_Desc = ISNULL(SHORT_DESC,'')
		From HB_OPTIONS Where OPTION_ID = @Option_ID

		Select @SubGroupDesc = SUB_GROUP_DESC
		From HB_OPT_SUB_GROUP Where SUB_GROUP_ID = @Sub_ID

		Select @SubGroupDesc as SubGroupDesc, @Short_Desc as Short_Desc

		--------------Previous Option Information------------------

		declare @OldShort_Desc varchar(50), @OldSubGroupDesc varchar(50)

		Select @OldShort_Desc = SHORT_DESC
		From HB_OPTIONS Where OPTION_ID = @OldOption_ID

		Select @OldSubGroupDesc = SUB_GROUP_DESC
		From HB_OPT_SUB_GROUP Where SUB_GROUP_ID = @OldSub_ID

		Select @OldSubGroupDesc as Old_SubGroupDesc, @OldShort_Desc as Old_Short_Desc

		------------------------------------------------------------

		------------------------Description-------------------------

		declare @DidWhat varchar(8000)

		if @Alternate = 'Yes' AND @OldAlternate = 'No'
			begin
				Select @DidWhat = 'Original Option ' + @OldSubGroupDesc + ', ' + ISNULL(@OldShort_Desc,' ') + 
								  ' Quantity ' + convert(varchar(5000),@OldUnitQty) + ' at Price ' + convert(varchar(5000),@OldUnitPrice) +
								  ' is being alternated with ' + @SubGroupDesc + ', ' + ISNULL(@Short_Desc,' ') +
								  ' Quantity ' + convert(varchar(5000),@UnitQty) + ' at Price ' + convert(varchar(5000),@UnitPrice)
			end
		else if @Alternate = 'Yes' AND @OldAlternate = 'Yes'
			begin
				Select @DidWhat = 'Current Option ' + @OldSubGroupDesc + ', ' + ISNULL(@OldShort_Desc, ' ') +
								  ' Quantity ' + convert(varchar(5000),@OldUnitQty) + ' at Price ' + convert(varchar(5000),@OldUnitPrice) +
								  ' is being alternated with ' + @SubGroupDesc + ', ' + ISNULL(@Short_Desc, ' ') +
								  ' Quantity ' + convert(varchar(5000),@UnitQty) + ' at Price ' + convert(varchar(5000),@UnitPrice)
			end		
		else if @Option_ID = -1
			begin
				Select @DidWhat = 'Current Option ' + @OldSubGroupDesc + ', ' + ISNULL(@OldShort_Desc, ' ') + 
								  ' Quantity ' + convert(varchar(5000),@OldUnitQty) + ' at Price ' + convert(varchar(5000),@OldUnitPrice) +
								  ' is being de-selected'
			end
		else if @Option_ID != @OldOption_ID
			begin
				Select @DidWhat = 'Current Option ' + @OldSubGroupDesc + ', ' + ISNULL(@OldShort_Desc, ' ') +
								  ' Quantity ' + convert(varchar(5000),@OldUnitQty) + ' at Price ' + convert(varchar(5000),@OldUnitPrice) +
								  ' is being replaced with ' + @SubGroupDesc + ', ' + ISNULL(@Short_Desc, ' ') +
								  ' Quantity ' + convert(varchar(5000),@UnitQty) + ' at Price ' + convert(varchar(5000),@UnitPrice)
			end
		else if @Removed = 1
			begin
				Select @DidWhat = 'Current Option '  + @OldSubGroupDesc + ', ' + ISNULL(@OldShort_Desc, ' ') +
								  ' Quantity ' + convert(varchar(5000),@OldUnitQty) + ' at Price ' + convert(varchar(5000),@OldUnitPrice) +
								  ' has been removed'
			end
		else
			begin
				Select @DidWhat = 'Current Option ' + @OldSubGroupDesc + ', ' + ISNULL(@OldShort_Desc, ' ') + 
								  ' Quantity ' + convert(varchar(5000),@OldUnitQty) + ' at Price ' + convert(varchar(5000),@OldUnitPrice) +
								  ' is updating ' + @SubGroupDesc + ', ' + ISNULL(@Short_Desc, ' ') + 
								  ' Quantity ' + convert(varchar(5000),@UnitQty) + ' at Price ' + Convert(varchar(5000),@UnitPrice)
			end

		Declare @AddendumNum int
		Select @AddendumNum = Case When max(IsNull(AddendumNum,0)) = 0 then 1 else max(IsNull(AddendumNum,0)) end from scAuthorizeLog Where QuoteID = @QuoteID

		insert scQuoteChangeLog([AuthorLog], [DidWhat], [WhichLogTable], [ExactlyWhen], AddendumNum)
		select @AuthorLog, @DidWhat, 'scQuoteOptions', getdate(), @AddendumNum

		declare @Id int
	    select @Id = @@Identity

		insert into scQuoteOptions_Log (ChangeLogID, QuoteOptionsID, QuoteID, Alternate, HB_Elv_Opt_Id, 
										Option_ID, OriginalOption_ID, Major_ID, Sub_ID, UnitOfMeasure, 
										IsStructural, UnitQty, UnitPrice, UnitTotal, AllowanceQty, AllowancePrice, 
										AllowanceTotal, ReplaceId)

		Select @Id, ID, QuoteID, Alternate, HB_Elv_Opt_Id, Option_ID, OriginalOption_ID, Major_ID, Sub_ID, UnitOfMeasure,
			   IsStructural, UnitQty, UnitPrice, UnitTotal, AllowanceQty, AllowancePrice, AllowanceTotal, ReplaceId
		From deleted
 end




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scV_Payments]') and xtype = 'V ')  
 drop View scV_Payments
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE     VIEW dbo.scV_Payments

AS

SELECT M.ID, M.BatchID, M.QuoteID, M.PaymentFormID, M.CheckDated, M.CheckNumber,
D.Amount, 
1 AS Detail, 
D.PaymentType,
D.StageID,
D.OptionID

FROM scPaymentMain M

LEFT JOIN scPaymentDetail D ON D.PaymentID = M.ID

WHERE ( SELECT COUNT(*) FROM scPaymentDetail D2 WHERE D2.PaymentID = M.ID) = 1

UNION 

SELECT M.ID, M.BatchID, M.QuoteID, M.PaymentFormID, M.CheckDated, M.CheckNumber,
sum(D.Amount), 
count(D.Amount), 
'Distribution',
0, 0

FROM scPaymentMain M

LEFT JOIN scPaymentDetail D ON D.PaymentID = M.ID

GROUP BY M.ID, M.BatchID, M.QuoteID,  M.PaymentFormID, M.CheckDated, M.CheckNumber

HAVING count(D.Amount) > 1







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scVCampaigns]') and xtype = 'V ')  
 drop View scVCampaigns
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE        VIEW dbo.scVCampaigns
AS
select 'Pending' as Category, * from scCampaign
WHERE ( StartDate is null or StartDate > getDate() ) 
UNION 
select 'Active', * from scCampaign
WHERE StartDate < getDate()
And ( EndDate > getDate() or EndDate is null )
UNION 
select 'Archive', * from scCampaign
WHERE EndDate < getDate()





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scVCompaniesByParent]') and xtype = 'V ')  
 drop View scVCompaniesByParent
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE  VIEW dbo.scVCompaniesByParent
AS
SELECT     '<Top Level>' AS ParentDesc, C.ID, C.CompanyName, C.DateCreated, C.DateModified
FROM         scCompany C
WHERE     ParentID = 0
UNION
SELECT     C2.CompanyName, C.ID, C.CompanyName, C.DateCreated, C.DateModified
FROM         scCompany C INNER JOIN
                      scCompany C2 ON C2.ID = C.ParentID
WHERE     C.ParentID <> 0





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scVLead]') and xtype = 'V ')  
 drop View scVLead
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE           VIEW dbo.scVLead
AS
SELECT	L.*, 
	L.CommunityID AS Community,
	(SELECT Description FROM scCodes WHERE L.RankingID = ID ) AS Ranking,
	
	A.Line1,
	A.Line2,
	A.Line3,
	A.CityID,
	(SELECT Description FROM scCodes WHERE A.CityID = ID ) AS City,
	A.ProvinceID,
	(SELECT Description FROM scCodes WHERE A.ProvinceID = ID ) AS Province,
	A.PostalCode,
	A.Line1 + ' ' + A.Line2 + ' ' + A.Line3 AS CombinedAddress,
	E.Email,
	E.Narrative as EmailNarrative,
	P.Number as PhoneNumber,
	P.Extension,
	P.Additional as PhoneNarrative
FROM	scLead L
LEFT JOIN scAddress	A	ON A.LeadID = L.ID AND A.DefaultYN = 1
LEFT JOIN scEmail	E	ON E.LeadID = L.ID AND E.DefaultYN = 1
LEFT JOIN scPhone	P	ON P.LeadID = L.ID AND P.DefaultYN = 1
WHERE L.IncompleteYN = 0






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scVMailMergeCampaign]') and xtype = 'V ')  
 drop View scVMailMergeCampaign
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

Create View [dbo].[scVMailMergeCampaign]
AS
Select C.ID as 'ContactID', C.FirstName, C.LastName, C.KnownAs as 'Name', C.Greeting, C.AddressNarrative,
C.BusinessStreet, C.BusinessCity, C.BusinessPostalCode, C.BusinessState, C.BusinessCountry,
C.HomeStreet, C.HomeCity, C.HomePostalCode, C.HomeState, C.HomeCountry,
C.OtherStreet, C.OtherCity, C.OtherPostalCode, C.OtherState, C.OtherCountry,
C.PhoneNarrative, C.PrimaryTelephoneNumber, C.AssistantTelephoneNumber, 
C.BusinessTelephoneNumber, C.Business2TelephoneNumber,
C.HomeTelephoneNumber, C.Home2TelephoneNumber, 
C.MobileTelephoneNumber, C.OtherTelephoneNumber, C.PagerNumber,
C.FaxNarrative, C.HomeFaxNumber, C.BusinessFaxNumber, C.OtherFaxNumber,
C.EmailNarrative, C.Email1Address, C.Email1DisplayName,
C.Email2Address, C.Email2DisplayName, C.Email3Address, C.Email3DisplayName,
C.CorporateWebSite, C.Title, C.JobTitle From Contact C





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scVMailMergeContacts]') and xtype = 'V ')  
 drop View scVMailMergeContacts
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE View [dbo].[scVMailMergeContacts]
AS
Select C.ID as 'ContactID', C.FirstName, C.LastName, C.KnownAs as 'Name', C.Greeting, C.AddressNarrative,
C.BusinessStreet, C.BusinessCity, C.BusinessPostalCode, C.BusinessState, C.BusinessCountry,
C.HomeStreet, C.HomeCity, C.HomePostalCode, C.HomeState, C.HomeCountry,
C.OtherStreet, C.OtherCity, C.OtherPostalCode, C.OtherState, C.OtherCountry,
C.PhoneNarrative, C.PrimaryTelephoneNumber, C.AssistantTelephoneNumber, 
C.BusinessTelephoneNumber, C.Business2TelephoneNumber,
C.HomeTelephoneNumber, C.Home2TelephoneNumber, 
C.MobileTelephoneNumber, C.OtherTelephoneNumber, C.PagerNumber,
C.FaxNarrative, C.HomeFaxNumber, C.BusinessFaxNumber, C.OtherFaxNumber,
C.EmailNarrative, C.Email1Address, C.Email1DisplayName,
C.Email2Address, C.Email2DisplayName, C.Email3Address, C.Email3DisplayName,
C.CorporateWebSite, C.Title, C.JobTitle,L.ID as 'LeadID',
UDFS.* From Contact C
Left Outer Join scLead L on L.Contact_ID = C.ID
Left Outer Join scUDFStore UDFS on UDFS.OwnerID = C.ID
where C.Type = 'Prospect'





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scVMethods]') and xtype = 'V ')  
 drop View scVMethods
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE         VIEW dbo.scVMethods
AS
SELECT	'Task'	AS MethodType,
	ID,
	Description,
	CreateAs
FROM	scMethodTask
UNION
SELECT	'Email',
	ID,
	Description,
	''
FROM	scMethodEmail
UNION
SELECT	'Letter',
	ID,
	Description,
	''
FROM	scMethodLetter





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scVProcessConsumers]') and xtype = 'V ')  
 drop View scVProcessConsumers
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE         VIEW dbo.scVProcessConsumers
AS
SELECT	'Campaigns'	as ConsumerType, 
	ID		as ID, 
	[Description]	as ItemDescription,
	ProcessID	as ProcessID
FROM	scCampaign
UNION
SELECT	'Leads', 
	L.ID,
	C.KnownAs,
	l.FollowupID
FROM	scLead L LEFT OUTER JOIN Contact C ON C.ID= L.Contact_ID






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scVProcesses]') and xtype = 'V ')  
 drop View scVProcesses
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go



CREATE          VIEW dbo.scVProcesses
AS
SELECT	S.*,
	P.Description as ProcessDesc,
	V.Description as MethodDesc 
FROM	scStep S
LEFT JOIN scProcess	P ON P.ID = ProcessID
LEFT JOIN scVMethods	V ON V.ID = S.MethodID AND S.MethodType = V.MethodType





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scVTasks]') and xtype = 'V ')  
 drop View scVTasks
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE                VIEW dbo.scVTasks
AS
SELECT	DT.Proj_ID, 
	DT.Task_UID, 
	DT.Link_ID, 
	DT.TaskType, 
	DT.ExternalReference, 
	DT.ContactID as LeadID, 
	DT.AssignedToID as SalesManID,
	T.Task_Pct_Comp,
	T.Task_Start_Date, 
	T.Task_Finish_Date,
	T.Task_Act_Start, 
	T.Task_Act_Finish,
	T.Task_Name, 
	DT.AssignedByID as OriginatorID,
	DT.StepID,
	C.KnownAs,
	( SELECT Max(ML.LogDate) FROM MSP_Log ML WHERE ( ML.Task_UID = DT.Task_UID) AND ( ML.Project_ID = DT.Proj_ID ) ) AS LogDate


FROM		MSP_DashBoard_Tasks DT

LEFT JOIN	MSP_Tasks T
		ON  ( DT.Proj_ID	= T.Proj_ID  )
		AND ( DT.Task_UID	= T.Task_UID )

LEFT JOIN	Contact	C
		ON ( C.ID = DT.ContactID)

WHERE	DT.SourceFlavour	= 'nbgSalesCentre'







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[scVVisits]') and xtype = 'V ')  
 drop View scVVisits
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE VIEW dbo.scVVisits
AS
SELECT     *
FROM         dbo.scVisits




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[svVCustomers]') and xtype = 'V ')  
 drop View svVCustomers
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE    VIEW [dbo].[svVCustomers]
AS

SELECT	L.ID, 
	C.KnownAs,
 
	Q.ID AS QuoteID, 
	Q.Status, 

             Q.HoldingID,
	Q.HoldingDesc,
		Q.ProjectID, 
		Q.ProjectDesc,
			Q.CommunityID, 
			Q.CommunityDesc, 
				Q.LotID, 
				Q.LotDesc, 

	Q.BlockDesc, 

	Q.ModelID,
	Q.ModelDesc,
		Q.ModelNameID,
		Q.ModelNameDesc,

	Q.CivicAddress, 

	Q.COPDate, 
	Q.COIDate, 
	Q.WarrantyStart, 
	Q.WarrantyEnd, 
	Q.Created, 
	Q.SaleDate, 
	Q.ExtendedStart, 
	Q.ExtendedEnd,
	Q.CompanyID

FROM	scQuote Q

LEFT OUTER JOIN scLead			L ON L.ID	= Q.LeadID 
LEFT OUTER JOIN MSP_Dashboard_Projects	P ON P.Link_ID	= Q.ID AND P.SourceFlavour = 'nbgServiceCenter'
LEFT OUTER JOIN Contact			C ON C.ID = L.Contact_ID

WHERE     (Q.Status IN ('C')) AND Q.LeadID != 0


Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[svVIncidents]') and xtype = 'V ')  
 drop View svVIncidents
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go






CREATE      VIEW dbo.svVIncidents
AS
SELECT 

I.ID,

I.RequestDate, 
I.InspectDate, 
I.DeclineDate,
I.ApproveDate,
I.CompleteDate,

DatePart(yyyy, I.RequestDate)	AS RequestYear,
DatePart(mm, I.RequestDate)	AS RequestMonth,

DatePart(yyyy, I.InspectDate)	AS InspectYear,
DatePart(mm, I.InspectDate)	AS InspectMonth,

DatePart(yyyy, I.CompleteDate)	AS CompleteYear,
DatePart(mm, I.CompleteDate)	AS CompleteMonth,

DatePart(yyyy, I.DeclineDate)	AS DeclineYear,
DatePart(mm, I.DeclineDate)	AS DeclineMonth,

DatePart(yyyy, I.ApproveDate)	AS ApproveYear,
DatePart(mm, I.ApproveDate)	AS ApproveMonth,

DateDiff(dd, I.RequestDate, 		IsNull(I.InspectDate,			GetDate())) AS DaysOutstanding,
DateDiff(dd, I.InspectDate, IsNull(	IsNull(I.ApproveDate, I.DeclineDate),	GetDate())) AS DaysInspecting,
DateDiff(dd, I.ApproveDate,		IsNull(I.CompleteDate,			GetDate())) AS DaysInProgress,

I.QAStartDate,
I.QAEndDate,

I.CreationDate,
I.ModifiedDate,

I.QuoteID,
Q.SaleDate,
Q.COPDate,
Q.COIDate,
Q.HoldingID,
Q.HoldingDesc,
Q.ProjectID,
Q.ProjectDesc,
Q.CommunityID,
Q.CommunityDesc,
Q.LotID,
Q.LotDesc,
Q.ProjManagerID,
Q.ProjManagerName,
Q.ModelID,
Q.ModelDesc,
Q.ModelNameID,
Q.ModelNameDesc,
Q.WarrantyStart,
Q.WarrantyEnd,
Q.ExtendedStart,
Q.ExtendedEnd,


I.ProjectManagerID,
T.Name AS IncidentOwner,

I.ItemID,
II.Description AS ItemDesc,

I.FaultTypeID,
F.Description AS FaultTypeDesc,

I.Source,
SO.Description AS SourceDesc,

I.Status,
ST.Description AS StatusDesc,

C.KnownAs AS Contact,
I.WorkDescription

from svIncident I

LEFT JOIN scQuote		Q	ON Q.ID	= I.QuoteID
LEFT JOIN svTechnician	T	ON T.ID		= I.ProjectManagerID
LEFT JOIN svInspectionItem	II	ON II.ID		= I.ItemID
LEFT JOIN svHardCodes	SO	ON SO.Code	= I.Source
LEFT JOIN svHardCodes	ST	ON ST.Code	= I.Status
LEFT JOIN Contact	C	ON C.ID 	= I.ContactID

LEFT OUTER JOIN scCodes	F	ON F.ID		= I.FaultTypeID











Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[svVTasks]') and xtype = 'V ')  
 drop View svVTasks
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

Create    VIEW  svVTasks
AS

SELECT	MDT.PROJ_ID, 
        MDT.TASK_UID, 
	MDT.Link_ID, 

	MT.TASK_NAME, 
	MT.TASK_START_DATE, 
	MT.TASK_FINISH_DATE, 
	MT.TASK_PCT_COMP, 
	MT.TASK_ACT_START, 
	MT.TASK_ACT_FINISH, 

        I.WorkDescription, 
	I.Status, 

	SVT.ID AS TaskID, 
	SVT.IncidentID, 
	SVT.TechnicianID, 
	SVT.Stage AS StageCode, 

	L.ID AS LeadID, 
	C.KnownAs,
 
	Q.ID AS QuoteID, 
	Q.CivicAddress, 
	Q.HoldingID, 
	Q.HoldingDesc, 
	Q.ProjectID, 
	Q.ProjectDesc,
	Q.CommunityID, 
	Q.CommunityDesc,
	Q.LotID, 
	Q.LotDesc, 
	Q.ModelID,
	Q.ModelDesc,
	Q.ModelNameID,
	Q.ModelNameDesc,

        STAGE.Description AS Stage

FROM	dbo.MSP_Dashboard_Tasks MDT 

LEFT OUTER JOIN MSP_TASKS	MT	ON ( 	MDT.PROJ_ID	= MT.PROJ_ID AND MDT.TASK_UID = MT.TASK_UID )
LEFT OUTER JOIN Contact	C	ON 	C.ID		= MDT.ContactID 
LEFT OUTER JOIN svTask	SVT	ON (	MDT.PROJ_ID	= SVT.Proj_ID AND MDT.TASK_UID = SVT.Task_UID )
LEFT OUTER JOIN svIncident	I	ON 	I.ID		= SVT.IncidentID 
LEFT OUTER JOIN scQuote	Q	ON 	Q.ID		= I.QuoteID 
LEFT OUTER JOIN svHardCodes STAGE	ON 	STAGE.Code	= SVT.Stage
LEFT OUTER JOIN scLead L	ON	L.Contact_ID = C.ID

WHERE	(	MDT.SourceFlavour	= 'nbgServiceCenter'	) 
AND	(	SVT.ID			IS NOT NULL		)






Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[v_GETDATE]') and xtype = 'V ')  
 drop View v_GETDATE
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
CREATE VIEW v_GETDATE 
as
    SELECT vGETDATE = GETDATE() 

Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[v_msp_task_list]') and xtype = 'V ')  
 drop View v_msp_task_list
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go





CREATE   view v_msp_task_list
as
select q.lotid, q.lotdesc, q.blockdesc, l.firstname, l.lastname,
q.holdingid, q.holdingdesc, q.communityid, q.communitydesc, q.convertflag, q.status,
mt.proj_id, p.proj_name, p.sourceflavour [project_flavour],
-- (select groupdescription from dashboard_projtaskgroup where dashboard_taskgroupid=dt.dashboard_taskgroupid) [category_desc],
-- (select majorcode from dashboard_majorcodes where dmc_id=dt.dmc_id) [major_code],
-- (select codedescription from dashboard_majorcodes where dmc_id=dt.dmc_id) [major_code_description],
dt.sourceflavour [task_flavour], dt.codetype, dt.dmc_id, dt.dashboard_taskgroupid,
mt.task_name, mt.task_outline_num, mt.task_uid, mt.task_id, mt.task_is_milestone, mt.task_is_critical, mt.task_has_notes,
mt.task_outline_level, mt.task_dur, mt.task_dur_fmt, mt.task_start_date, mt.task_finish_date, mt.task_priority, 
mt.task_pct_comp, mt.task_type, mt.task_deadline, mt.task_rtf_notes,
q.projectid [phase_id], q.projectdesc [phase_desc]

from scquote q, sclead l, msp_dashboard_projects p, msp_dashboard_tasks dt, 
msp_tasks mt
where q.leadid=l.id
and p.link_id=q.id
and dt.proj_id=mt.proj_id and dt.task_uid=mt.task_uid and dt.proj_id=p.proj_id










Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[v_RFQ_ResponseMatrixFilter]') and xtype = 'V ')  
 drop View v_RFQ_ResponseMatrixFilter
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE View [dbo].[v_RFQ_ResponseMatrixFilter]
AS

Select rc.RFQ_HeaderID, rc.Supplier, rc.Supplier_ID, rc.Supplier_Name, rc.LocalityID, l.Locale, 
rc.Raw_Land_CD, rc.HoldingDesc, rc.ModelNameID, rc.ModelNameDesc, rc.Model_ID, rc.ModelDesc, 
rc.phs_code, rc.phs_desc, rc.subp_code, rc.subp_desc, rc.Trade_ID, t.Trade_Desc, 
rc.PackageID, p.PackageDescription, rc.MatGroup_ID, mg.Group_Desc, rc.Material_ID, m.Mat_Short_Desc,
rc.Equip_Group_ID, eg.Equip_Group_Desc, rc.EquipmentID, e.Equip_Desc
From RFQ_Cost rc
Left Outer Join HB_Locality l on l.ID = rc.LocalityID
Left Outer Join HB_Trades t on t.Trade_ID = rc.Trade_ID
Left Outer Join HB_Package p on p.ID = rc.PackageID
Left Outer Join HB_Mat_Group mg on mg.MatGroup_ID = rc.MatGroup_ID
Left Outer Join HB_Material m on m.Material_ID = rc.Material_ID
Left Outer Join Equip_Group eg on eg.ID = rc.Equip_Group_ID
Left Outer Join Equipment e on e.ID = EquipmentID



Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[v_sman_projects]') and xtype = 'V ')  
 drop View v_sman_projects
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go




CREATE   view v_sman_projects
as
select 'All Salespeople' [user_name], '%' [login_id], '' [sourceflavour]
union
select [user_name], cast(user_login_id as varchar(50)), sourceflavour
from msp_dashboard_projects p
join user_login l
on p.Link_ID = l.user_login_id
--where SourceFlavour = 'nbgSalesCenter'

 







Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[v_users]') and xtype = 'V ')  
 drop View v_users
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go

CREATE view [dbo].[v_users]
as
select c.id [contact_id], a.id [access_id], c.firstname, c.lastname, c.knownas, c.password, a.userlevel, c.jobtitle, 
isnull(c.lastname,'')+', '+isnull(c.firstname,'') [fullname]
from contact c
join access a on a.contactid=c.id and a.userlevel in ('A','M','S','C')
where c.type='User'




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[v_work_week_minutes]') and xtype = 'V ')  
 drop View v_work_week_minutes
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


create view v_work_week_minutes
as
select proj_id, sum(isnull(datediff(mi,cd_from_time1, cd_to_time1),0)+ isnull(datediff(mi,cd_from_time2, cd_to_time2),0)+
isnull(datediff(mi,cd_from_time3, cd_to_time3),0)+ isnull(datediff(mi,cd_from_time4, cd_to_time4),0)+
isnull(datediff(mi,cd_from_time5, cd_to_time5),0)) [work_week_minutes]
from msp_calendar_data
where cd_working=1
group by proj_id





Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[vPhoneCat]') and xtype = 'V ')  
 drop View vPhoneCat
Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go


CREATE VIEW dbo.vPhoneCat
AS
SELECT     ID, Entry, CatID
FROM         dbo.scCatCodes
WHERE     (CatID = 4)




Go
SET QUOTED_IDENTIFIER OFF
Go
SET ANSI_NULLS ON 
Go
